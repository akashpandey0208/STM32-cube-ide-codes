
UART_TX_MCU1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005358  08005358  00006358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a0  080053a0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080053a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  24000010  080053b8  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c8  080053b8  000070c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa6f  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5e  00000000  00000000  00016aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00018910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000871  00000000  00000000  00019410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e13b  00000000  00000000  00019c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef7c  00000000  00000000  00057dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193bfa  00000000  00000000  00066d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fa932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  001fa978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001fd67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005340 	.word	0x08005340

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005340 	.word	0x08005340

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <main+0xd0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 f94d 	bl	80009bc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fa2f 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f857 	bl	80007d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <main+0xd0>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a24      	ldr	r2, [pc, #144]	@ (80007c4 <main+0xd0>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <main+0xd0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fd89 	bl	8001260 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fd9f 	bl	8001294 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <main+0xd0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f91f 	bl	80009bc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f8df 	bl	8000940 <MX_GPIO_Init>
  MX_UART8_Init();
 8000782:	f000 f891 	bl	80008a8 <MX_UART8_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8000786:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <main+0xd4>)
 800078c:	f000 fd50 	bl	8001230 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d103      	bne.n	800079e <main+0xaa>
	      {
	        charToTransmit[0] = '0'; // 48 is ascii character for zero
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <main+0xd8>)
 8000798:	2230      	movs	r2, #48	@ 0x30
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	e002      	b.n	80007a4 <main+0xb0>
	      }
	      else
	      {
	        charToTransmit[0] = '1'; // 49 is ascii character for one
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <main+0xd8>)
 80007a0:	2231      	movs	r2, #49	@ 0x31
 80007a2:	701a      	strb	r2, [r3, #0]
	      }
	      HAL_UART_Transmit(&huart8, charToTransmit, 1, 100);
 80007a4:	2364      	movs	r3, #100	@ 0x64
 80007a6:	2201      	movs	r2, #1
 80007a8:	4908      	ldr	r1, [pc, #32]	@ (80007cc <main+0xd8>)
 80007aa:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <main+0xdc>)
 80007ac:	f003 fc82 	bl	80040b4 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart8, (uint8_t *)"START", 5, 100);
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	2205      	movs	r2, #5
 80007b4:	4907      	ldr	r1, [pc, #28]	@ (80007d4 <main+0xe0>)
 80007b6:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <main+0xdc>)
 80007b8:	f003 fc7c 	bl	80040b4 <HAL_UART_Transmit>
	      HAL_Delay(200);
 80007bc:	20c8      	movs	r0, #200	@ 0xc8
 80007be:	f000 fa73 	bl	8000ca8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 80007c2:	e7e0      	b.n	8000786 <main+0x92>
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58020800 	.word	0x58020800
 80007cc:	240000c0 	.word	0x240000c0
 80007d0:	2400002c 	.word	0x2400002c
 80007d4:	08005358 	.word	0x08005358

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	@ 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e2:	224c      	movs	r2, #76	@ 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fd7e 	bl	80052e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fd78 	bl	80052e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f000 fd5f 	bl	80012bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <SystemClock_Config+0xc8>)
 8000804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000806:	4a26      	ldr	r2, [pc, #152]	@ (80008a0 <SystemClock_Config+0xc8>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800080e:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <SystemClock_Config+0xc8>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <SystemClock_Config+0xcc>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <SystemClock_Config+0xcc>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <SystemClock_Config+0xcc>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000830:	bf00      	nop
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <SystemClock_Config+0xcc>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800083e:	d1f8      	bne.n	8000832 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000844:	2301      	movs	r3, #1
 8000846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2340      	movs	r3, #64	@ 0x40
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fd8b 	bl	8001370 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000860:	f000 f8ac 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	233f      	movs	r3, #63	@ 0x3f
 8000866:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f9cb 	bl	8001c24 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000894:	f000 f892 	bl	80009bc <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3770      	adds	r7, #112	@ 0x70
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	58000400 	.word	0x58000400
 80008a4:	58024800 	.word	0x58024800

080008a8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_UART8_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_UART8_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_UART8_Init+0x90>)
 80008b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008b8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_UART8_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_UART8_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_UART8_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_UART8_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_UART8_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_UART8_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_UART8_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_UART8_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_UART8_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_UART8_Init+0x90>)
 80008f2:	f003 fb8f 	bl	8004014 <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f85e 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_UART8_Init+0x90>)
 8000904:	f004 fc25 	bl	8005152 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800090e:	f000 f855 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_UART8_Init+0x90>)
 8000916:	f004 fc5a 	bl	80051ce <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f84c 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_UART8_Init+0x90>)
 8000926:	f004 fbdb 	bl	80050e0 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f844 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2400002c 	.word	0x2400002c
 800093c:	40007c00 	.word	0x40007c00

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_GPIO_Init+0x74>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <MX_GPIO_Init+0x74>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <MX_GPIO_Init+0x74>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_GPIO_Init+0x74>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <MX_GPIO_Init+0x74>)
 800097c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_GPIO_Init+0x74>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000992:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_GPIO_Init+0x78>)
 80009a8:	f000 fa92 	bl	8000ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020800 	.word	0x58020800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_MspInit+0x30>)
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009d4:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x30>)
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x30>)
 80009e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	58024400 	.word	0x58024400

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0bc      	sub	sp, #240	@ 0xf0
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	22c8      	movs	r2, #200	@ 0xc8
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f004 fc63 	bl	80052e8 <memset>
  if(huart->Instance==UART8)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a27      	ldr	r2, [pc, #156]	@ (8000ac4 <HAL_UART_MspInit+0xc8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d146      	bne.n	8000aba <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000a2c:	f04f 0202 	mov.w	r2, #2
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fc7a 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a4e:	f7ff ffb5 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a58:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a70:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	4a14      	ldr	r2, [pc, #80]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0xcc>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000a8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000aae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_UART_MspInit+0xd0>)
 8000ab6:	f000 fa0b 	bl	8000ed0 <HAL_GPIO_Init>

  /* USER CODE END UART8_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	37f0      	adds	r7, #240	@ 0xf0
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40007c00 	.word	0x40007c00
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58022400 	.word	0x58022400

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f89f 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b34:	f7ff fd48 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	@ (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f004 fbcb 	bl	80052f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fdc7 	bl	80006f4 <main>
  bx  lr
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b70:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b74:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8000b78:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b7c:	240000c8 	.word	0x240000c8

08000b80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC3_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f000 f96e 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b90:	f001 f9fe 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <HAL_Init+0x68>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	4913      	ldr	r1, [pc, #76]	@ (8000bf0 <HAL_Init+0x6c>)
 8000ba2:	5ccb      	ldrb	r3, [r1, r3]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_Init+0x68>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_Init+0x6c>)
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	f003 031f 	and.w	r3, r3, #31
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <HAL_Init+0x70>)
 8000bc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <HAL_Init+0x74>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f814 	bl	8000bfc <HAL_InitTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e002      	b.n	8000be4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bde:	f7ff fef3 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	08005360 	.word	0x08005360
 8000bf4:	24000004 	.word	0x24000004
 8000bf8:	24000000 	.word	0x24000000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_InitTick+0x60>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e021      	b.n	8000c54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <HAL_InitTick+0x64>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_InitTick+0x60>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f945 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f91d 	bl	8000e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	@ (8000c64 <HAL_InitTick+0x68>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2400000c 	.word	0x2400000c
 8000c60:	24000000 	.word	0x24000000
 8000c64:	24000008 	.word	0x24000008

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2400000c 	.word	0x2400000c
 8000c8c:	240000c4 	.word	0x240000c4

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	240000c4 	.word	0x240000c4

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2400000c 	.word	0x2400000c

08000cf0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_GetREVID+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0c1b      	lsrs	r3, r3, #16
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	5c001000 	.word	0x5c001000

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x40>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <__NVIC_SetPriorityGrouping+0x40>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	05fa0000 	.word	0x05fa0000

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e38:	d301      	bcc.n	8000e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00f      	b.n	8000e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <SysTick_Config+0x40>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e46:	210f      	movs	r1, #15
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f7ff ff8e 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <SysTick_Config+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SysTick_Config+0x40>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff47 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff5e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff90 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5f 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffb2 	bl	8000e28 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ede:	4b89      	ldr	r3, [pc, #548]	@ (8001104 <HAL_GPIO_Init+0x234>)
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ee2:	e194      	b.n	800120e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8186 	beq.w	8001208 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x44>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	69b9      	ldr	r1, [r7, #24]
 8001002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0203 	and.w	r2, r3, #3
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 80e0 	beq.w	8001208 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <HAL_GPIO_Init+0x238>)
 800104a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800104e:	4a2e      	ldr	r2, [pc, #184]	@ (8001108 <HAL_GPIO_Init+0x238>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001058:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <HAL_GPIO_Init+0x238>)
 800105a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a29      	ldr	r2, [pc, #164]	@ (800110c <HAL_GPIO_Init+0x23c>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a20      	ldr	r2, [pc, #128]	@ (8001110 <HAL_GPIO_Init+0x240>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d052      	beq.n	8001138 <HAL_GPIO_Init+0x268>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a1f      	ldr	r2, [pc, #124]	@ (8001114 <HAL_GPIO_Init+0x244>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d031      	beq.n	80010fe <HAL_GPIO_Init+0x22e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <HAL_GPIO_Init+0x248>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x22a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <HAL_GPIO_Init+0x24c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x226>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <HAL_GPIO_Init+0x250>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x222>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001124 <HAL_GPIO_Init+0x254>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x21e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001128 <HAL_GPIO_Init+0x258>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x21a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a19      	ldr	r2, [pc, #100]	@ (800112c <HAL_GPIO_Init+0x25c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x216>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a18      	ldr	r2, [pc, #96]	@ (8001130 <HAL_GPIO_Init+0x260>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x212>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_GPIO_Init+0x264>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x20e>
 80010da:	2309      	movs	r3, #9
 80010dc:	e02d      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010de:	230a      	movs	r3, #10
 80010e0:	e02b      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010e2:	2308      	movs	r3, #8
 80010e4:	e029      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e027      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010ea:	2306      	movs	r3, #6
 80010ec:	e025      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010ee:	2305      	movs	r3, #5
 80010f0:	e023      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010f2:	2304      	movs	r3, #4
 80010f4:	e021      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010f6:	2303      	movs	r3, #3
 80010f8:	e01f      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e01d      	b.n	800113a <HAL_GPIO_Init+0x26a>
 80010fe:	2301      	movs	r3, #1
 8001100:	e01b      	b.n	800113a <HAL_GPIO_Init+0x26a>
 8001102:	bf00      	nop
 8001104:	58000080 	.word	0x58000080
 8001108:	58024400 	.word	0x58024400
 800110c:	58000400 	.word	0x58000400
 8001110:	58020000 	.word	0x58020000
 8001114:	58020400 	.word	0x58020400
 8001118:	58020800 	.word	0x58020800
 800111c:	58020c00 	.word	0x58020c00
 8001120:	58021000 	.word	0x58021000
 8001124:	58021400 	.word	0x58021400
 8001128:	58021800 	.word	0x58021800
 800112c:	58021c00 	.word	0x58021c00
 8001130:	58022000 	.word	0x58022000
 8001134:	58022400 	.word	0x58022400
 8001138:	2300      	movs	r3, #0
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114a:	4938      	ldr	r1, [pc, #224]	@ (800122c <HAL_GPIO_Init+0x35c>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800117e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	3301      	adds	r3, #1
 800120c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f ae63 	bne.w	8000ee4 <HAL_GPIO_Init+0x14>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3724      	adds	r7, #36	@ 0x24
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	58000400 	.word	0x58000400

08001230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e001      	b.n	8001252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001268:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_HSEM_FastTake+0x2c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3320      	adds	r3, #32
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_HSEM_FastTake+0x30>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e000      	b.n	800127e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	58026400 	.word	0x58026400
 8001290:	80000300 	.word	0x80000300

08001294 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800129e:	4906      	ldr	r1, [pc, #24]	@ (80012b8 <HAL_HSEM_Release+0x24>)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58026400 	.word	0x58026400

080012bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012c4:	4b29      	ldr	r3, [pc, #164]	@ (800136c <HAL_PWREx_ConfigSupply+0xb0>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	2b06      	cmp	r3, #6
 80012ce:	d00a      	beq.n	80012e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012d0:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_PWREx_ConfigSupply+0xb0>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e040      	b.n	8001364 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e03e      	b.n	8001364 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012e6:	4b21      	ldr	r3, [pc, #132]	@ (800136c <HAL_PWREx_ConfigSupply+0xb0>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80012ee:	491f      	ldr	r1, [pc, #124]	@ (800136c <HAL_PWREx_ConfigSupply+0xb0>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012f6:	f7ff fccb 	bl	8000c90 <HAL_GetTick>
 80012fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012fc:	e009      	b.n	8001312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012fe:	f7ff fcc7 	bl	8000c90 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800130c:	d901      	bls.n	8001312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e028      	b.n	8001364 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <HAL_PWREx_ConfigSupply+0xb0>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800131e:	d1ee      	bne.n	80012fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b1e      	cmp	r3, #30
 8001324:	d008      	beq.n	8001338 <HAL_PWREx_ConfigSupply+0x7c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b2e      	cmp	r3, #46	@ 0x2e
 800132a:	d005      	beq.n	8001338 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b1d      	cmp	r3, #29
 8001330:	d002      	beq.n	8001338 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b2d      	cmp	r3, #45	@ 0x2d
 8001336:	d114      	bne.n	8001362 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001338:	f7ff fcaa 	bl	8000c90 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800133e:	e009      	b.n	8001354 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001340:	f7ff fca6 	bl	8000c90 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800134e:	d901      	bls.n	8001354 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e007      	b.n	8001364 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <HAL_PWREx_ConfigSupply+0xb0>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001360:	d1ee      	bne.n	8001340 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58024800 	.word	0x58024800

08001370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	@ 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	f000 bc48 	b.w	8001c14 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8088 	beq.w	80014a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001392:	4b99      	ldr	r3, [pc, #612]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800139c:	4b96      	ldr	r3, [pc, #600]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 800139e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d007      	beq.n	80013b8 <HAL_RCC_OscConfig+0x48>
 80013a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013aa:	2b18      	cmp	r3, #24
 80013ac:	d111      	bne.n	80013d2 <HAL_RCC_OscConfig+0x62>
 80013ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d10c      	bne.n	80013d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4b8f      	ldr	r3, [pc, #572]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d06d      	beq.n	80014a0 <HAL_RCC_OscConfig+0x130>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d169      	bne.n	80014a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f000 bc21 	b.w	8001c14 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x7a>
 80013dc:	4b86      	ldr	r3, [pc, #536]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a85      	ldr	r2, [pc, #532]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e02e      	b.n	8001448 <HAL_RCC_OscConfig+0xd8>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x9c>
 80013f2:	4b81      	ldr	r3, [pc, #516]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a80      	ldr	r2, [pc, #512]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80013f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b7e      	ldr	r3, [pc, #504]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7d      	ldr	r2, [pc, #500]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001404:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xd8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0xc0>
 8001416:	4b78      	ldr	r3, [pc, #480]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a77      	ldr	r2, [pc, #476]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b75      	ldr	r3, [pc, #468]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a74      	ldr	r2, [pc, #464]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xd8>
 8001430:	4b71      	ldr	r3, [pc, #452]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a70      	ldr	r2, [pc, #448]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b6e      	ldr	r3, [pc, #440]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6d      	ldr	r2, [pc, #436]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc1e 	bl	8000c90 <HAL_GetTick>
 8001454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fc1a 	bl	8000c90 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	@ 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e3d4      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800146a:	4b63      	ldr	r3, [pc, #396]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xe8>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fc0a 	bl	8000c90 <HAL_GetTick>
 800147c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fc06 	bl	8000c90 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	@ 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e3c0      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001492:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x110>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80ca 	beq.w	8001644 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b0:	4b51      	ldr	r3, [pc, #324]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ba:	4b4f      	ldr	r3, [pc, #316]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_RCC_OscConfig+0x166>
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2b18      	cmp	r3, #24
 80014ca:	d156      	bne.n	800157a <HAL_RCC_OscConfig+0x20a>
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d151      	bne.n	800157a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d6:	4b48      	ldr	r3, [pc, #288]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x17e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e392      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014ee:	4b42      	ldr	r3, [pc, #264]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 0219 	bic.w	r2, r3, #25
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	493f      	ldr	r1, [pc, #252]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fbc6 	bl	8000c90 <HAL_GetTick>
 8001504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fbc2 	bl	8000c90 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e37c      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800151a:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	f7ff fbe3 	bl	8000cf0 <HAL_GetREVID>
 800152a:	4603      	mov	r3, r0
 800152c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001530:	4293      	cmp	r3, r2
 8001532:	d817      	bhi.n	8001564 <HAL_RCC_OscConfig+0x1f4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	2b40      	cmp	r3, #64	@ 0x40
 800153a:	d108      	bne.n	800154e <HAL_RCC_OscConfig+0x1de>
 800153c:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001544:	4a2c      	ldr	r2, [pc, #176]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800154c:	e07a      	b.n	8001644 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	031b      	lsls	r3, r3, #12
 800155c:	4926      	ldr	r1, [pc, #152]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 800155e:	4313      	orrs	r3, r2
 8001560:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001562:	e06f      	b.n	8001644 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	4921      	ldr	r1, [pc, #132]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001578:	e064      	b.n	8001644 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d047      	beq.n	8001612 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 0219 	bic.w	r2, r3, #25
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	491a      	ldr	r1, [pc, #104]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fb7c 	bl	8000c90 <HAL_GetTick>
 8001598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159c:	f7ff fb78 	bl	8000c90 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e332      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ae:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	f7ff fb99 	bl	8000cf0 <HAL_GetREVID>
 80015be:	4603      	mov	r3, r0
 80015c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d819      	bhi.n	80015fc <HAL_RCC_OscConfig+0x28c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b40      	cmp	r3, #64	@ 0x40
 80015ce:	d108      	bne.n	80015e2 <HAL_RCC_OscConfig+0x272>
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80015d8:	4a07      	ldr	r2, [pc, #28]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80015da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015de:	6053      	str	r3, [r2, #4]
 80015e0:	e030      	b.n	8001644 <HAL_RCC_OscConfig+0x2d4>
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	031b      	lsls	r3, r3, #12
 80015f0:	4901      	ldr	r1, [pc, #4]	@ (80015f8 <HAL_RCC_OscConfig+0x288>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
 80015f6:	e025      	b.n	8001644 <HAL_RCC_OscConfig+0x2d4>
 80015f8:	58024400 	.word	0x58024400
 80015fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	061b      	lsls	r3, r3, #24
 800160a:	4997      	ldr	r1, [pc, #604]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
 8001610:	e018      	b.n	8001644 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b95      	ldr	r3, [pc, #596]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a94      	ldr	r2, [pc, #592]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff fb37 	bl	8000c90 <HAL_GetTick>
 8001622:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001626:	f7ff fb33 	bl	8000c90 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e2ed      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001638:	4b8b      	ldr	r3, [pc, #556]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a9 	beq.w	80017a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b85      	ldr	r3, [pc, #532]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800165a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800165c:	4b82      	ldr	r3, [pc, #520]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d007      	beq.n	8001678 <HAL_RCC_OscConfig+0x308>
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2b18      	cmp	r3, #24
 800166c:	d13a      	bne.n	80016e4 <HAL_RCC_OscConfig+0x374>
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b01      	cmp	r3, #1
 8001676:	d135      	bne.n	80016e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001678:	4b7b      	ldr	r3, [pc, #492]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x320>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b80      	cmp	r3, #128	@ 0x80
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e2c1      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001690:	f7ff fb2e 	bl	8000cf0 <HAL_GetREVID>
 8001694:	4603      	mov	r3, r0
 8001696:	f241 0203 	movw	r2, #4099	@ 0x1003
 800169a:	4293      	cmp	r3, r2
 800169c:	d817      	bhi.n	80016ce <HAL_RCC_OscConfig+0x35e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x348>
 80016a6:	4b70      	ldr	r3, [pc, #448]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80016ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80016b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016b6:	e075      	b.n	80017a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	069b      	lsls	r3, r3, #26
 80016c6:	4968      	ldr	r1, [pc, #416]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016cc:	e06a      	b.n	80017a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ce:	4b66      	ldr	r3, [pc, #408]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	061b      	lsls	r3, r3, #24
 80016dc:	4962      	ldr	r1, [pc, #392]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016e2:	e05f      	b.n	80017a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d042      	beq.n	8001772 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80016f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff faca 	bl	8000c90 <HAL_GetTick>
 80016fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001700:	f7ff fac6 	bl	8000c90 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e280      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001712:	4b55      	ldr	r3, [pc, #340]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800171e:	f7ff fae7 	bl	8000cf0 <HAL_GetREVID>
 8001722:	4603      	mov	r3, r0
 8001724:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001728:	4293      	cmp	r3, r2
 800172a:	d817      	bhi.n	800175c <HAL_RCC_OscConfig+0x3ec>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	2b20      	cmp	r3, #32
 8001732:	d108      	bne.n	8001746 <HAL_RCC_OscConfig+0x3d6>
 8001734:	4b4c      	ldr	r3, [pc, #304]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800173c:	4a4a      	ldr	r2, [pc, #296]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800173e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001742:	6053      	str	r3, [r2, #4]
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0x434>
 8001746:	4b48      	ldr	r3, [pc, #288]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	069b      	lsls	r3, r3, #26
 8001754:	4944      	ldr	r1, [pc, #272]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
 800175a:	e023      	b.n	80017a4 <HAL_RCC_OscConfig+0x434>
 800175c:	4b42      	ldr	r3, [pc, #264]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	493f      	ldr	r1, [pc, #252]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e018      	b.n	80017a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001772:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a3c      	ldr	r2, [pc, #240]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001778:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fa87 	bl	8000c90 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001786:	f7ff fa83 	bl	8000c90 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e23d      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001798:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d036      	beq.n	800181e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d019      	beq.n	80017ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fa64 	bl	8000c90 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fa60 	bl	8000c90 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e21a      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017de:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x45c>
 80017ea:	e018      	b.n	800181e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fa4a 	bl	8000c90 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fa46 	bl	8000c90 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e200      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b00      	cmp	r3, #0
 8001828:	d039      	beq.n	800189e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d01c      	beq.n	800186c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 8001838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800183c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800183e:	f7ff fa27 	bl	8000c90 <HAL_GetTick>
 8001842:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001846:	f7ff fa23 	bl	8000c90 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1dd      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x4d6>
 8001864:	e01b      	b.n	800189e <HAL_RCC_OscConfig+0x52e>
 8001866:	bf00      	nop
 8001868:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800186c:	4b9b      	ldr	r3, [pc, #620]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a9a      	ldr	r2, [pc, #616]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001872:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001876:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001878:	f7ff fa0a 	bl	8000c90 <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001880:	f7ff fa06 	bl	8000c90 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1c0      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001892:	4b92      	ldr	r3, [pc, #584]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8081 	beq.w	80019ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018ac:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae0 <HAL_RCC_OscConfig+0x770>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a8b      	ldr	r2, [pc, #556]	@ (8001ae0 <HAL_RCC_OscConfig+0x770>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018b8:	f7ff f9ea 	bl	8000c90 <HAL_GetTick>
 80018bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff f9e6 	bl	8000c90 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	@ 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1a0      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018d2:	4b83      	ldr	r3, [pc, #524]	@ (8001ae0 <HAL_RCC_OscConfig+0x770>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x584>
 80018e6:	4b7d      	ldr	r3, [pc, #500]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ea:	4a7c      	ldr	r2, [pc, #496]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f2:	e02d      	b.n	8001950 <HAL_RCC_OscConfig+0x5e0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x5a6>
 80018fc:	4b77      	ldr	r3, [pc, #476]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001900:	4a76      	ldr	r2, [pc, #472]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	@ 0x70
 8001908:	4b74      	ldr	r3, [pc, #464]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190c:	4a73      	ldr	r2, [pc, #460]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	@ 0x70
 8001914:	e01c      	b.n	8001950 <HAL_RCC_OscConfig+0x5e0>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x5c8>
 800191e:	4b6f      	ldr	r3, [pc, #444]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	4a6e      	ldr	r2, [pc, #440]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6713      	str	r3, [r2, #112]	@ 0x70
 800192a:	4b6c      	ldr	r3, [pc, #432]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192e:	4a6b      	ldr	r2, [pc, #428]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	@ 0x70
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0x5e0>
 8001938:	4b68      	ldr	r3, [pc, #416]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193c:	4a67      	ldr	r2, [pc, #412]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	@ 0x70
 8001944:	4b65      	ldr	r3, [pc, #404]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001948:	4a64      	ldr	r2, [pc, #400]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 800194a:	f023 0304 	bic.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff f99a 	bl	8000c90 <HAL_GetTick>
 800195c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff f996 	bl	8000c90 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e14e      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001976:	4b59      	ldr	r3, [pc, #356]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ee      	beq.n	8001960 <HAL_RCC_OscConfig+0x5f0>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f984 	bl	8000c90 <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f980 	bl	8000c90 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e138      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a2:	4b4e      	ldr	r3, [pc, #312]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ee      	bne.n	800198c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 812d 	beq.w	8001c12 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019b8:	4b48      	ldr	r3, [pc, #288]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019c0:	2b18      	cmp	r3, #24
 80019c2:	f000 80bd 	beq.w	8001b40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	f040 809e 	bne.w	8001b0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d0:	4b42      	ldr	r3, [pc, #264]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a41      	ldr	r2, [pc, #260]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80019d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f958 	bl	8000c90 <HAL_GetTick>
 80019e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff f954 	bl	8000c90 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e10e      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019f6:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a02:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <HAL_RCC_OscConfig+0x774>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	430a      	orrs	r2, r1
 8001a16:	4931      	ldr	r1, [pc, #196]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	3b01      	subs	r3, #1
 8001a22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	025b      	lsls	r3, r3, #9
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a36:	3b01      	subs	r3, #1
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a44:	3b01      	subs	r3, #1
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a4c:	4923      	ldr	r1, [pc, #140]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a56:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_RCC_OscConfig+0x778>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a6a:	00d2      	lsls	r2, r2, #3
 8001a6c:	491b      	ldr	r1, [pc, #108]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	f023 020c 	bic.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	4917      	ldr	r1, [pc, #92]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a84:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a88:	f023 0202 	bic.w	r2, r3, #2
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a90:	4912      	ldr	r1, [pc, #72]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_RCC_OscConfig+0x76c>)
 8001acc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff f8dd 	bl	8000c90 <HAL_GetTick>
 8001ad6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ad8:	e011      	b.n	8001afe <HAL_RCC_OscConfig+0x78e>
 8001ada:	bf00      	nop
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58024800 	.word	0x58024800
 8001ae4:	fffffc0c 	.word	0xfffffc0c
 8001ae8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff f8d0 	bl	8000c90 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e08a      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001afe:	4b47      	ldr	r3, [pc, #284]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x77c>
 8001b0a:	e082      	b.n	8001c12 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b43      	ldr	r3, [pc, #268]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a42      	ldr	r2, [pc, #264]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8ba 	bl	8000c90 <HAL_GetTick>
 8001b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f8b6 	bl	8000c90 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e070      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b32:	4b3a      	ldr	r3, [pc, #232]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x7b0>
 8001b3e:	e068      	b.n	8001c12 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b40:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b46:	4b35      	ldr	r3, [pc, #212]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d031      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f003 0203 	and.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d12a      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d122      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d11a      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	0a5b      	lsrs	r3, r3, #9
 8001b86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d111      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d108      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	0e1b      	lsrs	r3, r3, #24
 8001baa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e02b      	b.n	8001c14 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bbc:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d01f      	beq.n	8001c12 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	4a11      	ldr	r2, [pc, #68]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bde:	f7ff f857 	bl	8000c90 <HAL_GetTick>
 8001be2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001be4:	bf00      	nop
 8001be6:	f7ff f853 	bl	8000c90 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d0f9      	beq.n	8001be6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_RCC_OscConfig+0x8b0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bfe:	00d2      	lsls	r2, r2, #3
 8001c00:	4906      	ldr	r1, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_RCC_OscConfig+0x8ac>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3730      	adds	r7, #48	@ 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	ffff0007 	.word	0xffff0007

08001c24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e19c      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b8a      	ldr	r3, [pc, #552]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d910      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b87      	ldr	r3, [pc, #540]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 020f 	bic.w	r2, r3, #15
 8001c4e:	4985      	ldr	r1, [pc, #532]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b83      	ldr	r3, [pc, #524]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e184      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d010      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	4b7b      	ldr	r3, [pc, #492]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d908      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c84:	4b78      	ldr	r3, [pc, #480]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4975      	ldr	r1, [pc, #468]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d010      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	4b70      	ldr	r3, [pc, #448]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d908      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	496a      	ldr	r1, [pc, #424]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d010      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	4b64      	ldr	r3, [pc, #400]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d908      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ce0:	4b61      	ldr	r3, [pc, #388]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	495e      	ldr	r1, [pc, #376]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d010      	beq.n	8001d20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	4b59      	ldr	r3, [pc, #356]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d908      	bls.n	8001d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d0e:	4b56      	ldr	r3, [pc, #344]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4953      	ldr	r1, [pc, #332]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d010      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4b4d      	ldr	r3, [pc, #308]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d908      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f023 020f 	bic.w	r2, r3, #15
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4947      	ldr	r1, [pc, #284]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d055      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d5a:	4b43      	ldr	r3, [pc, #268]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4940      	ldr	r1, [pc, #256]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d74:	4b3c      	ldr	r3, [pc, #240]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d121      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0f6      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d8c:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d115      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0ea      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001da4:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0de      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0d6      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc4:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f023 0207 	bic.w	r2, r3, #7
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4925      	ldr	r1, [pc, #148]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd6:	f7fe ff5b 	bl	8000c90 <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dde:	f7fe ff57 	bl	8000c90 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0be      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d1eb      	bne.n	8001dde <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d208      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e22:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f023 020f 	bic.w	r2, r3, #15
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	490e      	ldr	r1, [pc, #56]	@ (8001e68 <HAL_RCC_ClockConfig+0x244>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d214      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 020f 	bic.w	r2, r3, #15
 8001e4a:	4906      	ldr	r1, [pc, #24]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <HAL_RCC_ClockConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e086      	b.n	8001f72 <HAL_RCC_ClockConfig+0x34e>
 8001e64:	52002000 	.word	0x52002000
 8001e68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d208      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e88:	4b3c      	ldr	r3, [pc, #240]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4939      	ldr	r1, [pc, #228]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d010      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	4b34      	ldr	r3, [pc, #208]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d208      	bcs.n	8001ec8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eb6:	4b31      	ldr	r3, [pc, #196]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	492e      	ldr	r1, [pc, #184]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d208      	bcs.n	8001ef6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ee4:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4922      	ldr	r1, [pc, #136]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d208      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f12:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4917      	ldr	r1, [pc, #92]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f24:	f000 f834 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	4912      	ldr	r1, [pc, #72]	@ (8001f80 <HAL_RCC_ClockConfig+0x35c>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_RCC_ClockConfig+0x358>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <HAL_RCC_ClockConfig+0x35c>)
 8001f4c:	5cd3      	ldrb	r3, [r2, r3]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_RCC_ClockConfig+0x360>)
 8001f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <HAL_RCC_ClockConfig+0x364>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_RCC_ClockConfig+0x368>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fe48 	bl	8000bfc <HAL_InitTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	58024400 	.word	0x58024400
 8001f80:	08005360 	.word	0x08005360
 8001f84:	24000004 	.word	0x24000004
 8001f88:	24000000 	.word	0x24000000
 8001f8c:	24000008 	.word	0x24000008

08001f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f96:	4bb3      	ldr	r3, [pc, #716]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9e:	2b18      	cmp	r3, #24
 8001fa0:	f200 8155 	bhi.w	800224e <HAL_RCC_GetSysClockFreq+0x2be>
 8001fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fac <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001faa:	bf00      	nop
 8001fac:	08002011 	.word	0x08002011
 8001fb0:	0800224f 	.word	0x0800224f
 8001fb4:	0800224f 	.word	0x0800224f
 8001fb8:	0800224f 	.word	0x0800224f
 8001fbc:	0800224f 	.word	0x0800224f
 8001fc0:	0800224f 	.word	0x0800224f
 8001fc4:	0800224f 	.word	0x0800224f
 8001fc8:	0800224f 	.word	0x0800224f
 8001fcc:	08002037 	.word	0x08002037
 8001fd0:	0800224f 	.word	0x0800224f
 8001fd4:	0800224f 	.word	0x0800224f
 8001fd8:	0800224f 	.word	0x0800224f
 8001fdc:	0800224f 	.word	0x0800224f
 8001fe0:	0800224f 	.word	0x0800224f
 8001fe4:	0800224f 	.word	0x0800224f
 8001fe8:	0800224f 	.word	0x0800224f
 8001fec:	0800203d 	.word	0x0800203d
 8001ff0:	0800224f 	.word	0x0800224f
 8001ff4:	0800224f 	.word	0x0800224f
 8001ff8:	0800224f 	.word	0x0800224f
 8001ffc:	0800224f 	.word	0x0800224f
 8002000:	0800224f 	.word	0x0800224f
 8002004:	0800224f 	.word	0x0800224f
 8002008:	0800224f 	.word	0x0800224f
 800200c:	08002043 	.word	0x08002043
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002010:	4b94      	ldr	r3, [pc, #592]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800201c:	4b91      	ldr	r3, [pc, #580]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	4a90      	ldr	r2, [pc, #576]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800202e:	e111      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002030:	4b8d      	ldr	r3, [pc, #564]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002032:	61bb      	str	r3, [r7, #24]
      break;
 8002034:	e10e      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002036:	4b8d      	ldr	r3, [pc, #564]	@ (800226c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002038:	61bb      	str	r3, [r7, #24]
      break;
 800203a:	e10b      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800203c:	4b8c      	ldr	r3, [pc, #560]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800203e:	61bb      	str	r3, [r7, #24]
      break;
 8002040:	e108      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002042:	4b88      	ldr	r3, [pc, #544]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800204c:	4b85      	ldr	r3, [pc, #532]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002056:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002058:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002062:	4b80      	ldr	r3, [pc, #512]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002066:	08db      	lsrs	r3, r3, #3
 8002068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80e1 	beq.w	8002248 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b02      	cmp	r3, #2
 800208a:	f000 8083 	beq.w	8002194 <HAL_RCC_GetSysClockFreq+0x204>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b02      	cmp	r3, #2
 8002092:	f200 80a1 	bhi.w	80021d8 <HAL_RCC_GetSysClockFreq+0x248>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x114>
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d056      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020a2:	e099      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02d      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020da:	4b62      	ldr	r3, [pc, #392]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002106:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800210a:	e087      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002116:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002278 <HAL_RCC_GetSysClockFreq+0x2e8>
 800211a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800211e:	4b51      	ldr	r3, [pc, #324]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800212e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002132:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800213a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800213e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800214e:	e065      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800227c <HAL_RCC_GetSysClockFreq+0x2ec>
 800215e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002162:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002172:	ed97 6a02 	vldr	s12, [r7, #8]
 8002176:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2e4>
 800217a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800217e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002192:	e043      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002280 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021d6:	e021      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800227c <HAL_RCC_GetSysClockFreq+0x2ec>
 80021e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800220a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800220e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800221a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	0a5b      	lsrs	r3, r3, #9
 8002222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002226:	3301      	adds	r3, #1
 8002228:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002234:	edd7 6a07 	vldr	s13, [r7, #28]
 8002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002240:	ee17 3a90 	vmov	r3, s15
 8002244:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002246:	e005      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
      break;
 800224c:	e002      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800224e:	4b07      	ldr	r3, [pc, #28]	@ (800226c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002250:	61bb      	str	r3, [r7, #24]
      break;
 8002252:	bf00      	nop
  }

  return sysclockfreq;
 8002254:	69bb      	ldr	r3, [r7, #24]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	58024400 	.word	0x58024400
 8002268:	03d09000 	.word	0x03d09000
 800226c:	003d0900 	.word	0x003d0900
 8002270:	017d7840 	.word	0x017d7840
 8002274:	46000000 	.word	0x46000000
 8002278:	4c742400 	.word	0x4c742400
 800227c:	4a742400 	.word	0x4a742400
 8002280:	4bbebc20 	.word	0x4bbebc20

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800228a:	f7ff fe81 	bl	8001f90 <HAL_RCC_GetSysClockFreq>
 800228e:	4602      	mov	r2, r0
 8002290:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	490f      	ldr	r1, [pc, #60]	@ (80022d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800229c:	5ccb      	ldrb	r3, [r1, r3]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a07      	ldr	r2, [pc, #28]	@ (80022dc <HAL_RCC_GetHCLKFreq+0x58>)
 80022c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022c2:	4a07      	ldr	r2, [pc, #28]	@ (80022e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <HAL_RCC_GetHCLKFreq+0x58>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	58024400 	.word	0x58024400
 80022d8:	08005360 	.word	0x08005360
 80022dc:	24000004 	.word	0x24000004
 80022e0:	24000000 	.word	0x24000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80022e8:	f7ff ffcc 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4904      	ldr	r1, [pc, #16]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	58024400 	.word	0x58024400
 800230c:	08005360 	.word	0x08005360

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002314:	f7ff ffb6 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4904      	ldr	r1, [pc, #16]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	58024400 	.word	0x58024400
 8002338:	08005360 	.word	0x08005360

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002340:	b0cc      	sub	sp, #304	@ 0x130
 8002342:	af00      	add	r7, sp, #0
 8002344:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002348:	2300      	movs	r3, #0
 800234a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800234e:	2300      	movs	r3, #0
 8002350:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002360:	2500      	movs	r5, #0
 8002362:	ea54 0305 	orrs.w	r3, r4, r5
 8002366:	d049      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800236c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800236e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002372:	d02f      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002374:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002378:	d828      	bhi.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800237a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800237e:	d01a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002384:	d822      	bhi.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800238a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800238e:	d007      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002390:	e01c      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002392:	4bb8      	ldr	r3, [pc, #736]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	4ab7      	ldr	r2, [pc, #732]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800239c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800239e:	e01a      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023a4:	3308      	adds	r3, #8
 80023a6:	2102      	movs	r1, #2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 fccf 	bl	8003d4c <RCCEx_PLL2_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023b4:	e00f      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80023b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ba:	3328      	adds	r3, #40	@ 0x28
 80023bc:	2102      	movs	r1, #2
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 fd76 	bl	8003eb0 <RCCEx_PLL3_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023ca:	e004      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80023d2:	e000      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80023d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023de:	4ba5      	ldr	r3, [pc, #660]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80023e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023ee:	430b      	orrs	r3, r1
 80023f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80023f2:	e003      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002408:	f04f 0900 	mov.w	r9, #0
 800240c:	ea58 0309 	orrs.w	r3, r8, r9
 8002410:	d047      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002418:	2b04      	cmp	r3, #4
 800241a:	d82a      	bhi.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800241c:	a201      	add	r2, pc, #4	@ (adr r2, 8002424 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002439 	.word	0x08002439
 8002428:	08002447 	.word	0x08002447
 800242c:	0800245d 	.word	0x0800245d
 8002430:	0800247b 	.word	0x0800247b
 8002434:	0800247b 	.word	0x0800247b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002438:	4b8e      	ldr	r3, [pc, #568]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	4a8d      	ldr	r2, [pc, #564]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800243e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002444:	e01a      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800244a:	3308      	adds	r3, #8
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fc7c 	bl	8003d4c <RCCEx_PLL2_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800245a:	e00f      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800245c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002460:	3328      	adds	r3, #40	@ 0x28
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f001 fd23 	bl	8003eb0 <RCCEx_PLL3_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002470:	e004      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002478:	e000      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800247a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800247c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002484:	4b7b      	ldr	r3, [pc, #492]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002488:	f023 0107 	bic.w	r1, r3, #7
 800248c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002492:	4a78      	ldr	r2, [pc, #480]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002494:	430b      	orrs	r3, r1
 8002496:	6513      	str	r3, [r2, #80]	@ 0x50
 8002498:	e003      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800249a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800249e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80024a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80024ae:	f04f 0b00 	mov.w	fp, #0
 80024b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80024b6:	d04c      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80024b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024c2:	d030      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024c8:	d829      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80024cc:	d02d      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80024ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80024d0:	d825      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024d2:	2b80      	cmp	r3, #128	@ 0x80
 80024d4:	d018      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80024d6:	2b80      	cmp	r3, #128	@ 0x80
 80024d8:	d821      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80024de:	2b40      	cmp	r3, #64	@ 0x40
 80024e0:	d007      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80024e2:	e01c      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024e4:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e8:	4a62      	ldr	r2, [pc, #392]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024f0:	e01c      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024f6:	3308      	adds	r3, #8
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f001 fc26 	bl	8003d4c <RCCEx_PLL2_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002506:	e011      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800250c:	3328      	adds	r3, #40	@ 0x28
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f001 fccd 	bl	8003eb0 <RCCEx_PLL3_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800251c:	e006      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002524:	e002      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002526:	bf00      	nop
 8002528:	e000      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800252a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800252c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002534:	4b4f      	ldr	r3, [pc, #316]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002538:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800253c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002542:	4a4c      	ldr	r2, [pc, #304]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002544:	430b      	orrs	r3, r1
 8002546:	6513      	str	r3, [r2, #80]	@ 0x50
 8002548:	e003      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800254e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800255e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002568:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800256c:	460b      	mov	r3, r1
 800256e:	4313      	orrs	r3, r2
 8002570:	d053      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002576:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800257a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800257e:	d035      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002580:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002584:	d82e      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002586:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800258a:	d031      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800258c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002590:	d828      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002596:	d01a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002598:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259c:	d822      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80025a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025a6:	d007      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80025a8:	e01c      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ae:	4a31      	ldr	r2, [pc, #196]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025b6:	e01c      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025bc:	3308      	adds	r3, #8
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fbc3 	bl	8003d4c <RCCEx_PLL2_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80025cc:	e011      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025d2:	3328      	adds	r3, #40	@ 0x28
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fc6a 	bl	8003eb0 <RCCEx_PLL3_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025e2:	e006      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025ec:	bf00      	nop
 80025ee:	e000      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80025fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800260a:	4a1a      	ldr	r2, [pc, #104]	@ (8002674 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800260c:	430b      	orrs	r3, r1
 800260e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002610:	e003      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002612:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002616:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800261a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002626:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002630:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002634:	460b      	mov	r3, r1
 8002636:	4313      	orrs	r3, r2
 8002638:	d056      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800263a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800263e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002642:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002646:	d038      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800264c:	d831      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800264e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002652:	d034      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002654:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002658:	d82b      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800265a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800265e:	d01d      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002664:	d825      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d006      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800266a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002670:	e01f      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002672:	bf00      	nop
 8002674:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002678:	4ba2      	ldr	r3, [pc, #648]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	4aa1      	ldr	r2, [pc, #644]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800267e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002684:	e01c      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800268a:	3308      	adds	r3, #8
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fb5c 	bl	8003d4c <RCCEx_PLL2_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800269a:	e011      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800269c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026a0:	3328      	adds	r3, #40	@ 0x28
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 fc03 	bl	8003eb0 <RCCEx_PLL3_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026b0:	e006      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80026b8:	e002      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80026be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80026d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80026d8:	4a8a      	ldr	r2, [pc, #552]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026da:	430b      	orrs	r3, r1
 80026dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80026de:	e003      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80026f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80026fe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002702:	460b      	mov	r3, r1
 8002704:	4313      	orrs	r3, r2
 8002706:	d03a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800270c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270e:	2b30      	cmp	r3, #48	@ 0x30
 8002710:	d01f      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002712:	2b30      	cmp	r3, #48	@ 0x30
 8002714:	d819      	bhi.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002716:	2b20      	cmp	r3, #32
 8002718:	d00c      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800271a:	2b20      	cmp	r3, #32
 800271c:	d815      	bhi.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002722:	2b10      	cmp	r3, #16
 8002724:	d111      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002726:	4b77      	ldr	r3, [pc, #476]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	4a76      	ldr	r2, [pc, #472]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002732:	e011      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002738:	3308      	adds	r3, #8
 800273a:	2102      	movs	r1, #2
 800273c:	4618      	mov	r0, r3
 800273e:	f001 fb05 	bl	8003d4c <RCCEx_PLL2_Config>
 8002742:	4603      	mov	r3, r0
 8002744:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002748:	e006      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002750:	e002      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002756:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002758:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002760:	4b68      	ldr	r3, [pc, #416]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002764:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800276c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276e:	4a65      	ldr	r2, [pc, #404]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002770:	430b      	orrs	r3, r1
 8002772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002774:	e003      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800277a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800277e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800278a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002794:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002798:	460b      	mov	r3, r1
 800279a:	4313      	orrs	r3, r2
 800279c:	d051      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800279e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027a8:	d035      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80027aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027ae:	d82e      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027b4:	d031      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80027b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80027ba:	d828      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c0:	d01a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c6:	d822      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d0:	d007      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80027d2:	e01c      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027e0:	e01c      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027e6:	3308      	adds	r3, #8
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 faae 	bl	8003d4c <RCCEx_PLL2_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027f6:	e011      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027fc:	3328      	adds	r3, #40	@ 0x28
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fb55 	bl	8003eb0 <RCCEx_PLL3_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800280c:	e006      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002814:	e002      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800281a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800281c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002824:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002828:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800282c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002832:	4a34      	ldr	r2, [pc, #208]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002834:	430b      	orrs	r3, r1
 8002836:	6513      	str	r3, [r2, #80]	@ 0x50
 8002838:	e003      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800283e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800284e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002858:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800285c:	460b      	mov	r3, r1
 800285e:	4313      	orrs	r3, r2
 8002860:	d056      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286c:	d033      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800286e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002872:	d82c      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002874:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002878:	d02f      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800287a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800287e:	d826      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002884:	d02b      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002886:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800288a:	d820      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800288c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002890:	d012      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002896:	d81a      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d022      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a0:	d115      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028a6:	3308      	adds	r3, #8
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fa4e 	bl	8003d4c <RCCEx_PLL2_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028b6:	e015      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028bc:	3328      	adds	r3, #40	@ 0x28
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 faf5 	bl	8003eb0 <RCCEx_PLL3_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80028cc:	e00a      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028d6:	bf00      	nop
 80028d8:	e004      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028da:	bf00      	nop
 80028dc:	e002      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10d      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80028f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028fa:	4a02      	ldr	r2, [pc, #8]	@ (8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002900:	e006      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002902:	bf00      	nop
 8002904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800290c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800291c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002926:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800292a:	460b      	mov	r3, r1
 800292c:	4313      	orrs	r3, r2
 800292e:	d055      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002930:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800293c:	d033      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002942:	d82c      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002948:	d02f      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294e:	d826      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002954:	d02b      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800295a:	d820      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800295c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002960:	d012      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002966:	d81a      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d022      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800296c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002970:	d115      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002976:	3308      	adds	r3, #8
 8002978:	2101      	movs	r1, #1
 800297a:	4618      	mov	r0, r3
 800297c:	f001 f9e6 	bl	8003d4c <RCCEx_PLL2_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002986:	e015      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800298c:	3328      	adds	r3, #40	@ 0x28
 800298e:	2101      	movs	r1, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fa8d 	bl	8003eb0 <RCCEx_PLL3_Config>
 8002996:	4603      	mov	r3, r0
 8002998:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800299c:	e00a      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80029a4:	e006      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029a6:	bf00      	nop
 80029a8:	e004      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029aa:	bf00      	nop
 80029ac:	e002      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029ae:	bf00      	nop
 80029b0:	e000      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80029b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80029bc:	4bb6      	ldr	r3, [pc, #728]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80029c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80029cc:	4ab2      	ldr	r2, [pc, #712]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d2:	e003      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80029dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80029e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4313      	orrs	r3, r2
 80029fa:	d02a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80029fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d011      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a0a:	d10a      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a10:	3308      	adds	r3, #8
 8002a12:	2101      	movs	r1, #1
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 f999 	bl	8003d4c <RCCEx_PLL2_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002a20:	e004      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a28:	e000      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002a34:	4b98      	ldr	r3, [pc, #608]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a42:	4a95      	ldr	r2, [pc, #596]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a44:	430b      	orrs	r3, r1
 8002a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a48:	e003      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002a68:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	d037      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a7c:	d00e      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a82:	d816      	bhi.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d018      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a8c:	d111      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8e:	4b82      	ldr	r3, [pc, #520]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	4a81      	ldr	r2, [pc, #516]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a9a:	e00f      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f001 f951 	bl	8003d4c <RCCEx_PLL2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ab0:	e004      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ab8:	e000      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002abc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ac4:	4b74      	ldr	r3, [pc, #464]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad2:	4a71      	ldr	r2, [pc, #452]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ade:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002aee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002af8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4313      	orrs	r3, r2
 8002b00:	d03a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d81d      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b14 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b51 	.word	0x08002b51
 8002b18:	08002b25 	.word	0x08002b25
 8002b1c:	08002b33 	.word	0x08002b33
 8002b20:	08002b51 	.word	0x08002b51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b24:	4b5c      	ldr	r3, [pc, #368]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b30:	e00f      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b36:	3308      	adds	r3, #8
 8002b38:	2102      	movs	r1, #2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f906 	bl	8003d4c <RCCEx_PLL2_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b46:	e004      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b4e:	e000      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5e:	f023 0103 	bic.w	r1, r3, #3
 8002b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b68:	4a4b      	ldr	r2, [pc, #300]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b6e:	e003      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b74:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002b84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002b92:	460b      	mov	r3, r1
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f000 80a0 	beq.w	8002cda <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b9a:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba6:	f7fe f873 	bl	8000c90 <HAL_GetTick>
 8002baa:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7fe f86e 	bl	8000c90 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	@ 0x64
 8002bbe:	d903      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc8:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ed      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002bd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d17a      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002be8:	4053      	eors	r3, r2
 8002bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d015      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf2:	4b29      	ldr	r3, [pc, #164]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bfe:	4b26      	ldr	r3, [pc, #152]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	4a25      	ldr	r2, [pc, #148]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c08:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0a:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	4a22      	ldr	r2, [pc, #136]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c16:	4a20      	ldr	r2, [pc, #128]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c18:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002c1c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c22:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c2a:	d118      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f830 	bl	8000c90 <HAL_GetTick>
 8002c30:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c34:	e00d      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe f82b 	bl	8000c90 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c40:	1ad2      	subs	r2, r2, r3
 8002c42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d903      	bls.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002c50:	e005      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0eb      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d130      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c76:	d115      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c88:	091a      	lsrs	r2, r3, #4
 8002c8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	4a02      	ldr	r2, [pc, #8]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6113      	str	r3, [r2, #16]
 8002c94:	e00c      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002c96:	bf00      	nop
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	58024800 	.word	0x58024800
 8002ca0:	00ffffcf 	.word	0x00ffffcf
 8002ca4:	4bd4      	ldr	r3, [pc, #848]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	4ad3      	ldr	r2, [pc, #844]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002caa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cae:	6113      	str	r3, [r2, #16]
 8002cb0:	4bd1      	ldr	r3, [pc, #836]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002cb2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	4acd      	ldr	r2, [pc, #820]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ccc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002cd0:	e003      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cd6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f002 0301 	and.w	r3, r2, #1
 8002ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f000 808b 	beq.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d04:	2b28      	cmp	r3, #40	@ 0x28
 8002d06:	d86b      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002d08:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002de9 	.word	0x08002de9
 8002d14:	08002de1 	.word	0x08002de1
 8002d18:	08002de1 	.word	0x08002de1
 8002d1c:	08002de1 	.word	0x08002de1
 8002d20:	08002de1 	.word	0x08002de1
 8002d24:	08002de1 	.word	0x08002de1
 8002d28:	08002de1 	.word	0x08002de1
 8002d2c:	08002de1 	.word	0x08002de1
 8002d30:	08002db5 	.word	0x08002db5
 8002d34:	08002de1 	.word	0x08002de1
 8002d38:	08002de1 	.word	0x08002de1
 8002d3c:	08002de1 	.word	0x08002de1
 8002d40:	08002de1 	.word	0x08002de1
 8002d44:	08002de1 	.word	0x08002de1
 8002d48:	08002de1 	.word	0x08002de1
 8002d4c:	08002de1 	.word	0x08002de1
 8002d50:	08002dcb 	.word	0x08002dcb
 8002d54:	08002de1 	.word	0x08002de1
 8002d58:	08002de1 	.word	0x08002de1
 8002d5c:	08002de1 	.word	0x08002de1
 8002d60:	08002de1 	.word	0x08002de1
 8002d64:	08002de1 	.word	0x08002de1
 8002d68:	08002de1 	.word	0x08002de1
 8002d6c:	08002de1 	.word	0x08002de1
 8002d70:	08002de9 	.word	0x08002de9
 8002d74:	08002de1 	.word	0x08002de1
 8002d78:	08002de1 	.word	0x08002de1
 8002d7c:	08002de1 	.word	0x08002de1
 8002d80:	08002de1 	.word	0x08002de1
 8002d84:	08002de1 	.word	0x08002de1
 8002d88:	08002de1 	.word	0x08002de1
 8002d8c:	08002de1 	.word	0x08002de1
 8002d90:	08002de9 	.word	0x08002de9
 8002d94:	08002de1 	.word	0x08002de1
 8002d98:	08002de1 	.word	0x08002de1
 8002d9c:	08002de1 	.word	0x08002de1
 8002da0:	08002de1 	.word	0x08002de1
 8002da4:	08002de1 	.word	0x08002de1
 8002da8:	08002de1 	.word	0x08002de1
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002de9 	.word	0x08002de9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002db8:	3308      	adds	r3, #8
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 ffc5 	bl	8003d4c <RCCEx_PLL2_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002dc8:	e00f      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dce:	3328      	adds	r3, #40	@ 0x28
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 f86c 	bl	8003eb0 <RCCEx_PLL3_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002dde:	e004      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10b      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002df2:	4b81      	ldr	r3, [pc, #516]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e02:	4a7d      	ldr	r2, [pc, #500]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e08:	e003      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f002 0302 	and.w	r3, r2, #2
 8002e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e28:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	d042      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e38:	2b05      	cmp	r3, #5
 8002e3a:	d825      	bhi.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e91 	.word	0x08002e91
 8002e48:	08002e5d 	.word	0x08002e5d
 8002e4c:	08002e73 	.word	0x08002e73
 8002e50:	08002e91 	.word	0x08002e91
 8002e54:	08002e91 	.word	0x08002e91
 8002e58:	08002e91 	.word	0x08002e91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e60:	3308      	adds	r3, #8
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 ff71 	bl	8003d4c <RCCEx_PLL2_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e70:	e00f      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e76:	3328      	adds	r3, #40	@ 0x28
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 f818 	bl	8003eb0 <RCCEx_PLL3_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e86:	e004      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e8e:	e000      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9e:	f023 0107 	bic.w	r1, r3, #7
 8002ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea8:	4a53      	ldr	r2, [pc, #332]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8002eae:	e003      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002eb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	f002 0304 	and.w	r3, r2, #4
 8002ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ece:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	d044      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d825      	bhi.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f39 	.word	0x08002f39
 8002ef0:	08002f05 	.word	0x08002f05
 8002ef4:	08002f1b 	.word	0x08002f1b
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f39 	.word	0x08002f39
 8002f00:	08002f39 	.word	0x08002f39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f08:	3308      	adds	r3, #8
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 ff1d 	bl	8003d4c <RCCEx_PLL2_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f18:	e00f      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f1e:	3328      	adds	r3, #40	@ 0x28
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 ffc4 	bl	8003eb0 <RCCEx_PLL3_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f2e:	e004      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f36:	e000      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f42:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	f023 0107 	bic.w	r1, r3, #7
 8002f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f52:	4a29      	ldr	r2, [pc, #164]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f58:	e003      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f002 0320 	and.w	r3, r2, #32
 8002f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	d057      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8e:	d035      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f94:	d82c      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9a:	d031      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa0:	d826      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fa6:	d02d      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002fa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fac:	d820      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb2:	d012      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8002fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb8:	d81a      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d024      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8002fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fc2:	d115      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fc8:	3308      	adds	r3, #8
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 febd 	bl	8003d4c <RCCEx_PLL2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fd8:	e017      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fde:	3328      	adds	r3, #40	@ 0x28
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 ff64 	bl	8003eb0 <RCCEx_PLL3_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fee:	e00c      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ff6:	e008      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8002ff8:	58024400 	.word	0x58024400
        break;
 8002ffc:	bf00      	nop
 8002ffe:	e004      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003000:	bf00      	nop
 8003002:	e002      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003012:	4bc2      	ldr	r3, [pc, #776]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800301a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003022:	4abe      	ldr	r2, [pc, #760]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003024:	430b      	orrs	r3, r1
 8003026:	6553      	str	r3, [r2, #84]	@ 0x54
 8003028:	e003      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800302e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003048:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800304c:	460b      	mov	r3, r1
 800304e:	4313      	orrs	r3, r2
 8003050:	d055      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800305a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800305e:	d033      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003060:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003064:	d82c      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306a:	d02f      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003070:	d826      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003076:	d02b      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800307c:	d820      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003082:	d012      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003088:	d81a      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d022      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003092:	d115      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003098:	3308      	adds	r3, #8
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fe55 	bl	8003d4c <RCCEx_PLL2_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030a8:	e015      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ae:	3328      	adds	r3, #40	@ 0x28
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fefc 	bl	8003eb0 <RCCEx_PLL3_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030be:	e00a      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030c6:	e006      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80030d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030de:	4b8f      	ldr	r3, [pc, #572]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80030e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80030ee:	4a8b      	ldr	r2, [pc, #556]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800310a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003114:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d055      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800311e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003126:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800312a:	d033      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800312c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003130:	d82c      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003136:	d02f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800313c:	d826      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800313e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003142:	d02b      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003144:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003148:	d820      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800314a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800314e:	d012      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003154:	d81a      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d022      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800315e:	d115      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003160:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003164:	3308      	adds	r3, #8
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fdef 	bl	8003d4c <RCCEx_PLL2_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003174:	e015      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003176:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800317a:	3328      	adds	r3, #40	@ 0x28
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fe96 	bl	8003eb0 <RCCEx_PLL3_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800318a:	e00a      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003192:	e006      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003194:	bf00      	nop
 8003196:	e004      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003198:	bf00      	nop
 800319a:	e002      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800319c:	bf00      	nop
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80031a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031aa:	4b5c      	ldr	r3, [pc, #368]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ae:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80031b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80031ba:	4a58      	ldr	r2, [pc, #352]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031bc:	430b      	orrs	r3, r1
 80031be:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c0:	e003      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80031ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f002 0308 	and.w	r3, r2, #8
 80031d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031e0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80031e4:	460b      	mov	r3, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	d01e      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80031ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031f6:	d10c      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031fc:	3328      	adds	r3, #40	@ 0x28
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe55 	bl	8003eb0 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003212:	4b42      	ldr	r3, [pc, #264]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800321a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	4a3e      	ldr	r2, [pc, #248]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003224:	430b      	orrs	r3, r1
 8003226:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f002 0310 	and.w	r3, r2, #16
 8003234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800323e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003242:	460b      	mov	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	d01e      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800324c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003254:	d10c      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800325a:	3328      	adds	r3, #40	@ 0x28
 800325c:	2102      	movs	r1, #2
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fe26 	bl	8003eb0 <RCCEx_PLL3_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003270:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003278:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800327c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003280:	4a26      	ldr	r2, [pc, #152]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003282:	430b      	orrs	r3, r1
 8003284:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003292:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800329c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80032a0:	460b      	mov	r3, r1
 80032a2:	4313      	orrs	r3, r2
 80032a4:	d040      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80032a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032b2:	d022      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80032b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032b8:	d81b      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c2:	d00b      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80032c4:	e015      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ca:	3308      	adds	r3, #8
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fd3c 	bl	8003d4c <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032da:	e00f      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032e0:	3328      	adds	r3, #40	@ 0x28
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fde3 	bl	8003eb0 <RCCEx_PLL3_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032f0:	e004      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032f8:	e000      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80032fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800330c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003310:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003314:	4a01      	ldr	r2, [pc, #4]	@ (800331c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003316:	430b      	orrs	r3, r1
 8003318:	6593      	str	r3, [r2, #88]	@ 0x58
 800331a:	e005      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800331c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003324:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003336:	2300      	movs	r3, #0
 8003338:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800333a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800333e:	460b      	mov	r3, r1
 8003340:	4313      	orrs	r3, r2
 8003342:	d03b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800334c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003350:	d01f      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003352:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003356:	d818      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335c:	d003      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800335e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003362:	d007      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003364:	e011      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003366:	4b64      	ldr	r3, [pc, #400]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336a:	4a63      	ldr	r2, [pc, #396]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800336c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003370:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003372:	e00f      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003378:	3328      	adds	r3, #40	@ 0x28
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd97 	bl	8003eb0 <RCCEx_PLL3_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003388:	e004      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003390:	e000      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003394:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800339c:	4b56      	ldr	r3, [pc, #344]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800339e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ac:	4a52      	ldr	r2, [pc, #328]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80033b2:	e003      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80033c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80033ca:	2300      	movs	r3, #0
 80033cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80033ce:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80033d2:	460b      	mov	r3, r1
 80033d4:	4313      	orrs	r3, r2
 80033d6:	d031      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80033d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80033e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e6:	d007      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80033e8:	e011      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ea:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	4a42      	ldr	r2, [pc, #264]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033f6:	e00e      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033fc:	3308      	adds	r3, #8
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fca3 	bl	8003d4c <RCCEx_PLL2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800340c:	e003      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003416:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800341e:	4b36      	ldr	r3, [pc, #216]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	4a32      	ldr	r2, [pc, #200]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800342e:	430b      	orrs	r3, r1
 8003430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003432:	e003      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003438:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800343c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800344a:	2300      	movs	r3, #0
 800344c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800344e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003452:	460b      	mov	r3, r1
 8003454:	4313      	orrs	r3, r2
 8003456:	d00c      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800345c:	3328      	adds	r3, #40	@ 0x28
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fd25 	bl	8003eb0 <RCCEx_PLL3_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800347e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003480:	2300      	movs	r3, #0
 8003482:	667b      	str	r3, [r7, #100]	@ 0x64
 8003484:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003488:	460b      	mov	r3, r1
 800348a:	4313      	orrs	r3, r2
 800348c:	d03a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800348e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800349a:	d018      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800349c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a0:	d811      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a6:	d014      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80034a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ac:	d80b      	bhi.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d011      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034b6:	d106      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b8:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	4a0e      	ldr	r2, [pc, #56]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80034c4:	e008      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034cc:	e004      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80034ce:	bf00      	nop
 80034d0:	e002      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80034d2:	bf00      	nop
 80034d4:	e000      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80034d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f0:	4a01      	ldr	r2, [pc, #4]	@ (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80034f6:	e005      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80034f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003500:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003504:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003510:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003512:	2300      	movs	r3, #0
 8003514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003516:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800351a:	460b      	mov	r3, r1
 800351c:	4313      	orrs	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003520:	4baa      	ldr	r3, [pc, #680]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003524:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800352c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800352e:	4aa7      	ldr	r2, [pc, #668]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003530:	430b      	orrs	r3, r1
 8003532:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003534:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003540:	653b      	str	r3, [r7, #80]	@ 0x50
 8003542:	2300      	movs	r3, #0
 8003544:	657b      	str	r3, [r7, #84]	@ 0x54
 8003546:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800354a:	460b      	mov	r3, r1
 800354c:	4313      	orrs	r3, r2
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003550:	4b9e      	ldr	r3, [pc, #632]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800355c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003560:	4a9a      	ldr	r2, [pc, #616]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003562:	430b      	orrs	r3, r1
 8003564:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003566:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003574:	2300      	movs	r3, #0
 8003576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003578:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800357c:	460b      	mov	r3, r1
 800357e:	4313      	orrs	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003582:	4b92      	ldr	r3, [pc, #584]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800358a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	4a8e      	ldr	r2, [pc, #568]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003592:	430b      	orrs	r3, r1
 8003594:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80035a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80035a4:	2300      	movs	r3, #0
 80035a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80035a8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80035ac:	460b      	mov	r3, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	d00e      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035b2:	4b86      	ldr	r3, [pc, #536]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	4a85      	ldr	r2, [pc, #532]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035b8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80035bc:	6113      	str	r3, [r2, #16]
 80035be:	4b83      	ldr	r3, [pc, #524]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035c0:	6919      	ldr	r1, [r3, #16]
 80035c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80035ca:	4a80      	ldr	r2, [pc, #512]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80035dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035de:	2300      	movs	r3, #0
 80035e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035ec:	4b77      	ldr	r3, [pc, #476]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80035f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fa:	4a74      	ldr	r2, [pc, #464]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003600:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800360c:	633b      	str	r3, [r7, #48]	@ 0x30
 800360e:	2300      	movs	r3, #0
 8003610:	637b      	str	r3, [r7, #52]	@ 0x34
 8003612:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003616:	460b      	mov	r3, r1
 8003618:	4313      	orrs	r3, r2
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800361c:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362c:	4a67      	ldr	r2, [pc, #412]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800362e:	430b      	orrs	r3, r1
 8003630:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	2100      	movs	r1, #0
 800363c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003644:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003648:	460b      	mov	r3, r1
 800364a:	4313      	orrs	r3, r2
 800364c:	d011      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003652:	3308      	adds	r3, #8
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fb78 	bl	8003d4c <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003662:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800366e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	2100      	movs	r1, #0
 800367c:	6239      	str	r1, [r7, #32]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
 8003684:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003688:	460b      	mov	r3, r1
 800368a:	4313      	orrs	r3, r2
 800368c:	d011      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800368e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003692:	3308      	adds	r3, #8
 8003694:	2101      	movs	r1, #1
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fb58 	bl	8003d4c <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80036a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80036b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	2100      	movs	r1, #0
 80036bc:	61b9      	str	r1, [r7, #24]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d011      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d2:	3308      	adds	r3, #8
 80036d4:	2102      	movs	r1, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fb38 	bl	8003d4c <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80036e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80036f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	2100      	movs	r1, #0
 80036fc:	6139      	str	r1, [r7, #16]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d011      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800370e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003712:	3328      	adds	r3, #40	@ 0x28
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fbca 	bl	8003eb0 <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800372e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	2100      	movs	r1, #0
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d011      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003752:	3328      	adds	r3, #40	@ 0x28
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fbaa 	bl	8003eb0 <RCCEx_PLL3_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003762:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800376e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003772:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	2100      	movs	r1, #0
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d011      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003792:	3328      	adds	r3, #40	@ 0x28
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fb8a 	bl	8003eb0 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80037a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80037b2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037cc:	58024400 	.word	0x58024400

080037d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80037d4:	f7fe fd56 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4904      	ldr	r1, [pc, #16]	@ (80037f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	58024400 	.word	0x58024400
 80037f8:	08005360 	.word	0x08005360

080037fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003804:	4ba1      	ldr	r3, [pc, #644]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800380e:	4b9f      	ldr	r3, [pc, #636]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	0b1b      	lsrs	r3, r3, #12
 8003814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003818:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800381a:	4b9c      	ldr	r3, [pc, #624]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003826:	4b99      	ldr	r3, [pc, #612]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382a:	08db      	lsrs	r3, r3, #3
 800382c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 8111 	beq.w	8003a6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b02      	cmp	r3, #2
 800384e:	f000 8083 	beq.w	8003958 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b02      	cmp	r3, #2
 8003856:	f200 80a1 	bhi.w	800399c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d056      	beq.n	8003914 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003866:	e099      	b.n	800399c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003868:	4b88      	ldr	r3, [pc, #544]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02d      	beq.n	80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003874:	4b85      	ldr	r3, [pc, #532]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	08db      	lsrs	r3, r3, #3
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	4a84      	ldr	r2, [pc, #528]	@ (8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
 8003884:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80038ce:	e087      	b.n	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80038de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003912:	e065      	b.n	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003926:	4b59      	ldr	r3, [pc, #356]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003936:	ed97 6a03 	vldr	s12, [r7, #12]
 800393a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800393e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800394a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003956:	e043      	b.n	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003962:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396a:	4b48      	ldr	r3, [pc, #288]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397a:	ed97 6a03 	vldr	s12, [r7, #12]
 800397e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800398e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800399a:	e021      	b.n	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ae:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039be:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80039e0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e4:	0a5b      	lsrs	r3, r3, #9
 80039e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80039fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a06:	ee17 2a90 	vmov	r2, s15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	0c1b      	lsrs	r3, r3, #16
 8003a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a34:	ee17 2a90 	vmov	r2, s15
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003a3c:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a40:	0e1b      	lsrs	r3, r3, #24
 8003a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a62:	ee17 2a90 	vmov	r2, s15
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a6a:	e008      	b.n	8003a7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
}
 8003a7e:	bf00      	nop
 8003a80:	3724      	adds	r7, #36	@ 0x24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	03d09000 	.word	0x03d09000
 8003a94:	46000000 	.word	0x46000000
 8003a98:	4c742400 	.word	0x4c742400
 8003a9c:	4a742400 	.word	0x4a742400
 8003aa0:	4bbebc20 	.word	0x4bbebc20

08003aa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	@ 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aac:	4ba1      	ldr	r3, [pc, #644]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ab6:	4b9f      	ldr	r3, [pc, #636]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	0d1b      	lsrs	r3, r3, #20
 8003abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ac0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ac2:	4b9c      	ldr	r3, [pc, #624]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ace:	4b99      	ldr	r3, [pc, #612]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	08db      	lsrs	r3, r3, #3
 8003ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8111 	beq.w	8003d14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	f000 8083 	beq.w	8003c00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	f200 80a1 	bhi.w	8003c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d056      	beq.n	8003bbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b0e:	e099      	b.n	8003c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b10:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02d      	beq.n	8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b1c:	4b85      	ldr	r3, [pc, #532]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	08db      	lsrs	r3, r3, #3
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	4a84      	ldr	r2, [pc, #528]	@ (8003d38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b46:	4b7b      	ldr	r3, [pc, #492]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b76:	e087      	b.n	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bba:	e065      	b.n	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bce:	4b59      	ldr	r3, [pc, #356]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bfe:	e043      	b.n	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b48      	ldr	r3, [pc, #288]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c42:	e021      	b.n	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c56:	4b37      	ldr	r3, [pc, #220]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c88:	4b2a      	ldr	r3, [pc, #168]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	0a5b      	lsrs	r3, r3, #9
 8003c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cae:	ee17 2a90 	vmov	r2, s15
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	0c1b      	lsrs	r3, r3, #16
 8003cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc0:	ee07 3a90 	vmov	s15, r3
 8003cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cdc:	ee17 2a90 	vmov	r2, s15
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003ce4:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	0e1b      	lsrs	r3, r3, #24
 8003cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0a:	ee17 2a90 	vmov	r2, s15
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d12:	e008      	b.n	8003d26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
}
 8003d26:	bf00      	nop
 8003d28:	3724      	adds	r7, #36	@ 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	58024400 	.word	0x58024400
 8003d38:	03d09000 	.word	0x03d09000
 8003d3c:	46000000 	.word	0x46000000
 8003d40:	4c742400 	.word	0x4c742400
 8003d44:	4a742400 	.word	0x4a742400
 8003d48:	4bbebc20 	.word	0x4bbebc20

08003d4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d5a:	4b53      	ldr	r3, [pc, #332]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d101      	bne.n	8003d6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e099      	b.n	8003e9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d6a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003d70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d76:	f7fc ff8b 	bl	8000c90 <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d7e:	f7fc ff87 	bl	8000c90 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e086      	b.n	8003e9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d90:	4b45      	ldr	r3, [pc, #276]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d9c:	4b42      	ldr	r3, [pc, #264]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	031b      	lsls	r3, r3, #12
 8003daa:	493f      	ldr	r1, [pc, #252]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	628b      	str	r3, [r1, #40]	@ 0x28
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	025b      	lsls	r3, r3, #9
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003de0:	4931      	ldr	r1, [pc, #196]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003de6:	4b30      	ldr	r3, [pc, #192]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	492d      	ldr	r1, [pc, #180]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003df8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	f023 0220 	bic.w	r2, r3, #32
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	4928      	ldr	r1, [pc, #160]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e0a:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0e:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e10:	f023 0310 	bic.w	r3, r3, #16
 8003e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e16:	4b24      	ldr	r3, [pc, #144]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e1a:	4b24      	ldr	r3, [pc, #144]	@ (8003eac <RCCEx_PLL2_Config+0x160>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	69d2      	ldr	r2, [r2, #28]
 8003e22:	00d2      	lsls	r2, r2, #3
 8003e24:	4920      	ldr	r1, [pc, #128]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e30:	f043 0310 	orr.w	r3, r3, #16
 8003e34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e48:	e00f      	b.n	8003e6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e50:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	4a14      	ldr	r2, [pc, #80]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e5c:	e005      	b.n	8003e6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e62:	4a11      	ldr	r2, [pc, #68]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e76:	f7fc ff0b 	bl	8000c90 <HAL_GetTick>
 8003e7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e7c:	e008      	b.n	8003e90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e7e:	f7fc ff07 	bl	8000c90 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e90:	4b05      	ldr	r3, [pc, #20]	@ (8003ea8 <RCCEx_PLL2_Config+0x15c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	58024400 	.word	0x58024400
 8003eac:	ffff0007 	.word	0xffff0007

08003eb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ebe:	4b53      	ldr	r3, [pc, #332]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d101      	bne.n	8003ece <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e099      	b.n	8004002 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003ece:	4b4f      	ldr	r3, [pc, #316]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a4e      	ldr	r2, [pc, #312]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eda:	f7fc fed9 	bl	8000c90 <HAL_GetTick>
 8003ede:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ee2:	f7fc fed5 	bl	8000c90 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e086      	b.n	8004002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ef4:	4b45      	ldr	r3, [pc, #276]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f00:	4b42      	ldr	r3, [pc, #264]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f04:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	051b      	lsls	r3, r3, #20
 8003f0e:	493f      	ldr	r1, [pc, #252]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	025b      	lsls	r3, r3, #9
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	061b      	lsls	r3, r3, #24
 8003f40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f44:	4931      	ldr	r1, [pc, #196]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f4a:	4b30      	ldr	r3, [pc, #192]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	492d      	ldr	r1, [pc, #180]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4928      	ldr	r1, [pc, #160]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f6e:	4b27      	ldr	r3, [pc, #156]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	4a26      	ldr	r2, [pc, #152]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f7a:	4b24      	ldr	r3, [pc, #144]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f7e:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <RCCEx_PLL3_Config+0x160>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	69d2      	ldr	r2, [r2, #28]
 8003f86:	00d2      	lsls	r2, r2, #3
 8003f88:	4920      	ldr	r1, [pc, #128]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	4a19      	ldr	r2, [pc, #100]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fac:	e00f      	b.n	8003fce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d106      	bne.n	8003fc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fb4:	4b15      	ldr	r3, [pc, #84]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	4a14      	ldr	r2, [pc, #80]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fc0:	e005      	b.n	8003fce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4a11      	ldr	r2, [pc, #68]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003fce:	4b0f      	ldr	r3, [pc, #60]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fda:	f7fc fe59 	bl	8000c90 <HAL_GetTick>
 8003fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fe0:	e008      	b.n	8003ff4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fe2:	f7fc fe55 	bl	8000c90 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e006      	b.n	8004002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <RCCEx_PLL3_Config+0x15c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	58024400 	.word	0x58024400
 8004010:	ffff0007 	.word	0xffff0007

08004014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e042      	b.n	80040ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fc fcdf 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	@ 0x24
 8004042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fe1e 	bl	8004ca0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8b3 	bl	80041d0 <UART_SetConfig>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01b      	b.n	80040ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fe9d 	bl	8004de4 <UART_CheckIdleState>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	@ 0x28
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d17b      	bne.n	80041c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_UART_Transmit+0x26>
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e074      	b.n	80041c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2221      	movs	r2, #33	@ 0x21
 80040ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ee:	f7fc fdcf 	bl	8000c90 <HAL_GetTick>
 80040f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	88fa      	ldrh	r2, [r7, #6]
 80040f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800410c:	d108      	bne.n	8004120 <HAL_UART_Transmit+0x6c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004128:	e030      	b.n	800418c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 feff 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e03d      	b.n	80041c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	3302      	adds	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e007      	b.n	800417a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1c8      	bne.n	800412a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	2140      	movs	r1, #64	@ 0x40
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fec8 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e006      	b.n	80041c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b092      	sub	sp, #72	@ 0x48
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4bbe      	ldr	r3, [pc, #760]	@ (80044f8 <UART_SetConfig+0x328>)
 8004200:	4013      	ands	r3, r2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004208:	430b      	orrs	r3, r1
 800420a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4ab3      	ldr	r2, [pc, #716]	@ (80044fc <UART_SetConfig+0x32c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004238:	4313      	orrs	r3, r2
 800423a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4baf      	ldr	r3, [pc, #700]	@ (8004500 <UART_SetConfig+0x330>)
 8004244:	4013      	ands	r3, r2
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800424c:	430b      	orrs	r3, r1
 800424e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	f023 010f 	bic.w	r1, r3, #15
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4aa6      	ldr	r2, [pc, #664]	@ (8004504 <UART_SetConfig+0x334>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d177      	bne.n	8004360 <UART_SetConfig+0x190>
 8004270:	4ba5      	ldr	r3, [pc, #660]	@ (8004508 <UART_SetConfig+0x338>)
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004278:	2b28      	cmp	r3, #40	@ 0x28
 800427a:	d86d      	bhi.n	8004358 <UART_SetConfig+0x188>
 800427c:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <UART_SetConfig+0xb4>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	08004329 	.word	0x08004329
 8004288:	08004359 	.word	0x08004359
 800428c:	08004359 	.word	0x08004359
 8004290:	08004359 	.word	0x08004359
 8004294:	08004359 	.word	0x08004359
 8004298:	08004359 	.word	0x08004359
 800429c:	08004359 	.word	0x08004359
 80042a0:	08004359 	.word	0x08004359
 80042a4:	08004331 	.word	0x08004331
 80042a8:	08004359 	.word	0x08004359
 80042ac:	08004359 	.word	0x08004359
 80042b0:	08004359 	.word	0x08004359
 80042b4:	08004359 	.word	0x08004359
 80042b8:	08004359 	.word	0x08004359
 80042bc:	08004359 	.word	0x08004359
 80042c0:	08004359 	.word	0x08004359
 80042c4:	08004339 	.word	0x08004339
 80042c8:	08004359 	.word	0x08004359
 80042cc:	08004359 	.word	0x08004359
 80042d0:	08004359 	.word	0x08004359
 80042d4:	08004359 	.word	0x08004359
 80042d8:	08004359 	.word	0x08004359
 80042dc:	08004359 	.word	0x08004359
 80042e0:	08004359 	.word	0x08004359
 80042e4:	08004341 	.word	0x08004341
 80042e8:	08004359 	.word	0x08004359
 80042ec:	08004359 	.word	0x08004359
 80042f0:	08004359 	.word	0x08004359
 80042f4:	08004359 	.word	0x08004359
 80042f8:	08004359 	.word	0x08004359
 80042fc:	08004359 	.word	0x08004359
 8004300:	08004359 	.word	0x08004359
 8004304:	08004349 	.word	0x08004349
 8004308:	08004359 	.word	0x08004359
 800430c:	08004359 	.word	0x08004359
 8004310:	08004359 	.word	0x08004359
 8004314:	08004359 	.word	0x08004359
 8004318:	08004359 	.word	0x08004359
 800431c:	08004359 	.word	0x08004359
 8004320:	08004359 	.word	0x08004359
 8004324:	08004351 	.word	0x08004351
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800432e:	e222      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004336:	e21e      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800433e:	e21a      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004346:	e216      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004348:	2320      	movs	r3, #32
 800434a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800434e:	e212      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004350:	2340      	movs	r3, #64	@ 0x40
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004356:	e20e      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004358:	2380      	movs	r3, #128	@ 0x80
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800435e:	e20a      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a69      	ldr	r2, [pc, #420]	@ (800450c <UART_SetConfig+0x33c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d130      	bne.n	80043cc <UART_SetConfig+0x1fc>
 800436a:	4b67      	ldr	r3, [pc, #412]	@ (8004508 <UART_SetConfig+0x338>)
 800436c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	2b05      	cmp	r3, #5
 8004374:	d826      	bhi.n	80043c4 <UART_SetConfig+0x1f4>
 8004376:	a201      	add	r2, pc, #4	@ (adr r2, 800437c <UART_SetConfig+0x1ac>)
 8004378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437c:	08004395 	.word	0x08004395
 8004380:	0800439d 	.word	0x0800439d
 8004384:	080043a5 	.word	0x080043a5
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043bd 	.word	0x080043bd
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800439a:	e1ec      	b.n	8004776 <UART_SetConfig+0x5a6>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043a2:	e1e8      	b.n	8004776 <UART_SetConfig+0x5a6>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043aa:	e1e4      	b.n	8004776 <UART_SetConfig+0x5a6>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b2:	e1e0      	b.n	8004776 <UART_SetConfig+0x5a6>
 80043b4:	2320      	movs	r3, #32
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ba:	e1dc      	b.n	8004776 <UART_SetConfig+0x5a6>
 80043bc:	2340      	movs	r3, #64	@ 0x40
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c2:	e1d8      	b.n	8004776 <UART_SetConfig+0x5a6>
 80043c4:	2380      	movs	r3, #128	@ 0x80
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ca:	e1d4      	b.n	8004776 <UART_SetConfig+0x5a6>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004510 <UART_SetConfig+0x340>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d130      	bne.n	8004438 <UART_SetConfig+0x268>
 80043d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004508 <UART_SetConfig+0x338>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d826      	bhi.n	8004430 <UART_SetConfig+0x260>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <UART_SetConfig+0x218>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004401 	.word	0x08004401
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004411 	.word	0x08004411
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004429 	.word	0x08004429
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004406:	e1b6      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440e:	e1b2      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004416:	e1ae      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441e:	e1aa      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004420:	2320      	movs	r3, #32
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004426:	e1a6      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004428:	2340      	movs	r3, #64	@ 0x40
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442e:	e1a2      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004430:	2380      	movs	r3, #128	@ 0x80
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004436:	e19e      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a35      	ldr	r2, [pc, #212]	@ (8004514 <UART_SetConfig+0x344>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d130      	bne.n	80044a4 <UART_SetConfig+0x2d4>
 8004442:	4b31      	ldr	r3, [pc, #196]	@ (8004508 <UART_SetConfig+0x338>)
 8004444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b05      	cmp	r3, #5
 800444c:	d826      	bhi.n	800449c <UART_SetConfig+0x2cc>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <UART_SetConfig+0x284>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	0800446d 	.word	0x0800446d
 8004458:	08004475 	.word	0x08004475
 800445c:	0800447d 	.word	0x0800447d
 8004460:	08004485 	.word	0x08004485
 8004464:	0800448d 	.word	0x0800448d
 8004468:	08004495 	.word	0x08004495
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004472:	e180      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447a:	e17c      	b.n	8004776 <UART_SetConfig+0x5a6>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004482:	e178      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448a:	e174      	b.n	8004776 <UART_SetConfig+0x5a6>
 800448c:	2320      	movs	r3, #32
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004492:	e170      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004494:	2340      	movs	r3, #64	@ 0x40
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449a:	e16c      	b.n	8004776 <UART_SetConfig+0x5a6>
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a2:	e168      	b.n	8004776 <UART_SetConfig+0x5a6>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <UART_SetConfig+0x348>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d142      	bne.n	8004534 <UART_SetConfig+0x364>
 80044ae:	4b16      	ldr	r3, [pc, #88]	@ (8004508 <UART_SetConfig+0x338>)
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d838      	bhi.n	800452c <UART_SetConfig+0x35c>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <UART_SetConfig+0x2f0>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044e9 	.word	0x080044e9
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	0800451d 	.word	0x0800451d
 80044d4:	08004525 	.word	0x08004525
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044de:	e14a      	b.n	8004776 <UART_SetConfig+0x5a6>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e6:	e146      	b.n	8004776 <UART_SetConfig+0x5a6>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ee:	e142      	b.n	8004776 <UART_SetConfig+0x5a6>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f6:	e13e      	b.n	8004776 <UART_SetConfig+0x5a6>
 80044f8:	cfff69f3 	.word	0xcfff69f3
 80044fc:	58000c00 	.word	0x58000c00
 8004500:	11fff4ff 	.word	0x11fff4ff
 8004504:	40011000 	.word	0x40011000
 8004508:	58024400 	.word	0x58024400
 800450c:	40004400 	.word	0x40004400
 8004510:	40004800 	.word	0x40004800
 8004514:	40004c00 	.word	0x40004c00
 8004518:	40005000 	.word	0x40005000
 800451c:	2320      	movs	r3, #32
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004522:	e128      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004524:	2340      	movs	r3, #64	@ 0x40
 8004526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800452a:	e124      	b.n	8004776 <UART_SetConfig+0x5a6>
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004532:	e120      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4acb      	ldr	r2, [pc, #812]	@ (8004868 <UART_SetConfig+0x698>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d176      	bne.n	800462c <UART_SetConfig+0x45c>
 800453e:	4bcb      	ldr	r3, [pc, #812]	@ (800486c <UART_SetConfig+0x69c>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004546:	2b28      	cmp	r3, #40	@ 0x28
 8004548:	d86c      	bhi.n	8004624 <UART_SetConfig+0x454>
 800454a:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <UART_SetConfig+0x380>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	080045f5 	.word	0x080045f5
 8004554:	08004625 	.word	0x08004625
 8004558:	08004625 	.word	0x08004625
 800455c:	08004625 	.word	0x08004625
 8004560:	08004625 	.word	0x08004625
 8004564:	08004625 	.word	0x08004625
 8004568:	08004625 	.word	0x08004625
 800456c:	08004625 	.word	0x08004625
 8004570:	080045fd 	.word	0x080045fd
 8004574:	08004625 	.word	0x08004625
 8004578:	08004625 	.word	0x08004625
 800457c:	08004625 	.word	0x08004625
 8004580:	08004625 	.word	0x08004625
 8004584:	08004625 	.word	0x08004625
 8004588:	08004625 	.word	0x08004625
 800458c:	08004625 	.word	0x08004625
 8004590:	08004605 	.word	0x08004605
 8004594:	08004625 	.word	0x08004625
 8004598:	08004625 	.word	0x08004625
 800459c:	08004625 	.word	0x08004625
 80045a0:	08004625 	.word	0x08004625
 80045a4:	08004625 	.word	0x08004625
 80045a8:	08004625 	.word	0x08004625
 80045ac:	08004625 	.word	0x08004625
 80045b0:	0800460d 	.word	0x0800460d
 80045b4:	08004625 	.word	0x08004625
 80045b8:	08004625 	.word	0x08004625
 80045bc:	08004625 	.word	0x08004625
 80045c0:	08004625 	.word	0x08004625
 80045c4:	08004625 	.word	0x08004625
 80045c8:	08004625 	.word	0x08004625
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004615 	.word	0x08004615
 80045d4:	08004625 	.word	0x08004625
 80045d8:	08004625 	.word	0x08004625
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004625 	.word	0x08004625
 80045ec:	08004625 	.word	0x08004625
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fa:	e0bc      	b.n	8004776 <UART_SetConfig+0x5a6>
 80045fc:	2304      	movs	r3, #4
 80045fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004602:	e0b8      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004604:	2308      	movs	r3, #8
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460a:	e0b4      	b.n	8004776 <UART_SetConfig+0x5a6>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004612:	e0b0      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004614:	2320      	movs	r3, #32
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461a:	e0ac      	b.n	8004776 <UART_SetConfig+0x5a6>
 800461c:	2340      	movs	r3, #64	@ 0x40
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004622:	e0a8      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004624:	2380      	movs	r3, #128	@ 0x80
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462a:	e0a4      	b.n	8004776 <UART_SetConfig+0x5a6>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a8f      	ldr	r2, [pc, #572]	@ (8004870 <UART_SetConfig+0x6a0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d130      	bne.n	8004698 <UART_SetConfig+0x4c8>
 8004636:	4b8d      	ldr	r3, [pc, #564]	@ (800486c <UART_SetConfig+0x69c>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	2b05      	cmp	r3, #5
 8004640:	d826      	bhi.n	8004690 <UART_SetConfig+0x4c0>
 8004642:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <UART_SetConfig+0x478>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	08004661 	.word	0x08004661
 800464c:	08004669 	.word	0x08004669
 8004650:	08004671 	.word	0x08004671
 8004654:	08004679 	.word	0x08004679
 8004658:	08004681 	.word	0x08004681
 800465c:	08004689 	.word	0x08004689
 8004660:	2300      	movs	r3, #0
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004666:	e086      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466e:	e082      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004676:	e07e      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467e:	e07a      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004680:	2320      	movs	r3, #32
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004686:	e076      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004688:	2340      	movs	r3, #64	@ 0x40
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468e:	e072      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004690:	2380      	movs	r3, #128	@ 0x80
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004696:	e06e      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a75      	ldr	r2, [pc, #468]	@ (8004874 <UART_SetConfig+0x6a4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d130      	bne.n	8004704 <UART_SetConfig+0x534>
 80046a2:	4b72      	ldr	r3, [pc, #456]	@ (800486c <UART_SetConfig+0x69c>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	d826      	bhi.n	80046fc <UART_SetConfig+0x52c>
 80046ae:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0x4e4>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046cd 	.word	0x080046cd
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046dd 	.word	0x080046dd
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d2:	e050      	b.n	8004776 <UART_SetConfig+0x5a6>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046da:	e04c      	b.n	8004776 <UART_SetConfig+0x5a6>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e2:	e048      	b.n	8004776 <UART_SetConfig+0x5a6>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ea:	e044      	b.n	8004776 <UART_SetConfig+0x5a6>
 80046ec:	2320      	movs	r3, #32
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f2:	e040      	b.n	8004776 <UART_SetConfig+0x5a6>
 80046f4:	2340      	movs	r3, #64	@ 0x40
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fa:	e03c      	b.n	8004776 <UART_SetConfig+0x5a6>
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004702:	e038      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5b      	ldr	r2, [pc, #364]	@ (8004878 <UART_SetConfig+0x6a8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d130      	bne.n	8004770 <UART_SetConfig+0x5a0>
 800470e:	4b57      	ldr	r3, [pc, #348]	@ (800486c <UART_SetConfig+0x69c>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2b05      	cmp	r3, #5
 8004718:	d826      	bhi.n	8004768 <UART_SetConfig+0x598>
 800471a:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0x550>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004739 	.word	0x08004739
 8004724:	08004741 	.word	0x08004741
 8004728:	08004749 	.word	0x08004749
 800472c:	08004751 	.word	0x08004751
 8004730:	08004759 	.word	0x08004759
 8004734:	08004761 	.word	0x08004761
 8004738:	2302      	movs	r3, #2
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e01a      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004746:	e016      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004748:	2308      	movs	r3, #8
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474e:	e012      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004750:	2310      	movs	r3, #16
 8004752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004756:	e00e      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004758:	2320      	movs	r3, #32
 800475a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475e:	e00a      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004760:	2340      	movs	r3, #64	@ 0x40
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004766:	e006      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004768:	2380      	movs	r3, #128	@ 0x80
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476e:	e002      	b.n	8004776 <UART_SetConfig+0x5a6>
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a3f      	ldr	r2, [pc, #252]	@ (8004878 <UART_SetConfig+0x6a8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	f040 80f8 	bne.w	8004972 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004782:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004786:	2b20      	cmp	r3, #32
 8004788:	dc46      	bgt.n	8004818 <UART_SetConfig+0x648>
 800478a:	2b02      	cmp	r3, #2
 800478c:	f2c0 8082 	blt.w	8004894 <UART_SetConfig+0x6c4>
 8004790:	3b02      	subs	r3, #2
 8004792:	2b1e      	cmp	r3, #30
 8004794:	d87e      	bhi.n	8004894 <UART_SetConfig+0x6c4>
 8004796:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <UART_SetConfig+0x5cc>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	0800481f 	.word	0x0800481f
 80047a0:	08004895 	.word	0x08004895
 80047a4:	08004827 	.word	0x08004827
 80047a8:	08004895 	.word	0x08004895
 80047ac:	08004895 	.word	0x08004895
 80047b0:	08004895 	.word	0x08004895
 80047b4:	08004837 	.word	0x08004837
 80047b8:	08004895 	.word	0x08004895
 80047bc:	08004895 	.word	0x08004895
 80047c0:	08004895 	.word	0x08004895
 80047c4:	08004895 	.word	0x08004895
 80047c8:	08004895 	.word	0x08004895
 80047cc:	08004895 	.word	0x08004895
 80047d0:	08004895 	.word	0x08004895
 80047d4:	08004847 	.word	0x08004847
 80047d8:	08004895 	.word	0x08004895
 80047dc:	08004895 	.word	0x08004895
 80047e0:	08004895 	.word	0x08004895
 80047e4:	08004895 	.word	0x08004895
 80047e8:	08004895 	.word	0x08004895
 80047ec:	08004895 	.word	0x08004895
 80047f0:	08004895 	.word	0x08004895
 80047f4:	08004895 	.word	0x08004895
 80047f8:	08004895 	.word	0x08004895
 80047fc:	08004895 	.word	0x08004895
 8004800:	08004895 	.word	0x08004895
 8004804:	08004895 	.word	0x08004895
 8004808:	08004895 	.word	0x08004895
 800480c:	08004895 	.word	0x08004895
 8004810:	08004895 	.word	0x08004895
 8004814:	08004887 	.word	0x08004887
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	d037      	beq.n	800488c <UART_SetConfig+0x6bc>
 800481c:	e03a      	b.n	8004894 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800481e:	f7fe ffd7 	bl	80037d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004822:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004824:	e03c      	b.n	80048a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe ffe6 	bl	80037fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004834:	e034      	b.n	80048a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004836:	f107 0318 	add.w	r3, r7, #24
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff f932 	bl	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004844:	e02c      	b.n	80048a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004846:	4b09      	ldr	r3, [pc, #36]	@ (800486c <UART_SetConfig+0x69c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <UART_SetConfig+0x69c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	08db      	lsrs	r3, r3, #3
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	4a07      	ldr	r2, [pc, #28]	@ (800487c <UART_SetConfig+0x6ac>)
 800485e:	fa22 f303 	lsr.w	r3, r2, r3
 8004862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004864:	e01c      	b.n	80048a0 <UART_SetConfig+0x6d0>
 8004866:	bf00      	nop
 8004868:	40011400 	.word	0x40011400
 800486c:	58024400 	.word	0x58024400
 8004870:	40007800 	.word	0x40007800
 8004874:	40007c00 	.word	0x40007c00
 8004878:	58000c00 	.word	0x58000c00
 800487c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004880:	4b9d      	ldr	r3, [pc, #628]	@ (8004af8 <UART_SetConfig+0x928>)
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004884:	e00c      	b.n	80048a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004886:	4b9d      	ldr	r3, [pc, #628]	@ (8004afc <UART_SetConfig+0x92c>)
 8004888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800488a:	e009      	b.n	80048a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004892:	e005      	b.n	80048a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800489e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 81de 	beq.w	8004c64 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	4a94      	ldr	r2, [pc, #592]	@ (8004b00 <UART_SetConfig+0x930>)
 80048ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b2:	461a      	mov	r2, r3
 80048b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d305      	bcc.n	80048d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d903      	bls.n	80048e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048de:	e1c1      	b.n	8004c64 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e2:	2200      	movs	r2, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	60fa      	str	r2, [r7, #12]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	4a84      	ldr	r2, [pc, #528]	@ (8004b00 <UART_SetConfig+0x930>)
 80048ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2200      	movs	r2, #0
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004902:	f7fb fce9 	bl	80002d8 <__aeabi_uldivmod>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	020b      	lsls	r3, r1, #8
 8004918:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800491c:	0202      	lsls	r2, r0, #8
 800491e:	6979      	ldr	r1, [r7, #20]
 8004920:	6849      	ldr	r1, [r1, #4]
 8004922:	0849      	lsrs	r1, r1, #1
 8004924:	2000      	movs	r0, #0
 8004926:	460c      	mov	r4, r1
 8004928:	4605      	mov	r5, r0
 800492a:	eb12 0804 	adds.w	r8, r2, r4
 800492e:	eb43 0905 	adc.w	r9, r3, r5
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	469a      	mov	sl, r3
 800493a:	4693      	mov	fp, r2
 800493c:	4652      	mov	r2, sl
 800493e:	465b      	mov	r3, fp
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fb fcc8 	bl	80002d8 <__aeabi_uldivmod>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4613      	mov	r3, r2
 800494e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004956:	d308      	bcc.n	800496a <UART_SetConfig+0x79a>
 8004958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800495e:	d204      	bcs.n	800496a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e17c      	b.n	8004c64 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004970:	e178      	b.n	8004c64 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800497a:	f040 80c5 	bne.w	8004b08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800497e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004982:	2b20      	cmp	r3, #32
 8004984:	dc48      	bgt.n	8004a18 <UART_SetConfig+0x848>
 8004986:	2b00      	cmp	r3, #0
 8004988:	db7b      	blt.n	8004a82 <UART_SetConfig+0x8b2>
 800498a:	2b20      	cmp	r3, #32
 800498c:	d879      	bhi.n	8004a82 <UART_SetConfig+0x8b2>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <UART_SetConfig+0x7c4>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	08004a1f 	.word	0x08004a1f
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a83 	.word	0x08004a83
 80049a0:	08004a83 	.word	0x08004a83
 80049a4:	08004a2f 	.word	0x08004a2f
 80049a8:	08004a83 	.word	0x08004a83
 80049ac:	08004a83 	.word	0x08004a83
 80049b0:	08004a83 	.word	0x08004a83
 80049b4:	08004a3f 	.word	0x08004a3f
 80049b8:	08004a83 	.word	0x08004a83
 80049bc:	08004a83 	.word	0x08004a83
 80049c0:	08004a83 	.word	0x08004a83
 80049c4:	08004a83 	.word	0x08004a83
 80049c8:	08004a83 	.word	0x08004a83
 80049cc:	08004a83 	.word	0x08004a83
 80049d0:	08004a83 	.word	0x08004a83
 80049d4:	08004a4f 	.word	0x08004a4f
 80049d8:	08004a83 	.word	0x08004a83
 80049dc:	08004a83 	.word	0x08004a83
 80049e0:	08004a83 	.word	0x08004a83
 80049e4:	08004a83 	.word	0x08004a83
 80049e8:	08004a83 	.word	0x08004a83
 80049ec:	08004a83 	.word	0x08004a83
 80049f0:	08004a83 	.word	0x08004a83
 80049f4:	08004a83 	.word	0x08004a83
 80049f8:	08004a83 	.word	0x08004a83
 80049fc:	08004a83 	.word	0x08004a83
 8004a00:	08004a83 	.word	0x08004a83
 8004a04:	08004a83 	.word	0x08004a83
 8004a08:	08004a83 	.word	0x08004a83
 8004a0c:	08004a83 	.word	0x08004a83
 8004a10:	08004a83 	.word	0x08004a83
 8004a14:	08004a75 	.word	0x08004a75
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d02e      	beq.n	8004a7a <UART_SetConfig+0x8aa>
 8004a1c:	e031      	b.n	8004a82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1e:	f7fd fc61 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8004a22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a24:	e033      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a26:	f7fd fc73 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8004a2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a2c:	e02f      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fee2 	bl	80037fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a3c:	e027      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a3e:	f107 0318 	add.w	r3, r7, #24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff f82e 	bl	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a4c:	e01f      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b04 <UART_SetConfig+0x934>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <UART_SetConfig+0x934>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	4a24      	ldr	r2, [pc, #144]	@ (8004af8 <UART_SetConfig+0x928>)
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a6c:	e00f      	b.n	8004a8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a6e:	4b22      	ldr	r3, [pc, #136]	@ (8004af8 <UART_SetConfig+0x928>)
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a72:	e00c      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a74:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <UART_SetConfig+0x92c>)
 8004a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a78:	e009      	b.n	8004a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a80:	e005      	b.n	8004a8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80e7 	beq.w	8004c64 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <UART_SetConfig+0x930>)
 8004a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aa8:	005a      	lsls	r2, r3, #1
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	441a      	add	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abe:	2b0f      	cmp	r3, #15
 8004ac0:	d916      	bls.n	8004af0 <UART_SetConfig+0x920>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac8:	d212      	bcs.n	8004af0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f023 030f 	bic.w	r3, r3, #15
 8004ad2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	e0b9      	b.n	8004c64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004af6:	e0b5      	b.n	8004c64 <UART_SetConfig+0xa94>
 8004af8:	03d09000 	.word	0x03d09000
 8004afc:	003d0900 	.word	0x003d0900
 8004b00:	08005370 	.word	0x08005370
 8004b04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	dc49      	bgt.n	8004ba4 <UART_SetConfig+0x9d4>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db7c      	blt.n	8004c0e <UART_SetConfig+0xa3e>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d87a      	bhi.n	8004c0e <UART_SetConfig+0xa3e>
 8004b18:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <UART_SetConfig+0x950>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004bab 	.word	0x08004bab
 8004b24:	08004bb3 	.word	0x08004bb3
 8004b28:	08004c0f 	.word	0x08004c0f
 8004b2c:	08004c0f 	.word	0x08004c0f
 8004b30:	08004bbb 	.word	0x08004bbb
 8004b34:	08004c0f 	.word	0x08004c0f
 8004b38:	08004c0f 	.word	0x08004c0f
 8004b3c:	08004c0f 	.word	0x08004c0f
 8004b40:	08004bcb 	.word	0x08004bcb
 8004b44:	08004c0f 	.word	0x08004c0f
 8004b48:	08004c0f 	.word	0x08004c0f
 8004b4c:	08004c0f 	.word	0x08004c0f
 8004b50:	08004c0f 	.word	0x08004c0f
 8004b54:	08004c0f 	.word	0x08004c0f
 8004b58:	08004c0f 	.word	0x08004c0f
 8004b5c:	08004c0f 	.word	0x08004c0f
 8004b60:	08004bdb 	.word	0x08004bdb
 8004b64:	08004c0f 	.word	0x08004c0f
 8004b68:	08004c0f 	.word	0x08004c0f
 8004b6c:	08004c0f 	.word	0x08004c0f
 8004b70:	08004c0f 	.word	0x08004c0f
 8004b74:	08004c0f 	.word	0x08004c0f
 8004b78:	08004c0f 	.word	0x08004c0f
 8004b7c:	08004c0f 	.word	0x08004c0f
 8004b80:	08004c0f 	.word	0x08004c0f
 8004b84:	08004c0f 	.word	0x08004c0f
 8004b88:	08004c0f 	.word	0x08004c0f
 8004b8c:	08004c0f 	.word	0x08004c0f
 8004b90:	08004c0f 	.word	0x08004c0f
 8004b94:	08004c0f 	.word	0x08004c0f
 8004b98:	08004c0f 	.word	0x08004c0f
 8004b9c:	08004c0f 	.word	0x08004c0f
 8004ba0:	08004c01 	.word	0x08004c01
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d02e      	beq.n	8004c06 <UART_SetConfig+0xa36>
 8004ba8:	e031      	b.n	8004c0e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004baa:	f7fd fb9b 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8004bae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bb0:	e033      	b.n	8004c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb2:	f7fd fbad 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8004bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bb8:	e02f      	b.n	8004c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fe1c 	bl	80037fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bc8:	e027      	b.n	8004c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bca:	f107 0318 	add.w	r3, r7, #24
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe ff68 	bl	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd8:	e01f      	b.n	8004c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bda:	4b2d      	ldr	r3, [pc, #180]	@ (8004c90 <UART_SetConfig+0xac0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004be6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c90 <UART_SetConfig+0xac0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	4a28      	ldr	r2, [pc, #160]	@ (8004c94 <UART_SetConfig+0xac4>)
 8004bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bf8:	e00f      	b.n	8004c1a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004bfa:	4b26      	ldr	r3, [pc, #152]	@ (8004c94 <UART_SetConfig+0xac4>)
 8004bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bfe:	e00c      	b.n	8004c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c00:	4b25      	ldr	r3, [pc, #148]	@ (8004c98 <UART_SetConfig+0xac8>)
 8004c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c04:	e009      	b.n	8004c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c0c:	e005      	b.n	8004c1a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c18:	bf00      	nop
    }

    if (pclk != 0U)
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d021      	beq.n	8004c64 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <UART_SetConfig+0xacc>)
 8004c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	441a      	add	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	2b0f      	cmp	r3, #15
 8004c48:	d909      	bls.n	8004c5e <UART_SetConfig+0xa8e>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c50:	d205      	bcs.n	8004c5e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e002      	b.n	8004c64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2200      	movs	r2, #0
 8004c78:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c80:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3748      	adds	r7, #72	@ 0x48
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	58024400 	.word	0x58024400
 8004c94:	03d09000 	.word	0x03d09000
 8004c98:	003d0900 	.word	0x003d0900
 8004c9c:	08005370 	.word	0x08005370

08004ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d9e:	d10a      	bne.n	8004db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b098      	sub	sp, #96	@ 0x60
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df4:	f7fb ff4c 	bl	8000c90 <HAL_GetTick>
 8004df8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d12f      	bne.n	8004e68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f88e 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d022      	beq.n	8004e68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e6      	bne.n	8004e22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e063      	b.n	8004f30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d149      	bne.n	8004f0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f857 	bl	8004f38 <UART_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d03c      	beq.n	8004f0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e6      	bne.n	8004e90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee2:	61fa      	str	r2, [r7, #28]
 8004ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	69b9      	ldr	r1, [r7, #24]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e012      	b.n	8004f30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3758      	adds	r7, #88	@ 0x58
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	e04f      	b.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d04b      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f52:	f7fb fe9d 	bl	8000c90 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d302      	bcc.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e04e      	b.n	800500a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d037      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b80      	cmp	r3, #128	@ 0x80
 8004f7e:	d034      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b40      	cmp	r3, #64	@ 0x40
 8004f84:	d031      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d110      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f839 	bl	8005014 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e029      	b.n	800500a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc4:	d111      	bne.n	8004fea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f81f 	bl	8005014 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e00f      	b.n	800500a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	429a      	cmp	r2, r3
 8005006:	d0a0      	beq.n	8004f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b095      	sub	sp, #84	@ 0x54
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503a:	643b      	str	r3, [r7, #64]	@ 0x40
 800503c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005040:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e6      	bne.n	800501c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	61fb      	str	r3, [r7, #28]
   return(result);
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	4b1e      	ldr	r3, [pc, #120]	@ (80050dc <UART_EndRxTransfer+0xc8>)
 8005062:	4013      	ands	r3, r2
 8005064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800506e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e5      	bne.n	800504e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d118      	bne.n	80050bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60bb      	str	r3, [r7, #8]
   return(result);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0310 	bic.w	r3, r3, #16
 800509e:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e6      	bne.n	800508a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050d0:	bf00      	nop
 80050d2:	3754      	adds	r7, #84	@ 0x54
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	effffffe 	.word	0xeffffffe

080050e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e027      	b.n	8005146 <HAL_UARTEx_DisableFifoMode+0x66>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2224      	movs	r2, #36	@ 0x24
 8005102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0201 	bic.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005124:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005166:	2302      	movs	r3, #2
 8005168:	e02d      	b.n	80051c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2224      	movs	r2, #36	@ 0x24
 8005176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0201 	bic.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f850 	bl	800524c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e02d      	b.n	8005242 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2224      	movs	r2, #36	@ 0x24
 80051f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0201 	bic.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f812 	bl	800524c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005258:	2b00      	cmp	r3, #0
 800525a:	d108      	bne.n	800526e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800526c:	e031      	b.n	80052d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800526e:	2310      	movs	r3, #16
 8005270:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005272:	2310      	movs	r3, #16
 8005274:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	0e5b      	lsrs	r3, r3, #25
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	0f5b      	lsrs	r3, r3, #29
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005296:	7bbb      	ldrb	r3, [r7, #14]
 8005298:	7b3a      	ldrb	r2, [r7, #12]
 800529a:	4911      	ldr	r1, [pc, #68]	@ (80052e0 <UARTEx_SetNbDataToProcess+0x94>)
 800529c:	5c8a      	ldrb	r2, [r1, r2]
 800529e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052a2:	7b3a      	ldrb	r2, [r7, #12]
 80052a4:	490f      	ldr	r1, [pc, #60]	@ (80052e4 <UARTEx_SetNbDataToProcess+0x98>)
 80052a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	7b7a      	ldrb	r2, [r7, #13]
 80052b8:	4909      	ldr	r1, [pc, #36]	@ (80052e0 <UARTEx_SetNbDataToProcess+0x94>)
 80052ba:	5c8a      	ldrb	r2, [r1, r2]
 80052bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052c0:	7b7a      	ldrb	r2, [r7, #13]
 80052c2:	4908      	ldr	r1, [pc, #32]	@ (80052e4 <UARTEx_SetNbDataToProcess+0x98>)
 80052c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	08005388 	.word	0x08005388
 80052e4:	08005390 	.word	0x08005390

080052e8 <memset>:
 80052e8:	4402      	add	r2, r0
 80052ea:	4603      	mov	r3, r0
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d100      	bne.n	80052f2 <memset+0xa>
 80052f0:	4770      	bx	lr
 80052f2:	f803 1b01 	strb.w	r1, [r3], #1
 80052f6:	e7f9      	b.n	80052ec <memset+0x4>

080052f8 <__libc_init_array>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005330 <__libc_init_array+0x38>)
 80052fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005334 <__libc_init_array+0x3c>)
 80052fe:	1b64      	subs	r4, r4, r5
 8005300:	10a4      	asrs	r4, r4, #2
 8005302:	2600      	movs	r6, #0
 8005304:	42a6      	cmp	r6, r4
 8005306:	d109      	bne.n	800531c <__libc_init_array+0x24>
 8005308:	4d0b      	ldr	r5, [pc, #44]	@ (8005338 <__libc_init_array+0x40>)
 800530a:	4c0c      	ldr	r4, [pc, #48]	@ (800533c <__libc_init_array+0x44>)
 800530c:	f000 f818 	bl	8005340 <_init>
 8005310:	1b64      	subs	r4, r4, r5
 8005312:	10a4      	asrs	r4, r4, #2
 8005314:	2600      	movs	r6, #0
 8005316:	42a6      	cmp	r6, r4
 8005318:	d105      	bne.n	8005326 <__libc_init_array+0x2e>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005320:	4798      	blx	r3
 8005322:	3601      	adds	r6, #1
 8005324:	e7ee      	b.n	8005304 <__libc_init_array+0xc>
 8005326:	f855 3b04 	ldr.w	r3, [r5], #4
 800532a:	4798      	blx	r3
 800532c:	3601      	adds	r6, #1
 800532e:	e7f2      	b.n	8005316 <__libc_init_array+0x1e>
 8005330:	080053a0 	.word	0x080053a0
 8005334:	080053a0 	.word	0x080053a0
 8005338:	080053a0 	.word	0x080053a0
 800533c:	080053a4 	.word	0x080053a4

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
