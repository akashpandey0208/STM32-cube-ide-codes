
UART002_without_sprintf_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000512c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080053c4  080053c4  000063c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005408  08005408  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005408  08005408  00006408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005410  08005410  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005410  08005410  00006410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005414  08005414  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08005418  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08005428  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08005428  000070c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f99b  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e92  00000000  00000000  000169d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00018870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087e  00000000  00000000  00019380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e1d6  00000000  00000000  00019bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0d2  00000000  00000000  00057dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00193d22  00000000  00000000  00066ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fabc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d50  00000000  00000000  001fac0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001fd95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080053ac 	.word	0x080053ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080053ac 	.word	0x080053ac

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b96a 	b.w	80005d4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	460c      	mov	r4, r1
 8000320:	2b00      	cmp	r3, #0
 8000322:	d14e      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000324:	4694      	mov	ip, r2
 8000326:	458c      	cmp	ip, r1
 8000328:	4686      	mov	lr, r0
 800032a:	fab2 f282 	clz	r2, r2
 800032e:	d962      	bls.n	80003f6 <__udivmoddi4+0xde>
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0320 	rsb	r3, r2, #32
 8000336:	4091      	lsls	r1, r2
 8000338:	fa20 f303 	lsr.w	r3, r0, r3
 800033c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000340:	4319      	orrs	r1, r3
 8000342:	fa00 fe02 	lsl.w	lr, r0, r2
 8000346:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034a:	fa1f f68c 	uxth.w	r6, ip
 800034e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	fb07 1114 	mls	r1, r7, r4, r1
 800035a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035e:	fb04 f106 	mul.w	r1, r4, r6
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f104 30ff 	add.w	r0, r4, #4294967295
 800036e:	f080 8112 	bcs.w	8000596 <__udivmoddi4+0x27e>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 810f 	bls.w	8000596 <__udivmoddi4+0x27e>
 8000378:	3c02      	subs	r4, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb1 f0f7 	udiv	r0, r1, r7
 8000386:	fb07 1110 	mls	r1, r7, r0, r1
 800038a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038e:	fb00 f606 	mul.w	r6, r0, r6
 8000392:	429e      	cmp	r6, r3
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x94>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 31ff 	add.w	r1, r0, #4294967295
 800039e:	f080 80fc 	bcs.w	800059a <__udivmoddi4+0x282>
 80003a2:	429e      	cmp	r6, r3
 80003a4:	f240 80f9 	bls.w	800059a <__udivmoddi4+0x282>
 80003a8:	4463      	add	r3, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	1b9b      	subs	r3, r3, r6
 80003ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11d      	cbz	r5, 80003be <__udivmoddi4+0xa6>
 80003b6:	40d3      	lsrs	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	e9c5 3200 	strd	r3, r2, [r5]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d905      	bls.n	80003d2 <__udivmoddi4+0xba>
 80003c6:	b10d      	cbz	r5, 80003cc <__udivmoddi4+0xb4>
 80003c8:	e9c5 0100 	strd	r0, r1, [r5]
 80003cc:	2100      	movs	r1, #0
 80003ce:	4608      	mov	r0, r1
 80003d0:	e7f5      	b.n	80003be <__udivmoddi4+0xa6>
 80003d2:	fab3 f183 	clz	r1, r3
 80003d6:	2900      	cmp	r1, #0
 80003d8:	d146      	bne.n	8000468 <__udivmoddi4+0x150>
 80003da:	42a3      	cmp	r3, r4
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xcc>
 80003de:	4290      	cmp	r0, r2
 80003e0:	f0c0 80f0 	bcc.w	80005c4 <__udivmoddi4+0x2ac>
 80003e4:	1a86      	subs	r6, r0, r2
 80003e6:	eb64 0303 	sbc.w	r3, r4, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	2d00      	cmp	r5, #0
 80003ee:	d0e6      	beq.n	80003be <__udivmoddi4+0xa6>
 80003f0:	e9c5 6300 	strd	r6, r3, [r5]
 80003f4:	e7e3      	b.n	80003be <__udivmoddi4+0xa6>
 80003f6:	2a00      	cmp	r2, #0
 80003f8:	f040 8090 	bne.w	800051c <__udivmoddi4+0x204>
 80003fc:	eba1 040c 	sub.w	r4, r1, ip
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa1f f78c 	uxth.w	r7, ip
 8000408:	2101      	movs	r1, #1
 800040a:	fbb4 f6f8 	udiv	r6, r4, r8
 800040e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000412:	fb08 4416 	mls	r4, r8, r6, r4
 8000416:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041a:	fb07 f006 	mul.w	r0, r7, r6
 800041e:	4298      	cmp	r0, r3
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x11c>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 34ff 	add.w	r4, r6, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x11a>
 800042c:	4298      	cmp	r0, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2b4>
 8000432:	4626      	mov	r6, r4
 8000434:	1a1c      	subs	r4, r3, r0
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb4 f0f8 	udiv	r0, r4, r8
 800043e:	fb08 4410 	mls	r4, r8, r0, r4
 8000442:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000446:	fb00 f707 	mul.w	r7, r0, r7
 800044a:	429f      	cmp	r7, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x148>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 34ff 	add.w	r4, r0, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x146>
 8000458:	429f      	cmp	r7, r3
 800045a:	f200 80b0 	bhi.w	80005be <__udivmoddi4+0x2a6>
 800045e:	4620      	mov	r0, r4
 8000460:	1bdb      	subs	r3, r3, r7
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	e7a5      	b.n	80003b4 <__udivmoddi4+0x9c>
 8000468:	f1c1 0620 	rsb	r6, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 f706 	lsr.w	r7, r2, r6
 8000472:	431f      	orrs	r7, r3
 8000474:	fa20 fc06 	lsr.w	ip, r0, r6
 8000478:	fa04 f301 	lsl.w	r3, r4, r1
 800047c:	ea43 030c 	orr.w	r3, r3, ip
 8000480:	40f4      	lsrs	r4, r6
 8000482:	fa00 f801 	lsl.w	r8, r0, r1
 8000486:	0c38      	lsrs	r0, r7, #16
 8000488:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800048c:	fbb4 fef0 	udiv	lr, r4, r0
 8000490:	fa1f fc87 	uxth.w	ip, r7
 8000494:	fb00 441e 	mls	r4, r0, lr, r4
 8000498:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049c:	fb0e f90c 	mul.w	r9, lr, ip
 80004a0:	45a1      	cmp	r9, r4
 80004a2:	fa02 f201 	lsl.w	r2, r2, r1
 80004a6:	d90a      	bls.n	80004be <__udivmoddi4+0x1a6>
 80004a8:	193c      	adds	r4, r7, r4
 80004aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004ae:	f080 8084 	bcs.w	80005ba <__udivmoddi4+0x2a2>
 80004b2:	45a1      	cmp	r9, r4
 80004b4:	f240 8081 	bls.w	80005ba <__udivmoddi4+0x2a2>
 80004b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004bc:	443c      	add	r4, r7
 80004be:	eba4 0409 	sub.w	r4, r4, r9
 80004c2:	fa1f f983 	uxth.w	r9, r3
 80004c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ca:	fb00 4413 	mls	r4, r0, r3, r4
 80004ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x1d2>
 80004da:	193c      	adds	r4, r7, r4
 80004dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e0:	d267      	bcs.n	80005b2 <__udivmoddi4+0x29a>
 80004e2:	45a4      	cmp	ip, r4
 80004e4:	d965      	bls.n	80005b2 <__udivmoddi4+0x29a>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ee:	fba0 9302 	umull	r9, r3, r0, r2
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	429c      	cmp	r4, r3
 80004f8:	46ce      	mov	lr, r9
 80004fa:	469c      	mov	ip, r3
 80004fc:	d351      	bcc.n	80005a2 <__udivmoddi4+0x28a>
 80004fe:	d04e      	beq.n	800059e <__udivmoddi4+0x286>
 8000500:	b155      	cbz	r5, 8000518 <__udivmoddi4+0x200>
 8000502:	ebb8 030e 	subs.w	r3, r8, lr
 8000506:	eb64 040c 	sbc.w	r4, r4, ip
 800050a:	fa04 f606 	lsl.w	r6, r4, r6
 800050e:	40cb      	lsrs	r3, r1
 8000510:	431e      	orrs	r6, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	e9c5 6400 	strd	r6, r4, [r5]
 8000518:	2100      	movs	r1, #0
 800051a:	e750      	b.n	80003be <__udivmoddi4+0xa6>
 800051c:	f1c2 0320 	rsb	r3, r2, #32
 8000520:	fa20 f103 	lsr.w	r1, r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa24 f303 	lsr.w	r3, r4, r3
 800052c:	4094      	lsls	r4, r2
 800052e:	430c      	orrs	r4, r1
 8000530:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000534:	fa00 fe02 	lsl.w	lr, r0, r2
 8000538:	fa1f f78c 	uxth.w	r7, ip
 800053c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000540:	fb08 3110 	mls	r1, r8, r0, r3
 8000544:	0c23      	lsrs	r3, r4, #16
 8000546:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054a:	fb00 f107 	mul.w	r1, r0, r7
 800054e:	4299      	cmp	r1, r3
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x24c>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 36ff 	add.w	r6, r0, #4294967295
 800055a:	d22c      	bcs.n	80005b6 <__udivmoddi4+0x29e>
 800055c:	4299      	cmp	r1, r3
 800055e:	d92a      	bls.n	80005b6 <__udivmoddi4+0x29e>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1a5b      	subs	r3, r3, r1
 8000566:	b2a4      	uxth	r4, r4
 8000568:	fbb3 f1f8 	udiv	r1, r3, r8
 800056c:	fb08 3311 	mls	r3, r8, r1, r3
 8000570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000574:	fb01 f307 	mul.w	r3, r1, r7
 8000578:	42a3      	cmp	r3, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x276>
 800057c:	eb1c 0404 	adds.w	r4, ip, r4
 8000580:	f101 36ff 	add.w	r6, r1, #4294967295
 8000584:	d213      	bcs.n	80005ae <__udivmoddi4+0x296>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d911      	bls.n	80005ae <__udivmoddi4+0x296>
 800058a:	3902      	subs	r1, #2
 800058c:	4464      	add	r4, ip
 800058e:	1ae4      	subs	r4, r4, r3
 8000590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000594:	e739      	b.n	800040a <__udivmoddi4+0xf2>
 8000596:	4604      	mov	r4, r0
 8000598:	e6f0      	b.n	800037c <__udivmoddi4+0x64>
 800059a:	4608      	mov	r0, r1
 800059c:	e706      	b.n	80003ac <__udivmoddi4+0x94>
 800059e:	45c8      	cmp	r8, r9
 80005a0:	d2ae      	bcs.n	8000500 <__udivmoddi4+0x1e8>
 80005a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80005a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80005aa:	3801      	subs	r0, #1
 80005ac:	e7a8      	b.n	8000500 <__udivmoddi4+0x1e8>
 80005ae:	4631      	mov	r1, r6
 80005b0:	e7ed      	b.n	800058e <__udivmoddi4+0x276>
 80005b2:	4603      	mov	r3, r0
 80005b4:	e799      	b.n	80004ea <__udivmoddi4+0x1d2>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e7d4      	b.n	8000564 <__udivmoddi4+0x24c>
 80005ba:	46d6      	mov	lr, sl
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1a6>
 80005be:	4463      	add	r3, ip
 80005c0:	3802      	subs	r0, #2
 80005c2:	e74d      	b.n	8000460 <__udivmoddi4+0x148>
 80005c4:	4606      	mov	r6, r0
 80005c6:	4623      	mov	r3, r4
 80005c8:	4608      	mov	r0, r1
 80005ca:	e70f      	b.n	80003ec <__udivmoddi4+0xd4>
 80005cc:	3e02      	subs	r6, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	e730      	b.n	8000434 <__udivmoddi4+0x11c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3d      	ldr	r3, [pc, #244]	@ (80006d4 <SystemInit+0xfc>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e2:	4a3c      	ldr	r2, [pc, #240]	@ (80006d4 <SystemInit+0xfc>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b39      	ldr	r3, [pc, #228]	@ (80006d4 <SystemInit+0xfc>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a38      	ldr	r2, [pc, #224]	@ (80006d4 <SystemInit+0xfc>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b37      	ldr	r3, [pc, #220]	@ (80006d8 <SystemInit+0x100>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b34      	ldr	r3, [pc, #208]	@ (80006d8 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a32      	ldr	r2, [pc, #200]	@ (80006d8 <SystemInit+0x100>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <SystemInit+0x104>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a30      	ldr	r2, [pc, #192]	@ (80006dc <SystemInit+0x104>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b2e      	ldr	r3, [pc, #184]	@ (80006dc <SystemInit+0x104>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2d      	ldr	r3, [pc, #180]	@ (80006dc <SystemInit+0x104>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492c      	ldr	r1, [pc, #176]	@ (80006dc <SystemInit+0x104>)
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <SystemInit+0x108>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <SystemInit+0x100>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a24      	ldr	r2, [pc, #144]	@ (80006d8 <SystemInit+0x100>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <SystemInit+0x104>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <SystemInit+0x104>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <SystemInit+0x104>)
 8000662:	4a20      	ldr	r2, [pc, #128]	@ (80006e4 <SystemInit+0x10c>)
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <SystemInit+0x104>)
 8000668:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <SystemInit+0x110>)
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <SystemInit+0x104>)
 800066e:	4a1f      	ldr	r2, [pc, #124]	@ (80006ec <SystemInit+0x114>)
 8000670:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <SystemInit+0x104>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <SystemInit+0x104>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <SystemInit+0x114>)
 800067c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <SystemInit+0x104>)
 8000686:	4a19      	ldr	r2, [pc, #100]	@ (80006ec <SystemInit+0x114>)
 8000688:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <SystemInit+0x104>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a11      	ldr	r2, [pc, #68]	@ (80006dc <SystemInit+0x104>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <SystemInit+0x104>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <SystemInit+0x118>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <SystemInit+0x118>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <SystemInit+0x11c>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <SystemInit+0x120>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <SystemInit+0x124>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <SystemInit+0x128>)
 80006c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <main+0xa4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 f993 	bl	8000a58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa75 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f83b 	bl	80007b0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <main+0xa4>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <main+0xa4>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <main+0xa4>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fdb7 	bl	80012cc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fdcd 	bl	8001300 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <main+0xa4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 f965 	bl	8000a58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f8c3 	bl	8000918 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000792:	f000 f875 	bl	8000880 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TransmitData(7671);
 8000796:	f641 50f7 	movw	r0, #7671	@ 0x1df7
 800079a:	f000 f8d7 	bl	800094c <TransmitData>
	  TransmitString("Hello!");
 800079e:	4803      	ldr	r0, [pc, #12]	@ (80007ac <main+0xa8>)
 80007a0:	f000 f93c 	bl	8000a1c <TransmitString>
	  TransmitData(7671);
 80007a4:	bf00      	nop
 80007a6:	e7f6      	b.n	8000796 <main+0x92>
 80007a8:	58024400 	.word	0x58024400
 80007ac:	080053c4 	.word	0x080053c4

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09c      	sub	sp, #112	@ 0x70
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ba:	224c      	movs	r2, #76	@ 0x4c
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 fdc8 	bl	8005354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2220      	movs	r2, #32
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fdc2 	bl	8005354 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007d0:	2004      	movs	r0, #4
 80007d2:	f000 fda9 	bl	8001328 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <SystemClock_Config+0xc8>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007de:	4a26      	ldr	r2, [pc, #152]	@ (8000878 <SystemClock_Config+0xc8>)
 80007e0:	f023 0301 	bic.w	r3, r3, #1
 80007e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <SystemClock_Config+0xc8>)
 80007e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	4b22      	ldr	r3, [pc, #136]	@ (800087c <SystemClock_Config+0xcc>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a21      	ldr	r2, [pc, #132]	@ (800087c <SystemClock_Config+0xcc>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <SystemClock_Config+0xcc>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000808:	bf00      	nop
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <SystemClock_Config+0xcc>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000816:	d1f8      	bne.n	800080a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800081c:	2301      	movs	r3, #1
 800081e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2340      	movs	r3, #64	@ 0x40
 8000822:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fdd5 	bl	80013dc <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000838:	f000 f90e 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	233f      	movs	r3, #63	@ 0x3f
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fa15 	bl	8001c90 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800086c:	f000 f8f4 	bl	8000a58 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3770      	adds	r7, #112	@ 0x70
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	58000400 	.word	0x58000400
 800087c:	58024800 	.word	0x58024800

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 8000886:	4a23      	ldr	r2, [pc, #140]	@ (8000914 <MX_USART1_UART_Init+0x94>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c8:	4811      	ldr	r0, [pc, #68]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008ca:	f003 fbd9 	bl	8004080 <HAL_UART_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f8c0 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008dc:	f004 fc6f 	bl	80051be <HAL_UARTEx_SetTxFifoThreshold>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e6:	f000 f8b7 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4808      	ldr	r0, [pc, #32]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008ee:	f004 fca4 	bl	800523a <HAL_UARTEx_SetRxFifoThreshold>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f8:	f000 f8ae 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_USART1_UART_Init+0x90>)
 80008fe:	f004 fc25 	bl	800514c <HAL_UARTEx_DisableFifoMode>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000908:	f000 f8a6 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2400002c 	.word	0x2400002c
 8000914:	40011000 	.word	0x40011000

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x30>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <MX_GPIO_Init+0x30>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_GPIO_Init+0x30>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	58024400 	.word	0x58024400

0800094c <TransmitData>:

/* USER CODE BEGIN 4 */
void TransmitData(uint32_t num)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    uint8_t numarray[10];
    uint8_t index = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	75fb      	strb	r3, [r7, #23]

    // Convert number to string (reverse order) and terminate it
    do
    {
        numarray[index++] = (num % 10) + '0';
 8000958:	6879      	ldr	r1, [r7, #4]
 800095a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <TransmitData+0xc8>)
 800095c:	fba3 2301 	umull	r2, r3, r3, r1
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	1aca      	subs	r2, r1, r3
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	1c59      	adds	r1, r3, #1
 8000972:	75f9      	strb	r1, [r7, #23]
 8000974:	3230      	adds	r2, #48	@ 0x30
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	3318      	adds	r3, #24
 800097a:	443b      	add	r3, r7
 800097c:	f803 2c10 	strb.w	r2, [r3, #-16]
        num /= 10;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a24      	ldr	r2, [pc, #144]	@ (8000a14 <TransmitData+0xc8>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	607b      	str	r3, [r7, #4]
    } while (num > 0);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1e2      	bne.n	8000958 <TransmitData+0xc>

    // Reverse string in place
    for (uint8_t i = 0; i < index / 2; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	75bb      	strb	r3, [r7, #22]
 8000996:	e01e      	b.n	80009d6 <TransmitData+0x8a>
    {
        uint8_t temp = numarray[i];
 8000998:	7dbb      	ldrb	r3, [r7, #22]
 800099a:	3318      	adds	r3, #24
 800099c:	443b      	add	r3, r7
 800099e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80009a2:	757b      	strb	r3, [r7, #21]
        numarray[i] = numarray[index - 1 - i];
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	1e5a      	subs	r2, r3, #1
 80009a8:	7dbb      	ldrb	r3, [r7, #22]
 80009aa:	1ad2      	subs	r2, r2, r3
 80009ac:	7dbb      	ldrb	r3, [r7, #22]
 80009ae:	3218      	adds	r2, #24
 80009b0:	443a      	add	r2, r7
 80009b2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80009b6:	3318      	adds	r3, #24
 80009b8:	443b      	add	r3, r7
 80009ba:	f803 2c10 	strb.w	r2, [r3, #-16]
        numarray[index - 1 - i] = temp;
 80009be:	7dfb      	ldrb	r3, [r7, #23]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	7dbb      	ldrb	r3, [r7, #22]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	3318      	adds	r3, #24
 80009c8:	443b      	add	r3, r7
 80009ca:	7d7a      	ldrb	r2, [r7, #21]
 80009cc:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (uint8_t i = 0; i < index / 2; i++)
 80009d0:	7dbb      	ldrb	r3, [r7, #22]
 80009d2:	3301      	adds	r3, #1
 80009d4:	75bb      	strb	r3, [r7, #22]
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	7dba      	ldrb	r2, [r7, #22]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3da      	bcc.n	8000998 <TransmitData+0x4c>
    }

    // Add newline at the end
    numarray[index++] = '\n';
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	1c5a      	adds	r2, r3, #1
 80009e6:	75fa      	strb	r2, [r7, #23]
 80009e8:	3318      	adds	r3, #24
 80009ea:	443b      	add	r3, r7
 80009ec:	220a      	movs	r2, #10
 80009ee:	f803 2c10 	strb.w	r2, [r3, #-16]

    // Transmit the number
    HAL_UART_Transmit(&huart1, numarray, index, 1000);
 80009f2:	7dfb      	ldrb	r3, [r7, #23]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	f107 0108 	add.w	r1, r7, #8
 80009fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <TransmitData+0xcc>)
 8000a00:	f003 fb8e 	bl	8004120 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a08:	f000 f99c 	bl	8000d44 <HAL_Delay>
}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	cccccccd 	.word	0xcccccccd
 8000a18:	2400002c 	.word	0x2400002c

08000a1c <TransmitString>:

void TransmitString(char *str)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fc57 	bl	80002d8 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	4806      	ldr	r0, [pc, #24]	@ (8000a50 <TransmitString+0x34>)
 8000a36:	f003 fb73 	bl	8004120 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4904      	ldr	r1, [pc, #16]	@ (8000a54 <TransmitString+0x38>)
 8000a42:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <TransmitString+0x34>)
 8000a44:	f003 fb6c 	bl	8004120 <HAL_UART_Transmit>

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2400002c 	.word	0x2400002c
 8000a54:	080053cc 	.word	0x080053cc

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a70:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	58024400 	.word	0x58024400

08000a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0bc      	sub	sp, #240	@ 0xf0
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	22c8      	movs	r2, #200	@ 0xc8
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fc4b 	bl	8005354 <memset>
  if(huart->Instance==USART1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a27      	ldr	r2, [pc, #156]	@ (8000b60 <HAL_UART_MspInit+0xc8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d146      	bne.n	8000b56 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ac8:	f04f 0201 	mov.w	r2, #1
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fc62 	bl	80023a8 <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000aea:	f7ff ffb5 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aee:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0xcc>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b44:	2307      	movs	r3, #7
 8000b46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_UART_MspInit+0xd0>)
 8000b52:	f000 fa0b 	bl	8000f6c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	37f0      	adds	r7, #240	@ 0xf0
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40011000 	.word	0x40011000
 8000b64:	58024400 	.word	0x58024400
 8000b68:	58020000 	.word	0x58020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f89f 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff fd02 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f004 fbb3 	bl	8005364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fd81 	bl	8000704 <main>
  bx  lr
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c0c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c10:	08005418 	.word	0x08005418
  ldr r2, =_sbss
 8000c14:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c18:	240000c4 	.word	0x240000c4

08000c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC3_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 f96e 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c2c:	f001 f9e6 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <HAL_Init+0x68>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	4913      	ldr	r1, [pc, #76]	@ (8000c8c <HAL_Init+0x6c>)
 8000c3e:	5ccb      	ldrb	r3, [r1, r3]
 8000c40:	f003 031f 	and.w	r3, r3, #31
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
 8000c48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <HAL_Init+0x68>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <HAL_Init+0x6c>)
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	f003 031f 	and.w	r3, r3, #31
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c60:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <HAL_Init+0x70>)
 8000c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c64:	4a0b      	ldr	r2, [pc, #44]	@ (8000c94 <HAL_Init+0x74>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f814 	bl	8000c98 <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e002      	b.n	8000c80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fef3 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	080053d0 	.word	0x080053d0
 8000c90:	24000004 	.word	0x24000004
 8000c94:	24000000 	.word	0x24000000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ca0:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_InitTick+0x60>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e021      	b.n	8000cf0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <HAL_InitTick+0x64>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_InitTick+0x60>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f945 	bl	8000f52 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f91d 	bl	8000f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <HAL_InitTick+0x68>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2400000c 	.word	0x2400000c
 8000cfc:	24000000 	.word	0x24000000
 8000d00:	24000008 	.word	0x24000008

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2400000c 	.word	0x2400000c
 8000d28:	240000c0 	.word	0x240000c0

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	240000c0 	.word	0x240000c0

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2400000c 	.word	0x2400000c

08000d8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetREVID+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	0c1b      	lsrs	r3, r3, #16
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	5c001000 	.word	0x5c001000

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x40>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	05fa0000 	.word	0x05fa0000

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	@ (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e26:	0112      	lsls	r2, r2, #4
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	@ (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0112      	lsls	r2, r2, #4
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	@ 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	bf28      	it	cs
 8000e7a:	2304      	movcs	r3, #4
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	@ 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff5e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff90 	bl	8000e5c <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5f 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffb2 	bl	8000ec4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f7a:	4b89      	ldr	r3, [pc, #548]	@ (80011a0 <HAL_GPIO_Init+0x234>)
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f7e:	e194      	b.n	80012aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8186 	beq.w	80012a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x44>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 0201 	and.w	r2, r3, #1
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	69b9      	ldr	r1, [r7, #24]
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0203 	and.w	r2, r3, #3
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80e0 	beq.w	80012a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e4:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <HAL_GPIO_Init+0x238>)
 80010e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010ea:	4a2e      	ldr	r2, [pc, #184]	@ (80011a4 <HAL_GPIO_Init+0x238>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010f4:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <HAL_GPIO_Init+0x238>)
 80010f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a29      	ldr	r2, [pc, #164]	@ (80011a8 <HAL_GPIO_Init+0x23c>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a20      	ldr	r2, [pc, #128]	@ (80011ac <HAL_GPIO_Init+0x240>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d052      	beq.n	80011d4 <HAL_GPIO_Init+0x268>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <HAL_GPIO_Init+0x244>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d031      	beq.n	800119a <HAL_GPIO_Init+0x22e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1e      	ldr	r2, [pc, #120]	@ (80011b4 <HAL_GPIO_Init+0x248>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x22a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_GPIO_Init+0x24c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x226>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <HAL_GPIO_Init+0x250>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x222>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <HAL_GPIO_Init+0x254>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x21e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1a      	ldr	r2, [pc, #104]	@ (80011c4 <HAL_GPIO_Init+0x258>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x21a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <HAL_GPIO_Init+0x25c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x216>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a18      	ldr	r2, [pc, #96]	@ (80011cc <HAL_GPIO_Init+0x260>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x212>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <HAL_GPIO_Init+0x264>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x20e>
 8001176:	2309      	movs	r3, #9
 8001178:	e02d      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800117a:	230a      	movs	r3, #10
 800117c:	e02b      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800117e:	2308      	movs	r3, #8
 8001180:	e029      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001182:	2307      	movs	r3, #7
 8001184:	e027      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001186:	2306      	movs	r3, #6
 8001188:	e025      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800118a:	2305      	movs	r3, #5
 800118c:	e023      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800118e:	2304      	movs	r3, #4
 8001190:	e021      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001192:	2303      	movs	r3, #3
 8001194:	e01f      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 8001196:	2302      	movs	r3, #2
 8001198:	e01d      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800119a:	2301      	movs	r3, #1
 800119c:	e01b      	b.n	80011d6 <HAL_GPIO_Init+0x26a>
 800119e:	bf00      	nop
 80011a0:	58000080 	.word	0x58000080
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58000400 	.word	0x58000400
 80011ac:	58020000 	.word	0x58020000
 80011b0:	58020400 	.word	0x58020400
 80011b4:	58020800 	.word	0x58020800
 80011b8:	58020c00 	.word	0x58020c00
 80011bc:	58021000 	.word	0x58021000
 80011c0:	58021400 	.word	0x58021400
 80011c4:	58021800 	.word	0x58021800
 80011c8:	58021c00 	.word	0x58021c00
 80011cc:	58022000 	.word	0x58022000
 80011d0:	58022400 	.word	0x58022400
 80011d4:	2300      	movs	r3, #0
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e6:	4938      	ldr	r1, [pc, #224]	@ (80012c8 <HAL_GPIO_Init+0x35c>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800121a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f ae63 	bne.w	8000f80 <HAL_GPIO_Init+0x14>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3724      	adds	r7, #36	@ 0x24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	58000400 	.word	0x58000400

080012cc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012d4:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_HSEM_FastTake+0x2c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3320      	adds	r3, #32
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_HSEM_FastTake+0x30>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e000      	b.n	80012ea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	58026400 	.word	0x58026400
 80012fc:	80000300 	.word	0x80000300

08001300 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800130a:	4906      	ldr	r1, [pc, #24]	@ (8001324 <HAL_HSEM_Release+0x24>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	58026400 	.word	0x58026400

08001328 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	2b06      	cmp	r3, #6
 800133a:	d00a      	beq.n	8001352 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800133c:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d001      	beq.n	800134e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e040      	b.n	80013d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e03e      	b.n	80013d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800135a:	491f      	ldr	r1, [pc, #124]	@ (80013d8 <HAL_PWREx_ConfigSupply+0xb0>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001362:	f7ff fce3 	bl	8000d2c <HAL_GetTick>
 8001366:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001368:	e009      	b.n	800137e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800136a:	f7ff fcdf 	bl	8000d2c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001378:	d901      	bls.n	800137e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e028      	b.n	80013d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800138a:	d1ee      	bne.n	800136a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b1e      	cmp	r3, #30
 8001390:	d008      	beq.n	80013a4 <HAL_PWREx_ConfigSupply+0x7c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b2e      	cmp	r3, #46	@ 0x2e
 8001396:	d005      	beq.n	80013a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b1d      	cmp	r3, #29
 800139c:	d002      	beq.n	80013a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b2d      	cmp	r3, #45	@ 0x2d
 80013a2:	d114      	bne.n	80013ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013a4:	f7ff fcc2 	bl	8000d2c <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013aa:	e009      	b.n	80013c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013ac:	f7ff fcbe 	bl	8000d2c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013ba:	d901      	bls.n	80013c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e007      	b.n	80013d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013cc:	d1ee      	bne.n	80013ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	58024800 	.word	0x58024800

080013dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	@ 0x30
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f000 bc48 	b.w	8001c80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 8088 	beq.w	800150e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013fe:	4b99      	ldr	r3, [pc, #612]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001408:	4b96      	ldr	r3, [pc, #600]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800140e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001410:	2b10      	cmp	r3, #16
 8001412:	d007      	beq.n	8001424 <HAL_RCC_OscConfig+0x48>
 8001414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001416:	2b18      	cmp	r3, #24
 8001418:	d111      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
 800141a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b8f      	ldr	r3, [pc, #572]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d06d      	beq.n	800150c <HAL_RCC_OscConfig+0x130>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d169      	bne.n	800150c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	f000 bc21 	b.w	8001c80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x7a>
 8001448:	4b86      	ldr	r3, [pc, #536]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a85      	ldr	r2, [pc, #532]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e02e      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x9c>
 800145e:	4b81      	ldr	r3, [pc, #516]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a80      	ldr	r2, [pc, #512]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b7e      	ldr	r3, [pc, #504]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a7d      	ldr	r2, [pc, #500]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0xc0>
 8001482:	4b78      	ldr	r3, [pc, #480]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a77      	ldr	r2, [pc, #476]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b75      	ldr	r3, [pc, #468]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a74      	ldr	r2, [pc, #464]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 800149c:	4b71      	ldr	r3, [pc, #452]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a70      	ldr	r2, [pc, #448]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc36 	bl	8000d2c <HAL_GetTick>
 80014c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fc32 	bl	8000d2c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e3d4      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014d6:	4b63      	ldr	r3, [pc, #396]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe8>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fc22 	bl	8000d2c <HAL_GetTick>
 80014e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fc1e 	bl	8000d2c <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e3c0      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014fe:	4b59      	ldr	r3, [pc, #356]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x110>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80ca 	beq.w	80016b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151c:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001524:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001526:	4b4f      	ldr	r3, [pc, #316]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <HAL_RCC_OscConfig+0x166>
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	2b18      	cmp	r3, #24
 8001536:	d156      	bne.n	80015e6 <HAL_RCC_OscConfig+0x20a>
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d151      	bne.n	80015e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001542:	4b48      	ldr	r3, [pc, #288]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x17e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e392      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800155a:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0219 	bic.w	r2, r3, #25
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	493f      	ldr	r1, [pc, #252]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fbde 	bl	8000d2c <HAL_GetTick>
 8001570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fbda 	bl	8000d2c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e37c      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001586:	4b37      	ldr	r3, [pc, #220]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	f7ff fbfb 	bl	8000d8c <HAL_GetREVID>
 8001596:	4603      	mov	r3, r0
 8001598:	f241 0203 	movw	r2, #4099	@ 0x1003
 800159c:	4293      	cmp	r3, r2
 800159e:	d817      	bhi.n	80015d0 <HAL_RCC_OscConfig+0x1f4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b40      	cmp	r3, #64	@ 0x40
 80015a6:	d108      	bne.n	80015ba <HAL_RCC_OscConfig+0x1de>
 80015a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80015b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b8:	e07a      	b.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	031b      	lsls	r3, r3, #12
 80015c8:	4926      	ldr	r1, [pc, #152]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ce:	e06f      	b.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	4921      	ldr	r1, [pc, #132]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	e064      	b.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d047      	beq.n	800167e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0219 	bic.w	r2, r3, #25
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	491a      	ldr	r1, [pc, #104]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fb94 	bl	8000d2c <HAL_GetTick>
 8001604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fb90 	bl	8000d2c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e332      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	f7ff fbb1 	bl	8000d8c <HAL_GetREVID>
 800162a:	4603      	mov	r3, r0
 800162c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001630:	4293      	cmp	r3, r2
 8001632:	d819      	bhi.n	8001668 <HAL_RCC_OscConfig+0x28c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b40      	cmp	r3, #64	@ 0x40
 800163a:	d108      	bne.n	800164e <HAL_RCC_OscConfig+0x272>
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001644:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164a:	6053      	str	r3, [r2, #4]
 800164c:	e030      	b.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	031b      	lsls	r3, r3, #12
 800165c:	4901      	ldr	r1, [pc, #4]	@ (8001664 <HAL_RCC_OscConfig+0x288>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
 8001662:	e025      	b.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
 8001664:	58024400 	.word	0x58024400
 8001668:	4b9a      	ldr	r3, [pc, #616]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	4997      	ldr	r1, [pc, #604]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b95      	ldr	r3, [pc, #596]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a94      	ldr	r2, [pc, #592]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fb4f 	bl	8000d2c <HAL_GetTick>
 800168e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fb4b 	bl	8000d2c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e2ed      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016a4:	4b8b      	ldr	r3, [pc, #556]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80a9 	beq.w	8001810 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016be:	4b85      	ldr	r3, [pc, #532]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016c8:	4b82      	ldr	r3, [pc, #520]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d007      	beq.n	80016e4 <HAL_RCC_OscConfig+0x308>
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2b18      	cmp	r3, #24
 80016d8:	d13a      	bne.n	8001750 <HAL_RCC_OscConfig+0x374>
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d135      	bne.n	8001750 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016e4:	4b7b      	ldr	r3, [pc, #492]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_OscConfig+0x320>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	2b80      	cmp	r3, #128	@ 0x80
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e2c1      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016fc:	f7ff fb46 	bl	8000d8c <HAL_GetREVID>
 8001700:	4603      	mov	r3, r0
 8001702:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001706:	4293      	cmp	r3, r2
 8001708:	d817      	bhi.n	800173a <HAL_RCC_OscConfig+0x35e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	2b20      	cmp	r3, #32
 8001710:	d108      	bne.n	8001724 <HAL_RCC_OscConfig+0x348>
 8001712:	4b70      	ldr	r3, [pc, #448]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800171a:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800171c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001720:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001722:	e075      	b.n	8001810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001724:	4b6b      	ldr	r3, [pc, #428]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	069b      	lsls	r3, r3, #26
 8001732:	4968      	ldr	r1, [pc, #416]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001738:	e06a      	b.n	8001810 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800173a:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	4962      	ldr	r1, [pc, #392]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800174a:	4313      	orrs	r3, r2
 800174c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800174e:	e05f      	b.n	8001810 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d042      	beq.n	80017de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001758:	4b5e      	ldr	r3, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a5d      	ldr	r2, [pc, #372]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800175e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fae2 	bl	8000d2c <HAL_GetTick>
 8001768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800176c:	f7ff fade 	bl	8000d2c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e280      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800177e:	4b55      	ldr	r3, [pc, #340]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800178a:	f7ff faff 	bl	8000d8c <HAL_GetREVID>
 800178e:	4603      	mov	r3, r0
 8001790:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001794:	4293      	cmp	r3, r2
 8001796:	d817      	bhi.n	80017c8 <HAL_RCC_OscConfig+0x3ec>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	2b20      	cmp	r3, #32
 800179e:	d108      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3d6>
 80017a0:	4b4c      	ldr	r3, [pc, #304]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80017a8:	4a4a      	ldr	r2, [pc, #296]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80017ae:	6053      	str	r3, [r2, #4]
 80017b0:	e02e      	b.n	8001810 <HAL_RCC_OscConfig+0x434>
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	069b      	lsls	r3, r3, #26
 80017c0:	4944      	ldr	r1, [pc, #272]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
 80017c6:	e023      	b.n	8001810 <HAL_RCC_OscConfig+0x434>
 80017c8:	4b42      	ldr	r3, [pc, #264]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	061b      	lsls	r3, r3, #24
 80017d6:	493f      	ldr	r1, [pc, #252]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	60cb      	str	r3, [r1, #12]
 80017dc:	e018      	b.n	8001810 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017de:	4b3d      	ldr	r3, [pc, #244]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a3c      	ldr	r2, [pc, #240]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fa9f 	bl	8000d2c <HAL_GetTick>
 80017ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017f2:	f7ff fa9b 	bl	8000d2c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e23d      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001804:	4b33      	ldr	r3, [pc, #204]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d036      	beq.n	800188a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d019      	beq.n	8001858 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001824:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001828:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fa7c 	bl	8000d2c <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fa78 	bl	8000d2c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e21a      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800184c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x45c>
 8001856:	e018      	b.n	800188a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800185c:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fa62 	bl	8000d2c <HAL_GetTick>
 8001868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fa5e 	bl	8000d2c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e200      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 8001880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b00      	cmp	r3, #0
 8001894:	d039      	beq.n	800190a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d01c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80018a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa3f 	bl	8000d2c <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b2:	f7ff fa3b 	bl	8000d2c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1dd      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_RCC_OscConfig+0x4f8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x4d6>
 80018d0:	e01b      	b.n	800190a <HAL_RCC_OscConfig+0x52e>
 80018d2:	bf00      	nop
 80018d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a9a      	ldr	r2, [pc, #616]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 80018de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fa22 	bl	8000d2c <HAL_GetTick>
 80018e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ec:	f7ff fa1e 	bl	8000d2c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1c0      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018fe:	4b92      	ldr	r3, [pc, #584]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8081 	beq.w	8001a1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001918:	4b8c      	ldr	r3, [pc, #560]	@ (8001b4c <HAL_RCC_OscConfig+0x770>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a8b      	ldr	r2, [pc, #556]	@ (8001b4c <HAL_RCC_OscConfig+0x770>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001922:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001924:	f7ff fa02 	bl	8000d2c <HAL_GetTick>
 8001928:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192c:	f7ff f9fe 	bl	8000d2c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	@ 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1a0      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800193e:	4b83      	ldr	r3, [pc, #524]	@ (8001b4c <HAL_RCC_OscConfig+0x770>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f0      	beq.n	800192c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x584>
 8001952:	4b7d      	ldr	r3, [pc, #500]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	4a7c      	ldr	r2, [pc, #496]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	@ 0x70
 800195e:	e02d      	b.n	80019bc <HAL_RCC_OscConfig+0x5e0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x5a6>
 8001968:	4b77      	ldr	r3, [pc, #476]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196c:	4a76      	ldr	r2, [pc, #472]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	6713      	str	r3, [r2, #112]	@ 0x70
 8001974:	4b74      	ldr	r3, [pc, #464]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001978:	4a73      	ldr	r2, [pc, #460]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 800197a:	f023 0304 	bic.w	r3, r3, #4
 800197e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x5e0>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5c8>
 800198a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	@ 0x70
 8001996:	4b6c      	ldr	r3, [pc, #432]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199a:	4a6b      	ldr	r2, [pc, #428]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a2:	e00b      	b.n	80019bc <HAL_RCC_OscConfig+0x5e0>
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a8:	4a67      	ldr	r2, [pc, #412]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80019b0:	4b65      	ldr	r3, [pc, #404]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b4:	4a64      	ldr	r2, [pc, #400]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 80019b6:	f023 0304 	bic.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d015      	beq.n	80019f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff f9b2 	bl	8000d2c <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff f9ae 	bl	8000d2c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e14e      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019e2:	4b59      	ldr	r3, [pc, #356]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0ee      	beq.n	80019cc <HAL_RCC_OscConfig+0x5f0>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f99c 	bl	8000d2c <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff f998 	bl	8000d2c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e138      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ee      	bne.n	80019f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 812d 	beq.w	8001c7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a24:	4b48      	ldr	r3, [pc, #288]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a2c:	2b18      	cmp	r3, #24
 8001a2e:	f000 80bd 	beq.w	8001bac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	f040 809e 	bne.w	8001b78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b42      	ldr	r3, [pc, #264]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a41      	ldr	r2, [pc, #260]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f970 	bl	8000d2c <HAL_GetTick>
 8001a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff f96c 	bl	8000d2c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e10e      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a62:	4b39      	ldr	r3, [pc, #228]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6e:	4b36      	ldr	r3, [pc, #216]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001a70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a72:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <HAL_RCC_OscConfig+0x774>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	430a      	orrs	r2, r1
 8001a82:	4931      	ldr	r1, [pc, #196]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	628b      	str	r3, [r1, #40]	@ 0x28
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a96:	3b01      	subs	r3, #1
 8001a98:	025b      	lsls	r3, r3, #9
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	061b      	lsls	r3, r3, #24
 8001ab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ab8:	4923      	ldr	r1, [pc, #140]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	4a21      	ldr	r2, [pc, #132]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001aca:	4b1f      	ldr	r3, [pc, #124]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ace:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <HAL_RCC_OscConfig+0x778>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ad6:	00d2      	lsls	r2, r2, #3
 8001ad8:	491b      	ldr	r1, [pc, #108]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	f023 020c 	bic.w	r2, r3, #12
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	4917      	ldr	r1, [pc, #92]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	f023 0202 	bic.w	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afc:	4912      	ldr	r1, [pc, #72]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	4a10      	ldr	r2, [pc, #64]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b12:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2a:	4a07      	ldr	r2, [pc, #28]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_RCC_OscConfig+0x76c>)
 8001b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f8f5 	bl	8000d2c <HAL_GetTick>
 8001b42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b44:	e011      	b.n	8001b6a <HAL_RCC_OscConfig+0x78e>
 8001b46:	bf00      	nop
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	58024800 	.word	0x58024800
 8001b50:	fffffc0c 	.word	0xfffffc0c
 8001b54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f8e8 	bl	8000d2c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e08a      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b6a:	4b47      	ldr	r3, [pc, #284]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x77c>
 8001b76:	e082      	b.n	8001c7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b43      	ldr	r3, [pc, #268]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a42      	ldr	r2, [pc, #264]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f8d2 	bl	8000d2c <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f8ce 	bl	8000d2c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e070      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x7b0>
 8001baa:	e068      	b.n	8001c7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001bac:	4b36      	ldr	r3, [pc, #216]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bb2:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d031      	beq.n	8001c24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f003 0203 	and.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d12a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d122      	bne.n	8001c24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d11a      	bne.n	8001c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	0a5b      	lsrs	r3, r3, #9
 8001bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d111      	bne.n	8001c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d108      	bne.n	8001c24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	0e1b      	lsrs	r3, r3, #24
 8001c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e02b      	b.n	8001c80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c28:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d01f      	beq.n	8001c7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c42:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c4a:	f7ff f86f 	bl	8000d2c <HAL_GetTick>
 8001c4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c50:	bf00      	nop
 8001c52:	f7ff f86b 	bl	8000d2c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d0f9      	beq.n	8001c52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_RCC_OscConfig+0x8b0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c6a:	00d2      	lsls	r2, r2, #3
 8001c6c:	4906      	ldr	r1, [pc, #24]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c76:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_RCC_OscConfig+0x8ac>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3730      	adds	r7, #48	@ 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	ffff0007 	.word	0xffff0007

08001c90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e19c      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b87      	ldr	r3, [pc, #540]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 020f 	bic.w	r2, r3, #15
 8001cba:	4985      	ldr	r1, [pc, #532]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b83      	ldr	r3, [pc, #524]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e184      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d908      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cf0:	4b78      	ldr	r3, [pc, #480]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	4975      	ldr	r1, [pc, #468]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	4b70      	ldr	r3, [pc, #448]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d908      	bls.n	8001d30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	496a      	ldr	r1, [pc, #424]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	4b64      	ldr	r3, [pc, #400]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d908      	bls.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d4c:	4b61      	ldr	r3, [pc, #388]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	495e      	ldr	r1, [pc, #376]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	4b59      	ldr	r3, [pc, #356]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d908      	bls.n	8001d8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d7a:	4b56      	ldr	r3, [pc, #344]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4953      	ldr	r1, [pc, #332]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d908      	bls.n	8001dba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f023 020f 	bic.w	r2, r3, #15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4947      	ldr	r1, [pc, #284]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d055      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dc6:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4940      	ldr	r1, [pc, #256]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d121      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0f6      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d107      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001df8:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d115      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0ea      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e10:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0de      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e20:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0d6      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e30:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f023 0207 	bic.w	r2, r3, #7
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4925      	ldr	r1, [pc, #148]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e42:	f7fe ff73 	bl	8000d2c <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4a:	f7fe ff6f 	bl	8000d2c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0be      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d1eb      	bne.n	8001e4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d010      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d208      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f023 020f 	bic.w	r2, r3, #15
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	490e      	ldr	r1, [pc, #56]	@ (8001ed4 <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d214      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 020f 	bic.w	r2, r3, #15
 8001eb6:	4906      	ldr	r1, [pc, #24]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <HAL_RCC_ClockConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e086      	b.n	8001fde <HAL_RCC_ClockConfig+0x34e>
 8001ed0:	52002000 	.word	0x52002000
 8001ed4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d208      	bcs.n	8001f06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	4939      	ldr	r1, [pc, #228]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	4b34      	ldr	r3, [pc, #208]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d208      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	492e      	ldr	r1, [pc, #184]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d208      	bcs.n	8001f62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f50:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4922      	ldr	r1, [pc, #136]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d010      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d208      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4917      	ldr	r1, [pc, #92]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f90:	f000 f834 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	4912      	ldr	r1, [pc, #72]	@ (8001fec <HAL_RCC_ClockConfig+0x35c>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_RCC_ClockConfig+0x358>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <HAL_RCC_ClockConfig+0x35c>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <HAL_RCC_ClockConfig+0x360>)
 8001fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <HAL_RCC_ClockConfig+0x364>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_RCC_ClockConfig+0x368>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fe60 	bl	8000c98 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	080053d0 	.word	0x080053d0
 8001ff0:	24000004 	.word	0x24000004
 8001ff4:	24000000 	.word	0x24000000
 8001ff8:	24000008 	.word	0x24000008

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002002:	4bb3      	ldr	r3, [pc, #716]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800200a:	2b18      	cmp	r3, #24
 800200c:	f200 8155 	bhi.w	80022ba <HAL_RCC_GetSysClockFreq+0x2be>
 8002010:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	0800207d 	.word	0x0800207d
 800201c:	080022bb 	.word	0x080022bb
 8002020:	080022bb 	.word	0x080022bb
 8002024:	080022bb 	.word	0x080022bb
 8002028:	080022bb 	.word	0x080022bb
 800202c:	080022bb 	.word	0x080022bb
 8002030:	080022bb 	.word	0x080022bb
 8002034:	080022bb 	.word	0x080022bb
 8002038:	080020a3 	.word	0x080020a3
 800203c:	080022bb 	.word	0x080022bb
 8002040:	080022bb 	.word	0x080022bb
 8002044:	080022bb 	.word	0x080022bb
 8002048:	080022bb 	.word	0x080022bb
 800204c:	080022bb 	.word	0x080022bb
 8002050:	080022bb 	.word	0x080022bb
 8002054:	080022bb 	.word	0x080022bb
 8002058:	080020a9 	.word	0x080020a9
 800205c:	080022bb 	.word	0x080022bb
 8002060:	080022bb 	.word	0x080022bb
 8002064:	080022bb 	.word	0x080022bb
 8002068:	080022bb 	.word	0x080022bb
 800206c:	080022bb 	.word	0x080022bb
 8002070:	080022bb 	.word	0x080022bb
 8002074:	080022bb 	.word	0x080022bb
 8002078:	080020af 	.word	0x080020af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800207c:	4b94      	ldr	r3, [pc, #592]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d009      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002088:	4b91      	ldr	r3, [pc, #580]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	4a90      	ldr	r2, [pc, #576]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
 8002098:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800209a:	e111      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800209c:	4b8d      	ldr	r3, [pc, #564]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800209e:	61bb      	str	r3, [r7, #24]
      break;
 80020a0:	e10e      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80020a2:	4b8d      	ldr	r3, [pc, #564]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020a4:	61bb      	str	r3, [r7, #24]
      break;
 80020a6:	e10b      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80020a8:	4b8c      	ldr	r3, [pc, #560]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020aa:	61bb      	str	r3, [r7, #24]
      break;
 80020ac:	e108      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020ae:	4b88      	ldr	r3, [pc, #544]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80020b8:	4b85      	ldr	r3, [pc, #532]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020c4:	4b82      	ldr	r3, [pc, #520]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020ce:	4b80      	ldr	r3, [pc, #512]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d2:	08db      	lsrs	r3, r3, #3
 80020d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80e1 	beq.w	80022b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	f000 8083 	beq.w	8002200 <HAL_RCC_GetSysClockFreq+0x204>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	f200 80a1 	bhi.w	8002244 <HAL_RCC_GetSysClockFreq+0x248>
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x114>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d056      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800210e:	e099      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002110:	4b6f      	ldr	r3, [pc, #444]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02d      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800211c:	4b6c      	ldr	r3, [pc, #432]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	4a6b      	ldr	r2, [pc, #428]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	ee07 3a90 	vmov	s15, r3
 800213e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002146:	4b62      	ldr	r3, [pc, #392]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002156:	ed97 6a02 	vldr	s12, [r7, #8]
 800215a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80022e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800215e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800216a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800216e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002172:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002176:	e087      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002182:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80022e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218a:	4b51      	ldr	r3, [pc, #324]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219a:	ed97 6a02 	vldr	s12, [r7, #8]
 800219e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80022e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021ba:	e065      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80022e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ce:	4b40      	ldr	r3, [pc, #256]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021de:	ed97 6a02 	vldr	s12, [r7, #8]
 80021e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80022e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021fe:	e043      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80022ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800220e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002212:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002222:	ed97 6a02 	vldr	s12, [r7, #8]
 8002226:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80022e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800222a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800222e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002242:	e021      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800224e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80022e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002266:	ed97 6a02 	vldr	s12, [r7, #8]
 800226a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80022e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800226e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800227a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002286:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002288:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	0a5b      	lsrs	r3, r3, #9
 800228e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002292:	3301      	adds	r3, #1
 8002294:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80022a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022ac:	ee17 3a90 	vmov	r3, s15
 80022b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80022b2:	e005      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
      break;
 80022b8:	e002      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80022ba:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022bc:	61bb      	str	r3, [r7, #24]
      break;
 80022be:	bf00      	nop
  }

  return sysclockfreq;
 80022c0:	69bb      	ldr	r3, [r7, #24]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	@ 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	58024400 	.word	0x58024400
 80022d4:	03d09000 	.word	0x03d09000
 80022d8:	003d0900 	.word	0x003d0900
 80022dc:	017d7840 	.word	0x017d7840
 80022e0:	46000000 	.word	0x46000000
 80022e4:	4c742400 	.word	0x4c742400
 80022e8:	4a742400 	.word	0x4a742400
 80022ec:	4bbebc20 	.word	0x4bbebc20

080022f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80022f6:	f7ff fe81 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 80022fa:	4602      	mov	r2, r0
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <HAL_RCC_GetHCLKFreq+0x50>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	490f      	ldr	r1, [pc, #60]	@ (8002344 <HAL_RCC_GetHCLKFreq+0x54>)
 8002308:	5ccb      	ldrb	r3, [r1, r3]
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_RCC_GetHCLKFreq+0x50>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	4a09      	ldr	r2, [pc, #36]	@ (8002344 <HAL_RCC_GetHCLKFreq+0x54>)
 800231e:	5cd3      	ldrb	r3, [r2, r3]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_RCC_GetHCLKFreq+0x58>)
 800232c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800232e:	4a07      	ldr	r2, [pc, #28]	@ (800234c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <HAL_RCC_GetHCLKFreq+0x58>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	58024400 	.word	0x58024400
 8002344:	080053d0 	.word	0x080053d0
 8002348:	24000004 	.word	0x24000004
 800234c:	24000000 	.word	0x24000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002354:	f7ff ffcc 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4904      	ldr	r1, [pc, #16]	@ (8002378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	58024400 	.word	0x58024400
 8002378:	080053d0 	.word	0x080053d0

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002380:	f7ff ffb6 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4904      	ldr	r1, [pc, #16]	@ (80023a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58024400 	.word	0x58024400
 80023a4:	080053d0 	.word	0x080053d0

080023a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023ac:	b0cc      	sub	sp, #304	@ 0x130
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80023cc:	2500      	movs	r5, #0
 80023ce:	ea54 0305 	orrs.w	r3, r4, r5
 80023d2:	d049      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023de:	d02f      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023e4:	d828      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023ea:	d01a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023f0:	d822      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023fa:	d007      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023fc:	e01c      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023fe:	4bb8      	ldr	r3, [pc, #736]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	4ab7      	ldr	r2, [pc, #732]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800240a:	e01a      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800240c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002410:	3308      	adds	r3, #8
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f001 fccf 	bl	8003db8 <RCCEx_PLL2_Config>
 800241a:	4603      	mov	r3, r0
 800241c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002420:	e00f      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002426:	3328      	adds	r3, #40	@ 0x28
 8002428:	2102      	movs	r1, #2
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fd76 	bl	8003f1c <RCCEx_PLL3_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002436:	e004      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800243e:	e000      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002442:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800244a:	4ba5      	ldr	r3, [pc, #660]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800244c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800244e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002458:	4aa1      	ldr	r2, [pc, #644]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800245a:	430b      	orrs	r3, r1
 800245c:	6513      	str	r3, [r2, #80]	@ 0x50
 800245e:	e003      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002460:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002464:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002474:	f04f 0900 	mov.w	r9, #0
 8002478:	ea58 0309 	orrs.w	r3, r8, r9
 800247c:	d047      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800247e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002484:	2b04      	cmp	r3, #4
 8002486:	d82a      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002488:	a201      	add	r2, pc, #4	@ (adr r2, 8002490 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a5 	.word	0x080024a5
 8002494:	080024b3 	.word	0x080024b3
 8002498:	080024c9 	.word	0x080024c9
 800249c:	080024e7 	.word	0x080024e7
 80024a0:	080024e7 	.word	0x080024e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024a4:	4b8e      	ldr	r3, [pc, #568]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	4a8d      	ldr	r2, [pc, #564]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024b0:	e01a      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024b6:	3308      	adds	r3, #8
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 fc7c 	bl	8003db8 <RCCEx_PLL2_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024c6:	e00f      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024cc:	3328      	adds	r3, #40	@ 0x28
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fd23 	bl	8003f1c <RCCEx_PLL3_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024dc:	e004      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80024e4:	e000      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f0:	4b7b      	ldr	r3, [pc, #492]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f4:	f023 0107 	bic.w	r1, r3, #7
 80024f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	4a78      	ldr	r2, [pc, #480]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002500:	430b      	orrs	r3, r1
 8002502:	6513      	str	r3, [r2, #80]	@ 0x50
 8002504:	e003      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002506:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800250a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800250e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800251a:	f04f 0b00 	mov.w	fp, #0
 800251e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002522:	d04c      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800252a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800252e:	d030      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002534:	d829      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002536:	2bc0      	cmp	r3, #192	@ 0xc0
 8002538:	d02d      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800253a:	2bc0      	cmp	r3, #192	@ 0xc0
 800253c:	d825      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800253e:	2b80      	cmp	r3, #128	@ 0x80
 8002540:	d018      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002542:	2b80      	cmp	r3, #128	@ 0x80
 8002544:	d821      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800254a:	2b40      	cmp	r3, #64	@ 0x40
 800254c:	d007      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800254e:	e01c      	b.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002550:	4b63      	ldr	r3, [pc, #396]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	4a62      	ldr	r2, [pc, #392]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800255a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800255c:	e01c      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800255e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002562:	3308      	adds	r3, #8
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fc26 	bl	8003db8 <RCCEx_PLL2_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002572:	e011      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002574:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002578:	3328      	adds	r3, #40	@ 0x28
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f001 fccd 	bl	8003f1c <RCCEx_PLL3_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002588:	e006      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002590:	e002      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002592:	bf00      	nop
 8002594:	e000      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002598:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80025a0:	4b4f      	ldr	r3, [pc, #316]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80025a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ae:	4a4c      	ldr	r2, [pc, #304]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80025b4:	e003      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80025ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80025d4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80025d8:	460b      	mov	r3, r1
 80025da:	4313      	orrs	r3, r2
 80025dc:	d053      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80025de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80025e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025ea:	d035      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80025ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025f0:	d82e      	bhi.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80025f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80025f6:	d031      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80025f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80025fc:	d828      	bhi.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80025fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002602:	d01a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002608:	d822      	bhi.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800260e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002612:	d007      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002614:	e01c      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002616:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800261c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002620:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002622:	e01c      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002628:	3308      	adds	r3, #8
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fbc3 	bl	8003db8 <RCCEx_PLL2_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002638:	e011      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800263a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800263e:	3328      	adds	r3, #40	@ 0x28
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f001 fc6a 	bl	8003f1c <RCCEx_PLL3_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800264e:	e006      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002656:	e002      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002658:	bf00      	nop
 800265a:	e000      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800265c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800265e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002666:	4b1e      	ldr	r3, [pc, #120]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800266e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002672:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002676:	4a1a      	ldr	r2, [pc, #104]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002678:	430b      	orrs	r3, r1
 800267a:	6593      	str	r3, [r2, #88]	@ 0x58
 800267c:	e003      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002682:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002692:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800269c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80026a0:	460b      	mov	r3, r1
 80026a2:	4313      	orrs	r3, r2
 80026a4:	d056      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80026a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80026ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026b2:	d038      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80026b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026b8:	d831      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026be:	d034      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80026c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026c4:	d82b      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026ca:	d01d      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80026cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026d0:	d825      	bhi.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80026d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80026dc:	e01f      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026de:	bf00      	nop
 80026e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e4:	4ba2      	ldr	r3, [pc, #648]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e8:	4aa1      	ldr	r2, [pc, #644]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026f0:	e01c      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026f6:	3308      	adds	r3, #8
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fb5c 	bl	8003db8 <RCCEx_PLL2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002706:	e011      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800270c:	3328      	adds	r3, #40	@ 0x28
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fc03 	bl	8003f1c <RCCEx_PLL3_Config>
 8002716:	4603      	mov	r3, r0
 8002718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800271c:	e006      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002724:	e002      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800272a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800272c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002734:	4b8e      	ldr	r3, [pc, #568]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002738:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800273c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002744:	4a8a      	ldr	r2, [pc, #552]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002746:	430b      	orrs	r3, r1
 8002748:	6593      	str	r3, [r2, #88]	@ 0x58
 800274a:	e003      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002750:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002760:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800276a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800276e:	460b      	mov	r3, r1
 8002770:	4313      	orrs	r3, r2
 8002772:	d03a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002774:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	2b30      	cmp	r3, #48	@ 0x30
 800277c:	d01f      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800277e:	2b30      	cmp	r3, #48	@ 0x30
 8002780:	d819      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002782:	2b20      	cmp	r3, #32
 8002784:	d00c      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002786:	2b20      	cmp	r3, #32
 8002788:	d815      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d019      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800278e:	2b10      	cmp	r3, #16
 8002790:	d111      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002792:	4b77      	ldr	r3, [pc, #476]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002796:	4a76      	ldr	r2, [pc, #472]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800279e:	e011      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a4:	3308      	adds	r3, #8
 80027a6:	2102      	movs	r1, #2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fb05 	bl	8003db8 <RCCEx_PLL2_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80027bc:	e002      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80027be:	bf00      	nop
 80027c0:	e000      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80027c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027cc:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80027d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027dc:	430b      	orrs	r3, r1
 80027de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e0:	e003      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80027f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002800:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002804:	460b      	mov	r3, r1
 8002806:	4313      	orrs	r3, r2
 8002808:	d051      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800280a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800280e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002814:	d035      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800281a:	d82e      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800281c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002820:	d031      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002822:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002826:	d828      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800282c:	d01a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800282e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002832:	d822      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800283c:	d007      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800283e:	e01c      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002840:	4b4b      	ldr	r3, [pc, #300]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	4a4a      	ldr	r2, [pc, #296]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800284c:	e01c      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800284e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002852:	3308      	adds	r3, #8
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 faae 	bl	8003db8 <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002862:	e011      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002868:	3328      	adds	r3, #40	@ 0x28
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fb55 	bl	8003f1c <RCCEx_PLL3_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002878:	e006      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002880:	e002      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002888:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002890:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002894:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800289c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800289e:	4a34      	ldr	r2, [pc, #208]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80028a4:	e003      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80028ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80028c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4313      	orrs	r3, r2
 80028cc:	d056      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80028ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028d8:	d033      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80028da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028de:	d82c      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028e4:	d02f      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80028e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028ea:	d826      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028f0:	d02b      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80028f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028f6:	d820      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028fc:	d012      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80028fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002902:	d81a      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d022      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800290c:	d115      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800290e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002912:	3308      	adds	r3, #8
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f001 fa4e 	bl	8003db8 <RCCEx_PLL2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002922:	e015      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002928:	3328      	adds	r3, #40	@ 0x28
 800292a:	2101      	movs	r1, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f001 faf5 	bl	8003f1c <RCCEx_PLL3_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002938:	e00a      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002940:	e006      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002942:	bf00      	nop
 8002944:	e004      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002946:	bf00      	nop
 8002948:	e002      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800294e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002950:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002966:	4a02      	ldr	r2, [pc, #8]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002968:	430b      	orrs	r3, r1
 800296a:	6513      	str	r3, [r2, #80]	@ 0x50
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800296e:	bf00      	nop
 8002970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002978:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800297c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002988:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002992:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002996:	460b      	mov	r3, r1
 8002998:	4313      	orrs	r3, r2
 800299a:	d055      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800299c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80029a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029a8:	d033      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80029aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ae:	d82c      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b4:	d02f      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ba:	d826      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80029c0:	d02b      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80029c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80029c6:	d820      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029cc:	d012      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80029ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029d2:	d81a      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d022      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80029d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029dc:	d115      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029e2:	3308      	adds	r3, #8
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 f9e6 	bl	8003db8 <RCCEx_PLL2_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029f2:	e015      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029f8:	3328      	adds	r3, #40	@ 0x28
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 fa8d 	bl	8003f1c <RCCEx_PLL3_Config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a08:	e00a      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a10:	e006      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a12:	bf00      	nop
 8002a14:	e004      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a28:	4bb6      	ldr	r3, [pc, #728]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a38:	4ab2      	ldr	r2, [pc, #712]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a3e:	e003      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002a48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002a54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4313      	orrs	r3, r2
 8002a66:	d02a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a76:	d10a      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 f999 	bl	8003db8 <RCCEx_PLL2_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002a8c:	e004      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a94:	e000      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002aa0:	4b98      	ldr	r3, [pc, #608]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aae:	4a95      	ldr	r2, [pc, #596]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab4:	e003      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002aba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002aca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002ad4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4313      	orrs	r3, r2
 8002adc:	d037      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ae8:	d00e      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002aea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aee:	d816      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d018      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002af4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002af8:	d111      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002afa:	4b82      	ldr	r3, [pc, #520]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	4a81      	ldr	r2, [pc, #516]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b06:	e00f      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 f951 	bl	8003db8 <RCCEx_PLL2_Config>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b1c:	e004      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b24:	e000      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b30:	4b74      	ldr	r3, [pc, #464]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b34:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3e:	4a71      	ldr	r2, [pc, #452]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b44:	e003      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002b5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002b64:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	d03a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d81d      	bhi.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002b78:	a201      	add	r2, pc, #4	@ (adr r2, 8002b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7e:	bf00      	nop
 8002b80:	08002bbd 	.word	0x08002bbd
 8002b84:	08002b91 	.word	0x08002b91
 8002b88:	08002b9f 	.word	0x08002b9f
 8002b8c:	08002bbd 	.word	0x08002bbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b90:	4b5c      	ldr	r3, [pc, #368]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	4a5b      	ldr	r2, [pc, #364]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b9c:	e00f      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 f906 	bl	8003db8 <RCCEx_PLL2_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bb2:	e004      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bba:	e000      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	f023 0103 	bic.w	r1, r3, #3
 8002bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bda:	e003      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002be0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f000 80a0 	beq.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c06:	4b40      	ldr	r3, [pc, #256]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f88b 	bl	8000d2c <HAL_GetTick>
 8002c16:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1c:	f7fe f886 	bl	8000d2c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	@ 0x64
 8002c2a:	d903      	bls.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c32:	e005      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c34:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ed      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002c40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d17a      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c48:	4b2e      	ldr	r3, [pc, #184]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c54:	4053      	eors	r3, r2
 8002c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d015      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5e:	4b29      	ldr	r3, [pc, #164]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c6a:	4b26      	ldr	r3, [pc, #152]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a25      	ldr	r2, [pc, #148]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c76:	4b23      	ldr	r3, [pc, #140]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	4a22      	ldr	r2, [pc, #136]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c82:	4a20      	ldr	r2, [pc, #128]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c84:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002c88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c96:	d118      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe f848 	bl	8000d2c <HAL_GetTick>
 8002c9c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca0:	e00d      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe f843 	bl	8000d2c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002cac:	1ad2      	subs	r2, r2, r3
 8002cae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d903      	bls.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002cbc:	e005      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0eb      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d130      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ce2:	d115      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002ce4:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002cf4:	091a      	lsrs	r2, r3, #4
 8002cf6:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	4a02      	ldr	r2, [pc, #8]	@ (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6113      	str	r3, [r2, #16]
 8002d00:	e00c      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
 8002d08:	58024800 	.word	0x58024800
 8002d0c:	00ffffcf 	.word	0x00ffffcf
 8002d10:	4bd4      	ldr	r3, [pc, #848]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4ad3      	ldr	r2, [pc, #844]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d16:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d1a:	6113      	str	r3, [r2, #16]
 8002d1c:	4bd1      	ldr	r3, [pc, #836]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d1e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	4acd      	ldr	r2, [pc, #820]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	e008      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d38:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f002 0301 	and.w	r3, r2, #1
 8002d52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f000 808b 	beq.w	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d70:	2b28      	cmp	r3, #40	@ 0x28
 8002d72:	d86b      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002d74:	a201      	add	r2, pc, #4	@ (adr r2, 8002d7c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002e55 	.word	0x08002e55
 8002d80:	08002e4d 	.word	0x08002e4d
 8002d84:	08002e4d 	.word	0x08002e4d
 8002d88:	08002e4d 	.word	0x08002e4d
 8002d8c:	08002e4d 	.word	0x08002e4d
 8002d90:	08002e4d 	.word	0x08002e4d
 8002d94:	08002e4d 	.word	0x08002e4d
 8002d98:	08002e4d 	.word	0x08002e4d
 8002d9c:	08002e21 	.word	0x08002e21
 8002da0:	08002e4d 	.word	0x08002e4d
 8002da4:	08002e4d 	.word	0x08002e4d
 8002da8:	08002e4d 	.word	0x08002e4d
 8002dac:	08002e4d 	.word	0x08002e4d
 8002db0:	08002e4d 	.word	0x08002e4d
 8002db4:	08002e4d 	.word	0x08002e4d
 8002db8:	08002e4d 	.word	0x08002e4d
 8002dbc:	08002e37 	.word	0x08002e37
 8002dc0:	08002e4d 	.word	0x08002e4d
 8002dc4:	08002e4d 	.word	0x08002e4d
 8002dc8:	08002e4d 	.word	0x08002e4d
 8002dcc:	08002e4d 	.word	0x08002e4d
 8002dd0:	08002e4d 	.word	0x08002e4d
 8002dd4:	08002e4d 	.word	0x08002e4d
 8002dd8:	08002e4d 	.word	0x08002e4d
 8002ddc:	08002e55 	.word	0x08002e55
 8002de0:	08002e4d 	.word	0x08002e4d
 8002de4:	08002e4d 	.word	0x08002e4d
 8002de8:	08002e4d 	.word	0x08002e4d
 8002dec:	08002e4d 	.word	0x08002e4d
 8002df0:	08002e4d 	.word	0x08002e4d
 8002df4:	08002e4d 	.word	0x08002e4d
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002e55 	.word	0x08002e55
 8002e00:	08002e4d 	.word	0x08002e4d
 8002e04:	08002e4d 	.word	0x08002e4d
 8002e08:	08002e4d 	.word	0x08002e4d
 8002e0c:	08002e4d 	.word	0x08002e4d
 8002e10:	08002e4d 	.word	0x08002e4d
 8002e14:	08002e4d 	.word	0x08002e4d
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002e55 	.word	0x08002e55
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e24:	3308      	adds	r3, #8
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 ffc5 	bl	8003db8 <RCCEx_PLL2_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e34:	e00f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e3a:	3328      	adds	r3, #40	@ 0x28
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f86c 	bl	8003f1c <RCCEx_PLL3_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e4a:	e004      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e52:	e000      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e5e:	4b81      	ldr	r3, [pc, #516]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e6e:	4a7d      	ldr	r2, [pc, #500]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e74:	e003      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f002 0302 	and.w	r3, r2, #2
 8002e8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e94:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	d042      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d825      	bhi.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002efd 	.word	0x08002efd
 8002eb4:	08002ec9 	.word	0x08002ec9
 8002eb8:	08002edf 	.word	0x08002edf
 8002ebc:	08002efd 	.word	0x08002efd
 8002ec0:	08002efd 	.word	0x08002efd
 8002ec4:	08002efd 	.word	0x08002efd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ecc:	3308      	adds	r3, #8
 8002ece:	2101      	movs	r1, #1
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 ff71 	bl	8003db8 <RCCEx_PLL2_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002edc:	e00f      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ee2:	3328      	adds	r3, #40	@ 0x28
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 f818 	bl	8003f1c <RCCEx_PLL3_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ef2:	e004      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002efa:	e000      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f06:	4b57      	ldr	r3, [pc, #348]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f023 0107 	bic.w	r1, r3, #7
 8002f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f14:	4a53      	ldr	r2, [pc, #332]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f16:	430b      	orrs	r3, r1
 8002f18:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f1a:	e003      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f002 0304 	and.w	r3, r2, #4
 8002f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	d044      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d825      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002f50:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002fa5 	.word	0x08002fa5
 8002f5c:	08002f71 	.word	0x08002f71
 8002f60:	08002f87 	.word	0x08002f87
 8002f64:	08002fa5 	.word	0x08002fa5
 8002f68:	08002fa5 	.word	0x08002fa5
 8002f6c:	08002fa5 	.word	0x08002fa5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f74:	3308      	adds	r3, #8
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 ff1d 	bl	8003db8 <RCCEx_PLL2_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f84:	e00f      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f8a:	3328      	adds	r3, #40	@ 0x28
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 ffc4 	bl	8003f1c <RCCEx_PLL3_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fae:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb2:	f023 0107 	bic.w	r1, r3, #7
 8002fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fbe:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f002 0320 	and.w	r3, r2, #32
 8002fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4313      	orrs	r3, r2
 8002fec:	d057      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ffa:	d035      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003000:	d82c      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003006:	d031      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300c:	d826      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800300e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003012:	d02d      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003014:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003018:	d820      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800301a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800301e:	d012      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003024:	d81a      	bhi.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d024      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800302a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800302e:	d115      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003034:	3308      	adds	r3, #8
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 febd 	bl	8003db8 <RCCEx_PLL2_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003044:	e017      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800304a:	3328      	adds	r3, #40	@ 0x28
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f000 ff64 	bl	8003f1c <RCCEx_PLL3_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800305a:	e00c      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003062:	e008      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003064:	58024400 	.word	0x58024400
        break;
 8003068:	bf00      	nop
 800306a:	e004      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800306c:	bf00      	nop
 800306e:	e002      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003070:	bf00      	nop
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003076:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800307e:	4bc2      	ldr	r3, [pc, #776]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308e:	4abe      	ldr	r2, [pc, #760]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003090:	430b      	orrs	r3, r1
 8003092:	6553      	str	r3, [r2, #84]	@ 0x54
 8003094:	e003      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003096:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800309a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800309e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80030aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030ae:	2300      	movs	r3, #0
 80030b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4313      	orrs	r3, r2
 80030bc:	d055      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80030be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80030c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80030ca:	d033      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80030cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80030d0:	d82c      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030d6:	d02f      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030dc:	d826      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80030de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030e2:	d02b      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80030e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030e8:	d820      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80030ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ee:	d012      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80030f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f4:	d81a      	bhi.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d022      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fe:	d115      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003104:	3308      	adds	r3, #8
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fe55 	bl	8003db8 <RCCEx_PLL2_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003114:	e015      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800311a:	3328      	adds	r3, #40	@ 0x28
 800311c:	2102      	movs	r1, #2
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fefc 	bl	8003f1c <RCCEx_PLL3_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800312a:	e00a      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003132:	e006      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003134:	bf00      	nop
 8003136:	e004      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003138:	bf00      	nop
 800313a:	e002      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003142:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800314a:	4b8f      	ldr	r3, [pc, #572]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800315a:	4a8b      	ldr	r2, [pc, #556]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800315c:	430b      	orrs	r3, r1
 800315e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003166:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800316a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003176:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003180:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003184:	460b      	mov	r3, r1
 8003186:	4313      	orrs	r3, r2
 8003188:	d055      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800318a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003192:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003196:	d033      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003198:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800319c:	d82c      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800319e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031a2:	d02f      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80031a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031a8:	d826      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80031ae:	d02b      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80031b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80031b4:	d820      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ba:	d012      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80031bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c0:	d81a      	bhi.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d022      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ca:	d115      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d0:	3308      	adds	r3, #8
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fdef 	bl	8003db8 <RCCEx_PLL2_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031e0:	e015      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e6:	3328      	adds	r3, #40	@ 0x28
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fe96 	bl	8003f1c <RCCEx_PLL3_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031f6:	e00a      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031fe:	e006      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003200:	bf00      	nop
 8003202:	e004      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003204:	bf00      	nop
 8003206:	e002      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800320c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800320e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003216:	4b5c      	ldr	r3, [pc, #368]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800321e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003226:	4a58      	ldr	r2, [pc, #352]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003228:	430b      	orrs	r3, r1
 800322a:	6593      	str	r3, [r2, #88]	@ 0x58
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003232:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003236:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f002 0308 	and.w	r3, r2, #8
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800324c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003250:	460b      	mov	r3, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	d01e      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003262:	d10c      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003268:	3328      	adds	r3, #40	@ 0x28
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe55 	bl	8003f1c <RCCEx_PLL3_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800327e:	4b42      	ldr	r3, [pc, #264]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328e:	4a3e      	ldr	r2, [pc, #248]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003290:	430b      	orrs	r3, r1
 8003292:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f002 0310 	and.w	r3, r2, #16
 80032a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80032ae:	460b      	mov	r3, r1
 80032b0:	4313      	orrs	r3, r2
 80032b2:	d01e      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80032b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c0:	d10c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032c6:	3328      	adds	r3, #40	@ 0x28
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fe26 	bl	8003f1c <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ee:	430b      	orrs	r3, r1
 80032f0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80032fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003308:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800330c:	460b      	mov	r3, r1
 800330e:	4313      	orrs	r3, r2
 8003310:	d040      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800331a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800331e:	d022      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003324:	d81b      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332e:	d00b      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003330:	e015      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003336:	3308      	adds	r3, #8
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fd3c 	bl	8003db8 <RCCEx_PLL2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003346:	e00f      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003348:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800334c:	3328      	adds	r3, #40	@ 0x28
 800334e:	2102      	movs	r1, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fde3 	bl	8003f1c <RCCEx_PLL3_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800335c:	e004      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003368:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003378:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800337c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003380:	4a01      	ldr	r2, [pc, #4]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003382:	430b      	orrs	r3, r1
 8003384:	6593      	str	r3, [r2, #88]	@ 0x58
 8003386:	e005      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003388:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003390:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80033a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033a2:	2300      	movs	r3, #0
 80033a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80033aa:	460b      	mov	r3, r1
 80033ac:	4313      	orrs	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80033b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033bc:	d01f      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80033be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033c2:	d818      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80033c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c8:	d003      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80033ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ce:	d007      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80033d0:	e011      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d2:	4b64      	ldr	r3, [pc, #400]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	4a63      	ldr	r2, [pc, #396]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80033de:	e00f      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e4:	3328      	adds	r3, #40	@ 0x28
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fd97 	bl	8003f1c <RCCEx_PLL3_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80033f4:	e004      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80033fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003400:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003408:	4b56      	ldr	r3, [pc, #344]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003410:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003418:	4a52      	ldr	r2, [pc, #328]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800341a:	430b      	orrs	r3, r1
 800341c:	6553      	str	r3, [r2, #84]	@ 0x54
 800341e:	e003      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003424:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003434:	673b      	str	r3, [r7, #112]	@ 0x70
 8003436:	2300      	movs	r3, #0
 8003438:	677b      	str	r3, [r7, #116]	@ 0x74
 800343a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800343e:	460b      	mov	r3, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	d031      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003444:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800344e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003452:	d007      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003454:	e011      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003456:	4b43      	ldr	r3, [pc, #268]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	4a42      	ldr	r2, [pc, #264]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800345c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003462:	e00e      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003464:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003468:	3308      	adds	r3, #8
 800346a:	2102      	movs	r1, #2
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fca3 	bl	8003db8 <RCCEx_PLL2_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003478:	e003      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003482:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800348a:	4b36      	ldr	r3, [pc, #216]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	4a32      	ldr	r2, [pc, #200]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800349a:	430b      	orrs	r3, r1
 800349c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800349e:	e003      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80034b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034b6:	2300      	movs	r3, #0
 80034b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d00c      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034c8:	3328      	adds	r3, #40	@ 0x28
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fd25 	bl	8003f1c <RCCEx_PLL3_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80034ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80034ec:	2300      	movs	r3, #0
 80034ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80034f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80034f4:	460b      	mov	r3, r1
 80034f6:	4313      	orrs	r3, r2
 80034f8:	d03a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80034fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003506:	d018      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003508:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800350c:	d811      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800350e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003512:	d014      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003518:	d80b      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d011      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800351e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003522:	d106      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	4a0e      	ldr	r2, [pc, #56]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003530:	e008      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003538:	e004      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003544:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800354c:	4b05      	ldr	r3, [pc, #20]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800354e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003550:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800355c:	4a01      	ldr	r2, [pc, #4]	@ (8003564 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800355e:	430b      	orrs	r3, r1
 8003560:	6553      	str	r3, [r2, #84]	@ 0x54
 8003562:	e005      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800356c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800357c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800357e:	2300      	movs	r3, #0
 8003580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003582:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003586:	460b      	mov	r3, r1
 8003588:	4313      	orrs	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800358c:	4baa      	ldr	r3, [pc, #680]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800358e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003590:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800359a:	4aa7      	ldr	r2, [pc, #668]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800359c:	430b      	orrs	r3, r1
 800359e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80035ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80035ae:	2300      	movs	r3, #0
 80035b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80035b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80035b6:	460b      	mov	r3, r1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035bc:	4b9e      	ldr	r3, [pc, #632]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80035c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80035cc:	4a9a      	ldr	r2, [pc, #616]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80035de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035e0:	2300      	movs	r3, #0
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ee:	4b92      	ldr	r3, [pc, #584]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80035f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fc:	4a8e      	ldr	r2, [pc, #568]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035fe:	430b      	orrs	r3, r1
 8003600:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800360e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003610:	2300      	movs	r3, #0
 8003612:	647b      	str	r3, [r7, #68]	@ 0x44
 8003614:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d00e      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800361e:	4b86      	ldr	r3, [pc, #536]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	4a85      	ldr	r2, [pc, #532]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003624:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003628:	6113      	str	r3, [r2, #16]
 800362a:	4b83      	ldr	r3, [pc, #524]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800362c:	6919      	ldr	r1, [r3, #16]
 800362e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003632:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003636:	4a80      	ldr	r2, [pc, #512]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800363c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800364a:	2300      	movs	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800364e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003652:	460b      	mov	r3, r1
 8003654:	4313      	orrs	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003658:	4b77      	ldr	r3, [pc, #476]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800365a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	4a74      	ldr	r2, [pc, #464]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003668:	430b      	orrs	r3, r1
 800366a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800366c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003678:	633b      	str	r3, [r7, #48]	@ 0x30
 800367a:	2300      	movs	r3, #0
 800367c:	637b      	str	r3, [r7, #52]	@ 0x34
 800367e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003688:	4b6b      	ldr	r3, [pc, #428]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003698:	4a67      	ldr	r2, [pc, #412]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800369a:	430b      	orrs	r3, r1
 800369c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800369e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	2100      	movs	r1, #0
 80036a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80036b4:	460b      	mov	r3, r1
 80036b6:	4313      	orrs	r3, r2
 80036b8:	d011      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036be:	3308      	adds	r3, #8
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fb78 	bl	8003db8 <RCCEx_PLL2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80036ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80036de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	2100      	movs	r1, #0
 80036e8:	6239      	str	r1, [r7, #32]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036f4:	460b      	mov	r3, r1
 80036f6:	4313      	orrs	r3, r2
 80036f8:	d011      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036fe:	3308      	adds	r3, #8
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fb58 	bl	8003db8 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800370e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800371a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800371e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	2100      	movs	r1, #0
 8003728:	61b9      	str	r1, [r7, #24]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d011      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800373a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800373e:	3308      	adds	r3, #8
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fb38 	bl	8003db8 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800374e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800375a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800375e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	2100      	movs	r1, #0
 8003768:	6139      	str	r1, [r7, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003774:	460b      	mov	r3, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	d011      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800377a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800377e:	3328      	adds	r3, #40	@ 0x28
 8003780:	2100      	movs	r1, #0
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fbca 	bl	8003f1c <RCCEx_PLL3_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800378e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800379a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800379e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	2100      	movs	r1, #0
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037b4:	460b      	mov	r3, r1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	d011      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037be:	3328      	adds	r3, #40	@ 0x28
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fbaa 	bl	8003f1c <RCCEx_PLL3_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80037ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80037de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	2100      	movs	r1, #0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d011      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037fe:	3328      	adds	r3, #40	@ 0x28
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fb8a 	bl	8003f1c <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800380e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800381a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800381e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003832:	46bd      	mov	sp, r7
 8003834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003838:	58024400 	.word	0x58024400

0800383c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003840:	f7fe fd56 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4904      	ldr	r1, [pc, #16]	@ (8003864 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	58024400 	.word	0x58024400
 8003864:	080053d0 	.word	0x080053d0

08003868 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003870:	4ba1      	ldr	r3, [pc, #644]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800387a:	4b9f      	ldr	r3, [pc, #636]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387e:	0b1b      	lsrs	r3, r3, #12
 8003880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003884:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003886:	4b9c      	ldr	r3, [pc, #624]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003892:	4b99      	ldr	r3, [pc, #612]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	08db      	lsrs	r3, r3, #3
 8003898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8111 	beq.w	8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f000 8083 	beq.w	80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	f200 80a1 	bhi.w	8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d056      	beq.n	8003980 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038d2:	e099      	b.n	8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d4:	4b88      	ldr	r3, [pc, #544]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02d      	beq.n	800393c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038e0:	4b85      	ldr	r3, [pc, #532]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	4a84      	ldr	r2, [pc, #528]	@ (8003afc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390a:	4b7b      	ldr	r3, [pc, #492]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391a:	ed97 6a03 	vldr	s12, [r7, #12]
 800391e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003936:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800393a:	e087      	b.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003946:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003b04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b6a      	ldr	r3, [pc, #424]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003962:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800397e:	e065      	b.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b59      	ldr	r3, [pc, #356]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039c2:	e043      	b.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b48      	ldr	r3, [pc, #288]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a06:	e021      	b.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b37      	ldr	r3, [pc, #220]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	0a5b      	lsrs	r3, r3, #9
 8003a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a72:	ee17 2a90 	vmov	r2, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa0:	ee17 2a90 	vmov	r2, s15
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	0e1b      	lsrs	r3, r3, #24
 8003aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ace:	ee17 2a90 	vmov	r2, s15
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ad6:	e008      	b.n	8003aea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
}
 8003aea:	bf00      	nop
 8003aec:	3724      	adds	r7, #36	@ 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	58024400 	.word	0x58024400
 8003afc:	03d09000 	.word	0x03d09000
 8003b00:	46000000 	.word	0x46000000
 8003b04:	4c742400 	.word	0x4c742400
 8003b08:	4a742400 	.word	0x4a742400
 8003b0c:	4bbebc20 	.word	0x4bbebc20

08003b10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	@ 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b18:	4ba1      	ldr	r3, [pc, #644]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b22:	4b9f      	ldr	r3, [pc, #636]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	0d1b      	lsrs	r3, r3, #20
 8003b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b3a:	4b99      	ldr	r3, [pc, #612]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	08db      	lsrs	r3, r3, #3
 8003b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8111 	beq.w	8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	f000 8083 	beq.w	8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f200 80a1 	bhi.w	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d056      	beq.n	8003c28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b7a:	e099      	b.n	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b7c:	4b88      	ldr	r3, [pc, #544]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02d      	beq.n	8003be4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b88:	4b85      	ldr	r3, [pc, #532]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	4a84      	ldr	r2, [pc, #528]	@ (8003da4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
 8003b98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003be2:	e087      	b.n	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c26:	e065      	b.n	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3a:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c6a:	e043      	b.n	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7e:	4b48      	ldr	r3, [pc, #288]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cae:	e021      	b.n	8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc2:	4b37      	ldr	r3, [pc, #220]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	0a5b      	lsrs	r3, r3, #9
 8003cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d1a:	ee17 2a90 	vmov	r2, s15
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d22:	4b1f      	ldr	r3, [pc, #124]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d48:	ee17 2a90 	vmov	r2, s15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d50:	4b13      	ldr	r3, [pc, #76]	@ (8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	0e1b      	lsrs	r3, r3, #24
 8003d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d76:	ee17 2a90 	vmov	r2, s15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d7e:	e008      	b.n	8003d92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
}
 8003d92:	bf00      	nop
 8003d94:	3724      	adds	r7, #36	@ 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400
 8003da4:	03d09000 	.word	0x03d09000
 8003da8:	46000000 	.word	0x46000000
 8003dac:	4c742400 	.word	0x4c742400
 8003db0:	4a742400 	.word	0x4a742400
 8003db4:	4bbebc20 	.word	0x4bbebc20

08003db8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dc6:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d101      	bne.n	8003dd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e099      	b.n	8003f0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4e      	ldr	r2, [pc, #312]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003ddc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de2:	f7fc ffa3 	bl	8000d2c <HAL_GetTick>
 8003de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003de8:	e008      	b.n	8003dfc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dea:	f7fc ff9f 	bl	8000d2c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e086      	b.n	8003f0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dfc:	4b45      	ldr	r3, [pc, #276]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f0      	bne.n	8003dea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e08:	4b42      	ldr	r3, [pc, #264]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	031b      	lsls	r3, r3, #12
 8003e16:	493f      	ldr	r1, [pc, #252]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	025b      	lsls	r3, r3, #9
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e4c:	4931      	ldr	r1, [pc, #196]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e52:	4b30      	ldr	r3, [pc, #192]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	492d      	ldr	r1, [pc, #180]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e64:	4b2b      	ldr	r3, [pc, #172]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	f023 0220 	bic.w	r2, r3, #32
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4928      	ldr	r1, [pc, #160]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e76:	4b27      	ldr	r3, [pc, #156]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	f023 0310 	bic.w	r3, r3, #16
 8003e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e82:	4b24      	ldr	r3, [pc, #144]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e86:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <RCCEx_PLL2_Config+0x160>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	69d2      	ldr	r2, [r2, #28]
 8003e8e:	00d2      	lsls	r2, r2, #3
 8003e90:	4920      	ldr	r1, [pc, #128]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e96:	4b1f      	ldr	r3, [pc, #124]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003e9c:	f043 0310 	orr.w	r3, r3, #16
 8003ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	4a19      	ldr	r2, [pc, #100]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003eae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003eb4:	e00f      	b.n	8003ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ebc:	4b15      	ldr	r3, [pc, #84]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	4a14      	ldr	r2, [pc, #80]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ec8:	e005      	b.n	8003ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003ed0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003edc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee2:	f7fc ff23 	bl	8000d2c <HAL_GetTick>
 8003ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ee8:	e008      	b.n	8003efc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003eea:	f7fc ff1f 	bl	8000d2c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e006      	b.n	8003f0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <RCCEx_PLL2_Config+0x15c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	58024400 	.word	0x58024400
 8003f18:	ffff0007 	.word	0xffff0007

08003f1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f2a:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d101      	bne.n	8003f3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e099      	b.n	800406e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f46:	f7fc fef1 	bl	8000d2c <HAL_GetTick>
 8003f4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f4e:	f7fc feed 	bl	8000d2c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e086      	b.n	800406e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f60:	4b45      	ldr	r3, [pc, #276]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f6c:	4b42      	ldr	r3, [pc, #264]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	051b      	lsls	r3, r3, #20
 8003f7a:	493f      	ldr	r1, [pc, #252]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	025b      	lsls	r3, r3, #9
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fb0:	4931      	ldr	r1, [pc, #196]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003fb6:	4b30      	ldr	r3, [pc, #192]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	492d      	ldr	r1, [pc, #180]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fcc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	4928      	ldr	r1, [pc, #160]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fda:	4b27      	ldr	r3, [pc, #156]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fde:	4a26      	ldr	r2, [pc, #152]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fe6:	4b24      	ldr	r3, [pc, #144]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fea:	4b24      	ldr	r3, [pc, #144]	@ (800407c <RCCEx_PLL3_Config+0x160>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	69d2      	ldr	r2, [r2, #28]
 8003ff2:	00d2      	lsls	r2, r2, #3
 8003ff4:	4920      	ldr	r1, [pc, #128]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	4a19      	ldr	r2, [pc, #100]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004018:	e00f      	b.n	800403a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004020:	4b15      	ldr	r3, [pc, #84]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	4a14      	ldr	r2, [pc, #80]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004026:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800402a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800402c:	e005      	b.n	800403a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800402e:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004032:	4a11      	ldr	r2, [pc, #68]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004038:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800403a:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a0e      	ldr	r2, [pc, #56]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004046:	f7fc fe71 	bl	8000d2c <HAL_GetTick>
 800404a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800404c:	e008      	b.n	8004060 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800404e:	f7fc fe6d 	bl	8000d2c <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <RCCEx_PLL3_Config+0x15c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	58024400 	.word	0x58024400
 800407c:	ffff0007 	.word	0xffff0007

08004080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e042      	b.n	8004118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fc fcf7 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2224      	movs	r2, #36	@ 0x24
 80040ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fe1e 	bl	8004d0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8b3 	bl	800423c <UART_SetConfig>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e01b      	b.n	8004118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fe9d 	bl	8004e50 <UART_CheckIdleState>
 8004116:	4603      	mov	r3, r0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	2b20      	cmp	r3, #32
 8004138:	d17b      	bne.n	8004232 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_UART_Transmit+0x26>
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e074      	b.n	8004234 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2221      	movs	r2, #33	@ 0x21
 8004156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800415a:	f7fc fde7 	bl	8000d2c <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	88fa      	ldrh	r2, [r7, #6]
 8004164:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004178:	d108      	bne.n	800418c <HAL_UART_Transmit+0x6c>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e003      	b.n	8004194 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004194:	e030      	b.n	80041f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	2180      	movs	r1, #128	@ 0x80
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 feff 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e03d      	b.n	8004234 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	3302      	adds	r3, #2
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	e007      	b.n	80041e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	3301      	adds	r3, #1
 80041e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1c8      	bne.n	8004196 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2200      	movs	r2, #0
 800420c:	2140      	movs	r1, #64	@ 0x40
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fec8 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e006      	b.n	8004234 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b092      	sub	sp, #72	@ 0x48
 8004242:	af00      	add	r7, sp, #0
 8004244:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	431a      	orrs	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	431a      	orrs	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	4313      	orrs	r3, r2
 8004262:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4bbe      	ldr	r3, [pc, #760]	@ (8004564 <UART_SetConfig+0x328>)
 800426c:	4013      	ands	r3, r2
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004274:	430b      	orrs	r3, r1
 8004276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4ab3      	ldr	r2, [pc, #716]	@ (8004568 <UART_SetConfig+0x32c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a4:	4313      	orrs	r3, r2
 80042a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	4baf      	ldr	r3, [pc, #700]	@ (800456c <UART_SetConfig+0x330>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	f023 010f 	bic.w	r1, r3, #15
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4aa6      	ldr	r2, [pc, #664]	@ (8004570 <UART_SetConfig+0x334>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d177      	bne.n	80043cc <UART_SetConfig+0x190>
 80042dc:	4ba5      	ldr	r3, [pc, #660]	@ (8004574 <UART_SetConfig+0x338>)
 80042de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e4:	2b28      	cmp	r3, #40	@ 0x28
 80042e6:	d86d      	bhi.n	80043c4 <UART_SetConfig+0x188>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <UART_SetConfig+0xb4>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004395 	.word	0x08004395
 80042f4:	080043c5 	.word	0x080043c5
 80042f8:	080043c5 	.word	0x080043c5
 80042fc:	080043c5 	.word	0x080043c5
 8004300:	080043c5 	.word	0x080043c5
 8004304:	080043c5 	.word	0x080043c5
 8004308:	080043c5 	.word	0x080043c5
 800430c:	080043c5 	.word	0x080043c5
 8004310:	0800439d 	.word	0x0800439d
 8004314:	080043c5 	.word	0x080043c5
 8004318:	080043c5 	.word	0x080043c5
 800431c:	080043c5 	.word	0x080043c5
 8004320:	080043c5 	.word	0x080043c5
 8004324:	080043c5 	.word	0x080043c5
 8004328:	080043c5 	.word	0x080043c5
 800432c:	080043c5 	.word	0x080043c5
 8004330:	080043a5 	.word	0x080043a5
 8004334:	080043c5 	.word	0x080043c5
 8004338:	080043c5 	.word	0x080043c5
 800433c:	080043c5 	.word	0x080043c5
 8004340:	080043c5 	.word	0x080043c5
 8004344:	080043c5 	.word	0x080043c5
 8004348:	080043c5 	.word	0x080043c5
 800434c:	080043c5 	.word	0x080043c5
 8004350:	080043ad 	.word	0x080043ad
 8004354:	080043c5 	.word	0x080043c5
 8004358:	080043c5 	.word	0x080043c5
 800435c:	080043c5 	.word	0x080043c5
 8004360:	080043c5 	.word	0x080043c5
 8004364:	080043c5 	.word	0x080043c5
 8004368:	080043c5 	.word	0x080043c5
 800436c:	080043c5 	.word	0x080043c5
 8004370:	080043b5 	.word	0x080043b5
 8004374:	080043c5 	.word	0x080043c5
 8004378:	080043c5 	.word	0x080043c5
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043c5 	.word	0x080043c5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043c5 	.word	0x080043c5
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043bd 	.word	0x080043bd
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800439a:	e222      	b.n	80047e2 <UART_SetConfig+0x5a6>
 800439c:	2304      	movs	r3, #4
 800439e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043a2:	e21e      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80043a4:	2308      	movs	r3, #8
 80043a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043aa:	e21a      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80043ac:	2310      	movs	r3, #16
 80043ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b2:	e216      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80043b4:	2320      	movs	r3, #32
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ba:	e212      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80043bc:	2340      	movs	r3, #64	@ 0x40
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c2:	e20e      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80043c4:	2380      	movs	r3, #128	@ 0x80
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ca:	e20a      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a69      	ldr	r2, [pc, #420]	@ (8004578 <UART_SetConfig+0x33c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d130      	bne.n	8004438 <UART_SetConfig+0x1fc>
 80043d6:	4b67      	ldr	r3, [pc, #412]	@ (8004574 <UART_SetConfig+0x338>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	2b05      	cmp	r3, #5
 80043e0:	d826      	bhi.n	8004430 <UART_SetConfig+0x1f4>
 80043e2:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <UART_SetConfig+0x1ac>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004401 	.word	0x08004401
 80043ec:	08004409 	.word	0x08004409
 80043f0:	08004411 	.word	0x08004411
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004429 	.word	0x08004429
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004406:	e1ec      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440e:	e1e8      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004416:	e1e4      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441e:	e1e0      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004420:	2320      	movs	r3, #32
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004426:	e1dc      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004428:	2340      	movs	r3, #64	@ 0x40
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442e:	e1d8      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004430:	2380      	movs	r3, #128	@ 0x80
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004436:	e1d4      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a4f      	ldr	r2, [pc, #316]	@ (800457c <UART_SetConfig+0x340>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d130      	bne.n	80044a4 <UART_SetConfig+0x268>
 8004442:	4b4c      	ldr	r3, [pc, #304]	@ (8004574 <UART_SetConfig+0x338>)
 8004444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b05      	cmp	r3, #5
 800444c:	d826      	bhi.n	800449c <UART_SetConfig+0x260>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <UART_SetConfig+0x218>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	0800446d 	.word	0x0800446d
 8004458:	08004475 	.word	0x08004475
 800445c:	0800447d 	.word	0x0800447d
 8004460:	08004485 	.word	0x08004485
 8004464:	0800448d 	.word	0x0800448d
 8004468:	08004495 	.word	0x08004495
 800446c:	2300      	movs	r3, #0
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004472:	e1b6      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447a:	e1b2      	b.n	80047e2 <UART_SetConfig+0x5a6>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004482:	e1ae      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448a:	e1aa      	b.n	80047e2 <UART_SetConfig+0x5a6>
 800448c:	2320      	movs	r3, #32
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004492:	e1a6      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004494:	2340      	movs	r3, #64	@ 0x40
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449a:	e1a2      	b.n	80047e2 <UART_SetConfig+0x5a6>
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a2:	e19e      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a35      	ldr	r2, [pc, #212]	@ (8004580 <UART_SetConfig+0x344>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d130      	bne.n	8004510 <UART_SetConfig+0x2d4>
 80044ae:	4b31      	ldr	r3, [pc, #196]	@ (8004574 <UART_SetConfig+0x338>)
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d826      	bhi.n	8004508 <UART_SetConfig+0x2cc>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <UART_SetConfig+0x284>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044e9 	.word	0x080044e9
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	08004501 	.word	0x08004501
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044de:	e180      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e6:	e17c      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ee:	e178      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f6:	e174      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80044f8:	2320      	movs	r3, #32
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044fe:	e170      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004500:	2340      	movs	r3, #64	@ 0x40
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004506:	e16c      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800450e:	e168      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1b      	ldr	r2, [pc, #108]	@ (8004584 <UART_SetConfig+0x348>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d142      	bne.n	80045a0 <UART_SetConfig+0x364>
 800451a:	4b16      	ldr	r3, [pc, #88]	@ (8004574 <UART_SetConfig+0x338>)
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	2b05      	cmp	r3, #5
 8004524:	d838      	bhi.n	8004598 <UART_SetConfig+0x35c>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <UART_SetConfig+0x2f0>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004545 	.word	0x08004545
 8004530:	0800454d 	.word	0x0800454d
 8004534:	08004555 	.word	0x08004555
 8004538:	0800455d 	.word	0x0800455d
 800453c:	08004589 	.word	0x08004589
 8004540:	08004591 	.word	0x08004591
 8004544:	2300      	movs	r3, #0
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454a:	e14a      	b.n	80047e2 <UART_SetConfig+0x5a6>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004552:	e146      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455a:	e142      	b.n	80047e2 <UART_SetConfig+0x5a6>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004562:	e13e      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004564:	cfff69f3 	.word	0xcfff69f3
 8004568:	58000c00 	.word	0x58000c00
 800456c:	11fff4ff 	.word	0x11fff4ff
 8004570:	40011000 	.word	0x40011000
 8004574:	58024400 	.word	0x58024400
 8004578:	40004400 	.word	0x40004400
 800457c:	40004800 	.word	0x40004800
 8004580:	40004c00 	.word	0x40004c00
 8004584:	40005000 	.word	0x40005000
 8004588:	2320      	movs	r3, #32
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800458e:	e128      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004590:	2340      	movs	r3, #64	@ 0x40
 8004592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004596:	e124      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004598:	2380      	movs	r3, #128	@ 0x80
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459e:	e120      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4acb      	ldr	r2, [pc, #812]	@ (80048d4 <UART_SetConfig+0x698>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d176      	bne.n	8004698 <UART_SetConfig+0x45c>
 80045aa:	4bcb      	ldr	r3, [pc, #812]	@ (80048d8 <UART_SetConfig+0x69c>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045b2:	2b28      	cmp	r3, #40	@ 0x28
 80045b4:	d86c      	bhi.n	8004690 <UART_SetConfig+0x454>
 80045b6:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <UART_SetConfig+0x380>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	08004661 	.word	0x08004661
 80045c0:	08004691 	.word	0x08004691
 80045c4:	08004691 	.word	0x08004691
 80045c8:	08004691 	.word	0x08004691
 80045cc:	08004691 	.word	0x08004691
 80045d0:	08004691 	.word	0x08004691
 80045d4:	08004691 	.word	0x08004691
 80045d8:	08004691 	.word	0x08004691
 80045dc:	08004669 	.word	0x08004669
 80045e0:	08004691 	.word	0x08004691
 80045e4:	08004691 	.word	0x08004691
 80045e8:	08004691 	.word	0x08004691
 80045ec:	08004691 	.word	0x08004691
 80045f0:	08004691 	.word	0x08004691
 80045f4:	08004691 	.word	0x08004691
 80045f8:	08004691 	.word	0x08004691
 80045fc:	08004671 	.word	0x08004671
 8004600:	08004691 	.word	0x08004691
 8004604:	08004691 	.word	0x08004691
 8004608:	08004691 	.word	0x08004691
 800460c:	08004691 	.word	0x08004691
 8004610:	08004691 	.word	0x08004691
 8004614:	08004691 	.word	0x08004691
 8004618:	08004691 	.word	0x08004691
 800461c:	08004679 	.word	0x08004679
 8004620:	08004691 	.word	0x08004691
 8004624:	08004691 	.word	0x08004691
 8004628:	08004691 	.word	0x08004691
 800462c:	08004691 	.word	0x08004691
 8004630:	08004691 	.word	0x08004691
 8004634:	08004691 	.word	0x08004691
 8004638:	08004691 	.word	0x08004691
 800463c:	08004681 	.word	0x08004681
 8004640:	08004691 	.word	0x08004691
 8004644:	08004691 	.word	0x08004691
 8004648:	08004691 	.word	0x08004691
 800464c:	08004691 	.word	0x08004691
 8004650:	08004691 	.word	0x08004691
 8004654:	08004691 	.word	0x08004691
 8004658:	08004691 	.word	0x08004691
 800465c:	08004689 	.word	0x08004689
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004666:	e0bc      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466e:	e0b8      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004676:	e0b4      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467e:	e0b0      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004680:	2320      	movs	r3, #32
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004686:	e0ac      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004688:	2340      	movs	r3, #64	@ 0x40
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468e:	e0a8      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004690:	2380      	movs	r3, #128	@ 0x80
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004696:	e0a4      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a8f      	ldr	r2, [pc, #572]	@ (80048dc <UART_SetConfig+0x6a0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d130      	bne.n	8004704 <UART_SetConfig+0x4c8>
 80046a2:	4b8d      	ldr	r3, [pc, #564]	@ (80048d8 <UART_SetConfig+0x69c>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b05      	cmp	r3, #5
 80046ac:	d826      	bhi.n	80046fc <UART_SetConfig+0x4c0>
 80046ae:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0x478>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	080046cd 	.word	0x080046cd
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046dd 	.word	0x080046dd
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d2:	e086      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046da:	e082      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e2:	e07e      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ea:	e07a      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80046ec:	2320      	movs	r3, #32
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f2:	e076      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80046f4:	2340      	movs	r3, #64	@ 0x40
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fa:	e072      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004702:	e06e      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a75      	ldr	r2, [pc, #468]	@ (80048e0 <UART_SetConfig+0x6a4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d130      	bne.n	8004770 <UART_SetConfig+0x534>
 800470e:	4b72      	ldr	r3, [pc, #456]	@ (80048d8 <UART_SetConfig+0x69c>)
 8004710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2b05      	cmp	r3, #5
 8004718:	d826      	bhi.n	8004768 <UART_SetConfig+0x52c>
 800471a:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0x4e4>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004739 	.word	0x08004739
 8004724:	08004741 	.word	0x08004741
 8004728:	08004749 	.word	0x08004749
 800472c:	08004751 	.word	0x08004751
 8004730:	08004759 	.word	0x08004759
 8004734:	08004761 	.word	0x08004761
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e050      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004746:	e04c      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004748:	2308      	movs	r3, #8
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474e:	e048      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004750:	2310      	movs	r3, #16
 8004752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004756:	e044      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004758:	2320      	movs	r3, #32
 800475a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475e:	e040      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004760:	2340      	movs	r3, #64	@ 0x40
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004766:	e03c      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004768:	2380      	movs	r3, #128	@ 0x80
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476e:	e038      	b.n	80047e2 <UART_SetConfig+0x5a6>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a5b      	ldr	r2, [pc, #364]	@ (80048e4 <UART_SetConfig+0x6a8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d130      	bne.n	80047dc <UART_SetConfig+0x5a0>
 800477a:	4b57      	ldr	r3, [pc, #348]	@ (80048d8 <UART_SetConfig+0x69c>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2b05      	cmp	r3, #5
 8004784:	d826      	bhi.n	80047d4 <UART_SetConfig+0x598>
 8004786:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <UART_SetConfig+0x550>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047a5 	.word	0x080047a5
 8004790:	080047ad 	.word	0x080047ad
 8004794:	080047b5 	.word	0x080047b5
 8004798:	080047bd 	.word	0x080047bd
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	080047cd 	.word	0x080047cd
 80047a4:	2302      	movs	r3, #2
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047aa:	e01a      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80047ac:	2304      	movs	r3, #4
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b2:	e016      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80047b4:	2308      	movs	r3, #8
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ba:	e012      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c2:	e00e      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80047c4:	2320      	movs	r3, #32
 80047c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ca:	e00a      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80047cc:	2340      	movs	r3, #64	@ 0x40
 80047ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d2:	e006      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047da:	e002      	b.n	80047e2 <UART_SetConfig+0x5a6>
 80047dc:	2380      	movs	r3, #128	@ 0x80
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a3f      	ldr	r2, [pc, #252]	@ (80048e4 <UART_SetConfig+0x6a8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	f040 80f8 	bne.w	80049de <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	dc46      	bgt.n	8004884 <UART_SetConfig+0x648>
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	f2c0 8082 	blt.w	8004900 <UART_SetConfig+0x6c4>
 80047fc:	3b02      	subs	r3, #2
 80047fe:	2b1e      	cmp	r3, #30
 8004800:	d87e      	bhi.n	8004900 <UART_SetConfig+0x6c4>
 8004802:	a201      	add	r2, pc, #4	@ (adr r2, 8004808 <UART_SetConfig+0x5cc>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	0800488b 	.word	0x0800488b
 800480c:	08004901 	.word	0x08004901
 8004810:	08004893 	.word	0x08004893
 8004814:	08004901 	.word	0x08004901
 8004818:	08004901 	.word	0x08004901
 800481c:	08004901 	.word	0x08004901
 8004820:	080048a3 	.word	0x080048a3
 8004824:	08004901 	.word	0x08004901
 8004828:	08004901 	.word	0x08004901
 800482c:	08004901 	.word	0x08004901
 8004830:	08004901 	.word	0x08004901
 8004834:	08004901 	.word	0x08004901
 8004838:	08004901 	.word	0x08004901
 800483c:	08004901 	.word	0x08004901
 8004840:	080048b3 	.word	0x080048b3
 8004844:	08004901 	.word	0x08004901
 8004848:	08004901 	.word	0x08004901
 800484c:	08004901 	.word	0x08004901
 8004850:	08004901 	.word	0x08004901
 8004854:	08004901 	.word	0x08004901
 8004858:	08004901 	.word	0x08004901
 800485c:	08004901 	.word	0x08004901
 8004860:	08004901 	.word	0x08004901
 8004864:	08004901 	.word	0x08004901
 8004868:	08004901 	.word	0x08004901
 800486c:	08004901 	.word	0x08004901
 8004870:	08004901 	.word	0x08004901
 8004874:	08004901 	.word	0x08004901
 8004878:	08004901 	.word	0x08004901
 800487c:	08004901 	.word	0x08004901
 8004880:	080048f3 	.word	0x080048f3
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d037      	beq.n	80048f8 <UART_SetConfig+0x6bc>
 8004888:	e03a      	b.n	8004900 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800488a:	f7fe ffd7 	bl	800383c <HAL_RCCEx_GetD3PCLK1Freq>
 800488e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004890:	e03c      	b.n	800490c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe ffe6 	bl	8003868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048a0:	e034      	b.n	800490c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048a2:	f107 0318 	add.w	r3, r7, #24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff f932 	bl	8003b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048b0:	e02c      	b.n	800490c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <UART_SetConfig+0x69c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048be:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <UART_SetConfig+0x69c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	08db      	lsrs	r3, r3, #3
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <UART_SetConfig+0x6ac>)
 80048ca:	fa22 f303 	lsr.w	r3, r2, r3
 80048ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048d0:	e01c      	b.n	800490c <UART_SetConfig+0x6d0>
 80048d2:	bf00      	nop
 80048d4:	40011400 	.word	0x40011400
 80048d8:	58024400 	.word	0x58024400
 80048dc:	40007800 	.word	0x40007800
 80048e0:	40007c00 	.word	0x40007c00
 80048e4:	58000c00 	.word	0x58000c00
 80048e8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80048ec:	4b9d      	ldr	r3, [pc, #628]	@ (8004b64 <UART_SetConfig+0x928>)
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048f0:	e00c      	b.n	800490c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048f2:	4b9d      	ldr	r3, [pc, #628]	@ (8004b68 <UART_SetConfig+0x92c>)
 80048f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048f6:	e009      	b.n	800490c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048fe:	e005      	b.n	800490c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800490a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800490c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 81de 	beq.w	8004cd0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	4a94      	ldr	r2, [pc, #592]	@ (8004b6c <UART_SetConfig+0x930>)
 800491a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800491e:	461a      	mov	r2, r3
 8004920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004922:	fbb3 f3f2 	udiv	r3, r3, r2
 8004926:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004934:	429a      	cmp	r2, r3
 8004936:	d305      	bcc.n	8004944 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800493e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004940:	429a      	cmp	r2, r3
 8004942:	d903      	bls.n	800494c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800494a:	e1c1      	b.n	8004cd0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800494c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494e:	2200      	movs	r2, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	60fa      	str	r2, [r7, #12]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004958:	4a84      	ldr	r2, [pc, #528]	@ (8004b6c <UART_SetConfig+0x930>)
 800495a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800495e:	b29b      	uxth	r3, r3
 8004960:	2200      	movs	r2, #0
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800496e:	f7fb fcbb 	bl	80002e8 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4610      	mov	r0, r2
 8004978:	4619      	mov	r1, r3
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	020b      	lsls	r3, r1, #8
 8004984:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004988:	0202      	lsls	r2, r0, #8
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	6849      	ldr	r1, [r1, #4]
 800498e:	0849      	lsrs	r1, r1, #1
 8004990:	2000      	movs	r0, #0
 8004992:	460c      	mov	r4, r1
 8004994:	4605      	mov	r5, r0
 8004996:	eb12 0804 	adds.w	r8, r2, r4
 800499a:	eb43 0905 	adc.w	r9, r3, r5
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	469a      	mov	sl, r3
 80049a6:	4693      	mov	fp, r2
 80049a8:	4652      	mov	r2, sl
 80049aa:	465b      	mov	r3, fp
 80049ac:	4640      	mov	r0, r8
 80049ae:	4649      	mov	r1, r9
 80049b0:	f7fb fc9a 	bl	80002e8 <__aeabi_uldivmod>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4613      	mov	r3, r2
 80049ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c2:	d308      	bcc.n	80049d6 <UART_SetConfig+0x79a>
 80049c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049ca:	d204      	bcs.n	80049d6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	e17c      	b.n	8004cd0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80049dc:	e178      	b.n	8004cd0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e6:	f040 80c5 	bne.w	8004b74 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80049ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	dc48      	bgt.n	8004a84 <UART_SetConfig+0x848>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db7b      	blt.n	8004aee <UART_SetConfig+0x8b2>
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d879      	bhi.n	8004aee <UART_SetConfig+0x8b2>
 80049fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <UART_SetConfig+0x7c4>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a8b 	.word	0x08004a8b
 8004a04:	08004a93 	.word	0x08004a93
 8004a08:	08004aef 	.word	0x08004aef
 8004a0c:	08004aef 	.word	0x08004aef
 8004a10:	08004a9b 	.word	0x08004a9b
 8004a14:	08004aef 	.word	0x08004aef
 8004a18:	08004aef 	.word	0x08004aef
 8004a1c:	08004aef 	.word	0x08004aef
 8004a20:	08004aab 	.word	0x08004aab
 8004a24:	08004aef 	.word	0x08004aef
 8004a28:	08004aef 	.word	0x08004aef
 8004a2c:	08004aef 	.word	0x08004aef
 8004a30:	08004aef 	.word	0x08004aef
 8004a34:	08004aef 	.word	0x08004aef
 8004a38:	08004aef 	.word	0x08004aef
 8004a3c:	08004aef 	.word	0x08004aef
 8004a40:	08004abb 	.word	0x08004abb
 8004a44:	08004aef 	.word	0x08004aef
 8004a48:	08004aef 	.word	0x08004aef
 8004a4c:	08004aef 	.word	0x08004aef
 8004a50:	08004aef 	.word	0x08004aef
 8004a54:	08004aef 	.word	0x08004aef
 8004a58:	08004aef 	.word	0x08004aef
 8004a5c:	08004aef 	.word	0x08004aef
 8004a60:	08004aef 	.word	0x08004aef
 8004a64:	08004aef 	.word	0x08004aef
 8004a68:	08004aef 	.word	0x08004aef
 8004a6c:	08004aef 	.word	0x08004aef
 8004a70:	08004aef 	.word	0x08004aef
 8004a74:	08004aef 	.word	0x08004aef
 8004a78:	08004aef 	.word	0x08004aef
 8004a7c:	08004aef 	.word	0x08004aef
 8004a80:	08004ae1 	.word	0x08004ae1
 8004a84:	2b40      	cmp	r3, #64	@ 0x40
 8004a86:	d02e      	beq.n	8004ae6 <UART_SetConfig+0x8aa>
 8004a88:	e031      	b.n	8004aee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8a:	f7fd fc61 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8004a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a90:	e033      	b.n	8004afa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a92:	f7fd fc73 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8004a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a98:	e02f      	b.n	8004afa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe fee2 	bl	8003868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aa8:	e027      	b.n	8004afa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004aaa:	f107 0318 	add.w	r3, r7, #24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f82e 	bl	8003b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ab8:	e01f      	b.n	8004afa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aba:	4b2d      	ldr	r3, [pc, #180]	@ (8004b70 <UART_SetConfig+0x934>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b70 <UART_SetConfig+0x934>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	08db      	lsrs	r3, r3, #3
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	4a24      	ldr	r2, [pc, #144]	@ (8004b64 <UART_SetConfig+0x928>)
 8004ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ad8:	e00f      	b.n	8004afa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004ada:	4b22      	ldr	r3, [pc, #136]	@ (8004b64 <UART_SetConfig+0x928>)
 8004adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ade:	e00c      	b.n	8004afa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ae0:	4b21      	ldr	r3, [pc, #132]	@ (8004b68 <UART_SetConfig+0x92c>)
 8004ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ae4:	e009      	b.n	8004afa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aec:	e005      	b.n	8004afa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80e7 	beq.w	8004cd0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <UART_SetConfig+0x930>)
 8004b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b14:	005a      	lsls	r2, r3, #1
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	441a      	add	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d916      	bls.n	8004b5c <UART_SetConfig+0x920>
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b34:	d212      	bcs.n	8004b5c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f023 030f 	bic.w	r3, r3, #15
 8004b3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e0b9      	b.n	8004cd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b62:	e0b5      	b.n	8004cd0 <UART_SetConfig+0xa94>
 8004b64:	03d09000 	.word	0x03d09000
 8004b68:	003d0900 	.word	0x003d0900
 8004b6c:	080053e0 	.word	0x080053e0
 8004b70:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b74:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	dc49      	bgt.n	8004c10 <UART_SetConfig+0x9d4>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db7c      	blt.n	8004c7a <UART_SetConfig+0xa3e>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d87a      	bhi.n	8004c7a <UART_SetConfig+0xa3e>
 8004b84:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <UART_SetConfig+0x950>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004c17 	.word	0x08004c17
 8004b90:	08004c1f 	.word	0x08004c1f
 8004b94:	08004c7b 	.word	0x08004c7b
 8004b98:	08004c7b 	.word	0x08004c7b
 8004b9c:	08004c27 	.word	0x08004c27
 8004ba0:	08004c7b 	.word	0x08004c7b
 8004ba4:	08004c7b 	.word	0x08004c7b
 8004ba8:	08004c7b 	.word	0x08004c7b
 8004bac:	08004c37 	.word	0x08004c37
 8004bb0:	08004c7b 	.word	0x08004c7b
 8004bb4:	08004c7b 	.word	0x08004c7b
 8004bb8:	08004c7b 	.word	0x08004c7b
 8004bbc:	08004c7b 	.word	0x08004c7b
 8004bc0:	08004c7b 	.word	0x08004c7b
 8004bc4:	08004c7b 	.word	0x08004c7b
 8004bc8:	08004c7b 	.word	0x08004c7b
 8004bcc:	08004c47 	.word	0x08004c47
 8004bd0:	08004c7b 	.word	0x08004c7b
 8004bd4:	08004c7b 	.word	0x08004c7b
 8004bd8:	08004c7b 	.word	0x08004c7b
 8004bdc:	08004c7b 	.word	0x08004c7b
 8004be0:	08004c7b 	.word	0x08004c7b
 8004be4:	08004c7b 	.word	0x08004c7b
 8004be8:	08004c7b 	.word	0x08004c7b
 8004bec:	08004c7b 	.word	0x08004c7b
 8004bf0:	08004c7b 	.word	0x08004c7b
 8004bf4:	08004c7b 	.word	0x08004c7b
 8004bf8:	08004c7b 	.word	0x08004c7b
 8004bfc:	08004c7b 	.word	0x08004c7b
 8004c00:	08004c7b 	.word	0x08004c7b
 8004c04:	08004c7b 	.word	0x08004c7b
 8004c08:	08004c7b 	.word	0x08004c7b
 8004c0c:	08004c6d 	.word	0x08004c6d
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d02e      	beq.n	8004c72 <UART_SetConfig+0xa36>
 8004c14:	e031      	b.n	8004c7a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c16:	f7fd fb9b 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8004c1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c1c:	e033      	b.n	8004c86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c1e:	f7fd fbad 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8004c22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c24:	e02f      	b.n	8004c86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fe1c 	bl	8003868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c34:	e027      	b.n	8004c86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c36:	f107 0318 	add.w	r3, r7, #24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe ff68 	bl	8003b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c44:	e01f      	b.n	8004c86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c46:	4b2d      	ldr	r3, [pc, #180]	@ (8004cfc <UART_SetConfig+0xac0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c52:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <UART_SetConfig+0xac0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	08db      	lsrs	r3, r3, #3
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	4a28      	ldr	r2, [pc, #160]	@ (8004d00 <UART_SetConfig+0xac4>)
 8004c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c64:	e00f      	b.n	8004c86 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004c66:	4b26      	ldr	r3, [pc, #152]	@ (8004d00 <UART_SetConfig+0xac4>)
 8004c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c6a:	e00c      	b.n	8004c86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c6c:	4b25      	ldr	r3, [pc, #148]	@ (8004d04 <UART_SetConfig+0xac8>)
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c70:	e009      	b.n	8004c86 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c78:	e005      	b.n	8004c86 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c84:	bf00      	nop
    }

    if (pclk != 0U)
 8004c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d021      	beq.n	8004cd0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	4a1d      	ldr	r2, [pc, #116]	@ (8004d08 <UART_SetConfig+0xacc>)
 8004c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c96:	461a      	mov	r2, r3
 8004c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	441a      	add	r2, r3
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb2:	2b0f      	cmp	r3, #15
 8004cb4:	d909      	bls.n	8004cca <UART_SetConfig+0xa8e>
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cbc:	d205      	bcs.n	8004cca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
 8004cc8:	e002      	b.n	8004cd0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004cec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3748      	adds	r7, #72	@ 0x48
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfa:	bf00      	nop
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	03d09000 	.word	0x03d09000
 8004d04:	003d0900 	.word	0x003d0900
 8004d08:	080053e0 	.word	0x080053e0

08004d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01a      	beq.n	8004e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e0a:	d10a      	bne.n	8004e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b098      	sub	sp, #96	@ 0x60
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e60:	f7fb ff64 	bl	8000d2c <HAL_GetTick>
 8004e64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d12f      	bne.n	8004ed4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f88e 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d022      	beq.n	8004ed4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e6      	bne.n	8004e8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e063      	b.n	8004f9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d149      	bne.n	8004f76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f857 	bl	8004fa4 <UART_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03c      	beq.n	8004f76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	623b      	str	r3, [r7, #32]
   return(result);
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f4e:	61fa      	str	r2, [r7, #28]
 8004f50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	69b9      	ldr	r1, [r7, #24]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e012      	b.n	8004f9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3758      	adds	r7, #88	@ 0x58
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb4:	e04f      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d04b      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fb feb5 	bl	8000d2c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e04e      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d037      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b80      	cmp	r3, #128	@ 0x80
 8004fea:	d034      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b40      	cmp	r3, #64	@ 0x40
 8004ff0:	d031      	beq.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d110      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2208      	movs	r2, #8
 8005006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f839 	bl	8005080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2208      	movs	r2, #8
 8005012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e029      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800502c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005030:	d111      	bne.n	8005056 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800503a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f81f 	bl	8005080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e00f      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	429a      	cmp	r2, r3
 8005072:	d0a0      	beq.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b095      	sub	sp, #84	@ 0x54
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800509c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005148 <UART_EndRxTransfer+0xc8>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e5      	bne.n	80050ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d118      	bne.n	8005128 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	60bb      	str	r3, [r7, #8]
   return(result);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	647b      	str	r3, [r7, #68]	@ 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6979      	ldr	r1, [r7, #20]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	613b      	str	r3, [r7, #16]
   return(result);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800513c:	bf00      	nop
 800513e:	3754      	adds	r7, #84	@ 0x54
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	effffffe 	.word	0xeffffffe

0800514c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_UARTEx_DisableFifoMode+0x16>
 800515e:	2302      	movs	r3, #2
 8005160:	e027      	b.n	80051b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2224      	movs	r2, #36	@ 0x24
 800516e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e02d      	b.n	8005232 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2224      	movs	r2, #36	@ 0x24
 80051e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f850 	bl	80052b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800524e:	2302      	movs	r3, #2
 8005250:	e02d      	b.n	80052ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2224      	movs	r2, #36	@ 0x24
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f812 	bl	80052b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d108      	bne.n	80052da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052d8:	e031      	b.n	800533e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052da:	2310      	movs	r3, #16
 80052dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052de:	2310      	movs	r3, #16
 80052e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	0e5b      	lsrs	r3, r3, #25
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	0f5b      	lsrs	r3, r3, #29
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	7b3a      	ldrb	r2, [r7, #12]
 8005306:	4911      	ldr	r1, [pc, #68]	@ (800534c <UARTEx_SetNbDataToProcess+0x94>)
 8005308:	5c8a      	ldrb	r2, [r1, r2]
 800530a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800530e:	7b3a      	ldrb	r2, [r7, #12]
 8005310:	490f      	ldr	r1, [pc, #60]	@ (8005350 <UARTEx_SetNbDataToProcess+0x98>)
 8005312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005314:	fb93 f3f2 	sdiv	r3, r3, r2
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	7b7a      	ldrb	r2, [r7, #13]
 8005324:	4909      	ldr	r1, [pc, #36]	@ (800534c <UARTEx_SetNbDataToProcess+0x94>)
 8005326:	5c8a      	ldrb	r2, [r1, r2]
 8005328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800532c:	7b7a      	ldrb	r2, [r7, #13]
 800532e:	4908      	ldr	r1, [pc, #32]	@ (8005350 <UARTEx_SetNbDataToProcess+0x98>)
 8005330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005332:	fb93 f3f2 	sdiv	r3, r3, r2
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	080053f8 	.word	0x080053f8
 8005350:	08005400 	.word	0x08005400

08005354 <memset>:
 8005354:	4402      	add	r2, r0
 8005356:	4603      	mov	r3, r0
 8005358:	4293      	cmp	r3, r2
 800535a:	d100      	bne.n	800535e <memset+0xa>
 800535c:	4770      	bx	lr
 800535e:	f803 1b01 	strb.w	r1, [r3], #1
 8005362:	e7f9      	b.n	8005358 <memset+0x4>

08005364 <__libc_init_array>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	4d0d      	ldr	r5, [pc, #52]	@ (800539c <__libc_init_array+0x38>)
 8005368:	4c0d      	ldr	r4, [pc, #52]	@ (80053a0 <__libc_init_array+0x3c>)
 800536a:	1b64      	subs	r4, r4, r5
 800536c:	10a4      	asrs	r4, r4, #2
 800536e:	2600      	movs	r6, #0
 8005370:	42a6      	cmp	r6, r4
 8005372:	d109      	bne.n	8005388 <__libc_init_array+0x24>
 8005374:	4d0b      	ldr	r5, [pc, #44]	@ (80053a4 <__libc_init_array+0x40>)
 8005376:	4c0c      	ldr	r4, [pc, #48]	@ (80053a8 <__libc_init_array+0x44>)
 8005378:	f000 f818 	bl	80053ac <_init>
 800537c:	1b64      	subs	r4, r4, r5
 800537e:	10a4      	asrs	r4, r4, #2
 8005380:	2600      	movs	r6, #0
 8005382:	42a6      	cmp	r6, r4
 8005384:	d105      	bne.n	8005392 <__libc_init_array+0x2e>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	f855 3b04 	ldr.w	r3, [r5], #4
 800538c:	4798      	blx	r3
 800538e:	3601      	adds	r6, #1
 8005390:	e7ee      	b.n	8005370 <__libc_init_array+0xc>
 8005392:	f855 3b04 	ldr.w	r3, [r5], #4
 8005396:	4798      	blx	r3
 8005398:	3601      	adds	r6, #1
 800539a:	e7f2      	b.n	8005382 <__libc_init_array+0x1e>
 800539c:	08005410 	.word	0x08005410
 80053a0:	08005410 	.word	0x08005410
 80053a4:	08005410 	.word	0x08005410
 80053a8:	08005414 	.word	0x08005414

080053ac <_init>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr

080053b8 <_fini>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr
