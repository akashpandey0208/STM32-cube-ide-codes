
SPI_002_Array_Transmit_Receive_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007624  08007624  00008624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  080076a8  080076a8  000086a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000086b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  24000000  080076b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  24000078  08007730  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400031c  08007730  0000931c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001315b  00000000  00000000  000090a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000256f  00000000  00000000  0001c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  0001e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9e  00000000  00000000  0001f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fe12  00000000  00000000  0001ffde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014377  00000000  00000000  0005fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019ad24  00000000  00000000  00074167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020ee8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000414c  00000000  00000000  0020eed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0021301c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800760c 	.word	0x0800760c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800760c 	.word	0x0800760c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <HAL_SPI_TxRxCpltCallback>:
uint8_t spi_rx_buffer[20] = {0};  // Buffer to store received data
volatile uint8_t spi_done = 0;    // SPI transaction complete flag

/* SPI Callback - Called when SPI transfer is complete */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    spi_done = 1; // Set flag to indicate SPI transaction complete
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	240001c4 	.word	0x240001c4

080007bc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(char ch)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007c6:	1df9      	adds	r1, r7, #7
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2201      	movs	r2, #1
 80007ce:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <__io_putchar+0x24>)
 80007d0:	f004 fe95 	bl	80054fe <HAL_UART_Transmit>
    return ch;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2400011c 	.word	0x2400011c

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fbaf 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f841 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f949 	bl	8000a88 <MX_GPIO_Init>
  MX_SPI5_Init();
 80007f6:	f000 f8a5 	bl	8000944 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 80007fa:	f000 f8f9 	bl	80009f0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Start SPI Communication */
	         spi_done = 0; // Reset the flag
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <main+0x78>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
	         HAL_SPI_TransmitReceive_IT(&hspi5, spi_tx_buffer, spi_rx_buffer, sizeof(spi_tx_buffer));
 8000804:	230a      	movs	r3, #10
 8000806:	4a16      	ldr	r2, [pc, #88]	@ (8000860 <main+0x7c>)
 8000808:	4916      	ldr	r1, [pc, #88]	@ (8000864 <main+0x80>)
 800080a:	4817      	ldr	r0, [pc, #92]	@ (8000868 <main+0x84>)
 800080c:	f004 f936 	bl	8004a7c <HAL_SPI_TransmitReceive_IT>
	         printf("Received Array: ");
 8000810:	4816      	ldr	r0, [pc, #88]	@ (800086c <main+0x88>)
 8000812:	f006 f851 	bl	80068b8 <iprintf>
	         /* Wait for SPI Transaction to Complete */
	         while (!spi_done);
 8000816:	bf00      	nop
 8000818:	4b10      	ldr	r3, [pc, #64]	@ (800085c <main+0x78>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0fa      	beq.n	8000818 <main+0x34>

	         /* Print Received Array Numbers */
	         printf("Received Array: ");
 8000822:	4812      	ldr	r0, [pc, #72]	@ (800086c <main+0x88>)
 8000824:	f006 f848 	bl	80068b8 <iprintf>
	         for (int i = 0; i < sizeof(spi_rx_buffer); i++)
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	e00a      	b.n	8000844 <main+0x60>
	         {
	             printf("%d ", spi_rx_buffer[i]);
 800082e:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <main+0x7c>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	4619      	mov	r1, r3
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <main+0x8c>)
 800083a:	f006 f83d 	bl	80068b8 <iprintf>
	         for (int i = 0; i < sizeof(spi_rx_buffer); i++)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3301      	adds	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b13      	cmp	r3, #19
 8000848:	d9f1      	bls.n	800082e <main+0x4a>
	         }
	         printf("\n");
 800084a:	200a      	movs	r0, #10
 800084c:	f006 f846 	bl	80068dc <putchar>

	         HAL_Delay(1000); // Delay 1 second before next transaction
 8000850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000854:	f000 fc0c 	bl	8001070 <HAL_Delay>
	         spi_done = 0; // Reset the flag
 8000858:	e7d1      	b.n	80007fe <main+0x1a>
 800085a:	bf00      	nop
 800085c:	240001c4 	.word	0x240001c4
 8000860:	240001b0 	.word	0x240001b0
 8000864:	24000008 	.word	0x24000008
 8000868:	24000094 	.word	0x24000094
 800086c:	08007624 	.word	0x08007624
 8000870:	08007638 	.word	0x08007638

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	224c      	movs	r2, #76	@ 0x4c
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f006 f875 	bl	8006972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2220      	movs	r2, #32
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f006 f86f 	bl	8006972 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000894:	2004      	movs	r0, #4
 8000896:	f001 f921 	bl	8001adc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b27      	ldr	r3, [pc, #156]	@ (800093c <SystemClock_Config+0xc8>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a2:	4a26      	ldr	r2, [pc, #152]	@ (800093c <SystemClock_Config+0xc8>)
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008aa:	4b24      	ldr	r3, [pc, #144]	@ (800093c <SystemClock_Config+0xc8>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <SystemClock_Config+0xcc>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a21      	ldr	r2, [pc, #132]	@ (8000940 <SystemClock_Config+0xcc>)
 80008ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <SystemClock_Config+0xcc>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008cc:	bf00      	nop
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <SystemClock_Config+0xcc>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008da:	d1f8      	bne.n	80008ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 f94d 	bl	8001b90 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f8fc 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	233f      	movs	r3, #63	@ 0x3f
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800090c:	2309      	movs	r3, #9
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fd8d 	bl	8002444 <HAL_RCC_ClockConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000930:	f000 f8e2 	bl	8000af8 <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3770      	adds	r7, #112	@ 0x70
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	58000400 	.word	0x58000400
 8000940:	58024800 	.word	0x58024800

08000944 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000948:	4b27      	ldr	r3, [pc, #156]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 800094a:	4a28      	ldr	r2, [pc, #160]	@ (80009ec <MX_SPI5_Init+0xa8>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000950:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000954:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 800095e:	2207      	movs	r2, #7
 8000960:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000962:	4b21      	ldr	r3, [pc, #132]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800096e:	4b1e      	ldr	r3, [pc, #120]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000970:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000974:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000976:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000978:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800097c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000984:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000990:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 8000998:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800099c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800099e:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009a4:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <MX_SPI5_Init+0xa4>)
 80009d6:	f003 ff2d 	bl	8004834 <HAL_SPI_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 80009e0:	f000 f88a 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	24000094 	.word	0x24000094
 80009ec:	40015000 	.word	0x40015000

080009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 80009f6:	4a23      	ldr	r2, [pc, #140]	@ (8000a84 <MX_USART1_UART_Init+0x94>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a38:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a3a:	f004 fd10 	bl	800545e <HAL_UART_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f858 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a4c:	f005 fda7 	bl	800659e <HAL_UARTEx_SetTxFifoThreshold>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a56:	f000 f84f 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a5e:	f005 fddc 	bl	800661a <HAL_UARTEx_SetRxFifoThreshold>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 f846 	bl	8000af8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_USART1_UART_Init+0x90>)
 8000a6e:	f005 fd5d 	bl	800652c <HAL_UARTEx_DisableFifoMode>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a78:	f000 f83e 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2400011c 	.word	0x2400011c
 8000a84:	40011000 	.word	0x40011000

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a94:	4a17      	ldr	r2, [pc, #92]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab2:	4a10      	ldr	r2, [pc, #64]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000ab4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000abc:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad0:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_GPIO_Init+0x6c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	58024400 	.word	0x58024400

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <Error_Handler+0x8>

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b10:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x30>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x30>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	58024400 	.word	0x58024400

08000b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0be      	sub	sp, #248	@ 0xf8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	22c8      	movs	r2, #200	@ 0xc8
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 ff0a 	bl	8006972 <memset>
  if(hspi->Instance==SPI5)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a3d      	ldr	r2, [pc, #244]	@ (8000c58 <HAL_SPI_MspInit+0x120>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d172      	bne.n	8000c4e <HAL_SPI_MspInit+0x116>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8000b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6c:	f04f 0300 	mov.w	r3, #0
 8000b70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 ffec 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000b8a:	f7ff ffb5 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000b8e:	4b33      	ldr	r3, [pc, #204]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b94:	4a31      	ldr	r2, [pc, #196]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ba4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bac:	4b2b      	ldr	r3, [pc, #172]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000bb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bca:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a22      	ldr	r2, [pc, #136]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <HAL_SPI_MspInit+0x124>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c00:	2305      	movs	r3, #5
 8000c02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c06:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4814      	ldr	r0, [pc, #80]	@ (8000c60 <HAL_SPI_MspInit+0x128>)
 8000c0e:	f000 fdb5 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000c12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c32:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000c36:	4619      	mov	r1, r3
 8000c38:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <HAL_SPI_MspInit+0x12c>)
 8000c3a:	f000 fd9f 	bl	800177c <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	2055      	movs	r0, #85	@ 0x55
 8000c44:	f000 fb1f 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000c48:	2055      	movs	r0, #85	@ 0x55
 8000c4a:	f000 fb36 	bl	80012ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000c4e:	bf00      	nop
 8000c50:	37f8      	adds	r7, #248	@ 0xf8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40015000 	.word	0x40015000
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58022800 	.word	0x58022800
 8000c64:	58022400 	.word	0x58022400

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0bc      	sub	sp, #240	@ 0xf0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	22c8      	movs	r2, #200	@ 0xc8
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 fe72 	bl	8006972 <memset>
  if(huart->Instance==USART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a27      	ldr	r2, [pc, #156]	@ (8000d30 <HAL_UART_MspInit+0xc8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d146      	bne.n	8000d26 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c98:	f04f 0201 	mov.w	r2, #1
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 ff54 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cba:	f7ff ff1d 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <HAL_UART_MspInit+0xcc>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000cfa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d14:	2307      	movs	r3, #7
 8000d16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <HAL_UART_MspInit+0xd0>)
 8000d22:	f000 fd2b 	bl	800177c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d26:	bf00      	nop
 8000d28:	37f0      	adds	r7, #240	@ 0xf0
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40011000 	.word	0x40011000
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58020000 	.word	0x58020000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d92:	f000 f94d 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <SPI5_IRQHandler+0x10>)
 8000da2:	f003 ff7d 	bl	8004ca0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000094 	.word	0x24000094

08000db0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fcd9 	bl	80007bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
  }
  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f005 fda8 	bl	8006a10 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	24080000 	.word	0x24080000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	240001c8 	.word	0x240001c8
 8000ef4:	24000320 	.word	0x24000320

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000efc:	f7ff fbb8 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f26:	f005 fd79 	bl	8006a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fc5b 	bl	80007e4 <main>
  bx  lr
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f38:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000f3c:	080076b8 	.word	0x080076b8
  ldr r2, =_sbss
 8000f40:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000f44:	2400031c 	.word	0x2400031c

08000f48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC3_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 f98c 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f58:	f001 fc2a 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <HAL_Init+0x68>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	4913      	ldr	r1, [pc, #76]	@ (8000fb8 <HAL_Init+0x6c>)
 8000f6a:	5ccb      	ldrb	r3, [r1, r3]
 8000f6c:	f003 031f 	and.w	r3, r3, #31
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_Init+0x68>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb8 <HAL_Init+0x6c>)
 8000f80:	5cd3      	ldrb	r3, [r2, r3]
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <HAL_Init+0x70>)
 8000f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f90:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_Init+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f814 	bl	8000fc4 <HAL_InitTick>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e002      	b.n	8000fac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa6:	f7ff fdad 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	0800763c 	.word	0x0800763c
 8000fbc:	24000004 	.word	0x24000004
 8000fc0:	24000000 	.word	0x24000000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_InitTick+0x60>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e021      	b.n	800101c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <HAL_InitTick+0x64>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_InitTick+0x60>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f971 	bl	80012d6 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f93b 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x68>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24000018 	.word	0x24000018
 8001028:	24000000 	.word	0x24000000
 800102c:	24000014 	.word	0x24000014

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	24000018 	.word	0x24000018
 8001054:	240001cc 	.word	0x240001cc

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	240001cc 	.word	0x240001cc

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000018 	.word	0x24000018

080010b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010bc:	4b03      	ldr	r3, [pc, #12]	@ (80010cc <HAL_GetREVID+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	0c1b      	lsrs	r3, r3, #16
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	5c001000 	.word	0x5c001000

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	05fa0000 	.word	0x05fa0000

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	@ (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	@ (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff40 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff33 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa4 	bl	800122c <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e237      	b.n	8001772 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d004      	beq.n	8001318 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2280      	movs	r2, #128	@ 0x80
 8001312:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e22c      	b.n	8001772 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a5c      	ldr	r2, [pc, #368]	@ (8001490 <HAL_DMA_Abort_IT+0x1a0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d04a      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a5b      	ldr	r2, [pc, #364]	@ (8001494 <HAL_DMA_Abort_IT+0x1a4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d045      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a59      	ldr	r2, [pc, #356]	@ (8001498 <HAL_DMA_Abort_IT+0x1a8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d040      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a58      	ldr	r2, [pc, #352]	@ (800149c <HAL_DMA_Abort_IT+0x1ac>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d03b      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a56      	ldr	r2, [pc, #344]	@ (80014a0 <HAL_DMA_Abort_IT+0x1b0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d036      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a55      	ldr	r2, [pc, #340]	@ (80014a4 <HAL_DMA_Abort_IT+0x1b4>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d031      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a53      	ldr	r2, [pc, #332]	@ (80014a8 <HAL_DMA_Abort_IT+0x1b8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02c      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a52      	ldr	r2, [pc, #328]	@ (80014ac <HAL_DMA_Abort_IT+0x1bc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d027      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a50      	ldr	r2, [pc, #320]	@ (80014b0 <HAL_DMA_Abort_IT+0x1c0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d022      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a4f      	ldr	r2, [pc, #316]	@ (80014b4 <HAL_DMA_Abort_IT+0x1c4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d01d      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a4d      	ldr	r2, [pc, #308]	@ (80014b8 <HAL_DMA_Abort_IT+0x1c8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d018      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a4c      	ldr	r2, [pc, #304]	@ (80014bc <HAL_DMA_Abort_IT+0x1cc>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a4a      	ldr	r2, [pc, #296]	@ (80014c0 <HAL_DMA_Abort_IT+0x1d0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00e      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a49      	ldr	r2, [pc, #292]	@ (80014c4 <HAL_DMA_Abort_IT+0x1d4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d009      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a47      	ldr	r2, [pc, #284]	@ (80014c8 <HAL_DMA_Abort_IT+0x1d8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d004      	beq.n	80013b8 <HAL_DMA_Abort_IT+0xc8>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a46      	ldr	r2, [pc, #280]	@ (80014cc <HAL_DMA_Abort_IT+0x1dc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d101      	bne.n	80013bc <HAL_DMA_Abort_IT+0xcc>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_DMA_Abort_IT+0xce>
 80013bc:	2300      	movs	r3, #0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8086 	beq.w	80014d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2204      	movs	r2, #4
 80013c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_DMA_Abort_IT+0x1a0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d04a      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a2e      	ldr	r2, [pc, #184]	@ (8001494 <HAL_DMA_Abort_IT+0x1a4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d045      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001498 <HAL_DMA_Abort_IT+0x1a8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d040      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a2b      	ldr	r2, [pc, #172]	@ (800149c <HAL_DMA_Abort_IT+0x1ac>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d03b      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a29      	ldr	r2, [pc, #164]	@ (80014a0 <HAL_DMA_Abort_IT+0x1b0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d036      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a28      	ldr	r2, [pc, #160]	@ (80014a4 <HAL_DMA_Abort_IT+0x1b4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d031      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <HAL_DMA_Abort_IT+0x1b8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02c      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a25      	ldr	r2, [pc, #148]	@ (80014ac <HAL_DMA_Abort_IT+0x1bc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d027      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a23      	ldr	r2, [pc, #140]	@ (80014b0 <HAL_DMA_Abort_IT+0x1c0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d022      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <HAL_DMA_Abort_IT+0x1c4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d01d      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <HAL_DMA_Abort_IT+0x1c8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d018      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_DMA_Abort_IT+0x1cc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <HAL_DMA_Abort_IT+0x1d0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00e      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <HAL_DMA_Abort_IT+0x1d4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d009      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a1a      	ldr	r2, [pc, #104]	@ (80014c8 <HAL_DMA_Abort_IT+0x1d8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d004      	beq.n	800146c <HAL_DMA_Abort_IT+0x17c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <HAL_DMA_Abort_IT+0x1dc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d108      	bne.n	800147e <HAL_DMA_Abort_IT+0x18e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e178      	b.n	8001770 <HAL_DMA_Abort_IT+0x480>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0201 	bic.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e16f      	b.n	8001770 <HAL_DMA_Abort_IT+0x480>
 8001490:	40020010 	.word	0x40020010
 8001494:	40020028 	.word	0x40020028
 8001498:	40020040 	.word	0x40020040
 800149c:	40020058 	.word	0x40020058
 80014a0:	40020070 	.word	0x40020070
 80014a4:	40020088 	.word	0x40020088
 80014a8:	400200a0 	.word	0x400200a0
 80014ac:	400200b8 	.word	0x400200b8
 80014b0:	40020410 	.word	0x40020410
 80014b4:	40020428 	.word	0x40020428
 80014b8:	40020440 	.word	0x40020440
 80014bc:	40020458 	.word	0x40020458
 80014c0:	40020470 	.word	0x40020470
 80014c4:	40020488 	.word	0x40020488
 80014c8:	400204a0 	.word	0x400204a0
 80014cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020e 	bic.w	r2, r2, #14
 80014de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a6c      	ldr	r2, [pc, #432]	@ (8001698 <HAL_DMA_Abort_IT+0x3a8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d04a      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6b      	ldr	r2, [pc, #428]	@ (800169c <HAL_DMA_Abort_IT+0x3ac>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d045      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a69      	ldr	r2, [pc, #420]	@ (80016a0 <HAL_DMA_Abort_IT+0x3b0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d040      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a68      	ldr	r2, [pc, #416]	@ (80016a4 <HAL_DMA_Abort_IT+0x3b4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d03b      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a66      	ldr	r2, [pc, #408]	@ (80016a8 <HAL_DMA_Abort_IT+0x3b8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d036      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a65      	ldr	r2, [pc, #404]	@ (80016ac <HAL_DMA_Abort_IT+0x3bc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d031      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a63      	ldr	r2, [pc, #396]	@ (80016b0 <HAL_DMA_Abort_IT+0x3c0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d02c      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a62      	ldr	r2, [pc, #392]	@ (80016b4 <HAL_DMA_Abort_IT+0x3c4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d027      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a60      	ldr	r2, [pc, #384]	@ (80016b8 <HAL_DMA_Abort_IT+0x3c8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d022      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a5f      	ldr	r2, [pc, #380]	@ (80016bc <HAL_DMA_Abort_IT+0x3cc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d01d      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a5d      	ldr	r2, [pc, #372]	@ (80016c0 <HAL_DMA_Abort_IT+0x3d0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d018      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a5c      	ldr	r2, [pc, #368]	@ (80016c4 <HAL_DMA_Abort_IT+0x3d4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d013      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a5a      	ldr	r2, [pc, #360]	@ (80016c8 <HAL_DMA_Abort_IT+0x3d8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00e      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a59      	ldr	r2, [pc, #356]	@ (80016cc <HAL_DMA_Abort_IT+0x3dc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d009      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a57      	ldr	r2, [pc, #348]	@ (80016d0 <HAL_DMA_Abort_IT+0x3e0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d004      	beq.n	8001580 <HAL_DMA_Abort_IT+0x290>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a56      	ldr	r2, [pc, #344]	@ (80016d4 <HAL_DMA_Abort_IT+0x3e4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d108      	bne.n	8001592 <HAL_DMA_Abort_IT+0x2a2>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e007      	b.n	80015a2 <HAL_DMA_Abort_IT+0x2b2>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a3c      	ldr	r2, [pc, #240]	@ (8001698 <HAL_DMA_Abort_IT+0x3a8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d072      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a3a      	ldr	r2, [pc, #232]	@ (800169c <HAL_DMA_Abort_IT+0x3ac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d06d      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a39      	ldr	r2, [pc, #228]	@ (80016a0 <HAL_DMA_Abort_IT+0x3b0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d068      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a37      	ldr	r2, [pc, #220]	@ (80016a4 <HAL_DMA_Abort_IT+0x3b4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d063      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a36      	ldr	r2, [pc, #216]	@ (80016a8 <HAL_DMA_Abort_IT+0x3b8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d05e      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a34      	ldr	r2, [pc, #208]	@ (80016ac <HAL_DMA_Abort_IT+0x3bc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d059      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a33      	ldr	r2, [pc, #204]	@ (80016b0 <HAL_DMA_Abort_IT+0x3c0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d054      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a31      	ldr	r2, [pc, #196]	@ (80016b4 <HAL_DMA_Abort_IT+0x3c4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d04f      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a30      	ldr	r2, [pc, #192]	@ (80016b8 <HAL_DMA_Abort_IT+0x3c8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d04a      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2e      	ldr	r2, [pc, #184]	@ (80016bc <HAL_DMA_Abort_IT+0x3cc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d045      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2d      	ldr	r2, [pc, #180]	@ (80016c0 <HAL_DMA_Abort_IT+0x3d0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d040      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2b      	ldr	r2, [pc, #172]	@ (80016c4 <HAL_DMA_Abort_IT+0x3d4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d03b      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2a      	ldr	r2, [pc, #168]	@ (80016c8 <HAL_DMA_Abort_IT+0x3d8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d036      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a28      	ldr	r2, [pc, #160]	@ (80016cc <HAL_DMA_Abort_IT+0x3dc>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d031      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a27      	ldr	r2, [pc, #156]	@ (80016d0 <HAL_DMA_Abort_IT+0x3e0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d02c      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a25      	ldr	r2, [pc, #148]	@ (80016d4 <HAL_DMA_Abort_IT+0x3e4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d027      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a24      	ldr	r2, [pc, #144]	@ (80016d8 <HAL_DMA_Abort_IT+0x3e8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d022      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a22      	ldr	r2, [pc, #136]	@ (80016dc <HAL_DMA_Abort_IT+0x3ec>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01d      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <HAL_DMA_Abort_IT+0x3f0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d018      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1f      	ldr	r2, [pc, #124]	@ (80016e4 <HAL_DMA_Abort_IT+0x3f4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d013      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1e      	ldr	r2, [pc, #120]	@ (80016e8 <HAL_DMA_Abort_IT+0x3f8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00e      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1c      	ldr	r2, [pc, #112]	@ (80016ec <HAL_DMA_Abort_IT+0x3fc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d009      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1b      	ldr	r2, [pc, #108]	@ (80016f0 <HAL_DMA_Abort_IT+0x400>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d004      	beq.n	8001692 <HAL_DMA_Abort_IT+0x3a2>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_DMA_Abort_IT+0x404>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d132      	bne.n	80016f8 <HAL_DMA_Abort_IT+0x408>
 8001692:	2301      	movs	r3, #1
 8001694:	e031      	b.n	80016fa <HAL_DMA_Abort_IT+0x40a>
 8001696:	bf00      	nop
 8001698:	40020010 	.word	0x40020010
 800169c:	40020028 	.word	0x40020028
 80016a0:	40020040 	.word	0x40020040
 80016a4:	40020058 	.word	0x40020058
 80016a8:	40020070 	.word	0x40020070
 80016ac:	40020088 	.word	0x40020088
 80016b0:	400200a0 	.word	0x400200a0
 80016b4:	400200b8 	.word	0x400200b8
 80016b8:	40020410 	.word	0x40020410
 80016bc:	40020428 	.word	0x40020428
 80016c0:	40020440 	.word	0x40020440
 80016c4:	40020458 	.word	0x40020458
 80016c8:	40020470 	.word	0x40020470
 80016cc:	40020488 	.word	0x40020488
 80016d0:	400204a0 	.word	0x400204a0
 80016d4:	400204b8 	.word	0x400204b8
 80016d8:	58025408 	.word	0x58025408
 80016dc:	5802541c 	.word	0x5802541c
 80016e0:	58025430 	.word	0x58025430
 80016e4:	58025444 	.word	0x58025444
 80016e8:	58025458 	.word	0x58025458
 80016ec:	5802546c 	.word	0x5802546c
 80016f0:	58025480 	.word	0x58025480
 80016f4:	58025494 	.word	0x58025494
 80016f8:	2300      	movs	r3, #0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d028      	beq.n	8001750 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800170c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2201      	movs	r2, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800172c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00c      	beq.n	8001750 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001744:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800174e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800178a:	4b89      	ldr	r3, [pc, #548]	@ (80019b0 <HAL_GPIO_Init+0x234>)
 800178c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800178e:	e194      	b.n	8001aba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8186 	beq.w	8001ab4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d005      	beq.n	80017c0 <HAL_GPIO_Init+0x44>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f003 0201 	and.w	r2, r3, #1
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b03      	cmp	r3, #3
 800182c:	d017      	beq.n	800185e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d123      	bne.n	80018b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	220f      	movs	r2, #15
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0203 	and.w	r2, r3, #3
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80e0 	beq.w	8001ab4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f4:	4b2f      	ldr	r3, [pc, #188]	@ (80019b4 <HAL_GPIO_Init+0x238>)
 80018f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018fa:	4a2e      	ldr	r2, [pc, #184]	@ (80019b4 <HAL_GPIO_Init+0x238>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <HAL_GPIO_Init+0x238>)
 8001906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001912:	4a29      	ldr	r2, [pc, #164]	@ (80019b8 <HAL_GPIO_Init+0x23c>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <HAL_GPIO_Init+0x240>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d052      	beq.n	80019e4 <HAL_GPIO_Init+0x268>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_GPIO_Init+0x244>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d031      	beq.n	80019aa <HAL_GPIO_Init+0x22e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_GPIO_Init+0x248>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x22a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <HAL_GPIO_Init+0x24c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x226>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a1c      	ldr	r2, [pc, #112]	@ (80019cc <HAL_GPIO_Init+0x250>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x222>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <HAL_GPIO_Init+0x254>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x21e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1a      	ldr	r2, [pc, #104]	@ (80019d4 <HAL_GPIO_Init+0x258>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x21a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <HAL_GPIO_Init+0x25c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x216>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <HAL_GPIO_Init+0x260>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x212>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <HAL_GPIO_Init+0x264>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x20e>
 8001986:	2309      	movs	r3, #9
 8001988:	e02d      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 800198a:	230a      	movs	r3, #10
 800198c:	e02b      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 800198e:	2308      	movs	r3, #8
 8001990:	e029      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 8001992:	2307      	movs	r3, #7
 8001994:	e027      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 8001996:	2306      	movs	r3, #6
 8001998:	e025      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 800199a:	2305      	movs	r3, #5
 800199c:	e023      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 800199e:	2304      	movs	r3, #4
 80019a0:	e021      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 80019a2:	2303      	movs	r3, #3
 80019a4:	e01f      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e01d      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e01b      	b.n	80019e6 <HAL_GPIO_Init+0x26a>
 80019ae:	bf00      	nop
 80019b0:	58000080 	.word	0x58000080
 80019b4:	58024400 	.word	0x58024400
 80019b8:	58000400 	.word	0x58000400
 80019bc:	58020000 	.word	0x58020000
 80019c0:	58020400 	.word	0x58020400
 80019c4:	58020800 	.word	0x58020800
 80019c8:	58020c00 	.word	0x58020c00
 80019cc:	58021000 	.word	0x58021000
 80019d0:	58021400 	.word	0x58021400
 80019d4:	58021800 	.word	0x58021800
 80019d8:	58021c00 	.word	0x58021c00
 80019dc:	58022000 	.word	0x58022000
 80019e0:	58022400 	.word	0x58022400
 80019e4:	2300      	movs	r3, #0
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	f002 0203 	and.w	r2, r2, #3
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f6:	4938      	ldr	r1, [pc, #224]	@ (8001ad8 <HAL_GPIO_Init+0x35c>)
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f47f ae63 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3724      	adds	r7, #36	@ 0x24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	58000400 	.word	0x58000400

08001adc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ae4:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	2b06      	cmp	r3, #6
 8001aee:	d00a      	beq.n	8001b06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001af0:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e040      	b.n	8001b84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e03e      	b.n	8001b84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001b0e:	491f      	ldr	r1, [pc, #124]	@ (8001b8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b16:	f7ff fa9f 	bl	8001058 <HAL_GetTick>
 8001b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b1c:	e009      	b.n	8001b32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b1e:	f7ff fa9b 	bl	8001058 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b2c:	d901      	bls.n	8001b32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e028      	b.n	8001b84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b1e      	cmp	r3, #30
 8001b44:	d008      	beq.n	8001b58 <HAL_PWREx_ConfigSupply+0x7c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b4a:	d005      	beq.n	8001b58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b1d      	cmp	r3, #29
 8001b50:	d002      	beq.n	8001b58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b56:	d114      	bne.n	8001b82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b58:	f7ff fa7e 	bl	8001058 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b5e:	e009      	b.n	8001b74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b60:	f7ff fa7a 	bl	8001058 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b6e:	d901      	bls.n	8001b74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e007      	b.n	8001b84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b80:	d1ee      	bne.n	8001b60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	58024800 	.word	0x58024800

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	@ 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f000 bc48 	b.w	8002434 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8088 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb2:	4b99      	ldr	r3, [pc, #612]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bbc:	4b96      	ldr	r3, [pc, #600]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc4:	2b10      	cmp	r3, #16
 8001bc6:	d007      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x48>
 8001bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	d111      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62>
 8001bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	4b8f      	ldr	r3, [pc, #572]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d06d      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x130>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d169      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f000 bc21 	b.w	8002434 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x7a>
 8001bfc:	4b86      	ldr	r3, [pc, #536]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a85      	ldr	r2, [pc, #532]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e02e      	b.n	8001c68 <HAL_RCC_OscConfig+0xd8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x9c>
 8001c12:	4b81      	ldr	r3, [pc, #516]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a80      	ldr	r2, [pc, #512]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a7d      	ldr	r2, [pc, #500]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xd8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0xc0>
 8001c36:	4b78      	ldr	r3, [pc, #480]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a77      	ldr	r2, [pc, #476]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b75      	ldr	r3, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a74      	ldr	r2, [pc, #464]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xd8>
 8001c50:	4b71      	ldr	r3, [pc, #452]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a70      	ldr	r2, [pc, #448]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a6d      	ldr	r2, [pc, #436]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f9f2 	bl	8001058 <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f9ee 	bl	8001058 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	@ 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e3d4      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8a:	4b63      	ldr	r3, [pc, #396]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe8>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f9de 	bl	8001058 <HAL_GetTick>
 8001c9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f9da 	bl	8001058 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e3c0      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cb2:	4b59      	ldr	r3, [pc, #356]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x110>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80ca 	beq.w	8001e64 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd0:	4b51      	ldr	r3, [pc, #324]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cda:	4b4f      	ldr	r3, [pc, #316]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x166>
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	2b18      	cmp	r3, #24
 8001cea:	d156      	bne.n	8001d9a <HAL_RCC_OscConfig+0x20a>
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d151      	bne.n	8001d9a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf6:	4b48      	ldr	r3, [pc, #288]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x17e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e392      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d0e:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0219 	bic.w	r2, r3, #25
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	493f      	ldr	r1, [pc, #252]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f99a 	bl	8001058 <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff f996 	bl	8001058 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e37c      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d3a:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	f7ff f9b7 	bl	80010b8 <HAL_GetREVID>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d817      	bhi.n	8001d84 <HAL_RCC_OscConfig+0x1f4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b40      	cmp	r3, #64	@ 0x40
 8001d5a:	d108      	bne.n	8001d6e <HAL_RCC_OscConfig+0x1de>
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d64:	4a2c      	ldr	r2, [pc, #176]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d6a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d6c:	e07a      	b.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	031b      	lsls	r3, r3, #12
 8001d7c:	4926      	ldr	r1, [pc, #152]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d82:	e06f      	b.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	4921      	ldr	r1, [pc, #132]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d98:	e064      	b.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d047      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0219 	bic.w	r2, r3, #25
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	491a      	ldr	r1, [pc, #104]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f950 	bl	8001058 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7ff f94c 	bl	8001058 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e332      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dce:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	f7ff f96d 	bl	80010b8 <HAL_GetREVID>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d819      	bhi.n	8001e1c <HAL_RCC_OscConfig+0x28c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b40      	cmp	r3, #64	@ 0x40
 8001dee:	d108      	bne.n	8001e02 <HAL_RCC_OscConfig+0x272>
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfe:	6053      	str	r3, [r2, #4]
 8001e00:	e030      	b.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
 8001e02:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	031b      	lsls	r3, r3, #12
 8001e10:	4901      	ldr	r1, [pc, #4]	@ (8001e18 <HAL_RCC_OscConfig+0x288>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
 8001e16:	e025      	b.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	4b9a      	ldr	r3, [pc, #616]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	4997      	ldr	r1, [pc, #604]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b95      	ldr	r3, [pc, #596]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a94      	ldr	r2, [pc, #592]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f90b 	bl	8001058 <HAL_GetTick>
 8001e42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff f907 	bl	8001058 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e2ed      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e58:	4b8b      	ldr	r3, [pc, #556]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a9 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e72:	4b85      	ldr	r3, [pc, #532]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e7a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e7c:	4b82      	ldr	r3, [pc, #520]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d007      	beq.n	8001e98 <HAL_RCC_OscConfig+0x308>
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b18      	cmp	r3, #24
 8001e8c:	d13a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x374>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d135      	bne.n	8001f04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e98:	4b7b      	ldr	r3, [pc, #492]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x320>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b80      	cmp	r3, #128	@ 0x80
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e2c1      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eb0:	f7ff f902 	bl	80010b8 <HAL_GetREVID>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d817      	bhi.n	8001eee <HAL_RCC_OscConfig+0x35e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x348>
 8001ec6:	4b70      	ldr	r3, [pc, #448]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ece:	4a6e      	ldr	r2, [pc, #440]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ed4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ed6:	e075      	b.n	8001fc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	069b      	lsls	r3, r3, #26
 8001ee6:	4968      	ldr	r1, [pc, #416]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eec:	e06a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eee:	4b66      	ldr	r3, [pc, #408]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	061b      	lsls	r3, r3, #24
 8001efc:	4962      	ldr	r1, [pc, #392]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f02:	e05f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d042      	beq.n	8001f92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a5d      	ldr	r2, [pc, #372]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f89e 	bl	8001058 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f20:	f7ff f89a 	bl	8001058 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e280      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f32:	4b55      	ldr	r3, [pc, #340]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f3e:	f7ff f8bb 	bl	80010b8 <HAL_GetREVID>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d817      	bhi.n	8001f7c <HAL_RCC_OscConfig+0x3ec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d108      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3d6>
 8001f54:	4b4c      	ldr	r3, [pc, #304]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f62:	6053      	str	r3, [r2, #4]
 8001f64:	e02e      	b.n	8001fc4 <HAL_RCC_OscConfig+0x434>
 8001f66:	4b48      	ldr	r3, [pc, #288]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	069b      	lsls	r3, r3, #26
 8001f74:	4944      	ldr	r1, [pc, #272]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
 8001f7a:	e023      	b.n	8001fc4 <HAL_RCC_OscConfig+0x434>
 8001f7c:	4b42      	ldr	r3, [pc, #264]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	493f      	ldr	r1, [pc, #252]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e018      	b.n	8001fc4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f92:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a3c      	ldr	r2, [pc, #240]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f85b 	bl	8001058 <HAL_GetTick>
 8001fa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f857 	bl	8001058 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e23d      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fb8:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d036      	beq.n	800203e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d019      	beq.n	800200c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f838 	bl	8001058 <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff f834 	bl	8001058 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e21a      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x45c>
 800200a:	e018      	b.n	800203e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff f81e 	bl	8001058 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff f81a 	bl	8001058 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e200      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d039      	beq.n	80020be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01c      	beq.n	800208c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 8002058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800205c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800205e:	f7fe fffb 	bl	8001058 <HAL_GetTick>
 8002062:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002066:	f7fe fff7 	bl	8001058 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1dd      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_RCC_OscConfig+0x4f8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x4d6>
 8002084:	e01b      	b.n	80020be <HAL_RCC_OscConfig+0x52e>
 8002086:	bf00      	nop
 8002088:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800208c:	4b9b      	ldr	r3, [pc, #620]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a9a      	ldr	r2, [pc, #616]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002096:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002098:	f7fe ffde 	bl	8001058 <HAL_GetTick>
 800209c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a0:	f7fe ffda 	bl	8001058 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1c0      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020b2:	4b92      	ldr	r3, [pc, #584]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8081 	beq.w	80021ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002300 <HAL_RCC_OscConfig+0x770>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a8b      	ldr	r2, [pc, #556]	@ (8002300 <HAL_RCC_OscConfig+0x770>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d8:	f7fe ffbe 	bl	8001058 <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe ffba 	bl	8001058 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1a0      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020f2:	4b83      	ldr	r3, [pc, #524]	@ (8002300 <HAL_RCC_OscConfig+0x770>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x584>
 8002106:	4b7d      	ldr	r3, [pc, #500]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6713      	str	r3, [r2, #112]	@ 0x70
 8002112:	e02d      	b.n	8002170 <HAL_RCC_OscConfig+0x5e0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x5a6>
 800211c:	4b77      	ldr	r3, [pc, #476]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002120:	4a76      	ldr	r2, [pc, #472]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	@ 0x70
 8002128:	4b74      	ldr	r3, [pc, #464]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212c:	4a73      	ldr	r2, [pc, #460]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6713      	str	r3, [r2, #112]	@ 0x70
 8002134:	e01c      	b.n	8002170 <HAL_RCC_OscConfig+0x5e0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b05      	cmp	r3, #5
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c8>
 800213e:	4b6f      	ldr	r3, [pc, #444]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	4a6e      	ldr	r2, [pc, #440]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6713      	str	r3, [r2, #112]	@ 0x70
 800214a:	4b6c      	ldr	r3, [pc, #432]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214e:	4a6b      	ldr	r2, [pc, #428]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	@ 0x70
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0x5e0>
 8002158:	4b68      	ldr	r3, [pc, #416]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215c:	4a67      	ldr	r2, [pc, #412]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	@ 0x70
 8002164:	4b65      	ldr	r3, [pc, #404]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002168:	4a64      	ldr	r2, [pc, #400]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7fe ff6e 	bl	8001058 <HAL_GetTick>
 800217c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7fe ff6a 	bl	8001058 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e14e      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002196:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ee      	beq.n	8002180 <HAL_RCC_OscConfig+0x5f0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe ff58 	bl	8001058 <HAL_GetTick>
 80021a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7fe ff54 	bl	8001058 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e138      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021c2:	4b4e      	ldr	r3, [pc, #312]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ee      	bne.n	80021ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 812d 	beq.w	8002432 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021e0:	2b18      	cmp	r3, #24
 80021e2:	f000 80bd 	beq.w	8002360 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	f040 809e 	bne.w	800232c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b42      	ldr	r3, [pc, #264]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a41      	ldr	r2, [pc, #260]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff2c 	bl	8001058 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe ff28 	bl	8001058 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e10e      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002216:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	4b36      	ldr	r3, [pc, #216]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002226:	4b37      	ldr	r3, [pc, #220]	@ (8002304 <HAL_RCC_OscConfig+0x774>)
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002232:	0112      	lsls	r2, r2, #4
 8002234:	430a      	orrs	r2, r1
 8002236:	4931      	ldr	r1, [pc, #196]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	628b      	str	r3, [r1, #40]	@ 0x28
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	3b01      	subs	r3, #1
 8002242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224a:	3b01      	subs	r3, #1
 800224c:	025b      	lsls	r3, r3, #9
 800224e:	b29b      	uxth	r3, r3
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002256:	3b01      	subs	r3, #1
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	3b01      	subs	r3, #1
 8002266:	061b      	lsls	r3, r3, #24
 8002268:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800226c:	4923      	ldr	r1, [pc, #140]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002272:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	4a21      	ldr	r2, [pc, #132]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800227e:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_RCC_OscConfig+0x778>)
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800228a:	00d2      	lsls	r2, r2, #3
 800228c:	491b      	ldr	r1, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 800228e:	4313      	orrs	r3, r2
 8002290:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002292:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002296:	f023 020c 	bic.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4917      	ldr	r1, [pc, #92]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022a4:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a8:	f023 0202 	bic.w	r2, r3, #2
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	4912      	ldr	r1, [pc, #72]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ba:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022c2:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022ce:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <HAL_RCC_OscConfig+0x76c>)
 80022ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe feb1 	bl	8001058 <HAL_GetTick>
 80022f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022f8:	e011      	b.n	800231e <HAL_RCC_OscConfig+0x78e>
 80022fa:	bf00      	nop
 80022fc:	58024400 	.word	0x58024400
 8002300:	58024800 	.word	0x58024800
 8002304:	fffffc0c 	.word	0xfffffc0c
 8002308:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fea4 	bl	8001058 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e08a      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800231e:	4b47      	ldr	r3, [pc, #284]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x77c>
 800232a:	e082      	b.n	8002432 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232c:	4b43      	ldr	r3, [pc, #268]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a42      	ldr	r2, [pc, #264]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fe8e 	bl	8001058 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fe8a 	bl	8001058 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e070      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x7b0>
 800235e:	e068      	b.n	8002432 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002360:	4b36      	ldr	r3, [pc, #216]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002366:	4b35      	ldr	r3, [pc, #212]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	d031      	beq.n	80023d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0203 	and.w	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d12a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d122      	bne.n	80023d8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d11a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0a5b      	lsrs	r3, r3, #9
 80023a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d111      	bne.n	80023d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	0e1b      	lsrs	r3, r3, #24
 80023ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e02b      	b.n	8002434 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 80023de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d01f      	beq.n	8002432 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023fe:	f7fe fe2b 	bl	8001058 <HAL_GetTick>
 8002402:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002404:	bf00      	nop
 8002406:	f7fe fe27 	bl	8001058 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	4293      	cmp	r3, r2
 8002410:	d0f9      	beq.n	8002406 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_RCC_OscConfig+0x8b0>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800241e:	00d2      	lsls	r2, r2, #3
 8002420:	4906      	ldr	r1, [pc, #24]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002422:	4313      	orrs	r3, r2
 8002424:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	4a04      	ldr	r2, [pc, #16]	@ (800243c <HAL_RCC_OscConfig+0x8ac>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3730      	adds	r7, #48	@ 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	58024400 	.word	0x58024400
 8002440:	ffff0007 	.word	0xffff0007

08002444 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e19c      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b8a      	ldr	r3, [pc, #552]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d910      	bls.n	8002488 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b87      	ldr	r3, [pc, #540]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	4985      	ldr	r1, [pc, #532]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b83      	ldr	r3, [pc, #524]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e184      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	4b7b      	ldr	r3, [pc, #492]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d908      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024a4:	4b78      	ldr	r3, [pc, #480]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4975      	ldr	r1, [pc, #468]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	4b70      	ldr	r3, [pc, #448]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d908      	bls.n	80024e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	496a      	ldr	r1, [pc, #424]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	4b64      	ldr	r3, [pc, #400]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d908      	bls.n	8002512 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002500:	4b61      	ldr	r3, [pc, #388]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	495e      	ldr	r1, [pc, #376]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 800250e:	4313      	orrs	r3, r2
 8002510:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800252a:	429a      	cmp	r2, r3
 800252c:	d908      	bls.n	8002540 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800252e:	4b56      	ldr	r3, [pc, #344]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4953      	ldr	r1, [pc, #332]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 800253c:	4313      	orrs	r3, r2
 800253e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b4d      	ldr	r3, [pc, #308]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	429a      	cmp	r2, r3
 800255a:	d908      	bls.n	800256e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b4a      	ldr	r3, [pc, #296]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f023 020f 	bic.w	r2, r3, #15
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4947      	ldr	r1, [pc, #284]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 800256a:	4313      	orrs	r3, r2
 800256c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d055      	beq.n	8002626 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4940      	ldr	r1, [pc, #256]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002588:	4313      	orrs	r3, r2
 800258a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002594:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d121      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0f6      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ac:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d115      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0ea      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025c4:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0de      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d6      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025e4:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f023 0207 	bic.w	r2, r3, #7
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4925      	ldr	r1, [pc, #148]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f6:	f7fe fd2f 	bl	8001058 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fe:	f7fe fd2b 	bl	8001058 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0be      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002614:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	429a      	cmp	r2, r3
 8002624:	d1eb      	bne.n	80025fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d010      	beq.n	8002654 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	429a      	cmp	r2, r3
 8002640:	d208      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f023 020f 	bic.w	r2, r3, #15
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	490e      	ldr	r1, [pc, #56]	@ (8002688 <HAL_RCC_ClockConfig+0x244>)
 8002650:	4313      	orrs	r3, r2
 8002652:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d214      	bcs.n	800268c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 020f 	bic.w	r2, r3, #15
 800266a:	4906      	ldr	r1, [pc, #24]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <HAL_RCC_ClockConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e086      	b.n	8002792 <HAL_RCC_ClockConfig+0x34e>
 8002684:	52002000 	.word	0x52002000
 8002688:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d010      	beq.n	80026ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	4b3f      	ldr	r3, [pc, #252]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d208      	bcs.n	80026ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026a8:	4b3c      	ldr	r3, [pc, #240]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4939      	ldr	r1, [pc, #228]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d010      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d208      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026d6:	4b31      	ldr	r3, [pc, #196]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	492e      	ldr	r1, [pc, #184]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699a      	ldr	r2, [r3, #24]
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002700:	429a      	cmp	r2, r3
 8002702:	d208      	bcs.n	8002716 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002704:	4b25      	ldr	r3, [pc, #148]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4922      	ldr	r1, [pc, #136]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 8002712:	4313      	orrs	r3, r2
 8002714:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d010      	beq.n	8002744 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800272e:	429a      	cmp	r2, r3
 8002730:	d208      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4917      	ldr	r1, [pc, #92]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 8002740:	4313      	orrs	r3, r2
 8002742:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002744:	f000 f834 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	4912      	ldr	r1, [pc, #72]	@ (80027a0 <HAL_RCC_ClockConfig+0x35c>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_RCC_ClockConfig+0x358>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <HAL_RCC_ClockConfig+0x35c>)
 800276c:	5cd3      	ldrb	r3, [r2, r3]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <HAL_RCC_ClockConfig+0x360>)
 800277a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800277c:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <HAL_RCC_ClockConfig+0x364>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_RCC_ClockConfig+0x368>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fc1c 	bl	8000fc4 <HAL_InitTick>
 800278c:	4603      	mov	r3, r0
 800278e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	58024400 	.word	0x58024400
 80027a0:	0800763c 	.word	0x0800763c
 80027a4:	24000004 	.word	0x24000004
 80027a8:	24000000 	.word	0x24000000
 80027ac:	24000014 	.word	0x24000014

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	@ 0x24
 80027b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b6:	4bb3      	ldr	r3, [pc, #716]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027be:	2b18      	cmp	r3, #24
 80027c0:	f200 8155 	bhi.w	8002a6e <HAL_RCC_GetSysClockFreq+0x2be>
 80027c4:	a201      	add	r2, pc, #4	@ (adr r2, 80027cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	08002831 	.word	0x08002831
 80027d0:	08002a6f 	.word	0x08002a6f
 80027d4:	08002a6f 	.word	0x08002a6f
 80027d8:	08002a6f 	.word	0x08002a6f
 80027dc:	08002a6f 	.word	0x08002a6f
 80027e0:	08002a6f 	.word	0x08002a6f
 80027e4:	08002a6f 	.word	0x08002a6f
 80027e8:	08002a6f 	.word	0x08002a6f
 80027ec:	08002857 	.word	0x08002857
 80027f0:	08002a6f 	.word	0x08002a6f
 80027f4:	08002a6f 	.word	0x08002a6f
 80027f8:	08002a6f 	.word	0x08002a6f
 80027fc:	08002a6f 	.word	0x08002a6f
 8002800:	08002a6f 	.word	0x08002a6f
 8002804:	08002a6f 	.word	0x08002a6f
 8002808:	08002a6f 	.word	0x08002a6f
 800280c:	0800285d 	.word	0x0800285d
 8002810:	08002a6f 	.word	0x08002a6f
 8002814:	08002a6f 	.word	0x08002a6f
 8002818:	08002a6f 	.word	0x08002a6f
 800281c:	08002a6f 	.word	0x08002a6f
 8002820:	08002a6f 	.word	0x08002a6f
 8002824:	08002a6f 	.word	0x08002a6f
 8002828:	08002a6f 	.word	0x08002a6f
 800282c:	08002863 	.word	0x08002863
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002830:	4b94      	ldr	r3, [pc, #592]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800283c:	4b91      	ldr	r3, [pc, #580]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	4a90      	ldr	r2, [pc, #576]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800284e:	e111      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002850:	4b8d      	ldr	r3, [pc, #564]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002852:	61bb      	str	r3, [r7, #24]
      break;
 8002854:	e10e      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002856:	4b8d      	ldr	r3, [pc, #564]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002858:	61bb      	str	r3, [r7, #24]
      break;
 800285a:	e10b      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800285c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800285e:	61bb      	str	r3, [r7, #24]
      break;
 8002860:	e108      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002862:	4b88      	ldr	r3, [pc, #544]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800286c:	4b85      	ldr	r3, [pc, #532]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002876:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002878:	4b82      	ldr	r3, [pc, #520]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002882:	4b80      	ldr	r3, [pc, #512]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80e1 	beq.w	8002a68 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	f000 8083 	beq.w	80029b4 <HAL_RCC_GetSysClockFreq+0x204>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	f200 80a1 	bhi.w	80029f8 <HAL_RCC_GetSysClockFreq+0x248>
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x114>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d056      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028c2:	e099      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02d      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	4a6b      	ldr	r2, [pc, #428]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028fa:	4b62      	ldr	r3, [pc, #392]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800290a:	ed97 6a02 	vldr	s12, [r7, #8]
 800290e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800291a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800291e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800292a:	e087      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002936:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800293a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800293e:	4b51      	ldr	r3, [pc, #324]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800294e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002952:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800295a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800295e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800296e:	e065      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800297e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002982:	4b40      	ldr	r3, [pc, #256]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002992:	ed97 6a02 	vldr	s12, [r7, #8]
 8002996:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800299a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800299e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029b2:	e043      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002aa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029f6:	e021      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	0a5b      	lsrs	r3, r3, #9
 8002a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a46:	3301      	adds	r3, #1
 8002a48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a54:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a60:	ee17 3a90 	vmov	r3, s15
 8002a64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a66:	e005      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
      break;
 8002a6c:	e002      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a6e:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a70:	61bb      	str	r3, [r7, #24]
      break;
 8002a72:	bf00      	nop
  }

  return sysclockfreq;
 8002a74:	69bb      	ldr	r3, [r7, #24]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	@ 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
 8002a88:	03d09000 	.word	0x03d09000
 8002a8c:	003d0900 	.word	0x003d0900
 8002a90:	017d7840 	.word	0x017d7840
 8002a94:	46000000 	.word	0x46000000
 8002a98:	4c742400 	.word	0x4c742400
 8002a9c:	4a742400 	.word	0x4a742400
 8002aa0:	4bbebc20 	.word	0x4bbebc20

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002aaa:	f7ff fe81 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490f      	ldr	r1, [pc, #60]	@ (8002af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	4a09      	ldr	r2, [pc, #36]	@ (8002af8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a07      	ldr	r2, [pc, #28]	@ (8002afc <HAL_RCC_GetHCLKFreq+0x58>)
 8002ae0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ae2:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <HAL_RCC_GetHCLKFreq+0x58>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58024400 	.word	0x58024400
 8002af8:	0800763c 	.word	0x0800763c
 8002afc:	24000004 	.word	0x24000004
 8002b00:	24000000 	.word	0x24000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b08:	f7ff ffcc 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4904      	ldr	r1, [pc, #16]	@ (8002b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	0800763c 	.word	0x0800763c

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b34:	f7ff ffb6 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4904      	ldr	r1, [pc, #16]	@ (8002b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	58024400 	.word	0x58024400
 8002b58:	0800763c 	.word	0x0800763c

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b0cc      	sub	sp, #304	@ 0x130
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002b80:	2500      	movs	r5, #0
 8002b82:	ea54 0305 	orrs.w	r3, r4, r5
 8002b86:	d049      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b92:	d02f      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b98:	d828      	bhi.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b9e:	d01a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ba0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ba4:	d822      	bhi.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bae:	d007      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bb0:	e01c      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb2:	4bb8      	ldr	r3, [pc, #736]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	4ab7      	ldr	r2, [pc, #732]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bbe:	e01a      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fccf 	bl	800456c <RCCEx_PLL2_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bd4:	e00f      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bda:	3328      	adds	r3, #40	@ 0x28
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 fd76 	bl	80046d0 <RCCEx_PLL3_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bea:	e004      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002bfe:	4ba5      	ldr	r3, [pc, #660]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c0c:	4aa1      	ldr	r2, [pc, #644]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c12:	e003      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c28:	f04f 0900 	mov.w	r9, #0
 8002c2c:	ea58 0309 	orrs.w	r3, r8, r9
 8002c30:	d047      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d82a      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c59 	.word	0x08002c59
 8002c48:	08002c67 	.word	0x08002c67
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c9b 	.word	0x08002c9b
 8002c54:	08002c9b 	.word	0x08002c9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c58:	4b8e      	ldr	r3, [pc, #568]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	4a8d      	ldr	r2, [pc, #564]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c64:	e01a      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c6a:	3308      	adds	r3, #8
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 fc7c 	bl	800456c <RCCEx_PLL2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c80:	3328      	adds	r3, #40	@ 0x28
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f001 fd23 	bl	80046d0 <RCCEx_PLL3_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c90:	e004      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b7b      	ldr	r3, [pc, #492]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca8:	f023 0107 	bic.w	r1, r3, #7
 8002cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb2:	4a78      	ldr	r2, [pc, #480]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cb8:	e003      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002cce:	f04f 0b00 	mov.w	fp, #0
 8002cd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cd6:	d04c      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce2:	d030      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce8:	d829      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cea:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cec:	d02d      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002cee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cf0:	d825      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cf2:	2b80      	cmp	r3, #128	@ 0x80
 8002cf4:	d018      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002cf6:	2b80      	cmp	r3, #128	@ 0x80
 8002cf8:	d821      	bhi.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002cfe:	2b40      	cmp	r3, #64	@ 0x40
 8002d00:	d007      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d02:	e01c      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d04:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	4a62      	ldr	r2, [pc, #392]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d10:	e01c      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d16:	3308      	adds	r3, #8
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fc26 	bl	800456c <RCCEx_PLL2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d26:	e011      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d2c:	3328      	adds	r3, #40	@ 0x28
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f001 fccd 	bl	80046d0 <RCCEx_PLL3_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d54:	4b4f      	ldr	r3, [pc, #316]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d62:	4a4c      	ldr	r2, [pc, #304]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d68:	e003      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002d7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002d88:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	d053      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d9e:	d035      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002da0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002da4:	d82e      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002da6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002daa:	d031      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002dac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002db0:	d828      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db6:	d01a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dbc:	d822      	bhi.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002dc8:	e01c      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dca:	4b32      	ldr	r3, [pc, #200]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dce:	4a31      	ldr	r2, [pc, #196]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dd6:	e01c      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ddc:	3308      	adds	r3, #8
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fbc3 	bl	800456c <RCCEx_PLL2_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002dec:	e011      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002df2:	3328      	adds	r3, #40	@ 0x28
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 fc6a 	bl	80046d0 <RCCEx_PLL3_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e02:	e006      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e0c:	bf00      	nop
 8002e0e:	e000      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e30:	e003      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002e54:	460b      	mov	r3, r1
 8002e56:	4313      	orrs	r3, r2
 8002e58:	d056      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e66:	d038      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e6c:	d831      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e72:	d034      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e78:	d82b      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e7e:	d01d      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e84:	d825      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e90:	e01f      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e98:	4ba2      	ldr	r3, [pc, #648]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	4aa1      	ldr	r2, [pc, #644]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e01c      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eaa:	3308      	adds	r3, #8
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 fb5c 	bl	800456c <RCCEx_PLL2_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002eba:	e011      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ebc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ec0:	3328      	adds	r3, #40	@ 0x28
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fc03 	bl	80046d0 <RCCEx_PLL3_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ed0:	e006      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002ef0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ef8:	4a8a      	ldr	r2, [pc, #552]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002efa:	430b      	orrs	r3, r1
 8002efc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efe:	e003      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f1e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002f22:	460b      	mov	r3, r1
 8002f24:	4313      	orrs	r3, r2
 8002f26:	d03a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	2b30      	cmp	r3, #48	@ 0x30
 8002f30:	d01f      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f32:	2b30      	cmp	r3, #48	@ 0x30
 8002f34:	d819      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d00c      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d815      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d019      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d111      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f46:	4b77      	ldr	r3, [pc, #476]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	4a76      	ldr	r2, [pc, #472]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f52:	e011      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f58:	3308      	adds	r3, #8
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fb05 	bl	800456c <RCCEx_PLL2_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f68:	e006      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f70:	e002      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f72:	bf00      	nop
 8002f74:	e000      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f80:	4b68      	ldr	r3, [pc, #416]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	4a65      	ldr	r2, [pc, #404]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f94:	e003      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002faa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fb4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	d051      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fc8:	d035      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fce:	d82e      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fd4:	d031      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002fd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fda:	d828      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe0:	d01a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	d822      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff0:	d007      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002ff2:	e01c      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003000:	e01c      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003002:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003006:	3308      	adds	r3, #8
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f001 faae 	bl	800456c <RCCEx_PLL2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003016:	e011      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800301c:	3328      	adds	r3, #40	@ 0x28
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f001 fb55 	bl	80046d0 <RCCEx_PLL3_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003034:	e002      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800303a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003044:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003048:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800304c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003052:	4a34      	ldr	r2, [pc, #208]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003054:	430b      	orrs	r3, r1
 8003056:	6513      	str	r3, [r2, #80]	@ 0x50
 8003058:	e003      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800305e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800306e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003078:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800307c:	460b      	mov	r3, r1
 800307e:	4313      	orrs	r3, r2
 8003080:	d056      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800308c:	d033      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800308e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003092:	d82c      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003094:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003098:	d02f      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800309a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800309e:	d826      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030a4:	d02b      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030aa:	d820      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b0:	d012      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030b6:	d81a      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d022      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c0:	d115      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c6:	3308      	adds	r3, #8
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 fa4e 	bl	800456c <RCCEx_PLL2_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030d6:	e015      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030dc:	3328      	adds	r3, #40	@ 0x28
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f001 faf5 	bl	80046d0 <RCCEx_PLL3_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030ec:	e00a      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030f6:	bf00      	nop
 80030f8:	e004      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030fa:	bf00      	nop
 80030fc:	e002      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003104:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10d      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800310e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003110:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800311a:	4a02      	ldr	r2, [pc, #8]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800311c:	430b      	orrs	r3, r1
 800311e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003120:	e006      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800312c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800313c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003146:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800314a:	460b      	mov	r3, r1
 800314c:	4313      	orrs	r3, r2
 800314e:	d055      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315c:	d033      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003162:	d82c      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003168:	d02f      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d826      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003170:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003174:	d02b      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003176:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800317a:	d820      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003180:	d012      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003186:	d81a      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d022      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800318c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003190:	d115      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003192:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003196:	3308      	adds	r3, #8
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f001 f9e6 	bl	800456c <RCCEx_PLL2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031a6:	e015      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ac:	3328      	adds	r3, #40	@ 0x28
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 fa8d 	bl	80046d0 <RCCEx_PLL3_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031bc:	e00a      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031c4:	e006      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031c6:	bf00      	nop
 80031c8:	e004      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031dc:	4bb6      	ldr	r3, [pc, #728]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031ec:	4ab2      	ldr	r2, [pc, #712]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f2:	e003      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80031fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003204:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003212:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003216:	460b      	mov	r3, r1
 8003218:	4313      	orrs	r3, r2
 800321a:	d02a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800321c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003222:	2b00      	cmp	r3, #0
 8003224:	d011      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800322a:	d10a      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800322c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003230:	3308      	adds	r3, #8
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f999 	bl	800456c <RCCEx_PLL2_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003240:	e004      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003248:	e000      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800324a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800324c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003254:	4b98      	ldr	r3, [pc, #608]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003258:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800325c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003262:	4a95      	ldr	r2, [pc, #596]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003264:	430b      	orrs	r3, r1
 8003266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003268:	e003      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800326e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800327e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003288:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800328c:	460b      	mov	r3, r1
 800328e:	4313      	orrs	r3, r2
 8003290:	d037      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003292:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800329c:	d00e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x760>
 800329e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032a2:	d816      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d018      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80032a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ac:	d111      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ae:	4b82      	ldr	r3, [pc, #520]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	4a81      	ldr	r2, [pc, #516]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032ba:	e00f      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032c0:	3308      	adds	r3, #8
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f951 	bl	800456c <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032d0:	e004      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032d8:	e000      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80032da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032e4:	4b74      	ldr	r3, [pc, #464]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80032ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f2:	4a71      	ldr	r2, [pc, #452]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80032f8:	e003      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800330e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003312:	2300      	movs	r3, #0
 8003314:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003318:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800331c:	460b      	mov	r3, r1
 800331e:	4313      	orrs	r3, r2
 8003320:	d03a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003328:	2b03      	cmp	r3, #3
 800332a:	d81d      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800332c:	a201      	add	r2, pc, #4	@ (adr r2, 8003334 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003371 	.word	0x08003371
 8003338:	08003345 	.word	0x08003345
 800333c:	08003353 	.word	0x08003353
 8003340:	08003371 	.word	0x08003371
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003344:	4b5c      	ldr	r3, [pc, #368]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003350:	e00f      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003356:	3308      	adds	r3, #8
 8003358:	2102      	movs	r1, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f001 f906 	bl	800456c <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003366:	e004      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003372:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800337a:	4b4f      	ldr	r3, [pc, #316]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	f023 0103 	bic.w	r1, r3, #3
 8003382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003388:	4a4b      	ldr	r2, [pc, #300]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800338a:	430b      	orrs	r3, r1
 800338c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800338e:	e003      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003394:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80033a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033a8:	2300      	movs	r3, #0
 80033aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80033b2:	460b      	mov	r3, r1
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f000 80a0 	beq.w	80034fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ba:	4b40      	ldr	r3, [pc, #256]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c6:	f7fd fe47 	bl	8001058 <HAL_GetTick>
 80033ca:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ce:	e00b      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7fd fe42 	bl	8001058 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b64      	cmp	r3, #100	@ 0x64
 80033de:	d903      	bls.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e8:	4b34      	ldr	r3, [pc, #208]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ed      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80033f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d17a      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033fc:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003400:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003404:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003408:	4053      	eors	r3, r2
 800340a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003412:	4b29      	ldr	r3, [pc, #164]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800341e:	4b26      	ldr	r3, [pc, #152]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	4a25      	ldr	r2, [pc, #148]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003428:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800342a:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003434:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003436:	4a20      	ldr	r2, [pc, #128]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003438:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800343e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003442:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800344a:	d118      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd fe04 	bl	8001058 <HAL_GetTick>
 8003450:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003454:	e00d      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd fdff 	bl	8001058 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003460:	1ad2      	subs	r2, r2, r3
 8003462:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003466:	429a      	cmp	r2, r3
 8003468:	d903      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003470:	e005      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0eb      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800347e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003482:	2b00      	cmp	r3, #0
 8003484:	d130      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800348a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800348e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003496:	d115      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003498:	4b07      	ldr	r3, [pc, #28]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80034a8:	091a      	lsrs	r2, r3, #4
 80034aa:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	4a02      	ldr	r2, [pc, #8]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6113      	str	r3, [r2, #16]
 80034b4:	e00c      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
 80034bc:	58024800 	.word	0x58024800
 80034c0:	00ffffcf 	.word	0x00ffffcf
 80034c4:	4bd4      	ldr	r3, [pc, #848]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	4ad3      	ldr	r2, [pc, #844]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034ce:	6113      	str	r3, [r2, #16]
 80034d0:	4bd1      	ldr	r3, [pc, #836]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034d2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80034d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	4acd      	ldr	r2, [pc, #820]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034e2:	430b      	orrs	r3, r1
 80034e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e6:	e008      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80034f0:	e003      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f002 0301 	and.w	r3, r2, #1
 8003506:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003510:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003514:	460b      	mov	r3, r1
 8003516:	4313      	orrs	r3, r2
 8003518:	f000 808b 	beq.w	8003632 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800351c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003524:	2b28      	cmp	r3, #40	@ 0x28
 8003526:	d86b      	bhi.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003528:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003609 	.word	0x08003609
 8003534:	08003601 	.word	0x08003601
 8003538:	08003601 	.word	0x08003601
 800353c:	08003601 	.word	0x08003601
 8003540:	08003601 	.word	0x08003601
 8003544:	08003601 	.word	0x08003601
 8003548:	08003601 	.word	0x08003601
 800354c:	08003601 	.word	0x08003601
 8003550:	080035d5 	.word	0x080035d5
 8003554:	08003601 	.word	0x08003601
 8003558:	08003601 	.word	0x08003601
 800355c:	08003601 	.word	0x08003601
 8003560:	08003601 	.word	0x08003601
 8003564:	08003601 	.word	0x08003601
 8003568:	08003601 	.word	0x08003601
 800356c:	08003601 	.word	0x08003601
 8003570:	080035eb 	.word	0x080035eb
 8003574:	08003601 	.word	0x08003601
 8003578:	08003601 	.word	0x08003601
 800357c:	08003601 	.word	0x08003601
 8003580:	08003601 	.word	0x08003601
 8003584:	08003601 	.word	0x08003601
 8003588:	08003601 	.word	0x08003601
 800358c:	08003601 	.word	0x08003601
 8003590:	08003609 	.word	0x08003609
 8003594:	08003601 	.word	0x08003601
 8003598:	08003601 	.word	0x08003601
 800359c:	08003601 	.word	0x08003601
 80035a0:	08003601 	.word	0x08003601
 80035a4:	08003601 	.word	0x08003601
 80035a8:	08003601 	.word	0x08003601
 80035ac:	08003601 	.word	0x08003601
 80035b0:	08003609 	.word	0x08003609
 80035b4:	08003601 	.word	0x08003601
 80035b8:	08003601 	.word	0x08003601
 80035bc:	08003601 	.word	0x08003601
 80035c0:	08003601 	.word	0x08003601
 80035c4:	08003601 	.word	0x08003601
 80035c8:	08003601 	.word	0x08003601
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003609 	.word	0x08003609
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d8:	3308      	adds	r3, #8
 80035da:	2101      	movs	r1, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 ffc5 	bl	800456c <RCCEx_PLL2_Config>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035e8:	e00f      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ee:	3328      	adds	r3, #40	@ 0x28
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f86c 	bl	80046d0 <RCCEx_PLL3_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035fe:	e004      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003606:	e000      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003612:	4b81      	ldr	r3, [pc, #516]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800361a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800361e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003622:	4a7d      	ldr	r2, [pc, #500]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003624:	430b      	orrs	r3, r1
 8003626:	6553      	str	r3, [r2, #84]	@ 0x54
 8003628:	e003      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800362e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f002 0302 	and.w	r3, r2, #2
 800363e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003642:	2300      	movs	r3, #0
 8003644:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003648:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800364c:	460b      	mov	r3, r1
 800364e:	4313      	orrs	r3, r2
 8003650:	d042      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003658:	2b05      	cmp	r3, #5
 800365a:	d825      	bhi.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	080036b1 	.word	0x080036b1
 8003668:	0800367d 	.word	0x0800367d
 800366c:	08003693 	.word	0x08003693
 8003670:	080036b1 	.word	0x080036b1
 8003674:	080036b1 	.word	0x080036b1
 8003678:	080036b1 	.word	0x080036b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800367c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003680:	3308      	adds	r3, #8
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f000 ff71 	bl	800456c <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003690:	e00f      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003696:	3328      	adds	r3, #40	@ 0x28
 8003698:	2101      	movs	r1, #1
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f818 	bl	80046d0 <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036a6:	e004      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80036b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036ba:	4b57      	ldr	r3, [pc, #348]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	f023 0107 	bic.w	r1, r3, #7
 80036c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036c8:	4a53      	ldr	r2, [pc, #332]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 0304 	and.w	r3, r2, #4
 80036e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d044      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003700:	2b05      	cmp	r3, #5
 8003702:	d825      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003704:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003759 	.word	0x08003759
 8003710:	08003725 	.word	0x08003725
 8003714:	0800373b 	.word	0x0800373b
 8003718:	08003759 	.word	0x08003759
 800371c:	08003759 	.word	0x08003759
 8003720:	08003759 	.word	0x08003759
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003724:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003728:	3308      	adds	r3, #8
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f000 ff1d 	bl	800456c <RCCEx_PLL2_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003738:	e00f      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800373a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800373e:	3328      	adds	r3, #40	@ 0x28
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f000 ffc4 	bl	80046d0 <RCCEx_PLL3_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800374e:	e004      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003762:	4b2d      	ldr	r3, [pc, #180]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003766:	f023 0107 	bic.w	r1, r3, #7
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003772:	4a29      	ldr	r2, [pc, #164]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003774:	430b      	orrs	r3, r1
 8003776:	6593      	str	r3, [r2, #88]	@ 0x58
 8003778:	e003      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800377e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f002 0320 	and.w	r3, r2, #32
 800378e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800379c:	460b      	mov	r3, r1
 800379e:	4313      	orrs	r3, r2
 80037a0:	d057      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ae:	d035      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80037b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b4:	d82c      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ba:	d031      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c0:	d826      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037c6:	d02d      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80037c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037cc:	d820      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037d2:	d012      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80037d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037d8:	d81a      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d024      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80037de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037e2:	d115      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037e8:	3308      	adds	r3, #8
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 febd 	bl	800456c <RCCEx_PLL2_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037f8:	e017      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037fe:	3328      	adds	r3, #40	@ 0x28
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f000 ff64 	bl	80046d0 <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800380e:	e00c      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003816:	e008      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003818:	58024400 	.word	0x58024400
        break;
 800381c:	bf00      	nop
 800381e:	e004      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003820:	bf00      	nop
 8003822:	e002      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003832:	4bc2      	ldr	r3, [pc, #776]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003836:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800383a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800383e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003842:	4abe      	ldr	r2, [pc, #760]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003844:	430b      	orrs	r3, r1
 8003846:	6553      	str	r3, [r2, #84]	@ 0x54
 8003848:	e003      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800384e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800385e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003862:	2300      	movs	r3, #0
 8003864:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003868:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800386c:	460b      	mov	r3, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	d055      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003872:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003876:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800387a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800387e:	d033      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003880:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003884:	d82c      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388a:	d02f      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003890:	d826      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003892:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003896:	d02b      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800389c:	d820      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800389e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a2:	d012      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a8:	d81a      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d022      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b2:	d115      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b8:	3308      	adds	r3, #8
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fe55 	bl	800456c <RCCEx_PLL2_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038c8:	e015      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ce:	3328      	adds	r3, #40	@ 0x28
 80038d0:	2102      	movs	r1, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fefc 	bl	80046d0 <RCCEx_PLL3_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038de:	e00a      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038e6:	e006      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038e8:	bf00      	nop
 80038ea:	e004      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038ec:	bf00      	nop
 80038ee:	e002      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038fe:	4b8f      	ldr	r3, [pc, #572]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003906:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800390a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800390e:	4a8b      	ldr	r2, [pc, #556]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003910:	430b      	orrs	r3, r1
 8003912:	6593      	str	r3, [r2, #88]	@ 0x58
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800391a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800391e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800392a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003934:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d055      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800393e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003942:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003946:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800394a:	d033      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800394c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003950:	d82c      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003956:	d02f      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003958:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800395c:	d826      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800395e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003962:	d02b      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003964:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003968:	d820      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800396a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800396e:	d012      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003970:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003974:	d81a      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d022      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800397e:	d115      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003980:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003984:	3308      	adds	r3, #8
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fdef 	bl	800456c <RCCEx_PLL2_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003994:	e015      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800399a:	3328      	adds	r3, #40	@ 0x28
 800399c:	2102      	movs	r1, #2
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fe96 	bl	80046d0 <RCCEx_PLL3_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039aa:	e00a      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039b2:	e006      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039b4:	bf00      	nop
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039b8:	bf00      	nop
 80039ba:	e002      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039ca:	4b5c      	ldr	r3, [pc, #368]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039da:	4a58      	ldr	r2, [pc, #352]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039dc:	430b      	orrs	r3, r1
 80039de:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f002 0308 	and.w	r3, r2, #8
 80039f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a00:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d01e      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a1c:	3328      	adds	r3, #40	@ 0x28
 8003a1e:	2102      	movs	r1, #2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fe55 	bl	80046d0 <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a32:	4b42      	ldr	r3, [pc, #264]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	4a3e      	ldr	r2, [pc, #248]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f002 0310 	and.w	r3, r2, #16
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d01e      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a7a:	3328      	adds	r3, #40	@ 0x28
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fe26 	bl	80046d0 <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a90:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aa0:	4a26      	ldr	r2, [pc, #152]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ab2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003abc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	d040      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ad2:	d022      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003ad4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ad8:	d81b      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae2:	d00b      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003ae4:	e015      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aea:	3308      	adds	r3, #8
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fd3c 	bl	800456c <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003afa:	e00f      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b00:	3328      	adds	r3, #40	@ 0x28
 8003b02:	2102      	movs	r1, #2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fde3 	bl	80046d0 <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b28:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b34:	4a01      	ldr	r2, [pc, #4]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b56:	2300      	movs	r3, #0
 8003b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b5a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	d03b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b70:	d01f      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003b72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b76:	d818      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003b78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003b7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b82:	d007      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003b84:	e011      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b86:	4b64      	ldr	r3, [pc, #400]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	4a63      	ldr	r2, [pc, #396]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b92:	e00f      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b98:	3328      	adds	r3, #40	@ 0x28
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fd97 	bl	80046d0 <RCCEx_PLL3_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ba8:	e004      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bbc:	4b56      	ldr	r3, [pc, #344]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bcc:	4a52      	ldr	r2, [pc, #328]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bd8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003be8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bea:	2300      	movs	r3, #0
 8003bec:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c06:	d007      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003c08:	e011      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0a:	4b43      	ldr	r3, [pc, #268]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	4a42      	ldr	r2, [pc, #264]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c16:	e00e      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fca3 	bl	800456c <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c2c:	e003      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c58:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d00c      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c7c:	3328      	adds	r3, #40	@ 0x28
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fd25 	bl	80046d0 <RCCEx_PLL3_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ca4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	d03a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cba:	d018      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc0:	d811      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc6:	d014      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ccc:	d80b      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d011      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd6:	d106      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003cec:	e004      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10d      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d10:	4a01      	ldr	r2, [pc, #4]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d12:	430b      	orrs	r3, r1
 8003d14:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d16:	e005      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003d18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d32:	2300      	movs	r3, #0
 8003d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d40:	4baa      	ldr	r3, [pc, #680]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d4e:	4aa7      	ldr	r2, [pc, #668]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d62:	2300      	movs	r3, #0
 8003d64:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d70:	4b9e      	ldr	r3, [pc, #632]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d80:	4a9a      	ldr	r2, [pc, #616]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d94:	2300      	movs	r3, #0
 8003d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003da2:	4b92      	ldr	r3, [pc, #584]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	4a8e      	ldr	r2, [pc, #568]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dd2:	4b86      	ldr	r3, [pc, #536]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	4a85      	ldr	r2, [pc, #532]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ddc:	6113      	str	r3, [r2, #16]
 8003dde:	4b83      	ldr	r3, [pc, #524]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003de0:	6919      	ldr	r1, [r3, #16]
 8003de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003dea:	4a80      	ldr	r2, [pc, #512]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dfe:	2300      	movs	r3, #0
 8003e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e0c:	4b77      	ldr	r3, [pc, #476]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e10:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	4a74      	ldr	r2, [pc, #464]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e2e:	2300      	movs	r3, #0
 8003e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e36:	460b      	mov	r3, r1
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e3c:	4b6b      	ldr	r3, [pc, #428]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4c:	4a67      	ldr	r2, [pc, #412]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d011      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e72:	3308      	adds	r3, #8
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb78 	bl	800456c <RCCEx_PLL2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	6239      	str	r1, [r7, #32]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fb58 	bl	800456c <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003ec2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ece:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	2100      	movs	r1, #0
 8003edc:	61b9      	str	r1, [r7, #24]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d011      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fb38 	bl	800456c <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003f02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	6139      	str	r1, [r7, #16]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d011      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f32:	3328      	adds	r3, #40	@ 0x28
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fbca 	bl	80046d0 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003f42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d011      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f72:	3328      	adds	r3, #40	@ 0x28
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fbaa 	bl	80046d0 <RCCEx_PLL3_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003f82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	607b      	str	r3, [r7, #4]
 8003fa4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d011      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb8a 	bl	80046d0 <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003fc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003fd2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fec:	58024400 	.word	0x58024400

08003ff0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ff4:	f7fe fd56 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	@ (8004018 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	58024400 	.word	0x58024400
 8004018:	0800763c 	.word	0x0800763c

0800401c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	@ 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004024:	4ba1      	ldr	r3, [pc, #644]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800402e:	4b9f      	ldr	r3, [pc, #636]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004032:	0b1b      	lsrs	r3, r3, #12
 8004034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004038:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800403a:	4b9c      	ldr	r3, [pc, #624]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004046:	4b99      	ldr	r3, [pc, #612]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	08db      	lsrs	r3, r3, #3
 800404c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8111 	beq.w	800428c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b02      	cmp	r3, #2
 800406e:	f000 8083 	beq.w	8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b02      	cmp	r3, #2
 8004076:	f200 80a1 	bhi.w	80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d056      	beq.n	8004134 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004086:	e099      	b.n	80041bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004088:	4b88      	ldr	r3, [pc, #544]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d02d      	beq.n	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004094:	4b85      	ldr	r3, [pc, #532]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	4a84      	ldr	r2, [pc, #528]	@ (80042b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	4b7b      	ldr	r3, [pc, #492]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80040d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040ee:	e087      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004102:	4b6a      	ldr	r3, [pc, #424]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004112:	ed97 6a03 	vldr	s12, [r7, #12]
 8004116:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800411a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004132:	e065      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004146:	4b59      	ldr	r3, [pc, #356]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004156:	ed97 6a03 	vldr	s12, [r7, #12]
 800415a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800415e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800416a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004176:	e043      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418a:	4b48      	ldr	r3, [pc, #288]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419a:	ed97 6a03 	vldr	s12, [r7, #12]
 800419e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ba:	e021      	b.n	8004200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ce:	4b37      	ldr	r3, [pc, #220]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041de:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004200:	4b2a      	ldr	r3, [pc, #168]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004204:	0a5b      	lsrs	r3, r3, #9
 8004206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800421a:	edd7 6a07 	vldr	s13, [r7, #28]
 800421e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004226:	ee17 2a90 	vmov	r2, s15
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800422e:	4b1f      	ldr	r3, [pc, #124]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004240:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004248:	edd7 6a07 	vldr	s13, [r7, #28]
 800424c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004254:	ee17 2a90 	vmov	r2, s15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	0e1b      	lsrs	r3, r3, #24
 8004262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004276:	edd7 6a07 	vldr	s13, [r7, #28]
 800427a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004282:	ee17 2a90 	vmov	r2, s15
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800428a:	e008      	b.n	800429e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	609a      	str	r2, [r3, #8]
}
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	@ 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	58024400 	.word	0x58024400
 80042b0:	03d09000 	.word	0x03d09000
 80042b4:	46000000 	.word	0x46000000
 80042b8:	4c742400 	.word	0x4c742400
 80042bc:	4a742400 	.word	0x4a742400
 80042c0:	4bbebc20 	.word	0x4bbebc20

080042c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	@ 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042cc:	4ba1      	ldr	r3, [pc, #644]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80042d6:	4b9f      	ldr	r3, [pc, #636]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	0d1b      	lsrs	r3, r3, #20
 80042dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042e2:	4b9c      	ldr	r3, [pc, #624]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80042ee:	4b99      	ldr	r3, [pc, #612]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	08db      	lsrs	r3, r3, #3
 80042f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8111 	beq.w	8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b02      	cmp	r3, #2
 8004316:	f000 8083 	beq.w	8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b02      	cmp	r3, #2
 800431e:	f200 80a1 	bhi.w	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d056      	beq.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800432e:	e099      	b.n	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004330:	4b88      	ldr	r3, [pc, #544]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02d      	beq.n	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800433c:	4b85      	ldr	r3, [pc, #532]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	4a84      	ldr	r2, [pc, #528]	@ (8004558 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004366:	4b7b      	ldr	r3, [pc, #492]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004376:	ed97 6a03 	vldr	s12, [r7, #12]
 800437a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800438a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004396:	e087      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80043be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043da:	e065      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ee:	4b59      	ldr	r3, [pc, #356]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004402:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800441e:	e043      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800442e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004432:	4b48      	ldr	r3, [pc, #288]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a03 	vldr	s12, [r7, #12]
 8004446:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004462:	e021      	b.n	80044a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004486:	ed97 6a03 	vldr	s12, [r7, #12]
 800448a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800455c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800448e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800449a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80044a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	0a5b      	lsrs	r3, r3, #9
 80044ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ce:	ee17 2a90 	vmov	r2, s15
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80044d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	0c1b      	lsrs	r3, r3, #16
 80044dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fc:	ee17 2a90 	vmov	r2, s15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004504:	4b13      	ldr	r3, [pc, #76]	@ (8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004508:	0e1b      	lsrs	r3, r3, #24
 800450a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800451a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452a:	ee17 2a90 	vmov	r2, s15
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	609a      	str	r2, [r3, #8]
}
 8004546:	bf00      	nop
 8004548:	3724      	adds	r7, #36	@ 0x24
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	58024400 	.word	0x58024400
 8004558:	03d09000 	.word	0x03d09000
 800455c:	46000000 	.word	0x46000000
 8004560:	4c742400 	.word	0x4c742400
 8004564:	4a742400 	.word	0x4a742400
 8004568:	4bbebc20 	.word	0x4bbebc20

0800456c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800457a:	4b53      	ldr	r3, [pc, #332]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b03      	cmp	r3, #3
 8004584:	d101      	bne.n	800458a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e099      	b.n	80046be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800458a:	4b4f      	ldr	r3, [pc, #316]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4e      	ldr	r2, [pc, #312]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004590:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004596:	f7fc fd5f 	bl	8001058 <HAL_GetTick>
 800459a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800459e:	f7fc fd5b 	bl	8001058 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e086      	b.n	80046be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045b0:	4b45      	ldr	r3, [pc, #276]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045bc:	4b42      	ldr	r3, [pc, #264]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	031b      	lsls	r3, r3, #12
 80045ca:	493f      	ldr	r1, [pc, #252]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	3b01      	subs	r3, #1
 80045e0:	025b      	lsls	r3, r3, #9
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004600:	4931      	ldr	r1, [pc, #196]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004606:	4b30      	ldr	r3, [pc, #192]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	492d      	ldr	r1, [pc, #180]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004618:	4b2b      	ldr	r3, [pc, #172]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	f023 0220 	bic.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	4928      	ldr	r1, [pc, #160]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800462a:	4b27      	ldr	r3, [pc, #156]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	4a26      	ldr	r2, [pc, #152]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004630:	f023 0310 	bic.w	r3, r3, #16
 8004634:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004636:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800463a:	4b24      	ldr	r3, [pc, #144]	@ (80046cc <RCCEx_PLL2_Config+0x160>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	69d2      	ldr	r2, [r2, #28]
 8004642:	00d2      	lsls	r2, r2, #3
 8004644:	4920      	ldr	r1, [pc, #128]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800464a:	4b1f      	ldr	r3, [pc, #124]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004650:	f043 0310 	orr.w	r3, r3, #16
 8004654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	4a19      	ldr	r2, [pc, #100]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004662:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004668:	e00f      	b.n	800468a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004670:	4b15      	ldr	r3, [pc, #84]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	4a14      	ldr	r2, [pc, #80]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800467a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800467c:	e005      	b.n	800468a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800467e:	4b12      	ldr	r3, [pc, #72]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	4a11      	ldr	r2, [pc, #68]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004684:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004688:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800468a:	4b0f      	ldr	r3, [pc, #60]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a0e      	ldr	r2, [pc, #56]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 8004690:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004696:	f7fc fcdf 	bl	8001058 <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800469c:	e008      	b.n	80046b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800469e:	f7fc fcdb 	bl	8001058 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046b0:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <RCCEx_PLL2_Config+0x15c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	58024400 	.word	0x58024400
 80046cc:	ffff0007 	.word	0xffff0007

080046d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046de:	4b53      	ldr	r3, [pc, #332]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80046e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d101      	bne.n	80046ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e099      	b.n	8004822 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046ee:	4b4f      	ldr	r3, [pc, #316]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4e      	ldr	r2, [pc, #312]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fa:	f7fc fcad 	bl	8001058 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004700:	e008      	b.n	8004714 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004702:	f7fc fca9 	bl	8001058 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e086      	b.n	8004822 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004714:	4b45      	ldr	r3, [pc, #276]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004720:	4b42      	ldr	r3, [pc, #264]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004724:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	051b      	lsls	r3, r3, #20
 800472e:	493f      	ldr	r1, [pc, #252]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	628b      	str	r3, [r1, #40]	@ 0x28
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	3b01      	subs	r3, #1
 800473a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	3b01      	subs	r3, #1
 8004744:	025b      	lsls	r3, r3, #9
 8004746:	b29b      	uxth	r3, r3
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	3b01      	subs	r3, #1
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	3b01      	subs	r3, #1
 800475e:	061b      	lsls	r3, r3, #24
 8004760:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004764:	4931      	ldr	r1, [pc, #196]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800476a:	4b30      	ldr	r3, [pc, #192]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	492d      	ldr	r1, [pc, #180]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800477c:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	4928      	ldr	r1, [pc, #160]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800478e:	4b27      	ldr	r3, [pc, #156]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4a26      	ldr	r2, [pc, #152]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004798:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800479a:	4b24      	ldr	r3, [pc, #144]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 800479c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800479e:	4b24      	ldr	r3, [pc, #144]	@ (8004830 <RCCEx_PLL3_Config+0x160>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	69d2      	ldr	r2, [r2, #28]
 80047a6:	00d2      	lsls	r2, r2, #3
 80047a8:	4920      	ldr	r1, [pc, #128]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047ae:	4b1f      	ldr	r3, [pc, #124]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	4a1e      	ldr	r2, [pc, #120]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047c0:	4b1a      	ldr	r3, [pc, #104]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	4a19      	ldr	r2, [pc, #100]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047cc:	e00f      	b.n	80047ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d106      	bne.n	80047e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047d4:	4b15      	ldr	r3, [pc, #84]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	4a14      	ldr	r2, [pc, #80]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047e0:	e005      	b.n	80047ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047e2:	4b12      	ldr	r3, [pc, #72]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	4a11      	ldr	r2, [pc, #68]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047ee:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a0e      	ldr	r2, [pc, #56]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fa:	f7fc fc2d 	bl	8001058 <HAL_GetTick>
 80047fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004800:	e008      	b.n	8004814 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004802:	f7fc fc29 	bl	8001058 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e006      	b.n	8004822 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004814:	4b05      	ldr	r3, [pc, #20]	@ (800482c <RCCEx_PLL3_Config+0x15c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
 8004830:	ffff0007 	.word	0xffff0007

08004834 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e10f      	b.n	8004a66 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a87      	ldr	r2, [pc, #540]	@ (8004a70 <HAL_SPI_Init+0x23c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <HAL_SPI_Init+0x42>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a86      	ldr	r2, [pc, #536]	@ (8004a74 <HAL_SPI_Init+0x240>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00a      	beq.n	8004876 <HAL_SPI_Init+0x42>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a84      	ldr	r2, [pc, #528]	@ (8004a78 <HAL_SPI_Init+0x244>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d005      	beq.n	8004876 <HAL_SPI_Init+0x42>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2b0f      	cmp	r3, #15
 8004870:	d901      	bls.n	8004876 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0f7      	b.n	8004a66 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fdd6 	bl	8005428 <SPI_GetPacketSize>
 800487c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a7b      	ldr	r2, [pc, #492]	@ (8004a70 <HAL_SPI_Init+0x23c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00c      	beq.n	80048a2 <HAL_SPI_Init+0x6e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a79      	ldr	r2, [pc, #484]	@ (8004a74 <HAL_SPI_Init+0x240>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <HAL_SPI_Init+0x6e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a78      	ldr	r2, [pc, #480]	@ (8004a78 <HAL_SPI_Init+0x244>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d002      	beq.n	80048a2 <HAL_SPI_Init+0x6e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d811      	bhi.n	80048c6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80048a6:	4a72      	ldr	r2, [pc, #456]	@ (8004a70 <HAL_SPI_Init+0x23c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a70      	ldr	r2, [pc, #448]	@ (8004a74 <HAL_SPI_Init+0x240>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_SPI_Init+0x8c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6f      	ldr	r2, [pc, #444]	@ (8004a78 <HAL_SPI_Init+0x244>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d104      	bne.n	80048ca <HAL_SPI_Init+0x96>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d901      	bls.n	80048ca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0cd      	b.n	8004a66 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fc f92a 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8004906:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004910:	d119      	bne.n	8004946 <HAL_SPI_Init+0x112>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800491a:	d103      	bne.n	8004924 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10c      	bne.n	8004946 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004934:	d107      	bne.n	8004946 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00f      	beq.n	8004972 <HAL_SPI_Init+0x13e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b06      	cmp	r3, #6
 8004958:	d90b      	bls.n	8004972 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e007      	b.n	8004982 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	431a      	orrs	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004994:	ea42 0103 	orr.w	r1, r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	ea42 0103 	orr.w	r1, r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d113      	bne.n	8004a22 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40013000 	.word	0x40013000
 8004a74:	40003800 	.word	0x40003800
 8004a78:	40003c00 	.word	0x40003c00

08004a7c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3320      	adds	r3, #32
 8004a90:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d001      	beq.n	8004aa2 <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0e9      	b.n	8004c76 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_SPI_TransmitReceive_IT+0x38>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_TransmitReceive_IT+0x38>
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0de      	b.n	8004c76 <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_SPI_TransmitReceive_IT+0x4a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0d7      	b.n	8004c76 <HAL_SPI_TransmitReceive_IT+0x1fa>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	887a      	ldrh	r2, [r7, #2]
 8004afe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	887a      	ldrh	r2, [r7, #2]
 8004b06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b0f      	cmp	r3, #15
 8004b1a:	d906      	bls.n	8004b2a <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a59      	ldr	r2, [pc, #356]	@ (8004c84 <HAL_SPI_TransmitReceive_IT+0x208>)
 8004b20:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a58      	ldr	r2, [pc, #352]	@ (8004c88 <HAL_SPI_TransmitReceive_IT+0x20c>)
 8004b26:	671a      	str	r2, [r3, #112]	@ 0x70
 8004b28:	e010      	b.n	8004b4c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b07      	cmp	r3, #7
 8004b30:	d906      	bls.n	8004b40 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a55      	ldr	r2, [pc, #340]	@ (8004c8c <HAL_SPI_TransmitReceive_IT+0x210>)
 8004b36:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a55      	ldr	r2, [pc, #340]	@ (8004c90 <HAL_SPI_TransmitReceive_IT+0x214>)
 8004b3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8004b3e:	e005      	b.n	8004b4c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a54      	ldr	r2, [pc, #336]	@ (8004c94 <HAL_SPI_TransmitReceive_IT+0x218>)
 8004b44:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a53      	ldr	r2, [pc, #332]	@ (8004c98 <HAL_SPI_TransmitReceive_IT+0x21c>)
 8004b4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	4b4e      	ldr	r3, [pc, #312]	@ (8004c9c <HAL_SPI_TransmitReceive_IT+0x220>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	8879      	ldrh	r1, [r7, #2]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004b80:	e054      	b.n	8004c2c <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b0f      	cmp	r3, #15
 8004b88:	d919      	bls.n	8004bbe <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9a:	1d1a      	adds	r2, r3, #4
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e036      	b.n	8004c2c <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b07      	cmp	r3, #7
 8004bc4:	d918      	bls.n	8004bf8 <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd4:	1c9a      	adds	r2, r3, #2
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e019      	b.n	8004c2c <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3320      	adds	r3, #32
 8004c02:	7812      	ldrb	r2, [r2, #0]
 8004c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d102      	bne.n	8004c40 <HAL_SPI_TransmitReceive_IT+0x1c4>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1a0      	bne.n	8004b82 <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6919      	ldr	r1, [r3, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f240 736c 	movw	r3, #1900	@ 0x76c
 8004c56:	430b      	orrs	r3, r1
 8004c58:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c62:	d107      	bne.n	8004c74 <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	0800528f 	.word	0x0800528f
 8004c88:	0800517f 	.word	0x0800517f
 8004c8c:	0800511f 	.word	0x0800511f
 8004c90:	08005231 	.word	0x08005231
 8004c94:	080050c1 	.word	0x080050c1
 8004c98:	080051d7 	.word	0x080051d7
 8004c9c:	ffff0000 	.word	0xffff0000

08004ca0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004cd2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3330      	adds	r3, #48	@ 0x30
 8004cda:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d010      	beq.n	8004d08 <HAL_SPI_IRQHandler+0x68>
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f9b9 	bl	8005078 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8004d06:	e192      	b.n	800502e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d113      	bne.n	8004d3a <HAL_SPI_IRQHandler+0x9a>
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10e      	bne.n	8004d3a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
    handled = 1UL;
 8004d36:	2301      	movs	r3, #1
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10f      	bne.n	8004d64 <HAL_SPI_IRQHandler+0xc4>
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
    handled = 1UL;
 8004d60:	2301      	movs	r3, #1
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <HAL_SPI_IRQHandler+0xee>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
    handled = 1UL;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 8147 	bne.w	8005024 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 808b 	beq.w	8004eb8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0208 	orr.w	r2, r2, #8
 8004db0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0210 	orr.w	r2, r2, #16
 8004dc0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699a      	ldr	r2, [r3, #24]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dd0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0208 	bic.w	r2, r2, #8
 8004de0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d13d      	bne.n	8004e6c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8004df0:	e036      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b0f      	cmp	r3, #15
 8004df8:	d90b      	bls.n	8004e12 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e02:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e04:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	665a      	str	r2, [r3, #100]	@ 0x64
 8004e10:	e01d      	b.n	8004e4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b07      	cmp	r3, #7
 8004e18:	d90b      	bls.n	8004e32 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	8812      	ldrh	r2, [r2, #0]
 8004e22:	b292      	uxth	r2, r2
 8004e24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	665a      	str	r2, [r3, #100]	@ 0x64
 8004e30:	e00d      	b.n	8004e4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1c2      	bne.n	8004df2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa3b 	bl	80052e8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8ed 	bl	8005064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004e8a:	e0d0      	b.n	800502e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d103      	bne.n	8004e9a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fb fc82 	bl	800079c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8004e98:	e0c6      	b.n	8005028 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d103      	bne.n	8004ea8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8d5 	bl	8005050 <HAL_SPI_RxCpltCallback>
    return;
 8004ea6:	e0bf      	b.n	8005028 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	f040 80bc 	bne.w	8005028 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f8c3 	bl	800503c <HAL_SPI_TxCpltCallback>
    return;
 8004eb6:	e0b7      	b.n	8005028 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80b5 	beq.w	800502e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00f      	beq.n	8004eee <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00f      	beq.n	8004f18 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f16:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00f      	beq.n	8004f42 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f28:	f043 0208 	orr.w	r2, r3, #8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00f      	beq.n	8004f6c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0220 	orr.w	r2, r2, #32
 8004f6a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d05a      	beq.n	800502c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6919      	ldr	r1, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <HAL_SPI_IRQHandler+0x394>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004fa0:	d138      	bne.n	8005014 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004fb0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d013      	beq.n	8004fe2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8005038 <HAL_SPI_IRQHandler+0x398>)
 8004fc0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fc f992 	bl	80012f0 <HAL_DMA_Abort_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d020      	beq.n	800502c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fee:	4a12      	ldr	r2, [pc, #72]	@ (8005038 <HAL_SPI_IRQHandler+0x398>)
 8004ff0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fc f97a 	bl	80012f0 <HAL_DMA_Abort_IT>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d014      	beq.n	800502c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005008:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005012:	e00b      	b.n	800502c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f821 	bl	8005064 <HAL_SPI_ErrorCallback>
    return;
 8005022:	e003      	b.n	800502c <HAL_SPI_IRQHandler+0x38c>
    return;
 8005024:	bf00      	nop
 8005026:	e002      	b.n	800502e <HAL_SPI_IRQHandler+0x38e>
    return;
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <HAL_SPI_IRQHandler+0x38e>
    return;
 800502c:	bf00      	nop
  }
}
 800502e:	3728      	adds	r7, #40	@ 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	fffffc94 	.word	0xfffffc94
 8005038:	0800508d 	.word	0x0800508d

0800503c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff ffd6 	bl	8005064 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3330      	adds	r3, #48	@ 0x30
 800512c:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	8812      	ldrh	r2, [r2, #0]
 8005136:	b292      	uxth	r2, r2
 8005138:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800513e:	1c9a      	adds	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d107      	bne.n	8005172 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800518e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005190:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3320      	adds	r3, #32
 80051e8:	7812      	ldrb	r2, [r2, #0]
 80051ea:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d107      	bne.n	8005224 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0202 	bic.w	r2, r2, #2
 8005222:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3320      	adds	r3, #32
 800523e:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005244:	881a      	ldrh	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800524e:	1c9a      	adds	r2, r3, #2
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d107      	bne.n	8005282 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0202 	bic.w	r2, r2, #2
 8005280:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a6:	1d1a      	adds	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0202 	bic.w	r2, r2, #2
 80052d8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
	...

080052e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0210 	orr.w	r2, r2, #16
 8005316:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0201 	bic.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6919      	ldr	r1, [r3, #16]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b3c      	ldr	r3, [pc, #240]	@ (8005424 <SPI_CloseTransfer+0x13c>)
 8005334:	400b      	ands	r3, r1
 8005336:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005346:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b04      	cmp	r3, #4
 8005352:	d014      	beq.n	800537e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00f      	beq.n	800537e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005364:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0220 	orr.w	r2, r2, #32
 800537c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d014      	beq.n	80053b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00f      	beq.n	80053b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00f      	beq.n	80053de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c4:	f043 0201 	orr.w	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00f      	beq.n	8005408 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ee:	f043 0208 	orr.w	r2, r3, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005406:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	fffffc90 	.word	0xfffffc90

08005428 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	3307      	adds	r3, #7
 8005446:	08db      	lsrs	r3, r3, #3
 8005448:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e042      	b.n	80054f6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fbf0 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2224      	movs	r2, #36	@ 0x24
 800548c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fe1f 	bl	80060ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f8b4 	bl	800561c <UART_SetConfig>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e01b      	b.n	80054f6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fe9e 	bl	8006230 <UART_CheckIdleState>
 80054f4:	4603      	mov	r3, r0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b08a      	sub	sp, #40	@ 0x28
 8005502:	af02      	add	r7, sp, #8
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005514:	2b20      	cmp	r3, #32
 8005516:	d17b      	bne.n	8005610 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_UART_Transmit+0x26>
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e074      	b.n	8005612 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2221      	movs	r2, #33	@ 0x21
 8005534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005538:	f7fb fd8e 	bl	8001058 <HAL_GetTick>
 800553c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	88fa      	ldrh	r2, [r7, #6]
 8005542:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	88fa      	ldrh	r2, [r7, #6]
 800554a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005556:	d108      	bne.n	800556a <HAL_UART_Transmit+0x6c>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	e003      	b.n	8005572 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005572:	e030      	b.n	80055d6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2200      	movs	r2, #0
 800557c:	2180      	movs	r1, #128	@ 0x80
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 ff00 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d005      	beq.n	8005596 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e03d      	b.n	8005612 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	3302      	adds	r3, #2
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e007      	b.n	80055c4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	3301      	adds	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1c8      	bne.n	8005574 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2140      	movs	r1, #64	@ 0x40
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fec9 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e006      	b.n	8005612 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b092      	sub	sp, #72	@ 0x48
 8005622:	af00      	add	r7, sp, #0
 8005624:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	431a      	orrs	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	431a      	orrs	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	4313      	orrs	r3, r2
 8005642:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4bbe      	ldr	r3, [pc, #760]	@ (8005944 <UART_SetConfig+0x328>)
 800564c:	4013      	ands	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005654:	430b      	orrs	r3, r1
 8005656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4ab3      	ldr	r2, [pc, #716]	@ (8005948 <UART_SetConfig+0x32c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005684:	4313      	orrs	r3, r2
 8005686:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	4baf      	ldr	r3, [pc, #700]	@ (800594c <UART_SetConfig+0x330>)
 8005690:	4013      	ands	r3, r2
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005698:	430b      	orrs	r3, r1
 800569a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a2:	f023 010f 	bic.w	r1, r3, #15
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4aa6      	ldr	r2, [pc, #664]	@ (8005950 <UART_SetConfig+0x334>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d177      	bne.n	80057ac <UART_SetConfig+0x190>
 80056bc:	4ba5      	ldr	r3, [pc, #660]	@ (8005954 <UART_SetConfig+0x338>)
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056c4:	2b28      	cmp	r3, #40	@ 0x28
 80056c6:	d86d      	bhi.n	80057a4 <UART_SetConfig+0x188>
 80056c8:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <UART_SetConfig+0xb4>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	08005775 	.word	0x08005775
 80056d4:	080057a5 	.word	0x080057a5
 80056d8:	080057a5 	.word	0x080057a5
 80056dc:	080057a5 	.word	0x080057a5
 80056e0:	080057a5 	.word	0x080057a5
 80056e4:	080057a5 	.word	0x080057a5
 80056e8:	080057a5 	.word	0x080057a5
 80056ec:	080057a5 	.word	0x080057a5
 80056f0:	0800577d 	.word	0x0800577d
 80056f4:	080057a5 	.word	0x080057a5
 80056f8:	080057a5 	.word	0x080057a5
 80056fc:	080057a5 	.word	0x080057a5
 8005700:	080057a5 	.word	0x080057a5
 8005704:	080057a5 	.word	0x080057a5
 8005708:	080057a5 	.word	0x080057a5
 800570c:	080057a5 	.word	0x080057a5
 8005710:	08005785 	.word	0x08005785
 8005714:	080057a5 	.word	0x080057a5
 8005718:	080057a5 	.word	0x080057a5
 800571c:	080057a5 	.word	0x080057a5
 8005720:	080057a5 	.word	0x080057a5
 8005724:	080057a5 	.word	0x080057a5
 8005728:	080057a5 	.word	0x080057a5
 800572c:	080057a5 	.word	0x080057a5
 8005730:	0800578d 	.word	0x0800578d
 8005734:	080057a5 	.word	0x080057a5
 8005738:	080057a5 	.word	0x080057a5
 800573c:	080057a5 	.word	0x080057a5
 8005740:	080057a5 	.word	0x080057a5
 8005744:	080057a5 	.word	0x080057a5
 8005748:	080057a5 	.word	0x080057a5
 800574c:	080057a5 	.word	0x080057a5
 8005750:	08005795 	.word	0x08005795
 8005754:	080057a5 	.word	0x080057a5
 8005758:	080057a5 	.word	0x080057a5
 800575c:	080057a5 	.word	0x080057a5
 8005760:	080057a5 	.word	0x080057a5
 8005764:	080057a5 	.word	0x080057a5
 8005768:	080057a5 	.word	0x080057a5
 800576c:	080057a5 	.word	0x080057a5
 8005770:	0800579d 	.word	0x0800579d
 8005774:	2301      	movs	r3, #1
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e222      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e21e      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e21a      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e216      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005794:	2320      	movs	r3, #32
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e212      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800579c:	2340      	movs	r3, #64	@ 0x40
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e20e      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e20a      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a69      	ldr	r2, [pc, #420]	@ (8005958 <UART_SetConfig+0x33c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d130      	bne.n	8005818 <UART_SetConfig+0x1fc>
 80057b6:	4b67      	ldr	r3, [pc, #412]	@ (8005954 <UART_SetConfig+0x338>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d826      	bhi.n	8005810 <UART_SetConfig+0x1f4>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x1ac>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057e1 	.word	0x080057e1
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	080057f1 	.word	0x080057f1
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005801 	.word	0x08005801
 80057dc:	08005809 	.word	0x08005809
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e1ec      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ee:	e1e8      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f6:	e1e4      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fe:	e1e0      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005800:	2320      	movs	r3, #32
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005806:	e1dc      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005808:	2340      	movs	r3, #64	@ 0x40
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580e:	e1d8      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005810:	2380      	movs	r3, #128	@ 0x80
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005816:	e1d4      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a4f      	ldr	r2, [pc, #316]	@ (800595c <UART_SetConfig+0x340>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d130      	bne.n	8005884 <UART_SetConfig+0x268>
 8005822:	4b4c      	ldr	r3, [pc, #304]	@ (8005954 <UART_SetConfig+0x338>)
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	2b05      	cmp	r3, #5
 800582c:	d826      	bhi.n	800587c <UART_SetConfig+0x260>
 800582e:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <UART_SetConfig+0x218>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	0800584d 	.word	0x0800584d
 8005838:	08005855 	.word	0x08005855
 800583c:	0800585d 	.word	0x0800585d
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005875 	.word	0x08005875
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005852:	e1b6      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585a:	e1b2      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005862:	e1ae      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e1aa      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800586c:	2320      	movs	r3, #32
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e1a6      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005874:	2340      	movs	r3, #64	@ 0x40
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e1a2      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800587c:	2380      	movs	r3, #128	@ 0x80
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e19e      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a35      	ldr	r2, [pc, #212]	@ (8005960 <UART_SetConfig+0x344>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d130      	bne.n	80058f0 <UART_SetConfig+0x2d4>
 800588e:	4b31      	ldr	r3, [pc, #196]	@ (8005954 <UART_SetConfig+0x338>)
 8005890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b05      	cmp	r3, #5
 8005898:	d826      	bhi.n	80058e8 <UART_SetConfig+0x2cc>
 800589a:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <UART_SetConfig+0x284>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b9 	.word	0x080058b9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	080058c9 	.word	0x080058c9
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058be:	e180      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c6:	e17c      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e178      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e174      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80058d8:	2320      	movs	r3, #32
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e170      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80058e0:	2340      	movs	r3, #64	@ 0x40
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e16c      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e168      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <UART_SetConfig+0x348>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d142      	bne.n	8005980 <UART_SetConfig+0x364>
 80058fa:	4b16      	ldr	r3, [pc, #88]	@ (8005954 <UART_SetConfig+0x338>)
 80058fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b05      	cmp	r3, #5
 8005904:	d838      	bhi.n	8005978 <UART_SetConfig+0x35c>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <UART_SetConfig+0x2f0>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005925 	.word	0x08005925
 8005910:	0800592d 	.word	0x0800592d
 8005914:	08005935 	.word	0x08005935
 8005918:	0800593d 	.word	0x0800593d
 800591c:	08005969 	.word	0x08005969
 8005920:	08005971 	.word	0x08005971
 8005924:	2300      	movs	r3, #0
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592a:	e14a      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800592c:	2304      	movs	r3, #4
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005932:	e146      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005934:	2308      	movs	r3, #8
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e142      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 800593c:	2310      	movs	r3, #16
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e13e      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005944:	cfff69f3 	.word	0xcfff69f3
 8005948:	58000c00 	.word	0x58000c00
 800594c:	11fff4ff 	.word	0x11fff4ff
 8005950:	40011000 	.word	0x40011000
 8005954:	58024400 	.word	0x58024400
 8005958:	40004400 	.word	0x40004400
 800595c:	40004800 	.word	0x40004800
 8005960:	40004c00 	.word	0x40004c00
 8005964:	40005000 	.word	0x40005000
 8005968:	2320      	movs	r3, #32
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e128      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005970:	2340      	movs	r3, #64	@ 0x40
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e124      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005978:	2380      	movs	r3, #128	@ 0x80
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e120      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4acb      	ldr	r2, [pc, #812]	@ (8005cb4 <UART_SetConfig+0x698>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d176      	bne.n	8005a78 <UART_SetConfig+0x45c>
 800598a:	4bcb      	ldr	r3, [pc, #812]	@ (8005cb8 <UART_SetConfig+0x69c>)
 800598c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005992:	2b28      	cmp	r3, #40	@ 0x28
 8005994:	d86c      	bhi.n	8005a70 <UART_SetConfig+0x454>
 8005996:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <UART_SetConfig+0x380>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	08005a41 	.word	0x08005a41
 80059a0:	08005a71 	.word	0x08005a71
 80059a4:	08005a71 	.word	0x08005a71
 80059a8:	08005a71 	.word	0x08005a71
 80059ac:	08005a71 	.word	0x08005a71
 80059b0:	08005a71 	.word	0x08005a71
 80059b4:	08005a71 	.word	0x08005a71
 80059b8:	08005a71 	.word	0x08005a71
 80059bc:	08005a49 	.word	0x08005a49
 80059c0:	08005a71 	.word	0x08005a71
 80059c4:	08005a71 	.word	0x08005a71
 80059c8:	08005a71 	.word	0x08005a71
 80059cc:	08005a71 	.word	0x08005a71
 80059d0:	08005a71 	.word	0x08005a71
 80059d4:	08005a71 	.word	0x08005a71
 80059d8:	08005a71 	.word	0x08005a71
 80059dc:	08005a51 	.word	0x08005a51
 80059e0:	08005a71 	.word	0x08005a71
 80059e4:	08005a71 	.word	0x08005a71
 80059e8:	08005a71 	.word	0x08005a71
 80059ec:	08005a71 	.word	0x08005a71
 80059f0:	08005a71 	.word	0x08005a71
 80059f4:	08005a71 	.word	0x08005a71
 80059f8:	08005a71 	.word	0x08005a71
 80059fc:	08005a59 	.word	0x08005a59
 8005a00:	08005a71 	.word	0x08005a71
 8005a04:	08005a71 	.word	0x08005a71
 8005a08:	08005a71 	.word	0x08005a71
 8005a0c:	08005a71 	.word	0x08005a71
 8005a10:	08005a71 	.word	0x08005a71
 8005a14:	08005a71 	.word	0x08005a71
 8005a18:	08005a71 	.word	0x08005a71
 8005a1c:	08005a61 	.word	0x08005a61
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	08005a71 	.word	0x08005a71
 8005a28:	08005a71 	.word	0x08005a71
 8005a2c:	08005a71 	.word	0x08005a71
 8005a30:	08005a71 	.word	0x08005a71
 8005a34:	08005a71 	.word	0x08005a71
 8005a38:	08005a71 	.word	0x08005a71
 8005a3c:	08005a69 	.word	0x08005a69
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e0bc      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e0b8      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005a50:	2308      	movs	r3, #8
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e0b4      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e0b0      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005a60:	2320      	movs	r3, #32
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e0ac      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005a68:	2340      	movs	r3, #64	@ 0x40
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e0a8      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005a70:	2380      	movs	r3, #128	@ 0x80
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e0a4      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a8f      	ldr	r2, [pc, #572]	@ (8005cbc <UART_SetConfig+0x6a0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d130      	bne.n	8005ae4 <UART_SetConfig+0x4c8>
 8005a82:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb8 <UART_SetConfig+0x69c>)
 8005a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	d826      	bhi.n	8005adc <UART_SetConfig+0x4c0>
 8005a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <UART_SetConfig+0x478>)
 8005a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a94:	08005aad 	.word	0x08005aad
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005abd 	.word	0x08005abd
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acd 	.word	0x08005acd
 8005aa8:	08005ad5 	.word	0x08005ad5
 8005aac:	2300      	movs	r3, #0
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e086      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e082      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e07e      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e07a      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005acc:	2320      	movs	r3, #32
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e076      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005ad4:	2340      	movs	r3, #64	@ 0x40
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e072      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005adc:	2380      	movs	r3, #128	@ 0x80
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e06e      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a75      	ldr	r2, [pc, #468]	@ (8005cc0 <UART_SetConfig+0x6a4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d130      	bne.n	8005b50 <UART_SetConfig+0x534>
 8005aee:	4b72      	ldr	r3, [pc, #456]	@ (8005cb8 <UART_SetConfig+0x69c>)
 8005af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d826      	bhi.n	8005b48 <UART_SetConfig+0x52c>
 8005afa:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <UART_SetConfig+0x4e4>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b19 	.word	0x08005b19
 8005b04:	08005b21 	.word	0x08005b21
 8005b08:	08005b29 	.word	0x08005b29
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1e:	e050      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b26:	e04c      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e048      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b36:	e044      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b38:	2320      	movs	r3, #32
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e040      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b40:	2340      	movs	r3, #64	@ 0x40
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e03c      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b48:	2380      	movs	r3, #128	@ 0x80
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e038      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a5b      	ldr	r2, [pc, #364]	@ (8005cc4 <UART_SetConfig+0x6a8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d130      	bne.n	8005bbc <UART_SetConfig+0x5a0>
 8005b5a:	4b57      	ldr	r3, [pc, #348]	@ (8005cb8 <UART_SetConfig+0x69c>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d826      	bhi.n	8005bb4 <UART_SetConfig+0x598>
 8005b66:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <UART_SetConfig+0x550>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b85 	.word	0x08005b85
 8005b70:	08005b8d 	.word	0x08005b8d
 8005b74:	08005b95 	.word	0x08005b95
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005bad 	.word	0x08005bad
 8005b84:	2302      	movs	r3, #2
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8a:	e01a      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b92:	e016      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b94:	2308      	movs	r3, #8
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e012      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba2:	e00e      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e00a      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005bac:	2340      	movs	r3, #64	@ 0x40
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e006      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005bb4:	2380      	movs	r3, #128	@ 0x80
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e002      	b.n	8005bc2 <UART_SetConfig+0x5a6>
 8005bbc:	2380      	movs	r3, #128	@ 0x80
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc4 <UART_SetConfig+0x6a8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	f040 80f8 	bne.w	8005dbe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	dc46      	bgt.n	8005c64 <UART_SetConfig+0x648>
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	f2c0 8082 	blt.w	8005ce0 <UART_SetConfig+0x6c4>
 8005bdc:	3b02      	subs	r3, #2
 8005bde:	2b1e      	cmp	r3, #30
 8005be0:	d87e      	bhi.n	8005ce0 <UART_SetConfig+0x6c4>
 8005be2:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <UART_SetConfig+0x5cc>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c6b 	.word	0x08005c6b
 8005bec:	08005ce1 	.word	0x08005ce1
 8005bf0:	08005c73 	.word	0x08005c73
 8005bf4:	08005ce1 	.word	0x08005ce1
 8005bf8:	08005ce1 	.word	0x08005ce1
 8005bfc:	08005ce1 	.word	0x08005ce1
 8005c00:	08005c83 	.word	0x08005c83
 8005c04:	08005ce1 	.word	0x08005ce1
 8005c08:	08005ce1 	.word	0x08005ce1
 8005c0c:	08005ce1 	.word	0x08005ce1
 8005c10:	08005ce1 	.word	0x08005ce1
 8005c14:	08005ce1 	.word	0x08005ce1
 8005c18:	08005ce1 	.word	0x08005ce1
 8005c1c:	08005ce1 	.word	0x08005ce1
 8005c20:	08005c93 	.word	0x08005c93
 8005c24:	08005ce1 	.word	0x08005ce1
 8005c28:	08005ce1 	.word	0x08005ce1
 8005c2c:	08005ce1 	.word	0x08005ce1
 8005c30:	08005ce1 	.word	0x08005ce1
 8005c34:	08005ce1 	.word	0x08005ce1
 8005c38:	08005ce1 	.word	0x08005ce1
 8005c3c:	08005ce1 	.word	0x08005ce1
 8005c40:	08005ce1 	.word	0x08005ce1
 8005c44:	08005ce1 	.word	0x08005ce1
 8005c48:	08005ce1 	.word	0x08005ce1
 8005c4c:	08005ce1 	.word	0x08005ce1
 8005c50:	08005ce1 	.word	0x08005ce1
 8005c54:	08005ce1 	.word	0x08005ce1
 8005c58:	08005ce1 	.word	0x08005ce1
 8005c5c:	08005ce1 	.word	0x08005ce1
 8005c60:	08005cd3 	.word	0x08005cd3
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d037      	beq.n	8005cd8 <UART_SetConfig+0x6bc>
 8005c68:	e03a      	b.n	8005ce0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c6a:	f7fe f9c1 	bl	8003ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c70:	e03c      	b.n	8005cec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe f9d0 	bl	800401c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c80:	e034      	b.n	8005cec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c82:	f107 0318 	add.w	r3, r7, #24
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fb1c 	bl	80042c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c90:	e02c      	b.n	8005cec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c92:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <UART_SetConfig+0x69c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d016      	beq.n	8005ccc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c9e:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <UART_SetConfig+0x69c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	08db      	lsrs	r3, r3, #3
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	4a07      	ldr	r2, [pc, #28]	@ (8005cc8 <UART_SetConfig+0x6ac>)
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cb0:	e01c      	b.n	8005cec <UART_SetConfig+0x6d0>
 8005cb2:	bf00      	nop
 8005cb4:	40011400 	.word	0x40011400
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	40007800 	.word	0x40007800
 8005cc0:	40007c00 	.word	0x40007c00
 8005cc4:	58000c00 	.word	0x58000c00
 8005cc8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8005f44 <UART_SetConfig+0x928>)
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd0:	e00c      	b.n	8005cec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cd2:	4b9d      	ldr	r3, [pc, #628]	@ (8005f48 <UART_SetConfig+0x92c>)
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd6:	e009      	b.n	8005cec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cde:	e005      	b.n	8005cec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005cea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 81de 	beq.w	80060b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf8:	4a94      	ldr	r2, [pc, #592]	@ (8005f4c <UART_SetConfig+0x930>)
 8005cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d06:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d305      	bcc.n	8005d24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d903      	bls.n	8005d2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d2a:	e1c1      	b.n	80060b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2e:	2200      	movs	r2, #0
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	60fa      	str	r2, [r7, #12]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	4a84      	ldr	r2, [pc, #528]	@ (8005f4c <UART_SetConfig+0x930>)
 8005d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2200      	movs	r2, #0
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d4e:	f7fa fb17 	bl	8000380 <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4610      	mov	r0, r2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	020b      	lsls	r3, r1, #8
 8005d64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d68:	0202      	lsls	r2, r0, #8
 8005d6a:	6979      	ldr	r1, [r7, #20]
 8005d6c:	6849      	ldr	r1, [r1, #4]
 8005d6e:	0849      	lsrs	r1, r1, #1
 8005d70:	2000      	movs	r0, #0
 8005d72:	460c      	mov	r4, r1
 8005d74:	4605      	mov	r5, r0
 8005d76:	eb12 0804 	adds.w	r8, r2, r4
 8005d7a:	eb43 0905 	adc.w	r9, r3, r5
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	469a      	mov	sl, r3
 8005d86:	4693      	mov	fp, r2
 8005d88:	4652      	mov	r2, sl
 8005d8a:	465b      	mov	r3, fp
 8005d8c:	4640      	mov	r0, r8
 8005d8e:	4649      	mov	r1, r9
 8005d90:	f7fa faf6 	bl	8000380 <__aeabi_uldivmod>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4613      	mov	r3, r2
 8005d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da2:	d308      	bcc.n	8005db6 <UART_SetConfig+0x79a>
 8005da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005daa:	d204      	bcs.n	8005db6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005db2:	60da      	str	r2, [r3, #12]
 8005db4:	e17c      	b.n	80060b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005dbc:	e178      	b.n	80060b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc6:	f040 80c5 	bne.w	8005f54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005dca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	dc48      	bgt.n	8005e64 <UART_SetConfig+0x848>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	db7b      	blt.n	8005ece <UART_SetConfig+0x8b2>
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d879      	bhi.n	8005ece <UART_SetConfig+0x8b2>
 8005dda:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0x7c4>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005e6b 	.word	0x08005e6b
 8005de4:	08005e73 	.word	0x08005e73
 8005de8:	08005ecf 	.word	0x08005ecf
 8005dec:	08005ecf 	.word	0x08005ecf
 8005df0:	08005e7b 	.word	0x08005e7b
 8005df4:	08005ecf 	.word	0x08005ecf
 8005df8:	08005ecf 	.word	0x08005ecf
 8005dfc:	08005ecf 	.word	0x08005ecf
 8005e00:	08005e8b 	.word	0x08005e8b
 8005e04:	08005ecf 	.word	0x08005ecf
 8005e08:	08005ecf 	.word	0x08005ecf
 8005e0c:	08005ecf 	.word	0x08005ecf
 8005e10:	08005ecf 	.word	0x08005ecf
 8005e14:	08005ecf 	.word	0x08005ecf
 8005e18:	08005ecf 	.word	0x08005ecf
 8005e1c:	08005ecf 	.word	0x08005ecf
 8005e20:	08005e9b 	.word	0x08005e9b
 8005e24:	08005ecf 	.word	0x08005ecf
 8005e28:	08005ecf 	.word	0x08005ecf
 8005e2c:	08005ecf 	.word	0x08005ecf
 8005e30:	08005ecf 	.word	0x08005ecf
 8005e34:	08005ecf 	.word	0x08005ecf
 8005e38:	08005ecf 	.word	0x08005ecf
 8005e3c:	08005ecf 	.word	0x08005ecf
 8005e40:	08005ecf 	.word	0x08005ecf
 8005e44:	08005ecf 	.word	0x08005ecf
 8005e48:	08005ecf 	.word	0x08005ecf
 8005e4c:	08005ecf 	.word	0x08005ecf
 8005e50:	08005ecf 	.word	0x08005ecf
 8005e54:	08005ecf 	.word	0x08005ecf
 8005e58:	08005ecf 	.word	0x08005ecf
 8005e5c:	08005ecf 	.word	0x08005ecf
 8005e60:	08005ec1 	.word	0x08005ec1
 8005e64:	2b40      	cmp	r3, #64	@ 0x40
 8005e66:	d02e      	beq.n	8005ec6 <UART_SetConfig+0x8aa>
 8005e68:	e031      	b.n	8005ece <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6a:	f7fc fe4b 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8005e6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e70:	e033      	b.n	8005eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e72:	f7fc fe5d 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8005e76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e78:	e02f      	b.n	8005eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe f8cc 	bl	800401c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e88:	e027      	b.n	8005eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8a:	f107 0318 	add.w	r3, r7, #24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fa18 	bl	80042c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e98:	e01f      	b.n	8005eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f50 <UART_SetConfig+0x934>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f50 <UART_SetConfig+0x934>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	08db      	lsrs	r3, r3, #3
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	4a24      	ldr	r2, [pc, #144]	@ (8005f44 <UART_SetConfig+0x928>)
 8005eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005eb8:	e00f      	b.n	8005eda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005eba:	4b22      	ldr	r3, [pc, #136]	@ (8005f44 <UART_SetConfig+0x928>)
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ebe:	e00c      	b.n	8005eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ec0:	4b21      	ldr	r3, [pc, #132]	@ (8005f48 <UART_SetConfig+0x92c>)
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec4:	e009      	b.n	8005eda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ecc:	e005      	b.n	8005eda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80e7 	beq.w	80060b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <UART_SetConfig+0x930>)
 8005ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eec:	461a      	mov	r2, r3
 8005eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef4:	005a      	lsls	r2, r3, #1
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	441a      	add	r2, r3
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0a:	2b0f      	cmp	r3, #15
 8005f0c:	d916      	bls.n	8005f3c <UART_SetConfig+0x920>
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f14:	d212      	bcs.n	8005f3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f023 030f 	bic.w	r3, r3, #15
 8005f1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005f38:	60da      	str	r2, [r3, #12]
 8005f3a:	e0b9      	b.n	80060b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f42:	e0b5      	b.n	80060b0 <UART_SetConfig+0xa94>
 8005f44:	03d09000 	.word	0x03d09000
 8005f48:	003d0900 	.word	0x003d0900
 8005f4c:	0800764c 	.word	0x0800764c
 8005f50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	dc49      	bgt.n	8005ff0 <UART_SetConfig+0x9d4>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	db7c      	blt.n	800605a <UART_SetConfig+0xa3e>
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d87a      	bhi.n	800605a <UART_SetConfig+0xa3e>
 8005f64:	a201      	add	r2, pc, #4	@ (adr r2, 8005f6c <UART_SetConfig+0x950>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005ff7 	.word	0x08005ff7
 8005f70:	08005fff 	.word	0x08005fff
 8005f74:	0800605b 	.word	0x0800605b
 8005f78:	0800605b 	.word	0x0800605b
 8005f7c:	08006007 	.word	0x08006007
 8005f80:	0800605b 	.word	0x0800605b
 8005f84:	0800605b 	.word	0x0800605b
 8005f88:	0800605b 	.word	0x0800605b
 8005f8c:	08006017 	.word	0x08006017
 8005f90:	0800605b 	.word	0x0800605b
 8005f94:	0800605b 	.word	0x0800605b
 8005f98:	0800605b 	.word	0x0800605b
 8005f9c:	0800605b 	.word	0x0800605b
 8005fa0:	0800605b 	.word	0x0800605b
 8005fa4:	0800605b 	.word	0x0800605b
 8005fa8:	0800605b 	.word	0x0800605b
 8005fac:	08006027 	.word	0x08006027
 8005fb0:	0800605b 	.word	0x0800605b
 8005fb4:	0800605b 	.word	0x0800605b
 8005fb8:	0800605b 	.word	0x0800605b
 8005fbc:	0800605b 	.word	0x0800605b
 8005fc0:	0800605b 	.word	0x0800605b
 8005fc4:	0800605b 	.word	0x0800605b
 8005fc8:	0800605b 	.word	0x0800605b
 8005fcc:	0800605b 	.word	0x0800605b
 8005fd0:	0800605b 	.word	0x0800605b
 8005fd4:	0800605b 	.word	0x0800605b
 8005fd8:	0800605b 	.word	0x0800605b
 8005fdc:	0800605b 	.word	0x0800605b
 8005fe0:	0800605b 	.word	0x0800605b
 8005fe4:	0800605b 	.word	0x0800605b
 8005fe8:	0800605b 	.word	0x0800605b
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	2b40      	cmp	r3, #64	@ 0x40
 8005ff2:	d02e      	beq.n	8006052 <UART_SetConfig+0xa36>
 8005ff4:	e031      	b.n	800605a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff6:	f7fc fd85 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8005ffa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ffc:	e033      	b.n	8006066 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ffe:	f7fc fd97 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8006002:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006004:	e02f      	b.n	8006066 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe f806 	bl	800401c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006014:	e027      	b.n	8006066 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006016:	f107 0318 	add.w	r3, r7, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe f952 	bl	80042c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006024:	e01f      	b.n	8006066 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006026:	4b2d      	ldr	r3, [pc, #180]	@ (80060dc <UART_SetConfig+0xac0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006032:	4b2a      	ldr	r3, [pc, #168]	@ (80060dc <UART_SetConfig+0xac0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	4a28      	ldr	r2, [pc, #160]	@ (80060e0 <UART_SetConfig+0xac4>)
 800603e:	fa22 f303 	lsr.w	r3, r2, r3
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006044:	e00f      	b.n	8006066 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006046:	4b26      	ldr	r3, [pc, #152]	@ (80060e0 <UART_SetConfig+0xac4>)
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800604a:	e00c      	b.n	8006066 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800604c:	4b25      	ldr	r3, [pc, #148]	@ (80060e4 <UART_SetConfig+0xac8>)
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006050:	e009      	b.n	8006066 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006058:	e005      	b.n	8006066 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006064:	bf00      	nop
    }

    if (pclk != 0U)
 8006066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d021      	beq.n	80060b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <UART_SetConfig+0xacc>)
 8006072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006076:	461a      	mov	r2, r3
 8006078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607a:	fbb3 f2f2 	udiv	r2, r3, r2
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	441a      	add	r2, r3
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	fbb2 f3f3 	udiv	r3, r2, r3
 800608e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	2b0f      	cmp	r3, #15
 8006094:	d909      	bls.n	80060aa <UART_SetConfig+0xa8e>
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800609c:	d205      	bcs.n	80060aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60da      	str	r2, [r3, #12]
 80060a8:	e002      	b.n	80060b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2200      	movs	r2, #0
 80060ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3748      	adds	r7, #72	@ 0x48
 80060d4:	46bd      	mov	sp, r7
 80060d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060da:	bf00      	nop
 80060dc:	58024400 	.word	0x58024400
 80060e0:	03d09000 	.word	0x03d09000
 80060e4:	003d0900 	.word	0x003d0900
 80060e8:	0800764c 	.word	0x0800764c

080060ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01a      	beq.n	8006202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ea:	d10a      	bne.n	8006202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	605a      	str	r2, [r3, #4]
  }
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b098      	sub	sp, #96	@ 0x60
 8006234:	af02      	add	r7, sp, #8
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006240:	f7fa ff0a 	bl	8001058 <HAL_GetTick>
 8006244:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b08      	cmp	r3, #8
 8006252:	d12f      	bne.n	80062b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800625c:	2200      	movs	r2, #0
 800625e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f88e 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d022      	beq.n	80062b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800627c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006282:	653b      	str	r3, [r7, #80]	@ 0x50
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800628c:	647b      	str	r3, [r7, #68]	@ 0x44
 800628e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800629a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e6      	bne.n	800626e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e063      	b.n	800637c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d149      	bne.n	8006356 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ca:	2200      	movs	r2, #0
 80062cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f857 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d03c      	beq.n	8006356 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80062fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e6      	bne.n	80062dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3308      	adds	r3, #8
 8006314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	60fb      	str	r3, [r7, #12]
   return(result);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3308      	adds	r3, #8
 800632c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800632e:	61fa      	str	r2, [r7, #28]
 8006330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	69b9      	ldr	r1, [r7, #24]
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	617b      	str	r3, [r7, #20]
   return(result);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e5      	bne.n	800630e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e012      	b.n	800637c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3758      	adds	r7, #88	@ 0x58
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006394:	e04f      	b.n	8006436 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d04b      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639e:	f7fa fe5b 	bl	8001058 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d302      	bcc.n	80063b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e04e      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d037      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b80      	cmp	r3, #128	@ 0x80
 80063ca:	d034      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b40      	cmp	r3, #64	@ 0x40
 80063d0:	d031      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d110      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2208      	movs	r2, #8
 80063e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f839 	bl	8006460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2208      	movs	r2, #8
 80063f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e029      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800640c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006410:	d111      	bne.n	8006436 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800641a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f81f 	bl	8006460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e00f      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4013      	ands	r3, r2
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	bf0c      	ite	eq
 8006446:	2301      	moveq	r3, #1
 8006448:	2300      	movne	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	429a      	cmp	r2, r3
 8006452:	d0a0      	beq.n	8006396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b095      	sub	sp, #84	@ 0x54
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800647c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006486:	643b      	str	r3, [r7, #64]	@ 0x40
 8006488:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800648c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e6      	bne.n	8006468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006528 <UART_EndRxTransfer+0xc8>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e5      	bne.n	800649a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d118      	bne.n	8006508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0310 	bic.w	r3, r3, #16
 80064ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f8:	6979      	ldr	r1, [r7, #20]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	e841 2300 	strex	r3, r2, [r1]
 8006500:	613b      	str	r3, [r7, #16]
   return(result);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1e6      	bne.n	80064d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800651c:	bf00      	nop
 800651e:	3754      	adds	r7, #84	@ 0x54
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	effffffe 	.word	0xeffffffe

0800652c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_UARTEx_DisableFifoMode+0x16>
 800653e:	2302      	movs	r3, #2
 8006540:	e027      	b.n	8006592 <HAL_UARTEx_DisableFifoMode+0x66>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2224      	movs	r2, #36	@ 0x24
 800654e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0201 	bic.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006570:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e02d      	b.n	8006612 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2224      	movs	r2, #36	@ 0x24
 80065c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f850 	bl	8006698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800662e:	2302      	movs	r3, #2
 8006630:	e02d      	b.n	800668e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2224      	movs	r2, #36	@ 0x24
 800663e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0201 	bic.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f812 	bl	8006698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d108      	bne.n	80066ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066b8:	e031      	b.n	800671e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066ba:	2310      	movs	r3, #16
 80066bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066be:	2310      	movs	r3, #16
 80066c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	0e5b      	lsrs	r3, r3, #25
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	0f5b      	lsrs	r3, r3, #29
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	7b3a      	ldrb	r2, [r7, #12]
 80066e6:	4911      	ldr	r1, [pc, #68]	@ (800672c <UARTEx_SetNbDataToProcess+0x94>)
 80066e8:	5c8a      	ldrb	r2, [r1, r2]
 80066ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066ee:	7b3a      	ldrb	r2, [r7, #12]
 80066f0:	490f      	ldr	r1, [pc, #60]	@ (8006730 <UARTEx_SetNbDataToProcess+0x98>)
 80066f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	7b7a      	ldrb	r2, [r7, #13]
 8006704:	4909      	ldr	r1, [pc, #36]	@ (800672c <UARTEx_SetNbDataToProcess+0x94>)
 8006706:	5c8a      	ldrb	r2, [r1, r2]
 8006708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800670c:	7b7a      	ldrb	r2, [r7, #13]
 800670e:	4908      	ldr	r1, [pc, #32]	@ (8006730 <UARTEx_SetNbDataToProcess+0x98>)
 8006710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006712:	fb93 f3f2 	sdiv	r3, r3, r2
 8006716:	b29a      	uxth	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	08007664 	.word	0x08007664
 8006730:	0800766c 	.word	0x0800766c

08006734 <std>:
 8006734:	2300      	movs	r3, #0
 8006736:	b510      	push	{r4, lr}
 8006738:	4604      	mov	r4, r0
 800673a:	e9c0 3300 	strd	r3, r3, [r0]
 800673e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006742:	6083      	str	r3, [r0, #8]
 8006744:	8181      	strh	r1, [r0, #12]
 8006746:	6643      	str	r3, [r0, #100]	@ 0x64
 8006748:	81c2      	strh	r2, [r0, #14]
 800674a:	6183      	str	r3, [r0, #24]
 800674c:	4619      	mov	r1, r3
 800674e:	2208      	movs	r2, #8
 8006750:	305c      	adds	r0, #92	@ 0x5c
 8006752:	f000 f90e 	bl	8006972 <memset>
 8006756:	4b0d      	ldr	r3, [pc, #52]	@ (800678c <std+0x58>)
 8006758:	6263      	str	r3, [r4, #36]	@ 0x24
 800675a:	4b0d      	ldr	r3, [pc, #52]	@ (8006790 <std+0x5c>)
 800675c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800675e:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <std+0x60>)
 8006760:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006762:	4b0d      	ldr	r3, [pc, #52]	@ (8006798 <std+0x64>)
 8006764:	6323      	str	r3, [r4, #48]	@ 0x30
 8006766:	4b0d      	ldr	r3, [pc, #52]	@ (800679c <std+0x68>)
 8006768:	6224      	str	r4, [r4, #32]
 800676a:	429c      	cmp	r4, r3
 800676c:	d006      	beq.n	800677c <std+0x48>
 800676e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006772:	4294      	cmp	r4, r2
 8006774:	d002      	beq.n	800677c <std+0x48>
 8006776:	33d0      	adds	r3, #208	@ 0xd0
 8006778:	429c      	cmp	r4, r3
 800677a:	d105      	bne.n	8006788 <std+0x54>
 800677c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006784:	f000 b96e 	b.w	8006a64 <__retarget_lock_init_recursive>
 8006788:	bd10      	pop	{r4, pc}
 800678a:	bf00      	nop
 800678c:	080068ed 	.word	0x080068ed
 8006790:	0800690f 	.word	0x0800690f
 8006794:	08006947 	.word	0x08006947
 8006798:	0800696b 	.word	0x0800696b
 800679c:	240001d0 	.word	0x240001d0

080067a0 <stdio_exit_handler>:
 80067a0:	4a02      	ldr	r2, [pc, #8]	@ (80067ac <stdio_exit_handler+0xc>)
 80067a2:	4903      	ldr	r1, [pc, #12]	@ (80067b0 <stdio_exit_handler+0x10>)
 80067a4:	4803      	ldr	r0, [pc, #12]	@ (80067b4 <stdio_exit_handler+0x14>)
 80067a6:	f000 b869 	b.w	800687c <_fwalk_sglue>
 80067aa:	bf00      	nop
 80067ac:	2400001c 	.word	0x2400001c
 80067b0:	08007305 	.word	0x08007305
 80067b4:	2400002c 	.word	0x2400002c

080067b8 <cleanup_stdio>:
 80067b8:	6841      	ldr	r1, [r0, #4]
 80067ba:	4b0c      	ldr	r3, [pc, #48]	@ (80067ec <cleanup_stdio+0x34>)
 80067bc:	4299      	cmp	r1, r3
 80067be:	b510      	push	{r4, lr}
 80067c0:	4604      	mov	r4, r0
 80067c2:	d001      	beq.n	80067c8 <cleanup_stdio+0x10>
 80067c4:	f000 fd9e 	bl	8007304 <_fflush_r>
 80067c8:	68a1      	ldr	r1, [r4, #8]
 80067ca:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <cleanup_stdio+0x38>)
 80067cc:	4299      	cmp	r1, r3
 80067ce:	d002      	beq.n	80067d6 <cleanup_stdio+0x1e>
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fd97 	bl	8007304 <_fflush_r>
 80067d6:	68e1      	ldr	r1, [r4, #12]
 80067d8:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <cleanup_stdio+0x3c>)
 80067da:	4299      	cmp	r1, r3
 80067dc:	d004      	beq.n	80067e8 <cleanup_stdio+0x30>
 80067de:	4620      	mov	r0, r4
 80067e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e4:	f000 bd8e 	b.w	8007304 <_fflush_r>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	240001d0 	.word	0x240001d0
 80067f0:	24000238 	.word	0x24000238
 80067f4:	240002a0 	.word	0x240002a0

080067f8 <global_stdio_init.part.0>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006828 <global_stdio_init.part.0+0x30>)
 80067fc:	4c0b      	ldr	r4, [pc, #44]	@ (800682c <global_stdio_init.part.0+0x34>)
 80067fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006830 <global_stdio_init.part.0+0x38>)
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	4620      	mov	r0, r4
 8006804:	2200      	movs	r2, #0
 8006806:	2104      	movs	r1, #4
 8006808:	f7ff ff94 	bl	8006734 <std>
 800680c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006810:	2201      	movs	r2, #1
 8006812:	2109      	movs	r1, #9
 8006814:	f7ff ff8e 	bl	8006734 <std>
 8006818:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800681c:	2202      	movs	r2, #2
 800681e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006822:	2112      	movs	r1, #18
 8006824:	f7ff bf86 	b.w	8006734 <std>
 8006828:	24000308 	.word	0x24000308
 800682c:	240001d0 	.word	0x240001d0
 8006830:	080067a1 	.word	0x080067a1

08006834 <__sfp_lock_acquire>:
 8006834:	4801      	ldr	r0, [pc, #4]	@ (800683c <__sfp_lock_acquire+0x8>)
 8006836:	f000 b916 	b.w	8006a66 <__retarget_lock_acquire_recursive>
 800683a:	bf00      	nop
 800683c:	24000311 	.word	0x24000311

08006840 <__sfp_lock_release>:
 8006840:	4801      	ldr	r0, [pc, #4]	@ (8006848 <__sfp_lock_release+0x8>)
 8006842:	f000 b911 	b.w	8006a68 <__retarget_lock_release_recursive>
 8006846:	bf00      	nop
 8006848:	24000311 	.word	0x24000311

0800684c <__sinit>:
 800684c:	b510      	push	{r4, lr}
 800684e:	4604      	mov	r4, r0
 8006850:	f7ff fff0 	bl	8006834 <__sfp_lock_acquire>
 8006854:	6a23      	ldr	r3, [r4, #32]
 8006856:	b11b      	cbz	r3, 8006860 <__sinit+0x14>
 8006858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685c:	f7ff bff0 	b.w	8006840 <__sfp_lock_release>
 8006860:	4b04      	ldr	r3, [pc, #16]	@ (8006874 <__sinit+0x28>)
 8006862:	6223      	str	r3, [r4, #32]
 8006864:	4b04      	ldr	r3, [pc, #16]	@ (8006878 <__sinit+0x2c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f5      	bne.n	8006858 <__sinit+0xc>
 800686c:	f7ff ffc4 	bl	80067f8 <global_stdio_init.part.0>
 8006870:	e7f2      	b.n	8006858 <__sinit+0xc>
 8006872:	bf00      	nop
 8006874:	080067b9 	.word	0x080067b9
 8006878:	24000308 	.word	0x24000308

0800687c <_fwalk_sglue>:
 800687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006880:	4607      	mov	r7, r0
 8006882:	4688      	mov	r8, r1
 8006884:	4614      	mov	r4, r2
 8006886:	2600      	movs	r6, #0
 8006888:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800688c:	f1b9 0901 	subs.w	r9, r9, #1
 8006890:	d505      	bpl.n	800689e <_fwalk_sglue+0x22>
 8006892:	6824      	ldr	r4, [r4, #0]
 8006894:	2c00      	cmp	r4, #0
 8006896:	d1f7      	bne.n	8006888 <_fwalk_sglue+0xc>
 8006898:	4630      	mov	r0, r6
 800689a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800689e:	89ab      	ldrh	r3, [r5, #12]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d907      	bls.n	80068b4 <_fwalk_sglue+0x38>
 80068a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068a8:	3301      	adds	r3, #1
 80068aa:	d003      	beq.n	80068b4 <_fwalk_sglue+0x38>
 80068ac:	4629      	mov	r1, r5
 80068ae:	4638      	mov	r0, r7
 80068b0:	47c0      	blx	r8
 80068b2:	4306      	orrs	r6, r0
 80068b4:	3568      	adds	r5, #104	@ 0x68
 80068b6:	e7e9      	b.n	800688c <_fwalk_sglue+0x10>

080068b8 <iprintf>:
 80068b8:	b40f      	push	{r0, r1, r2, r3}
 80068ba:	b507      	push	{r0, r1, r2, lr}
 80068bc:	4906      	ldr	r1, [pc, #24]	@ (80068d8 <iprintf+0x20>)
 80068be:	ab04      	add	r3, sp, #16
 80068c0:	6808      	ldr	r0, [r1, #0]
 80068c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c6:	6881      	ldr	r1, [r0, #8]
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	f000 f9f1 	bl	8006cb0 <_vfiprintf_r>
 80068ce:	b003      	add	sp, #12
 80068d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d4:	b004      	add	sp, #16
 80068d6:	4770      	bx	lr
 80068d8:	24000028 	.word	0x24000028

080068dc <putchar>:
 80068dc:	4b02      	ldr	r3, [pc, #8]	@ (80068e8 <putchar+0xc>)
 80068de:	4601      	mov	r1, r0
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	6882      	ldr	r2, [r0, #8]
 80068e4:	f000 bd36 	b.w	8007354 <_putc_r>
 80068e8:	24000028 	.word	0x24000028

080068ec <__sread>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	460c      	mov	r4, r1
 80068f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f4:	f000 f868 	bl	80069c8 <_read_r>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	bfab      	itete	ge
 80068fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006900:	181b      	addge	r3, r3, r0
 8006902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006906:	bfac      	ite	ge
 8006908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800690a:	81a3      	strhlt	r3, [r4, #12]
 800690c:	bd10      	pop	{r4, pc}

0800690e <__swrite>:
 800690e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006912:	461f      	mov	r7, r3
 8006914:	898b      	ldrh	r3, [r1, #12]
 8006916:	05db      	lsls	r3, r3, #23
 8006918:	4605      	mov	r5, r0
 800691a:	460c      	mov	r4, r1
 800691c:	4616      	mov	r6, r2
 800691e:	d505      	bpl.n	800692c <__swrite+0x1e>
 8006920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006924:	2302      	movs	r3, #2
 8006926:	2200      	movs	r2, #0
 8006928:	f000 f83c 	bl	80069a4 <_lseek_r>
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006936:	81a3      	strh	r3, [r4, #12]
 8006938:	4632      	mov	r2, r6
 800693a:	463b      	mov	r3, r7
 800693c:	4628      	mov	r0, r5
 800693e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006942:	f000 b853 	b.w	80069ec <_write_r>

08006946 <__sseek>:
 8006946:	b510      	push	{r4, lr}
 8006948:	460c      	mov	r4, r1
 800694a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694e:	f000 f829 	bl	80069a4 <_lseek_r>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	bf15      	itete	ne
 8006958:	6560      	strne	r0, [r4, #84]	@ 0x54
 800695a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800695e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006962:	81a3      	strheq	r3, [r4, #12]
 8006964:	bf18      	it	ne
 8006966:	81a3      	strhne	r3, [r4, #12]
 8006968:	bd10      	pop	{r4, pc}

0800696a <__sclose>:
 800696a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696e:	f000 b809 	b.w	8006984 <_close_r>

08006972 <memset>:
 8006972:	4402      	add	r2, r0
 8006974:	4603      	mov	r3, r0
 8006976:	4293      	cmp	r3, r2
 8006978:	d100      	bne.n	800697c <memset+0xa>
 800697a:	4770      	bx	lr
 800697c:	f803 1b01 	strb.w	r1, [r3], #1
 8006980:	e7f9      	b.n	8006976 <memset+0x4>
	...

08006984 <_close_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	@ (80069a0 <_close_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa fa47 	bl	8000e22 <_close>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_close_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_close_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	2400030c 	.word	0x2400030c

080069a4 <_lseek_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4d07      	ldr	r5, [pc, #28]	@ (80069c4 <_lseek_r+0x20>)
 80069a8:	4604      	mov	r4, r0
 80069aa:	4608      	mov	r0, r1
 80069ac:	4611      	mov	r1, r2
 80069ae:	2200      	movs	r2, #0
 80069b0:	602a      	str	r2, [r5, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f7fa fa5c 	bl	8000e70 <_lseek>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_lseek_r+0x1e>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_lseek_r+0x1e>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	2400030c 	.word	0x2400030c

080069c8 <_read_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d07      	ldr	r5, [pc, #28]	@ (80069e8 <_read_r+0x20>)
 80069cc:	4604      	mov	r4, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fa f9ea 	bl	8000db0 <_read>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_read_r+0x1e>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_read_r+0x1e>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	2400030c 	.word	0x2400030c

080069ec <_write_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4d07      	ldr	r5, [pc, #28]	@ (8006a0c <_write_r+0x20>)
 80069f0:	4604      	mov	r4, r0
 80069f2:	4608      	mov	r0, r1
 80069f4:	4611      	mov	r1, r2
 80069f6:	2200      	movs	r2, #0
 80069f8:	602a      	str	r2, [r5, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f7fa f9f5 	bl	8000dea <_write>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_write_r+0x1e>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_write_r+0x1e>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	2400030c 	.word	0x2400030c

08006a10 <__errno>:
 8006a10:	4b01      	ldr	r3, [pc, #4]	@ (8006a18 <__errno+0x8>)
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	24000028 	.word	0x24000028

08006a1c <__libc_init_array>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a54 <__libc_init_array+0x38>)
 8006a20:	4c0d      	ldr	r4, [pc, #52]	@ (8006a58 <__libc_init_array+0x3c>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	2600      	movs	r6, #0
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	d109      	bne.n	8006a40 <__libc_init_array+0x24>
 8006a2c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a5c <__libc_init_array+0x40>)
 8006a2e:	4c0c      	ldr	r4, [pc, #48]	@ (8006a60 <__libc_init_array+0x44>)
 8006a30:	f000 fdec 	bl	800760c <_init>
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	2600      	movs	r6, #0
 8006a3a:	42a6      	cmp	r6, r4
 8006a3c:	d105      	bne.n	8006a4a <__libc_init_array+0x2e>
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a44:	4798      	blx	r3
 8006a46:	3601      	adds	r6, #1
 8006a48:	e7ee      	b.n	8006a28 <__libc_init_array+0xc>
 8006a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4e:	4798      	blx	r3
 8006a50:	3601      	adds	r6, #1
 8006a52:	e7f2      	b.n	8006a3a <__libc_init_array+0x1e>
 8006a54:	080076b0 	.word	0x080076b0
 8006a58:	080076b0 	.word	0x080076b0
 8006a5c:	080076b0 	.word	0x080076b0
 8006a60:	080076b4 	.word	0x080076b4

08006a64 <__retarget_lock_init_recursive>:
 8006a64:	4770      	bx	lr

08006a66 <__retarget_lock_acquire_recursive>:
 8006a66:	4770      	bx	lr

08006a68 <__retarget_lock_release_recursive>:
 8006a68:	4770      	bx	lr
	...

08006a6c <_free_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4605      	mov	r5, r0
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d041      	beq.n	8006af8 <_free_r+0x8c>
 8006a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a78:	1f0c      	subs	r4, r1, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfb8      	it	lt
 8006a7e:	18e4      	addlt	r4, r4, r3
 8006a80:	f000 f8e0 	bl	8006c44 <__malloc_lock>
 8006a84:	4a1d      	ldr	r2, [pc, #116]	@ (8006afc <_free_r+0x90>)
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	b933      	cbnz	r3, 8006a98 <_free_r+0x2c>
 8006a8a:	6063      	str	r3, [r4, #4]
 8006a8c:	6014      	str	r4, [r2, #0]
 8006a8e:	4628      	mov	r0, r5
 8006a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a94:	f000 b8dc 	b.w	8006c50 <__malloc_unlock>
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d908      	bls.n	8006aae <_free_r+0x42>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	1821      	adds	r1, r4, r0
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	bf01      	itttt	eq
 8006aa4:	6819      	ldreq	r1, [r3, #0]
 8006aa6:	685b      	ldreq	r3, [r3, #4]
 8006aa8:	1809      	addeq	r1, r1, r0
 8006aaa:	6021      	streq	r1, [r4, #0]
 8006aac:	e7ed      	b.n	8006a8a <_free_r+0x1e>
 8006aae:	461a      	mov	r2, r3
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b10b      	cbz	r3, 8006ab8 <_free_r+0x4c>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d9fa      	bls.n	8006aae <_free_r+0x42>
 8006ab8:	6811      	ldr	r1, [r2, #0]
 8006aba:	1850      	adds	r0, r2, r1
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d10b      	bne.n	8006ad8 <_free_r+0x6c>
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	4401      	add	r1, r0
 8006ac4:	1850      	adds	r0, r2, r1
 8006ac6:	4283      	cmp	r3, r0
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	d1e0      	bne.n	8006a8e <_free_r+0x22>
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	6053      	str	r3, [r2, #4]
 8006ad2:	4408      	add	r0, r1
 8006ad4:	6010      	str	r0, [r2, #0]
 8006ad6:	e7da      	b.n	8006a8e <_free_r+0x22>
 8006ad8:	d902      	bls.n	8006ae0 <_free_r+0x74>
 8006ada:	230c      	movs	r3, #12
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	e7d6      	b.n	8006a8e <_free_r+0x22>
 8006ae0:	6820      	ldr	r0, [r4, #0]
 8006ae2:	1821      	adds	r1, r4, r0
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	bf04      	itt	eq
 8006ae8:	6819      	ldreq	r1, [r3, #0]
 8006aea:	685b      	ldreq	r3, [r3, #4]
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	bf04      	itt	eq
 8006af0:	1809      	addeq	r1, r1, r0
 8006af2:	6021      	streq	r1, [r4, #0]
 8006af4:	6054      	str	r4, [r2, #4]
 8006af6:	e7ca      	b.n	8006a8e <_free_r+0x22>
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	24000318 	.word	0x24000318

08006b00 <sbrk_aligned>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	4e0f      	ldr	r6, [pc, #60]	@ (8006b40 <sbrk_aligned+0x40>)
 8006b04:	460c      	mov	r4, r1
 8006b06:	6831      	ldr	r1, [r6, #0]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	b911      	cbnz	r1, 8006b12 <sbrk_aligned+0x12>
 8006b0c:	f000 fcea 	bl	80074e4 <_sbrk_r>
 8006b10:	6030      	str	r0, [r6, #0]
 8006b12:	4621      	mov	r1, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 fce5 	bl	80074e4 <_sbrk_r>
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	d103      	bne.n	8006b26 <sbrk_aligned+0x26>
 8006b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b22:	4620      	mov	r0, r4
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
 8006b26:	1cc4      	adds	r4, r0, #3
 8006b28:	f024 0403 	bic.w	r4, r4, #3
 8006b2c:	42a0      	cmp	r0, r4
 8006b2e:	d0f8      	beq.n	8006b22 <sbrk_aligned+0x22>
 8006b30:	1a21      	subs	r1, r4, r0
 8006b32:	4628      	mov	r0, r5
 8006b34:	f000 fcd6 	bl	80074e4 <_sbrk_r>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d1f2      	bne.n	8006b22 <sbrk_aligned+0x22>
 8006b3c:	e7ef      	b.n	8006b1e <sbrk_aligned+0x1e>
 8006b3e:	bf00      	nop
 8006b40:	24000314 	.word	0x24000314

08006b44 <_malloc_r>:
 8006b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b48:	1ccd      	adds	r5, r1, #3
 8006b4a:	f025 0503 	bic.w	r5, r5, #3
 8006b4e:	3508      	adds	r5, #8
 8006b50:	2d0c      	cmp	r5, #12
 8006b52:	bf38      	it	cc
 8006b54:	250c      	movcc	r5, #12
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	4606      	mov	r6, r0
 8006b5a:	db01      	blt.n	8006b60 <_malloc_r+0x1c>
 8006b5c:	42a9      	cmp	r1, r5
 8006b5e:	d904      	bls.n	8006b6a <_malloc_r+0x26>
 8006b60:	230c      	movs	r3, #12
 8006b62:	6033      	str	r3, [r6, #0]
 8006b64:	2000      	movs	r0, #0
 8006b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c40 <_malloc_r+0xfc>
 8006b6e:	f000 f869 	bl	8006c44 <__malloc_lock>
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	461c      	mov	r4, r3
 8006b78:	bb44      	cbnz	r4, 8006bcc <_malloc_r+0x88>
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff ffbf 	bl	8006b00 <sbrk_aligned>
 8006b82:	1c43      	adds	r3, r0, #1
 8006b84:	4604      	mov	r4, r0
 8006b86:	d158      	bne.n	8006c3a <_malloc_r+0xf6>
 8006b88:	f8d8 4000 	ldr.w	r4, [r8]
 8006b8c:	4627      	mov	r7, r4
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	d143      	bne.n	8006c1a <_malloc_r+0xd6>
 8006b92:	2c00      	cmp	r4, #0
 8006b94:	d04b      	beq.n	8006c2e <_malloc_r+0xea>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	eb04 0903 	add.w	r9, r4, r3
 8006ba0:	f000 fca0 	bl	80074e4 <_sbrk_r>
 8006ba4:	4581      	cmp	r9, r0
 8006ba6:	d142      	bne.n	8006c2e <_malloc_r+0xea>
 8006ba8:	6821      	ldr	r1, [r4, #0]
 8006baa:	1a6d      	subs	r5, r5, r1
 8006bac:	4629      	mov	r1, r5
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7ff ffa6 	bl	8006b00 <sbrk_aligned>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d03a      	beq.n	8006c2e <_malloc_r+0xea>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	442b      	add	r3, r5
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	bb62      	cbnz	r2, 8006c20 <_malloc_r+0xdc>
 8006bc6:	f8c8 7000 	str.w	r7, [r8]
 8006bca:	e00f      	b.n	8006bec <_malloc_r+0xa8>
 8006bcc:	6822      	ldr	r2, [r4, #0]
 8006bce:	1b52      	subs	r2, r2, r5
 8006bd0:	d420      	bmi.n	8006c14 <_malloc_r+0xd0>
 8006bd2:	2a0b      	cmp	r2, #11
 8006bd4:	d917      	bls.n	8006c06 <_malloc_r+0xc2>
 8006bd6:	1961      	adds	r1, r4, r5
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	6025      	str	r5, [r4, #0]
 8006bdc:	bf18      	it	ne
 8006bde:	6059      	strne	r1, [r3, #4]
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	bf08      	it	eq
 8006be4:	f8c8 1000 	streq.w	r1, [r8]
 8006be8:	5162      	str	r2, [r4, r5]
 8006bea:	604b      	str	r3, [r1, #4]
 8006bec:	4630      	mov	r0, r6
 8006bee:	f000 f82f 	bl	8006c50 <__malloc_unlock>
 8006bf2:	f104 000b 	add.w	r0, r4, #11
 8006bf6:	1d23      	adds	r3, r4, #4
 8006bf8:	f020 0007 	bic.w	r0, r0, #7
 8006bfc:	1ac2      	subs	r2, r0, r3
 8006bfe:	bf1c      	itt	ne
 8006c00:	1a1b      	subne	r3, r3, r0
 8006c02:	50a3      	strne	r3, [r4, r2]
 8006c04:	e7af      	b.n	8006b66 <_malloc_r+0x22>
 8006c06:	6862      	ldr	r2, [r4, #4]
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	bf0c      	ite	eq
 8006c0c:	f8c8 2000 	streq.w	r2, [r8]
 8006c10:	605a      	strne	r2, [r3, #4]
 8006c12:	e7eb      	b.n	8006bec <_malloc_r+0xa8>
 8006c14:	4623      	mov	r3, r4
 8006c16:	6864      	ldr	r4, [r4, #4]
 8006c18:	e7ae      	b.n	8006b78 <_malloc_r+0x34>
 8006c1a:	463c      	mov	r4, r7
 8006c1c:	687f      	ldr	r7, [r7, #4]
 8006c1e:	e7b6      	b.n	8006b8e <_malloc_r+0x4a>
 8006c20:	461a      	mov	r2, r3
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d1fb      	bne.n	8006c20 <_malloc_r+0xdc>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6053      	str	r3, [r2, #4]
 8006c2c:	e7de      	b.n	8006bec <_malloc_r+0xa8>
 8006c2e:	230c      	movs	r3, #12
 8006c30:	6033      	str	r3, [r6, #0]
 8006c32:	4630      	mov	r0, r6
 8006c34:	f000 f80c 	bl	8006c50 <__malloc_unlock>
 8006c38:	e794      	b.n	8006b64 <_malloc_r+0x20>
 8006c3a:	6005      	str	r5, [r0, #0]
 8006c3c:	e7d6      	b.n	8006bec <_malloc_r+0xa8>
 8006c3e:	bf00      	nop
 8006c40:	24000318 	.word	0x24000318

08006c44 <__malloc_lock>:
 8006c44:	4801      	ldr	r0, [pc, #4]	@ (8006c4c <__malloc_lock+0x8>)
 8006c46:	f7ff bf0e 	b.w	8006a66 <__retarget_lock_acquire_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	24000310 	.word	0x24000310

08006c50 <__malloc_unlock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	@ (8006c58 <__malloc_unlock+0x8>)
 8006c52:	f7ff bf09 	b.w	8006a68 <__retarget_lock_release_recursive>
 8006c56:	bf00      	nop
 8006c58:	24000310 	.word	0x24000310

08006c5c <__sfputc_r>:
 8006c5c:	6893      	ldr	r3, [r2, #8]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	b410      	push	{r4}
 8006c64:	6093      	str	r3, [r2, #8]
 8006c66:	da08      	bge.n	8006c7a <__sfputc_r+0x1e>
 8006c68:	6994      	ldr	r4, [r2, #24]
 8006c6a:	42a3      	cmp	r3, r4
 8006c6c:	db01      	blt.n	8006c72 <__sfputc_r+0x16>
 8006c6e:	290a      	cmp	r1, #10
 8006c70:	d103      	bne.n	8006c7a <__sfputc_r+0x1e>
 8006c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c76:	f000 bba1 	b.w	80073bc <__swbuf_r>
 8006c7a:	6813      	ldr	r3, [r2, #0]
 8006c7c:	1c58      	adds	r0, r3, #1
 8006c7e:	6010      	str	r0, [r2, #0]
 8006c80:	7019      	strb	r1, [r3, #0]
 8006c82:	4608      	mov	r0, r1
 8006c84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <__sfputs_r>:
 8006c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	460f      	mov	r7, r1
 8006c90:	4614      	mov	r4, r2
 8006c92:	18d5      	adds	r5, r2, r3
 8006c94:	42ac      	cmp	r4, r5
 8006c96:	d101      	bne.n	8006c9c <__sfputs_r+0x12>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	e007      	b.n	8006cac <__sfputs_r+0x22>
 8006c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca0:	463a      	mov	r2, r7
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7ff ffda 	bl	8006c5c <__sfputc_r>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d1f3      	bne.n	8006c94 <__sfputs_r+0xa>
 8006cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cb0 <_vfiprintf_r>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	460d      	mov	r5, r1
 8006cb6:	b09d      	sub	sp, #116	@ 0x74
 8006cb8:	4614      	mov	r4, r2
 8006cba:	4698      	mov	r8, r3
 8006cbc:	4606      	mov	r6, r0
 8006cbe:	b118      	cbz	r0, 8006cc8 <_vfiprintf_r+0x18>
 8006cc0:	6a03      	ldr	r3, [r0, #32]
 8006cc2:	b90b      	cbnz	r3, 8006cc8 <_vfiprintf_r+0x18>
 8006cc4:	f7ff fdc2 	bl	800684c <__sinit>
 8006cc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cca:	07d9      	lsls	r1, r3, #31
 8006ccc:	d405      	bmi.n	8006cda <_vfiprintf_r+0x2a>
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	059a      	lsls	r2, r3, #22
 8006cd2:	d402      	bmi.n	8006cda <_vfiprintf_r+0x2a>
 8006cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cd6:	f7ff fec6 	bl	8006a66 <__retarget_lock_acquire_recursive>
 8006cda:	89ab      	ldrh	r3, [r5, #12]
 8006cdc:	071b      	lsls	r3, r3, #28
 8006cde:	d501      	bpl.n	8006ce4 <_vfiprintf_r+0x34>
 8006ce0:	692b      	ldr	r3, [r5, #16]
 8006ce2:	b99b      	cbnz	r3, 8006d0c <_vfiprintf_r+0x5c>
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f000 fba6 	bl	8007438 <__swsetup_r>
 8006cec:	b170      	cbz	r0, 8006d0c <_vfiprintf_r+0x5c>
 8006cee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cf0:	07dc      	lsls	r4, r3, #31
 8006cf2:	d504      	bpl.n	8006cfe <_vfiprintf_r+0x4e>
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	b01d      	add	sp, #116	@ 0x74
 8006cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	0598      	lsls	r0, r3, #22
 8006d02:	d4f7      	bmi.n	8006cf4 <_vfiprintf_r+0x44>
 8006d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d06:	f7ff feaf 	bl	8006a68 <__retarget_lock_release_recursive>
 8006d0a:	e7f3      	b.n	8006cf4 <_vfiprintf_r+0x44>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d10:	2320      	movs	r3, #32
 8006d12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d16:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d1a:	2330      	movs	r3, #48	@ 0x30
 8006d1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006ecc <_vfiprintf_r+0x21c>
 8006d20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d24:	f04f 0901 	mov.w	r9, #1
 8006d28:	4623      	mov	r3, r4
 8006d2a:	469a      	mov	sl, r3
 8006d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d30:	b10a      	cbz	r2, 8006d36 <_vfiprintf_r+0x86>
 8006d32:	2a25      	cmp	r2, #37	@ 0x25
 8006d34:	d1f9      	bne.n	8006d2a <_vfiprintf_r+0x7a>
 8006d36:	ebba 0b04 	subs.w	fp, sl, r4
 8006d3a:	d00b      	beq.n	8006d54 <_vfiprintf_r+0xa4>
 8006d3c:	465b      	mov	r3, fp
 8006d3e:	4622      	mov	r2, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7ff ffa1 	bl	8006c8a <__sfputs_r>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f000 80a7 	beq.w	8006e9c <_vfiprintf_r+0x1ec>
 8006d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d50:	445a      	add	r2, fp
 8006d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d54:	f89a 3000 	ldrb.w	r3, [sl]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 809f 	beq.w	8006e9c <_vfiprintf_r+0x1ec>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f04f 32ff 	mov.w	r2, #4294967295
 8006d64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d68:	f10a 0a01 	add.w	sl, sl, #1
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	9307      	str	r3, [sp, #28]
 8006d70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d74:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d76:	4654      	mov	r4, sl
 8006d78:	2205      	movs	r2, #5
 8006d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7e:	4853      	ldr	r0, [pc, #332]	@ (8006ecc <_vfiprintf_r+0x21c>)
 8006d80:	f7f9 faae 	bl	80002e0 <memchr>
 8006d84:	9a04      	ldr	r2, [sp, #16]
 8006d86:	b9d8      	cbnz	r0, 8006dc0 <_vfiprintf_r+0x110>
 8006d88:	06d1      	lsls	r1, r2, #27
 8006d8a:	bf44      	itt	mi
 8006d8c:	2320      	movmi	r3, #32
 8006d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d92:	0713      	lsls	r3, r2, #28
 8006d94:	bf44      	itt	mi
 8006d96:	232b      	movmi	r3, #43	@ 0x2b
 8006d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006da2:	d015      	beq.n	8006dd0 <_vfiprintf_r+0x120>
 8006da4:	9a07      	ldr	r2, [sp, #28]
 8006da6:	4654      	mov	r4, sl
 8006da8:	2000      	movs	r0, #0
 8006daa:	f04f 0c0a 	mov.w	ip, #10
 8006dae:	4621      	mov	r1, r4
 8006db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006db4:	3b30      	subs	r3, #48	@ 0x30
 8006db6:	2b09      	cmp	r3, #9
 8006db8:	d94b      	bls.n	8006e52 <_vfiprintf_r+0x1a2>
 8006dba:	b1b0      	cbz	r0, 8006dea <_vfiprintf_r+0x13a>
 8006dbc:	9207      	str	r2, [sp, #28]
 8006dbe:	e014      	b.n	8006dea <_vfiprintf_r+0x13a>
 8006dc0:	eba0 0308 	sub.w	r3, r0, r8
 8006dc4:	fa09 f303 	lsl.w	r3, r9, r3
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	9304      	str	r3, [sp, #16]
 8006dcc:	46a2      	mov	sl, r4
 8006dce:	e7d2      	b.n	8006d76 <_vfiprintf_r+0xc6>
 8006dd0:	9b03      	ldr	r3, [sp, #12]
 8006dd2:	1d19      	adds	r1, r3, #4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	9103      	str	r1, [sp, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bfbb      	ittet	lt
 8006ddc:	425b      	neglt	r3, r3
 8006dde:	f042 0202 	orrlt.w	r2, r2, #2
 8006de2:	9307      	strge	r3, [sp, #28]
 8006de4:	9307      	strlt	r3, [sp, #28]
 8006de6:	bfb8      	it	lt
 8006de8:	9204      	strlt	r2, [sp, #16]
 8006dea:	7823      	ldrb	r3, [r4, #0]
 8006dec:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dee:	d10a      	bne.n	8006e06 <_vfiprintf_r+0x156>
 8006df0:	7863      	ldrb	r3, [r4, #1]
 8006df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006df4:	d132      	bne.n	8006e5c <_vfiprintf_r+0x1ac>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	1d1a      	adds	r2, r3, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	9203      	str	r2, [sp, #12]
 8006dfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e02:	3402      	adds	r4, #2
 8006e04:	9305      	str	r3, [sp, #20]
 8006e06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006edc <_vfiprintf_r+0x22c>
 8006e0a:	7821      	ldrb	r1, [r4, #0]
 8006e0c:	2203      	movs	r2, #3
 8006e0e:	4650      	mov	r0, sl
 8006e10:	f7f9 fa66 	bl	80002e0 <memchr>
 8006e14:	b138      	cbz	r0, 8006e26 <_vfiprintf_r+0x176>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	eba0 000a 	sub.w	r0, r0, sl
 8006e1c:	2240      	movs	r2, #64	@ 0x40
 8006e1e:	4082      	lsls	r2, r0
 8006e20:	4313      	orrs	r3, r2
 8006e22:	3401      	adds	r4, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2a:	4829      	ldr	r0, [pc, #164]	@ (8006ed0 <_vfiprintf_r+0x220>)
 8006e2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e30:	2206      	movs	r2, #6
 8006e32:	f7f9 fa55 	bl	80002e0 <memchr>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d03f      	beq.n	8006eba <_vfiprintf_r+0x20a>
 8006e3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ed4 <_vfiprintf_r+0x224>)
 8006e3c:	bb1b      	cbnz	r3, 8006e86 <_vfiprintf_r+0x1d6>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	3307      	adds	r3, #7
 8006e42:	f023 0307 	bic.w	r3, r3, #7
 8006e46:	3308      	adds	r3, #8
 8006e48:	9303      	str	r3, [sp, #12]
 8006e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4c:	443b      	add	r3, r7
 8006e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e50:	e76a      	b.n	8006d28 <_vfiprintf_r+0x78>
 8006e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e56:	460c      	mov	r4, r1
 8006e58:	2001      	movs	r0, #1
 8006e5a:	e7a8      	b.n	8006dae <_vfiprintf_r+0xfe>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	3401      	adds	r4, #1
 8006e60:	9305      	str	r3, [sp, #20]
 8006e62:	4619      	mov	r1, r3
 8006e64:	f04f 0c0a 	mov.w	ip, #10
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6e:	3a30      	subs	r2, #48	@ 0x30
 8006e70:	2a09      	cmp	r2, #9
 8006e72:	d903      	bls.n	8006e7c <_vfiprintf_r+0x1cc>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0c6      	beq.n	8006e06 <_vfiprintf_r+0x156>
 8006e78:	9105      	str	r1, [sp, #20]
 8006e7a:	e7c4      	b.n	8006e06 <_vfiprintf_r+0x156>
 8006e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e80:	4604      	mov	r4, r0
 8006e82:	2301      	movs	r3, #1
 8006e84:	e7f0      	b.n	8006e68 <_vfiprintf_r+0x1b8>
 8006e86:	ab03      	add	r3, sp, #12
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	462a      	mov	r2, r5
 8006e8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ed8 <_vfiprintf_r+0x228>)
 8006e8e:	a904      	add	r1, sp, #16
 8006e90:	4630      	mov	r0, r6
 8006e92:	f3af 8000 	nop.w
 8006e96:	4607      	mov	r7, r0
 8006e98:	1c78      	adds	r0, r7, #1
 8006e9a:	d1d6      	bne.n	8006e4a <_vfiprintf_r+0x19a>
 8006e9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e9e:	07d9      	lsls	r1, r3, #31
 8006ea0:	d405      	bmi.n	8006eae <_vfiprintf_r+0x1fe>
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	059a      	lsls	r2, r3, #22
 8006ea6:	d402      	bmi.n	8006eae <_vfiprintf_r+0x1fe>
 8006ea8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eaa:	f7ff fddd 	bl	8006a68 <__retarget_lock_release_recursive>
 8006eae:	89ab      	ldrh	r3, [r5, #12]
 8006eb0:	065b      	lsls	r3, r3, #25
 8006eb2:	f53f af1f 	bmi.w	8006cf4 <_vfiprintf_r+0x44>
 8006eb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006eb8:	e71e      	b.n	8006cf8 <_vfiprintf_r+0x48>
 8006eba:	ab03      	add	r3, sp, #12
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	4b05      	ldr	r3, [pc, #20]	@ (8006ed8 <_vfiprintf_r+0x228>)
 8006ec2:	a904      	add	r1, sp, #16
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 f879 	bl	8006fbc <_printf_i>
 8006eca:	e7e4      	b.n	8006e96 <_vfiprintf_r+0x1e6>
 8006ecc:	08007674 	.word	0x08007674
 8006ed0:	0800767e 	.word	0x0800767e
 8006ed4:	00000000 	.word	0x00000000
 8006ed8:	08006c8b 	.word	0x08006c8b
 8006edc:	0800767a 	.word	0x0800767a

08006ee0 <_printf_common>:
 8006ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	4698      	mov	r8, r3
 8006ee8:	688a      	ldr	r2, [r1, #8]
 8006eea:	690b      	ldr	r3, [r1, #16]
 8006eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	bfb8      	it	lt
 8006ef4:	4613      	movlt	r3, r2
 8006ef6:	6033      	str	r3, [r6, #0]
 8006ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006efc:	4607      	mov	r7, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	b10a      	cbz	r2, 8006f06 <_printf_common+0x26>
 8006f02:	3301      	adds	r3, #1
 8006f04:	6033      	str	r3, [r6, #0]
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	0699      	lsls	r1, r3, #26
 8006f0a:	bf42      	ittt	mi
 8006f0c:	6833      	ldrmi	r3, [r6, #0]
 8006f0e:	3302      	addmi	r3, #2
 8006f10:	6033      	strmi	r3, [r6, #0]
 8006f12:	6825      	ldr	r5, [r4, #0]
 8006f14:	f015 0506 	ands.w	r5, r5, #6
 8006f18:	d106      	bne.n	8006f28 <_printf_common+0x48>
 8006f1a:	f104 0a19 	add.w	sl, r4, #25
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	6832      	ldr	r2, [r6, #0]
 8006f22:	1a9b      	subs	r3, r3, r2
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	dc26      	bgt.n	8006f76 <_printf_common+0x96>
 8006f28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	3b00      	subs	r3, #0
 8006f30:	bf18      	it	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	0692      	lsls	r2, r2, #26
 8006f36:	d42b      	bmi.n	8006f90 <_printf_common+0xb0>
 8006f38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	4638      	mov	r0, r7
 8006f40:	47c8      	blx	r9
 8006f42:	3001      	adds	r0, #1
 8006f44:	d01e      	beq.n	8006f84 <_printf_common+0xa4>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	6922      	ldr	r2, [r4, #16]
 8006f4a:	f003 0306 	and.w	r3, r3, #6
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	bf02      	ittt	eq
 8006f52:	68e5      	ldreq	r5, [r4, #12]
 8006f54:	6833      	ldreq	r3, [r6, #0]
 8006f56:	1aed      	subeq	r5, r5, r3
 8006f58:	68a3      	ldr	r3, [r4, #8]
 8006f5a:	bf0c      	ite	eq
 8006f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f60:	2500      	movne	r5, #0
 8006f62:	4293      	cmp	r3, r2
 8006f64:	bfc4      	itt	gt
 8006f66:	1a9b      	subgt	r3, r3, r2
 8006f68:	18ed      	addgt	r5, r5, r3
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	341a      	adds	r4, #26
 8006f6e:	42b5      	cmp	r5, r6
 8006f70:	d11a      	bne.n	8006fa8 <_printf_common+0xc8>
 8006f72:	2000      	movs	r0, #0
 8006f74:	e008      	b.n	8006f88 <_printf_common+0xa8>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4652      	mov	r2, sl
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	47c8      	blx	r9
 8006f80:	3001      	adds	r0, #1
 8006f82:	d103      	bne.n	8006f8c <_printf_common+0xac>
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295
 8006f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	e7c6      	b.n	8006f1e <_printf_common+0x3e>
 8006f90:	18e1      	adds	r1, r4, r3
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	2030      	movs	r0, #48	@ 0x30
 8006f96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f9a:	4422      	add	r2, r4
 8006f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fa4:	3302      	adds	r3, #2
 8006fa6:	e7c7      	b.n	8006f38 <_printf_common+0x58>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4622      	mov	r2, r4
 8006fac:	4641      	mov	r1, r8
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c8      	blx	r9
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d0e6      	beq.n	8006f84 <_printf_common+0xa4>
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	e7d9      	b.n	8006f6e <_printf_common+0x8e>
	...

08006fbc <_printf_i>:
 8006fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc0:	7e0f      	ldrb	r7, [r1, #24]
 8006fc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fc4:	2f78      	cmp	r7, #120	@ 0x78
 8006fc6:	4691      	mov	r9, r2
 8006fc8:	4680      	mov	r8, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	469a      	mov	sl, r3
 8006fce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fd2:	d807      	bhi.n	8006fe4 <_printf_i+0x28>
 8006fd4:	2f62      	cmp	r7, #98	@ 0x62
 8006fd6:	d80a      	bhi.n	8006fee <_printf_i+0x32>
 8006fd8:	2f00      	cmp	r7, #0
 8006fda:	f000 80d2 	beq.w	8007182 <_printf_i+0x1c6>
 8006fde:	2f58      	cmp	r7, #88	@ 0x58
 8006fe0:	f000 80b9 	beq.w	8007156 <_printf_i+0x19a>
 8006fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fe8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fec:	e03a      	b.n	8007064 <_printf_i+0xa8>
 8006fee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ff2:	2b15      	cmp	r3, #21
 8006ff4:	d8f6      	bhi.n	8006fe4 <_printf_i+0x28>
 8006ff6:	a101      	add	r1, pc, #4	@ (adr r1, 8006ffc <_printf_i+0x40>)
 8006ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ffc:	08007055 	.word	0x08007055
 8007000:	08007069 	.word	0x08007069
 8007004:	08006fe5 	.word	0x08006fe5
 8007008:	08006fe5 	.word	0x08006fe5
 800700c:	08006fe5 	.word	0x08006fe5
 8007010:	08006fe5 	.word	0x08006fe5
 8007014:	08007069 	.word	0x08007069
 8007018:	08006fe5 	.word	0x08006fe5
 800701c:	08006fe5 	.word	0x08006fe5
 8007020:	08006fe5 	.word	0x08006fe5
 8007024:	08006fe5 	.word	0x08006fe5
 8007028:	08007169 	.word	0x08007169
 800702c:	08007093 	.word	0x08007093
 8007030:	08007123 	.word	0x08007123
 8007034:	08006fe5 	.word	0x08006fe5
 8007038:	08006fe5 	.word	0x08006fe5
 800703c:	0800718b 	.word	0x0800718b
 8007040:	08006fe5 	.word	0x08006fe5
 8007044:	08007093 	.word	0x08007093
 8007048:	08006fe5 	.word	0x08006fe5
 800704c:	08006fe5 	.word	0x08006fe5
 8007050:	0800712b 	.word	0x0800712b
 8007054:	6833      	ldr	r3, [r6, #0]
 8007056:	1d1a      	adds	r2, r3, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6032      	str	r2, [r6, #0]
 800705c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007060:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007064:	2301      	movs	r3, #1
 8007066:	e09d      	b.n	80071a4 <_printf_i+0x1e8>
 8007068:	6833      	ldr	r3, [r6, #0]
 800706a:	6820      	ldr	r0, [r4, #0]
 800706c:	1d19      	adds	r1, r3, #4
 800706e:	6031      	str	r1, [r6, #0]
 8007070:	0606      	lsls	r6, r0, #24
 8007072:	d501      	bpl.n	8007078 <_printf_i+0xbc>
 8007074:	681d      	ldr	r5, [r3, #0]
 8007076:	e003      	b.n	8007080 <_printf_i+0xc4>
 8007078:	0645      	lsls	r5, r0, #25
 800707a:	d5fb      	bpl.n	8007074 <_printf_i+0xb8>
 800707c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007080:	2d00      	cmp	r5, #0
 8007082:	da03      	bge.n	800708c <_printf_i+0xd0>
 8007084:	232d      	movs	r3, #45	@ 0x2d
 8007086:	426d      	negs	r5, r5
 8007088:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800708c:	4859      	ldr	r0, [pc, #356]	@ (80071f4 <_printf_i+0x238>)
 800708e:	230a      	movs	r3, #10
 8007090:	e011      	b.n	80070b6 <_printf_i+0xfa>
 8007092:	6821      	ldr	r1, [r4, #0]
 8007094:	6833      	ldr	r3, [r6, #0]
 8007096:	0608      	lsls	r0, r1, #24
 8007098:	f853 5b04 	ldr.w	r5, [r3], #4
 800709c:	d402      	bmi.n	80070a4 <_printf_i+0xe8>
 800709e:	0649      	lsls	r1, r1, #25
 80070a0:	bf48      	it	mi
 80070a2:	b2ad      	uxthmi	r5, r5
 80070a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80070a6:	4853      	ldr	r0, [pc, #332]	@ (80071f4 <_printf_i+0x238>)
 80070a8:	6033      	str	r3, [r6, #0]
 80070aa:	bf14      	ite	ne
 80070ac:	230a      	movne	r3, #10
 80070ae:	2308      	moveq	r3, #8
 80070b0:	2100      	movs	r1, #0
 80070b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070b6:	6866      	ldr	r6, [r4, #4]
 80070b8:	60a6      	str	r6, [r4, #8]
 80070ba:	2e00      	cmp	r6, #0
 80070bc:	bfa2      	ittt	ge
 80070be:	6821      	ldrge	r1, [r4, #0]
 80070c0:	f021 0104 	bicge.w	r1, r1, #4
 80070c4:	6021      	strge	r1, [r4, #0]
 80070c6:	b90d      	cbnz	r5, 80070cc <_printf_i+0x110>
 80070c8:	2e00      	cmp	r6, #0
 80070ca:	d04b      	beq.n	8007164 <_printf_i+0x1a8>
 80070cc:	4616      	mov	r6, r2
 80070ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80070d2:	fb03 5711 	mls	r7, r3, r1, r5
 80070d6:	5dc7      	ldrb	r7, [r0, r7]
 80070d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070dc:	462f      	mov	r7, r5
 80070de:	42bb      	cmp	r3, r7
 80070e0:	460d      	mov	r5, r1
 80070e2:	d9f4      	bls.n	80070ce <_printf_i+0x112>
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d10b      	bne.n	8007100 <_printf_i+0x144>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	07df      	lsls	r7, r3, #31
 80070ec:	d508      	bpl.n	8007100 <_printf_i+0x144>
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	6861      	ldr	r1, [r4, #4]
 80070f2:	4299      	cmp	r1, r3
 80070f4:	bfde      	ittt	le
 80070f6:	2330      	movle	r3, #48	@ 0x30
 80070f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007100:	1b92      	subs	r2, r2, r6
 8007102:	6122      	str	r2, [r4, #16]
 8007104:	f8cd a000 	str.w	sl, [sp]
 8007108:	464b      	mov	r3, r9
 800710a:	aa03      	add	r2, sp, #12
 800710c:	4621      	mov	r1, r4
 800710e:	4640      	mov	r0, r8
 8007110:	f7ff fee6 	bl	8006ee0 <_printf_common>
 8007114:	3001      	adds	r0, #1
 8007116:	d14a      	bne.n	80071ae <_printf_i+0x1f2>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	b004      	add	sp, #16
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	f043 0320 	orr.w	r3, r3, #32
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	4833      	ldr	r0, [pc, #204]	@ (80071f8 <_printf_i+0x23c>)
 800712c:	2778      	movs	r7, #120	@ 0x78
 800712e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	6831      	ldr	r1, [r6, #0]
 8007136:	061f      	lsls	r7, r3, #24
 8007138:	f851 5b04 	ldr.w	r5, [r1], #4
 800713c:	d402      	bmi.n	8007144 <_printf_i+0x188>
 800713e:	065f      	lsls	r7, r3, #25
 8007140:	bf48      	it	mi
 8007142:	b2ad      	uxthmi	r5, r5
 8007144:	6031      	str	r1, [r6, #0]
 8007146:	07d9      	lsls	r1, r3, #31
 8007148:	bf44      	itt	mi
 800714a:	f043 0320 	orrmi.w	r3, r3, #32
 800714e:	6023      	strmi	r3, [r4, #0]
 8007150:	b11d      	cbz	r5, 800715a <_printf_i+0x19e>
 8007152:	2310      	movs	r3, #16
 8007154:	e7ac      	b.n	80070b0 <_printf_i+0xf4>
 8007156:	4827      	ldr	r0, [pc, #156]	@ (80071f4 <_printf_i+0x238>)
 8007158:	e7e9      	b.n	800712e <_printf_i+0x172>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	f023 0320 	bic.w	r3, r3, #32
 8007160:	6023      	str	r3, [r4, #0]
 8007162:	e7f6      	b.n	8007152 <_printf_i+0x196>
 8007164:	4616      	mov	r6, r2
 8007166:	e7bd      	b.n	80070e4 <_printf_i+0x128>
 8007168:	6833      	ldr	r3, [r6, #0]
 800716a:	6825      	ldr	r5, [r4, #0]
 800716c:	6961      	ldr	r1, [r4, #20]
 800716e:	1d18      	adds	r0, r3, #4
 8007170:	6030      	str	r0, [r6, #0]
 8007172:	062e      	lsls	r6, r5, #24
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	d501      	bpl.n	800717c <_printf_i+0x1c0>
 8007178:	6019      	str	r1, [r3, #0]
 800717a:	e002      	b.n	8007182 <_printf_i+0x1c6>
 800717c:	0668      	lsls	r0, r5, #25
 800717e:	d5fb      	bpl.n	8007178 <_printf_i+0x1bc>
 8007180:	8019      	strh	r1, [r3, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	4616      	mov	r6, r2
 8007188:	e7bc      	b.n	8007104 <_printf_i+0x148>
 800718a:	6833      	ldr	r3, [r6, #0]
 800718c:	1d1a      	adds	r2, r3, #4
 800718e:	6032      	str	r2, [r6, #0]
 8007190:	681e      	ldr	r6, [r3, #0]
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	2100      	movs	r1, #0
 8007196:	4630      	mov	r0, r6
 8007198:	f7f9 f8a2 	bl	80002e0 <memchr>
 800719c:	b108      	cbz	r0, 80071a2 <_printf_i+0x1e6>
 800719e:	1b80      	subs	r0, r0, r6
 80071a0:	6060      	str	r0, [r4, #4]
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	2300      	movs	r3, #0
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ac:	e7aa      	b.n	8007104 <_printf_i+0x148>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	4632      	mov	r2, r6
 80071b2:	4649      	mov	r1, r9
 80071b4:	4640      	mov	r0, r8
 80071b6:	47d0      	blx	sl
 80071b8:	3001      	adds	r0, #1
 80071ba:	d0ad      	beq.n	8007118 <_printf_i+0x15c>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	079b      	lsls	r3, r3, #30
 80071c0:	d413      	bmi.n	80071ea <_printf_i+0x22e>
 80071c2:	68e0      	ldr	r0, [r4, #12]
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	4298      	cmp	r0, r3
 80071c8:	bfb8      	it	lt
 80071ca:	4618      	movlt	r0, r3
 80071cc:	e7a6      	b.n	800711c <_printf_i+0x160>
 80071ce:	2301      	movs	r3, #1
 80071d0:	4632      	mov	r2, r6
 80071d2:	4649      	mov	r1, r9
 80071d4:	4640      	mov	r0, r8
 80071d6:	47d0      	blx	sl
 80071d8:	3001      	adds	r0, #1
 80071da:	d09d      	beq.n	8007118 <_printf_i+0x15c>
 80071dc:	3501      	adds	r5, #1
 80071de:	68e3      	ldr	r3, [r4, #12]
 80071e0:	9903      	ldr	r1, [sp, #12]
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	42ab      	cmp	r3, r5
 80071e6:	dcf2      	bgt.n	80071ce <_printf_i+0x212>
 80071e8:	e7eb      	b.n	80071c2 <_printf_i+0x206>
 80071ea:	2500      	movs	r5, #0
 80071ec:	f104 0619 	add.w	r6, r4, #25
 80071f0:	e7f5      	b.n	80071de <_printf_i+0x222>
 80071f2:	bf00      	nop
 80071f4:	08007685 	.word	0x08007685
 80071f8:	08007696 	.word	0x08007696

080071fc <__sflush_r>:
 80071fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	0716      	lsls	r6, r2, #28
 8007206:	4605      	mov	r5, r0
 8007208:	460c      	mov	r4, r1
 800720a:	d454      	bmi.n	80072b6 <__sflush_r+0xba>
 800720c:	684b      	ldr	r3, [r1, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	dc02      	bgt.n	8007218 <__sflush_r+0x1c>
 8007212:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	dd48      	ble.n	80072aa <__sflush_r+0xae>
 8007218:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800721a:	2e00      	cmp	r6, #0
 800721c:	d045      	beq.n	80072aa <__sflush_r+0xae>
 800721e:	2300      	movs	r3, #0
 8007220:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007224:	682f      	ldr	r7, [r5, #0]
 8007226:	6a21      	ldr	r1, [r4, #32]
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	d030      	beq.n	800728e <__sflush_r+0x92>
 800722c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	0759      	lsls	r1, r3, #29
 8007232:	d505      	bpl.n	8007240 <__sflush_r+0x44>
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	1ad2      	subs	r2, r2, r3
 8007238:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800723a:	b10b      	cbz	r3, 8007240 <__sflush_r+0x44>
 800723c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	2300      	movs	r3, #0
 8007242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007244:	6a21      	ldr	r1, [r4, #32]
 8007246:	4628      	mov	r0, r5
 8007248:	47b0      	blx	r6
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	89a3      	ldrh	r3, [r4, #12]
 800724e:	d106      	bne.n	800725e <__sflush_r+0x62>
 8007250:	6829      	ldr	r1, [r5, #0]
 8007252:	291d      	cmp	r1, #29
 8007254:	d82b      	bhi.n	80072ae <__sflush_r+0xb2>
 8007256:	4a2a      	ldr	r2, [pc, #168]	@ (8007300 <__sflush_r+0x104>)
 8007258:	410a      	asrs	r2, r1
 800725a:	07d6      	lsls	r6, r2, #31
 800725c:	d427      	bmi.n	80072ae <__sflush_r+0xb2>
 800725e:	2200      	movs	r2, #0
 8007260:	6062      	str	r2, [r4, #4]
 8007262:	04d9      	lsls	r1, r3, #19
 8007264:	6922      	ldr	r2, [r4, #16]
 8007266:	6022      	str	r2, [r4, #0]
 8007268:	d504      	bpl.n	8007274 <__sflush_r+0x78>
 800726a:	1c42      	adds	r2, r0, #1
 800726c:	d101      	bne.n	8007272 <__sflush_r+0x76>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	b903      	cbnz	r3, 8007274 <__sflush_r+0x78>
 8007272:	6560      	str	r0, [r4, #84]	@ 0x54
 8007274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007276:	602f      	str	r7, [r5, #0]
 8007278:	b1b9      	cbz	r1, 80072aa <__sflush_r+0xae>
 800727a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800727e:	4299      	cmp	r1, r3
 8007280:	d002      	beq.n	8007288 <__sflush_r+0x8c>
 8007282:	4628      	mov	r0, r5
 8007284:	f7ff fbf2 	bl	8006a6c <_free_r>
 8007288:	2300      	movs	r3, #0
 800728a:	6363      	str	r3, [r4, #52]	@ 0x34
 800728c:	e00d      	b.n	80072aa <__sflush_r+0xae>
 800728e:	2301      	movs	r3, #1
 8007290:	4628      	mov	r0, r5
 8007292:	47b0      	blx	r6
 8007294:	4602      	mov	r2, r0
 8007296:	1c50      	adds	r0, r2, #1
 8007298:	d1c9      	bne.n	800722e <__sflush_r+0x32>
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0c6      	beq.n	800722e <__sflush_r+0x32>
 80072a0:	2b1d      	cmp	r3, #29
 80072a2:	d001      	beq.n	80072a8 <__sflush_r+0xac>
 80072a4:	2b16      	cmp	r3, #22
 80072a6:	d11e      	bne.n	80072e6 <__sflush_r+0xea>
 80072a8:	602f      	str	r7, [r5, #0]
 80072aa:	2000      	movs	r0, #0
 80072ac:	e022      	b.n	80072f4 <__sflush_r+0xf8>
 80072ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072b2:	b21b      	sxth	r3, r3
 80072b4:	e01b      	b.n	80072ee <__sflush_r+0xf2>
 80072b6:	690f      	ldr	r7, [r1, #16]
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	d0f6      	beq.n	80072aa <__sflush_r+0xae>
 80072bc:	0793      	lsls	r3, r2, #30
 80072be:	680e      	ldr	r6, [r1, #0]
 80072c0:	bf08      	it	eq
 80072c2:	694b      	ldreq	r3, [r1, #20]
 80072c4:	600f      	str	r7, [r1, #0]
 80072c6:	bf18      	it	ne
 80072c8:	2300      	movne	r3, #0
 80072ca:	eba6 0807 	sub.w	r8, r6, r7
 80072ce:	608b      	str	r3, [r1, #8]
 80072d0:	f1b8 0f00 	cmp.w	r8, #0
 80072d4:	dde9      	ble.n	80072aa <__sflush_r+0xae>
 80072d6:	6a21      	ldr	r1, [r4, #32]
 80072d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072da:	4643      	mov	r3, r8
 80072dc:	463a      	mov	r2, r7
 80072de:	4628      	mov	r0, r5
 80072e0:	47b0      	blx	r6
 80072e2:	2800      	cmp	r0, #0
 80072e4:	dc08      	bgt.n	80072f8 <__sflush_r+0xfc>
 80072e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ee:	81a3      	strh	r3, [r4, #12]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	4407      	add	r7, r0
 80072fa:	eba8 0800 	sub.w	r8, r8, r0
 80072fe:	e7e7      	b.n	80072d0 <__sflush_r+0xd4>
 8007300:	dfbffffe 	.word	0xdfbffffe

08007304 <_fflush_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	690b      	ldr	r3, [r1, #16]
 8007308:	4605      	mov	r5, r0
 800730a:	460c      	mov	r4, r1
 800730c:	b913      	cbnz	r3, 8007314 <_fflush_r+0x10>
 800730e:	2500      	movs	r5, #0
 8007310:	4628      	mov	r0, r5
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	b118      	cbz	r0, 800731e <_fflush_r+0x1a>
 8007316:	6a03      	ldr	r3, [r0, #32]
 8007318:	b90b      	cbnz	r3, 800731e <_fflush_r+0x1a>
 800731a:	f7ff fa97 	bl	800684c <__sinit>
 800731e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f3      	beq.n	800730e <_fflush_r+0xa>
 8007326:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007328:	07d0      	lsls	r0, r2, #31
 800732a:	d404      	bmi.n	8007336 <_fflush_r+0x32>
 800732c:	0599      	lsls	r1, r3, #22
 800732e:	d402      	bmi.n	8007336 <_fflush_r+0x32>
 8007330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007332:	f7ff fb98 	bl	8006a66 <__retarget_lock_acquire_recursive>
 8007336:	4628      	mov	r0, r5
 8007338:	4621      	mov	r1, r4
 800733a:	f7ff ff5f 	bl	80071fc <__sflush_r>
 800733e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007340:	07da      	lsls	r2, r3, #31
 8007342:	4605      	mov	r5, r0
 8007344:	d4e4      	bmi.n	8007310 <_fflush_r+0xc>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	059b      	lsls	r3, r3, #22
 800734a:	d4e1      	bmi.n	8007310 <_fflush_r+0xc>
 800734c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800734e:	f7ff fb8b 	bl	8006a68 <__retarget_lock_release_recursive>
 8007352:	e7dd      	b.n	8007310 <_fflush_r+0xc>

08007354 <_putc_r>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	460d      	mov	r5, r1
 8007358:	4614      	mov	r4, r2
 800735a:	4606      	mov	r6, r0
 800735c:	b118      	cbz	r0, 8007366 <_putc_r+0x12>
 800735e:	6a03      	ldr	r3, [r0, #32]
 8007360:	b90b      	cbnz	r3, 8007366 <_putc_r+0x12>
 8007362:	f7ff fa73 	bl	800684c <__sinit>
 8007366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007368:	07d8      	lsls	r0, r3, #31
 800736a:	d405      	bmi.n	8007378 <_putc_r+0x24>
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	0599      	lsls	r1, r3, #22
 8007370:	d402      	bmi.n	8007378 <_putc_r+0x24>
 8007372:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007374:	f7ff fb77 	bl	8006a66 <__retarget_lock_acquire_recursive>
 8007378:	68a3      	ldr	r3, [r4, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	60a3      	str	r3, [r4, #8]
 8007380:	da05      	bge.n	800738e <_putc_r+0x3a>
 8007382:	69a2      	ldr	r2, [r4, #24]
 8007384:	4293      	cmp	r3, r2
 8007386:	db12      	blt.n	80073ae <_putc_r+0x5a>
 8007388:	b2eb      	uxtb	r3, r5
 800738a:	2b0a      	cmp	r3, #10
 800738c:	d00f      	beq.n	80073ae <_putc_r+0x5a>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	6022      	str	r2, [r4, #0]
 8007394:	701d      	strb	r5, [r3, #0]
 8007396:	b2ed      	uxtb	r5, r5
 8007398:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800739a:	07da      	lsls	r2, r3, #31
 800739c:	d405      	bmi.n	80073aa <_putc_r+0x56>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	059b      	lsls	r3, r3, #22
 80073a2:	d402      	bmi.n	80073aa <_putc_r+0x56>
 80073a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073a6:	f7ff fb5f 	bl	8006a68 <__retarget_lock_release_recursive>
 80073aa:	4628      	mov	r0, r5
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
 80073ae:	4629      	mov	r1, r5
 80073b0:	4622      	mov	r2, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 f802 	bl	80073bc <__swbuf_r>
 80073b8:	4605      	mov	r5, r0
 80073ba:	e7ed      	b.n	8007398 <_putc_r+0x44>

080073bc <__swbuf_r>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	460e      	mov	r6, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	4605      	mov	r5, r0
 80073c4:	b118      	cbz	r0, 80073ce <__swbuf_r+0x12>
 80073c6:	6a03      	ldr	r3, [r0, #32]
 80073c8:	b90b      	cbnz	r3, 80073ce <__swbuf_r+0x12>
 80073ca:	f7ff fa3f 	bl	800684c <__sinit>
 80073ce:	69a3      	ldr	r3, [r4, #24]
 80073d0:	60a3      	str	r3, [r4, #8]
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	071a      	lsls	r2, r3, #28
 80073d6:	d501      	bpl.n	80073dc <__swbuf_r+0x20>
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	b943      	cbnz	r3, 80073ee <__swbuf_r+0x32>
 80073dc:	4621      	mov	r1, r4
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 f82a 	bl	8007438 <__swsetup_r>
 80073e4:	b118      	cbz	r0, 80073ee <__swbuf_r+0x32>
 80073e6:	f04f 37ff 	mov.w	r7, #4294967295
 80073ea:	4638      	mov	r0, r7
 80073ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	6922      	ldr	r2, [r4, #16]
 80073f2:	1a98      	subs	r0, r3, r2
 80073f4:	6963      	ldr	r3, [r4, #20]
 80073f6:	b2f6      	uxtb	r6, r6
 80073f8:	4283      	cmp	r3, r0
 80073fa:	4637      	mov	r7, r6
 80073fc:	dc05      	bgt.n	800740a <__swbuf_r+0x4e>
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f7ff ff7f 	bl	8007304 <_fflush_r>
 8007406:	2800      	cmp	r0, #0
 8007408:	d1ed      	bne.n	80073e6 <__swbuf_r+0x2a>
 800740a:	68a3      	ldr	r3, [r4, #8]
 800740c:	3b01      	subs	r3, #1
 800740e:	60a3      	str	r3, [r4, #8]
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	701e      	strb	r6, [r3, #0]
 8007418:	6962      	ldr	r2, [r4, #20]
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	429a      	cmp	r2, r3
 800741e:	d004      	beq.n	800742a <__swbuf_r+0x6e>
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	07db      	lsls	r3, r3, #31
 8007424:	d5e1      	bpl.n	80073ea <__swbuf_r+0x2e>
 8007426:	2e0a      	cmp	r6, #10
 8007428:	d1df      	bne.n	80073ea <__swbuf_r+0x2e>
 800742a:	4621      	mov	r1, r4
 800742c:	4628      	mov	r0, r5
 800742e:	f7ff ff69 	bl	8007304 <_fflush_r>
 8007432:	2800      	cmp	r0, #0
 8007434:	d0d9      	beq.n	80073ea <__swbuf_r+0x2e>
 8007436:	e7d6      	b.n	80073e6 <__swbuf_r+0x2a>

08007438 <__swsetup_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4b29      	ldr	r3, [pc, #164]	@ (80074e0 <__swsetup_r+0xa8>)
 800743c:	4605      	mov	r5, r0
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	460c      	mov	r4, r1
 8007442:	b118      	cbz	r0, 800744c <__swsetup_r+0x14>
 8007444:	6a03      	ldr	r3, [r0, #32]
 8007446:	b90b      	cbnz	r3, 800744c <__swsetup_r+0x14>
 8007448:	f7ff fa00 	bl	800684c <__sinit>
 800744c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007450:	0719      	lsls	r1, r3, #28
 8007452:	d422      	bmi.n	800749a <__swsetup_r+0x62>
 8007454:	06da      	lsls	r2, r3, #27
 8007456:	d407      	bmi.n	8007468 <__swsetup_r+0x30>
 8007458:	2209      	movs	r2, #9
 800745a:	602a      	str	r2, [r5, #0]
 800745c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	f04f 30ff 	mov.w	r0, #4294967295
 8007466:	e033      	b.n	80074d0 <__swsetup_r+0x98>
 8007468:	0758      	lsls	r0, r3, #29
 800746a:	d512      	bpl.n	8007492 <__swsetup_r+0x5a>
 800746c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800746e:	b141      	cbz	r1, 8007482 <__swsetup_r+0x4a>
 8007470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007474:	4299      	cmp	r1, r3
 8007476:	d002      	beq.n	800747e <__swsetup_r+0x46>
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff faf7 	bl	8006a6c <_free_r>
 800747e:	2300      	movs	r3, #0
 8007480:	6363      	str	r3, [r4, #52]	@ 0x34
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	2300      	movs	r3, #0
 800748c:	6063      	str	r3, [r4, #4]
 800748e:	6923      	ldr	r3, [r4, #16]
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	f043 0308 	orr.w	r3, r3, #8
 8007498:	81a3      	strh	r3, [r4, #12]
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	b94b      	cbnz	r3, 80074b2 <__swsetup_r+0x7a>
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074a8:	d003      	beq.n	80074b2 <__swsetup_r+0x7a>
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f84f 	bl	8007550 <__smakebuf_r>
 80074b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b6:	f013 0201 	ands.w	r2, r3, #1
 80074ba:	d00a      	beq.n	80074d2 <__swsetup_r+0x9a>
 80074bc:	2200      	movs	r2, #0
 80074be:	60a2      	str	r2, [r4, #8]
 80074c0:	6962      	ldr	r2, [r4, #20]
 80074c2:	4252      	negs	r2, r2
 80074c4:	61a2      	str	r2, [r4, #24]
 80074c6:	6922      	ldr	r2, [r4, #16]
 80074c8:	b942      	cbnz	r2, 80074dc <__swsetup_r+0xa4>
 80074ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074ce:	d1c5      	bne.n	800745c <__swsetup_r+0x24>
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	0799      	lsls	r1, r3, #30
 80074d4:	bf58      	it	pl
 80074d6:	6962      	ldrpl	r2, [r4, #20]
 80074d8:	60a2      	str	r2, [r4, #8]
 80074da:	e7f4      	b.n	80074c6 <__swsetup_r+0x8e>
 80074dc:	2000      	movs	r0, #0
 80074de:	e7f7      	b.n	80074d0 <__swsetup_r+0x98>
 80074e0:	24000028 	.word	0x24000028

080074e4 <_sbrk_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d06      	ldr	r5, [pc, #24]	@ (8007500 <_sbrk_r+0x1c>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7f9 fccc 	bl	8000e8c <_sbrk>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_sbrk_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_sbrk_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	2400030c 	.word	0x2400030c

08007504 <__swhatbuf_r>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	460c      	mov	r4, r1
 8007508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750c:	2900      	cmp	r1, #0
 800750e:	b096      	sub	sp, #88	@ 0x58
 8007510:	4615      	mov	r5, r2
 8007512:	461e      	mov	r6, r3
 8007514:	da0d      	bge.n	8007532 <__swhatbuf_r+0x2e>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800751c:	f04f 0100 	mov.w	r1, #0
 8007520:	bf14      	ite	ne
 8007522:	2340      	movne	r3, #64	@ 0x40
 8007524:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007528:	2000      	movs	r0, #0
 800752a:	6031      	str	r1, [r6, #0]
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	b016      	add	sp, #88	@ 0x58
 8007530:	bd70      	pop	{r4, r5, r6, pc}
 8007532:	466a      	mov	r2, sp
 8007534:	f000 f848 	bl	80075c8 <_fstat_r>
 8007538:	2800      	cmp	r0, #0
 800753a:	dbec      	blt.n	8007516 <__swhatbuf_r+0x12>
 800753c:	9901      	ldr	r1, [sp, #4]
 800753e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007542:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007546:	4259      	negs	r1, r3
 8007548:	4159      	adcs	r1, r3
 800754a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800754e:	e7eb      	b.n	8007528 <__swhatbuf_r+0x24>

08007550 <__smakebuf_r>:
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007554:	079d      	lsls	r5, r3, #30
 8007556:	4606      	mov	r6, r0
 8007558:	460c      	mov	r4, r1
 800755a:	d507      	bpl.n	800756c <__smakebuf_r+0x1c>
 800755c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	2301      	movs	r3, #1
 8007566:	6163      	str	r3, [r4, #20]
 8007568:	b003      	add	sp, #12
 800756a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800756c:	ab01      	add	r3, sp, #4
 800756e:	466a      	mov	r2, sp
 8007570:	f7ff ffc8 	bl	8007504 <__swhatbuf_r>
 8007574:	9f00      	ldr	r7, [sp, #0]
 8007576:	4605      	mov	r5, r0
 8007578:	4639      	mov	r1, r7
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff fae2 	bl	8006b44 <_malloc_r>
 8007580:	b948      	cbnz	r0, 8007596 <__smakebuf_r+0x46>
 8007582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007586:	059a      	lsls	r2, r3, #22
 8007588:	d4ee      	bmi.n	8007568 <__smakebuf_r+0x18>
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	f043 0302 	orr.w	r3, r3, #2
 8007592:	81a3      	strh	r3, [r4, #12]
 8007594:	e7e2      	b.n	800755c <__smakebuf_r+0xc>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	6020      	str	r0, [r4, #0]
 800759a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075a6:	b15b      	cbz	r3, 80075c0 <__smakebuf_r+0x70>
 80075a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ac:	4630      	mov	r0, r6
 80075ae:	f000 f81d 	bl	80075ec <_isatty_r>
 80075b2:	b128      	cbz	r0, 80075c0 <__smakebuf_r+0x70>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	f023 0303 	bic.w	r3, r3, #3
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	81a3      	strh	r3, [r4, #12]
 80075c0:	89a3      	ldrh	r3, [r4, #12]
 80075c2:	431d      	orrs	r5, r3
 80075c4:	81a5      	strh	r5, [r4, #12]
 80075c6:	e7cf      	b.n	8007568 <__smakebuf_r+0x18>

080075c8 <_fstat_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d07      	ldr	r5, [pc, #28]	@ (80075e8 <_fstat_r+0x20>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	602b      	str	r3, [r5, #0]
 80075d6:	f7f9 fc30 	bl	8000e3a <_fstat>
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	d102      	bne.n	80075e4 <_fstat_r+0x1c>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	b103      	cbz	r3, 80075e4 <_fstat_r+0x1c>
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	bd38      	pop	{r3, r4, r5, pc}
 80075e6:	bf00      	nop
 80075e8:	2400030c 	.word	0x2400030c

080075ec <_isatty_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d06      	ldr	r5, [pc, #24]	@ (8007608 <_isatty_r+0x1c>)
 80075f0:	2300      	movs	r3, #0
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	f7f9 fc2f 	bl	8000e5a <_isatty>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_isatty_r+0x1a>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_isatty_r+0x1a>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	2400030c 	.word	0x2400030c

0800760c <_init>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr

08007618 <_fini>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr
