
PWM_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800373c  0800373c  0000473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800374c  0800374c  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  0800374c  0800374c  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800374c  0800374c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0000474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003750  08003750  00004750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08003754  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  24000010  08003764  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000cc  08003764  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d971  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0a  00000000  00000000  000129af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000145c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b1  00000000  00000000  00015258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e4b3  00000000  00000000  00015c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e393  00000000  00000000  000540bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019864e  00000000  00000000  0006244f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001faa9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  001faae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001fdf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003724 	.word	0x08003724

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003724 	.word	0x08003724

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800040e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <main+0xa8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 f9fb 	bl	8000828 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 faf5 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f83f 	bl	80004b8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <main+0xa8>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000440:	4a1a      	ldr	r2, [pc, #104]	@ (80004ac <main+0xa8>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800044a:	4b18      	ldr	r3, [pc, #96]	@ (80004ac <main+0xa8>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fe3f 	bl	80010dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fe55 	bl	8001110 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800046a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800046c:	bf00      	nop
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <main+0xa8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x80>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dcf4      	bgt.n	800046e <main+0x6a>
if ( timeout < 0 )
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	da01      	bge.n	800048e <main+0x8a>
{
Error_Handler();
 800048a:	f000 f9cd 	bl	8000828 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f977 	bl	8000780 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000492:	f000 f87b 	bl	800058c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000496:	f000 f925 	bl	80006e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800049a:	2100      	movs	r1, #0
 800049c:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <main+0xac>)
 800049e:	f001 ff61 	bl	8002364 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80004a2:	4804      	ldr	r0, [pc, #16]	@ (80004b4 <main+0xb0>)
 80004a4:	f001 fe84 	bl	80021b0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <main+0xa4>
 80004ac:	58024400 	.word	0x58024400
 80004b0:	2400002c 	.word	0x2400002c
 80004b4:	24000078 	.word	0x24000078

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09c      	sub	sp, #112	@ 0x70
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004c2:	224c      	movs	r2, #76	@ 0x4c
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 f900 	bl	80036cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2220      	movs	r2, #32
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 f8fa 	bl	80036cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004d8:	2004      	movs	r0, #4
 80004da:	f000 fe2d 	bl	8001138 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	4b28      	ldr	r3, [pc, #160]	@ (8000584 <SystemClock_Config+0xcc>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e6:	4a27      	ldr	r2, [pc, #156]	@ (8000584 <SystemClock_Config+0xcc>)
 80004e8:	f023 0301 	bic.w	r3, r3, #1
 80004ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004ee:	4b25      	ldr	r3, [pc, #148]	@ (8000584 <SystemClock_Config+0xcc>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <SystemClock_Config+0xd0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a22      	ldr	r2, [pc, #136]	@ (8000588 <SystemClock_Config+0xd0>)
 80004fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b20      	ldr	r3, [pc, #128]	@ (8000588 <SystemClock_Config+0xd0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000510:	bf00      	nop
 8000512:	4b1d      	ldr	r3, [pc, #116]	@ (8000588 <SystemClock_Config+0xd0>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800051a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800051e:	d1f8      	bne.n	8000512 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	2302      	movs	r3, #2
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000524:	2301      	movs	r3, #1
 8000526:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	2340      	movs	r3, #64	@ 0x40
 800052a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052c:	2300      	movs	r3, #0
 800052e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fe59 	bl	80011ec <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000540:	f000 f972 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	233f      	movs	r3, #63	@ 0x3f
 8000546:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800055c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fa98 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000576:	f000 f957 	bl	8000828 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3770      	adds	r7, #112	@ 0x70
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	58000400 	.word	0x58000400
 8000588:	58024800 	.word	0x58024800

0800058c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b09a      	sub	sp, #104	@ 0x68
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
 80005bc:	615a      	str	r2, [r3, #20]
 80005be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	222c      	movs	r2, #44	@ 0x2c
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f880 	bl	80036cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005cc:	4b43      	ldr	r3, [pc, #268]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005ce:	4a44      	ldr	r2, [pc, #272]	@ (80006e0 <MX_TIM1_Init+0x154>)
 80005d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005d2:	4b42      	ldr	r3, [pc, #264]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b40      	ldr	r3, [pc, #256]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80005de:	4b3f      	ldr	r3, [pc, #252]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005e0:	22ff      	movs	r2, #255	@ 0xff
 80005e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e4:	4b3d      	ldr	r3, [pc, #244]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005ea:	4b3c      	ldr	r3, [pc, #240]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f0:	4b3a      	ldr	r3, [pc, #232]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005f6:	4839      	ldr	r0, [pc, #228]	@ (80006dc <MX_TIM1_Init+0x150>)
 80005f8:	f001 fd82 	bl	8002100 <HAL_TIM_Base_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000602:	f000 f911 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800060c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000610:	4619      	mov	r1, r3
 8000612:	4832      	ldr	r0, [pc, #200]	@ (80006dc <MX_TIM1_Init+0x150>)
 8000614:	f002 f9d0 	bl	80029b8 <HAL_TIM_ConfigClockSource>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800061e:	f000 f903 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000622:	482e      	ldr	r0, [pc, #184]	@ (80006dc <MX_TIM1_Init+0x150>)
 8000624:	f001 fe3c 	bl	80022a0 <HAL_TIM_PWM_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800062e:	f000 f8fb 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	2300      	movs	r3, #0
 8000634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800063e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000642:	4619      	mov	r1, r3
 8000644:	4825      	ldr	r0, [pc, #148]	@ (80006dc <MX_TIM1_Init+0x150>)
 8000646:	f002 ff17 	bl	8003478 <HAL_TIMEx_MasterConfigSynchronization>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000650:	f000 f8ea 	bl	8000828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000654:	2360      	movs	r3, #96	@ 0x60
 8000656:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000670:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000674:	2200      	movs	r2, #0
 8000676:	4619      	mov	r1, r3
 8000678:	4818      	ldr	r0, [pc, #96]	@ (80006dc <MX_TIM1_Init+0x150>)
 800067a:	f002 f889 	bl	8002790 <HAL_TIM_PWM_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000684:	f000 f8d0 	bl	8000828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800069c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4807      	ldr	r0, [pc, #28]	@ (80006dc <MX_TIM1_Init+0x150>)
 80006be:	f002 ff69 	bl	8003594 <HAL_TIMEx_ConfigBreakDeadTime>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80006c8:	f000 f8ae 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006cc:	4803      	ldr	r0, [pc, #12]	@ (80006dc <MX_TIM1_Init+0x150>)
 80006ce:	f000 f909 	bl	80008e4 <HAL_TIM_MspPostInit>

}
 80006d2:	bf00      	nop
 80006d4:	3768      	adds	r7, #104	@ 0x68
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2400002c 	.word	0x2400002c
 80006e0:	40010000 	.word	0x40010000

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_TIM2_Init+0x98>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_TIM2_Init+0x98>)
 800070c:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_TIM2_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_TIM2_Init+0x98>)
 800071a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800071e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_TIM2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_TIM2_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072c:	4813      	ldr	r0, [pc, #76]	@ (800077c <MX_TIM2_Init+0x98>)
 800072e:	f001 fce7 	bl	8002100 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000738:	f000 f876 	bl	8000828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <MX_TIM2_Init+0x98>)
 800074a:	f002 f935 	bl	80029b8 <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000754:	f000 f868 	bl	8000828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_TIM2_Init+0x98>)
 8000766:	f002 fe87 	bl	8003478 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000770:	f000 f85a 	bl	8000828 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */


  /* USER CODE END TIM2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	24000078 	.word	0x24000078

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_GPIO_Init+0x30>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a08      	ldr	r2, [pc, #32]	@ (80007b0 <MX_GPIO_Init+0x30>)
 800078e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_GPIO_Init+0x30>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	58024400 	.word	0x58024400

080007b4 <HAL_TIM_PeriodElapsedCallback>:


/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == TIM2) // Check if interrupt is from Timer2
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007c4:	d122      	bne.n	800080c <HAL_TIM_PeriodElapsedCallback+0x58>
	  {
	    // Update duty cycle
	    uint16_t dutyCycleValue = (htim1.Init.Period * dutyCycleStep) / 10;
 80007c6:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	fb02 f303 	mul.w	r3, r2, r3
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80007d6:	fba2 2303 	umull	r2, r3, r2, r3
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	81fb      	strh	r3, [r7, #14]
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycleValue);
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	89fa      	ldrh	r2, [r7, #14]
 80007e4:	635a      	str	r2, [r3, #52]	@ 0x34

	    // Increment or reset duty cycle step
	    dutyCycleStep = (dutyCycleStep + 1) % 11; // Steps: 0 to 10 (0% to 100%)
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	1c59      	adds	r1, r3, #1
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007f0:	fb83 2301 	smull	r2, r3, r3, r1
 80007f4:	105a      	asrs	r2, r3, #1
 80007f6:	17cb      	asrs	r3, r1, #31
 80007f8:	1ad2      	subs	r2, r2, r3
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	1aca      	subs	r2, r1, r3
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800080a:	701a      	strb	r2, [r3, #0]
	  }
 }
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	2400002c 	.word	0x2400002c
 800081c:	240000c4 	.word	0x240000c4
 8000820:	cccccccd 	.word	0xcccccccd
 8000824:	2e8ba2e9 	.word	0x2e8ba2e9

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <HAL_MspInit+0x30>)
 800083c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000840:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <HAL_MspInit+0x30>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_MspInit+0x30>)
 800084c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	58024400 	.word	0x58024400

08000868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a19      	ldr	r2, [pc, #100]	@ (80008dc <HAL_TIM_Base_MspInit+0x74>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10f      	bne.n	800089a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_TIM_Base_MspInit+0x78>)
 800087c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000880:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <HAL_TIM_Base_MspInit+0x78>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <HAL_TIM_Base_MspInit+0x78>)
 800088c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000898:	e01b      	b.n	80008d2 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008a2:	d116      	bne.n	80008d2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <HAL_TIM_Base_MspInit+0x78>)
 80008a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008aa:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <HAL_TIM_Base_MspInit+0x78>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <HAL_TIM_Base_MspInit+0x78>)
 80008b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	201c      	movs	r0, #28
 80008c8:	f000 fa23 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008cc:	201c      	movs	r0, #28
 80008ce:	f000 fa3a 	bl	8000d46 <HAL_NVIC_EnableIRQ>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010000 	.word	0x40010000
 80008e0:	58024400 	.word	0x58024400

080008e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a12      	ldr	r2, [pc, #72]	@ (800094c <HAL_TIM_MspPostInit+0x68>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d11e      	bne.n	8000944 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <HAL_TIM_MspPostInit+0x6c>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a10      	ldr	r2, [pc, #64]	@ (8000950 <HAL_TIM_MspPostInit+0x6c>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <HAL_TIM_MspPostInit+0x6c>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PK1     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000924:	2302      	movs	r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000934:	2301      	movs	r3, #1
 8000936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <HAL_TIM_MspPostInit+0x70>)
 8000940:	f000 fa1c 	bl	8000d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40010000 	.word	0x40010000
 8000950:	58024400 	.word	0x58024400
 8000954:	58022800 	.word	0x58022800

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 f8a9 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <TIM2_IRQHandler+0x10>)
 80009be:	f001 fddf 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000078 	.word	0x24000078

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d0:	f7ff fc82 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 fe6f 	bl	80036dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fd01 	bl	8000404 <main>
  bx  lr
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a0c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a10:	08003754 	.word	0x08003754
  ldr r2, =_sbss
 8000a14:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a18:	240000cc 	.word	0x240000cc

08000a1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC3_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a26:	2003      	movs	r0, #3
 8000a28:	f000 f968 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a2c:	f001 f9ee 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8000a30:	4602      	mov	r2, r0
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_Init+0x68>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	f003 030f 	and.w	r3, r3, #15
 8000a3c:	4913      	ldr	r1, [pc, #76]	@ (8000a8c <HAL_Init+0x6c>)
 8000a3e:	5ccb      	ldrb	r3, [r1, r3]
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	fa22 f303 	lsr.w	r3, r2, r3
 8000a48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_Init+0x68>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_Init+0x6c>)
 8000a54:	5cd3      	ldrb	r3, [r2, r3]
 8000a56:	f003 031f 	and.w	r3, r3, #31
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a60:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <HAL_Init+0x70>)
 8000a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a64:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <HAL_Init+0x74>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f814 	bl	8000a98 <HAL_InitTick>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e002      	b.n	8000a80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7a:	f7ff fedb 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58024400 	.word	0x58024400
 8000a8c:	0800373c 	.word	0x0800373c
 8000a90:	24000004 	.word	0x24000004
 8000a94:	24000000 	.word	0x24000000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_InitTick+0x60>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e021      	b.n	8000af0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <HAL_InitTick+0x64>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_InitTick+0x60>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f94d 	bl	8000d62 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f917 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	@ (8000b00 <HAL_InitTick+0x68>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2400000c 	.word	0x2400000c
 8000afc:	24000000 	.word	0x24000000
 8000b00:	24000008 	.word	0x24000008

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400000c 	.word	0x2400000c
 8000b28:	240000c8 	.word	0x240000c8

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	@ (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	240000c8 	.word	0x240000c8

08000b44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_GetREVID+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	0c1b      	lsrs	r3, r3, #16
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	5c001000 	.word	0x5c001000

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x40>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x40>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	05fa0000 	.word	0x05fa0000

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	@ (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	@ (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	@ 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff40 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff90 	bl	8000c50 <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5f 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff33 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa4 	bl	8000cb8 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d8a:	4b89      	ldr	r3, [pc, #548]	@ (8000fb0 <HAL_GPIO_Init+0x234>)
 8000d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d8e:	e194      	b.n	80010ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	2101      	movs	r1, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 8186 	beq.w	80010b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d005      	beq.n	8000dc0 <HAL_GPIO_Init+0x44>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d130      	bne.n	8000e22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000df6:	2201      	movs	r2, #1
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	f003 0201 	and.w	r2, r3, #1
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d017      	beq.n	8000e5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d123      	bne.n	8000eb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	69b9      	ldr	r1, [r7, #24]
 8000eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0203 	and.w	r2, r3, #3
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 80e0 	beq.w	80010b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <HAL_GPIO_Init+0x238>)
 8000ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000efa:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb4 <HAL_GPIO_Init+0x238>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <HAL_GPIO_Init+0x238>)
 8000f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <HAL_GPIO_Init+0x23c>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a20      	ldr	r2, [pc, #128]	@ (8000fbc <HAL_GPIO_Init+0x240>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d052      	beq.n	8000fe4 <HAL_GPIO_Init+0x268>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <HAL_GPIO_Init+0x244>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d031      	beq.n	8000faa <HAL_GPIO_Init+0x22e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a1e      	ldr	r2, [pc, #120]	@ (8000fc4 <HAL_GPIO_Init+0x248>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d02b      	beq.n	8000fa6 <HAL_GPIO_Init+0x22a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc8 <HAL_GPIO_Init+0x24c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <HAL_GPIO_Init+0x250>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_GPIO_Init+0x254>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x21e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd4 <HAL_GPIO_Init+0x258>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a19      	ldr	r2, [pc, #100]	@ (8000fd8 <HAL_GPIO_Init+0x25c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a18      	ldr	r2, [pc, #96]	@ (8000fdc <HAL_GPIO_Init+0x260>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <HAL_GPIO_Init+0x264>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f86:	2309      	movs	r3, #9
 8000f88:	e02d      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	e02b      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000f8e:	2308      	movs	r3, #8
 8000f90:	e029      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000f92:	2307      	movs	r3, #7
 8000f94:	e027      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000f96:	2306      	movs	r3, #6
 8000f98:	e025      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e023      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e021      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e01f      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e01d      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e01b      	b.n	8000fe6 <HAL_GPIO_Init+0x26a>
 8000fae:	bf00      	nop
 8000fb0:	58000080 	.word	0x58000080
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58000400 	.word	0x58000400
 8000fbc:	58020000 	.word	0x58020000
 8000fc0:	58020400 	.word	0x58020400
 8000fc4:	58020800 	.word	0x58020800
 8000fc8:	58020c00 	.word	0x58020c00
 8000fcc:	58021000 	.word	0x58021000
 8000fd0:	58021400 	.word	0x58021400
 8000fd4:	58021800 	.word	0x58021800
 8000fd8:	58021c00 	.word	0x58021c00
 8000fdc:	58022000 	.word	0x58022000
 8000fe0:	58022400 	.word	0x58022400
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff6:	4938      	ldr	r1, [pc, #224]	@ (80010d8 <HAL_GPIO_Init+0x35c>)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800102a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001058:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3301      	adds	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f47f ae63 	bne.w	8000d90 <HAL_GPIO_Init+0x14>
  }
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3724      	adds	r7, #36	@ 0x24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	58000400 	.word	0x58000400

080010dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80010e4:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <HAL_HSEM_FastTake+0x2c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3320      	adds	r3, #32
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	4a07      	ldr	r2, [pc, #28]	@ (800110c <HAL_HSEM_FastTake+0x30>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d101      	bne.n	80010f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e000      	b.n	80010fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	58026400 	.word	0x58026400
 800110c:	80000300 	.word	0x80000300

08001110 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800111a:	4906      	ldr	r1, [pc, #24]	@ (8001134 <HAL_HSEM_Release+0x24>)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58026400 	.word	0x58026400

08001138 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001140:	4b29      	ldr	r3, [pc, #164]	@ (80011e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	2b06      	cmp	r3, #6
 800114a:	d00a      	beq.n	8001162 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	d001      	beq.n	800115e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e040      	b.n	80011e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e03e      	b.n	80011e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800116a:	491f      	ldr	r1, [pc, #124]	@ (80011e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4313      	orrs	r3, r2
 8001170:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001172:	f7ff fcdb 	bl	8000b2c <HAL_GetTick>
 8001176:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001178:	e009      	b.n	800118e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800117a:	f7ff fcd7 	bl	8000b2c <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001188:	d901      	bls.n	800118e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e028      	b.n	80011e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800119a:	d1ee      	bne.n	800117a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b1e      	cmp	r3, #30
 80011a0:	d008      	beq.n	80011b4 <HAL_PWREx_ConfigSupply+0x7c>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80011a6:	d005      	beq.n	80011b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b1d      	cmp	r3, #29
 80011ac:	d002      	beq.n	80011b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b2d      	cmp	r3, #45	@ 0x2d
 80011b2:	d114      	bne.n	80011de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80011b4:	f7ff fcba 	bl	8000b2c <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011ba:	e009      	b.n	80011d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011bc:	f7ff fcb6 	bl	8000b2c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011ca:	d901      	bls.n	80011d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e007      	b.n	80011e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011dc:	d1ee      	bne.n	80011bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58024800 	.word	0x58024800

080011ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d102      	bne.n	8001200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	f000 bc48 	b.w	8001a90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8088 	beq.w	800131e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120e:	4b99      	ldr	r3, [pc, #612]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001218:	4b96      	ldr	r3, [pc, #600]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800121a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800121e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001220:	2b10      	cmp	r3, #16
 8001222:	d007      	beq.n	8001234 <HAL_RCC_OscConfig+0x48>
 8001224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001226:	2b18      	cmp	r3, #24
 8001228:	d111      	bne.n	800124e <HAL_RCC_OscConfig+0x62>
 800122a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b8f      	ldr	r3, [pc, #572]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d06d      	beq.n	800131c <HAL_RCC_OscConfig+0x130>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d169      	bne.n	800131c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	f000 bc21 	b.w	8001a90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x7a>
 8001258:	4b86      	ldr	r3, [pc, #536]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a85      	ldr	r2, [pc, #532]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e02e      	b.n	80012c4 <HAL_RCC_OscConfig+0xd8>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x9c>
 800126e:	4b81      	ldr	r3, [pc, #516]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a80      	ldr	r2, [pc, #512]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7d      	ldr	r2, [pc, #500]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001280:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xd8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0xc0>
 8001292:	4b78      	ldr	r3, [pc, #480]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a77      	ldr	r2, [pc, #476]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a74      	ldr	r2, [pc, #464]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xd8>
 80012ac:	4b71      	ldr	r3, [pc, #452]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a70      	ldr	r2, [pc, #448]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6d      	ldr	r2, [pc, #436]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc2e 	bl	8000b2c <HAL_GetTick>
 80012d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fc2a 	bl	8000b2c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	@ 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e3d4      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012e6:	4b63      	ldr	r3, [pc, #396]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe8>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc1a 	bl	8000b2c <HAL_GetTick>
 80012f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc16 	bl	8000b2c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	@ 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e3c0      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800130e:	4b59      	ldr	r3, [pc, #356]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x110>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80ca 	beq.w	80014c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132c:	4b51      	ldr	r3, [pc, #324]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001334:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001336:	4b4f      	ldr	r3, [pc, #316]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <HAL_RCC_OscConfig+0x166>
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	2b18      	cmp	r3, #24
 8001346:	d156      	bne.n	80013f6 <HAL_RCC_OscConfig+0x20a>
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d151      	bne.n	80013f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001352:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x17e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e392      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800136a:	4b42      	ldr	r3, [pc, #264]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 0219 	bic.w	r2, r3, #25
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	493f      	ldr	r1, [pc, #252]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fbd6 	bl	8000b2c <HAL_GetTick>
 8001380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001384:	f7ff fbd2 	bl	8000b2c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e37c      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001396:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	f7ff fbcf 	bl	8000b44 <HAL_GetREVID>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d817      	bhi.n	80013e0 <HAL_RCC_OscConfig+0x1f4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b40      	cmp	r3, #64	@ 0x40
 80013b6:	d108      	bne.n	80013ca <HAL_RCC_OscConfig+0x1de>
 80013b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c8:	e07a      	b.n	80014c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	031b      	lsls	r3, r3, #12
 80013d8:	4926      	ldr	r1, [pc, #152]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013de:	e06f      	b.n	80014c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	4921      	ldr	r1, [pc, #132]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013f4:	e064      	b.n	80014c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d047      	beq.n	800148e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0219 	bic.w	r2, r3, #25
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	491a      	ldr	r1, [pc, #104]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fb8c 	bl	8000b2c <HAL_GetTick>
 8001414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff fb88 	bl	8000b2c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e332      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	f7ff fb85 	bl	8000b44 <HAL_GetREVID>
 800143a:	4603      	mov	r3, r0
 800143c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001440:	4293      	cmp	r3, r2
 8001442:	d819      	bhi.n	8001478 <HAL_RCC_OscConfig+0x28c>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	2b40      	cmp	r3, #64	@ 0x40
 800144a:	d108      	bne.n	800145e <HAL_RCC_OscConfig+0x272>
 800144c:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001454:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145a:	6053      	str	r3, [r2, #4]
 800145c:	e030      	b.n	80014c0 <HAL_RCC_OscConfig+0x2d4>
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	031b      	lsls	r3, r3, #12
 800146c:	4901      	ldr	r1, [pc, #4]	@ (8001474 <HAL_RCC_OscConfig+0x288>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
 8001472:	e025      	b.n	80014c0 <HAL_RCC_OscConfig+0x2d4>
 8001474:	58024400 	.word	0x58024400
 8001478:	4b9a      	ldr	r3, [pc, #616]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	4997      	ldr	r1, [pc, #604]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
 800148c:	e018      	b.n	80014c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	4b95      	ldr	r3, [pc, #596]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a94      	ldr	r2, [pc, #592]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff fb47 	bl	8000b2c <HAL_GetTick>
 800149e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a2:	f7ff fb43 	bl	8000b2c <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e2ed      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b4:	4b8b      	ldr	r3, [pc, #556]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a9 	beq.w	8001620 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b85      	ldr	r3, [pc, #532]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014d8:	4b82      	ldr	r3, [pc, #520]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x308>
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	d13a      	bne.n	8001560 <HAL_RCC_OscConfig+0x374>
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d135      	bne.n	8001560 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014f4:	4b7b      	ldr	r3, [pc, #492]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x320>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b80      	cmp	r3, #128	@ 0x80
 8001506:	d001      	beq.n	800150c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e2c1      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800150c:	f7ff fb1a 	bl	8000b44 <HAL_GetREVID>
 8001510:	4603      	mov	r3, r0
 8001512:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001516:	4293      	cmp	r3, r2
 8001518:	d817      	bhi.n	800154a <HAL_RCC_OscConfig+0x35e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	2b20      	cmp	r3, #32
 8001520:	d108      	bne.n	8001534 <HAL_RCC_OscConfig+0x348>
 8001522:	4b70      	ldr	r3, [pc, #448]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800152a:	4a6e      	ldr	r2, [pc, #440]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001530:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001532:	e075      	b.n	8001620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001534:	4b6b      	ldr	r3, [pc, #428]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	069b      	lsls	r3, r3, #26
 8001542:	4968      	ldr	r1, [pc, #416]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001548:	e06a      	b.n	8001620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800154a:	4b66      	ldr	r3, [pc, #408]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	4962      	ldr	r1, [pc, #392]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800155a:	4313      	orrs	r3, r2
 800155c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800155e:	e05f      	b.n	8001620 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d042      	beq.n	80015ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001568:	4b5e      	ldr	r3, [pc, #376]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a5d      	ldr	r2, [pc, #372]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800156e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fada 	bl	8000b2c <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800157c:	f7ff fad6 	bl	8000b2c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e280      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800158e:	4b55      	ldr	r3, [pc, #340]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800159a:	f7ff fad3 	bl	8000b44 <HAL_GetREVID>
 800159e:	4603      	mov	r3, r0
 80015a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d817      	bhi.n	80015d8 <HAL_RCC_OscConfig+0x3ec>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	d108      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3d6>
 80015b0:	4b4c      	ldr	r3, [pc, #304]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80015b8:	4a4a      	ldr	r2, [pc, #296]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015be:	6053      	str	r3, [r2, #4]
 80015c0:	e02e      	b.n	8001620 <HAL_RCC_OscConfig+0x434>
 80015c2:	4b48      	ldr	r3, [pc, #288]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	069b      	lsls	r3, r3, #26
 80015d0:	4944      	ldr	r1, [pc, #272]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
 80015d6:	e023      	b.n	8001620 <HAL_RCC_OscConfig+0x434>
 80015d8:	4b42      	ldr	r3, [pc, #264]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	493f      	ldr	r1, [pc, #252]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60cb      	str	r3, [r1, #12]
 80015ec:	e018      	b.n	8001620 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80015ee:	4b3d      	ldr	r3, [pc, #244]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a3c      	ldr	r2, [pc, #240]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fa97 	bl	8000b2c <HAL_GetTick>
 80015fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001602:	f7ff fa93 	bl	8000b2c <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e23d      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001614:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d036      	beq.n	800169a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d019      	beq.n	8001668 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001634:	4b2b      	ldr	r3, [pc, #172]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001638:	4a2a      	ldr	r2, [pc, #168]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fa74 	bl	8000b2c <HAL_GetTick>
 8001644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fa70 	bl	8000b2c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e21a      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800165a:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x45c>
 8001666:	e018      	b.n	800169a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001668:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800166c:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fa5a 	bl	8000b2c <HAL_GetTick>
 8001678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fa56 	bl	8000b2c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e200      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d039      	beq.n	800171a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d01c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80016b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa37 	bl	8000b2c <HAL_GetTick>
 80016be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c2:	f7ff fa33 	bl	8000b2c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1dd      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80016d4:	4b03      	ldr	r3, [pc, #12]	@ (80016e4 <HAL_RCC_OscConfig+0x4f8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4d6>
 80016e0:	e01b      	b.n	800171a <HAL_RCC_OscConfig+0x52e>
 80016e2:	bf00      	nop
 80016e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016e8:	4b9b      	ldr	r3, [pc, #620]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a9a      	ldr	r2, [pc, #616]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80016ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fa1a 	bl	8000b2c <HAL_GetTick>
 80016f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fc:	f7ff fa16 	bl	8000b2c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1c0      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800170e:	4b92      	ldr	r3, [pc, #584]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8081 	beq.w	800182a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001728:	4b8c      	ldr	r3, [pc, #560]	@ (800195c <HAL_RCC_OscConfig+0x770>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a8b      	ldr	r2, [pc, #556]	@ (800195c <HAL_RCC_OscConfig+0x770>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001734:	f7ff f9fa 	bl	8000b2c <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173c:	f7ff f9f6 	bl	8000b2c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	@ 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1a0      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800174e:	4b83      	ldr	r3, [pc, #524]	@ (800195c <HAL_RCC_OscConfig+0x770>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x584>
 8001762:	4b7d      	ldr	r3, [pc, #500]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	4a7c      	ldr	r2, [pc, #496]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6713      	str	r3, [r2, #112]	@ 0x70
 800176e:	e02d      	b.n	80017cc <HAL_RCC_OscConfig+0x5e0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x5a6>
 8001778:	4b77      	ldr	r3, [pc, #476]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177c:	4a76      	ldr	r2, [pc, #472]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6713      	str	r3, [r2, #112]	@ 0x70
 8001784:	4b74      	ldr	r3, [pc, #464]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a73      	ldr	r2, [pc, #460]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x5e0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c8>
 800179a:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	4a6e      	ldr	r2, [pc, #440]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x5e0>
 80017b4:	4b68      	ldr	r3, [pc, #416]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b8:	4a67      	ldr	r2, [pc, #412]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c0:	4b65      	ldr	r3, [pc, #404]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a64      	ldr	r2, [pc, #400]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017c6:	f023 0304 	bic.w	r3, r3, #4
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d015      	beq.n	8001800 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f9aa 	bl	8000b2c <HAL_GetTick>
 80017d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff f9a6 	bl	8000b2c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e14e      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f2:	4b59      	ldr	r3, [pc, #356]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0ee      	beq.n	80017dc <HAL_RCC_OscConfig+0x5f0>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff f994 	bl	8000b2c <HAL_GetTick>
 8001804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff f990 	bl	8000b2c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e138      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181e:	4b4e      	ldr	r3, [pc, #312]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ee      	bne.n	8001808 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 812d 	beq.w	8001a8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001834:	4b48      	ldr	r3, [pc, #288]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800183c:	2b18      	cmp	r3, #24
 800183e:	f000 80bd 	beq.w	80019bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	2b02      	cmp	r3, #2
 8001848:	f040 809e 	bne.w	8001988 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b42      	ldr	r3, [pc, #264]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a41      	ldr	r2, [pc, #260]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f968 	bl	8000b2c <HAL_GetTick>
 800185c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f964 	bl	8000b2c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e10e      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001872:	4b39      	ldr	r3, [pc, #228]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001882:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <HAL_RCC_OscConfig+0x774>)
 8001884:	4013      	ands	r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	430a      	orrs	r2, r1
 8001892:	4931      	ldr	r1, [pc, #196]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001894:	4313      	orrs	r3, r2
 8001896:	628b      	str	r3, [r1, #40]	@ 0x28
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	3b01      	subs	r3, #1
 800189e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a6:	3b01      	subs	r3, #1
 80018a8:	025b      	lsls	r3, r3, #9
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b2:	3b01      	subs	r3, #1
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c0:	3b01      	subs	r3, #1
 80018c2:	061b      	lsls	r3, r3, #24
 80018c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80018c8:	4923      	ldr	r1, [pc, #140]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018ce:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d2:	4a21      	ldr	r2, [pc, #132]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018da:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018de:	4b21      	ldr	r3, [pc, #132]	@ (8001964 <HAL_RCC_OscConfig+0x778>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018e6:	00d2      	lsls	r2, r2, #3
 80018e8:	491b      	ldr	r1, [pc, #108]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f2:	f023 020c 	bic.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4917      	ldr	r1, [pc, #92]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	f023 0202 	bic.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190c:	4912      	ldr	r1, [pc, #72]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800190e:	4313      	orrs	r3, r2
 8001910:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001916:	4a10      	ldr	r2, [pc, #64]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	4a07      	ldr	r2, [pc, #28]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <HAL_RCC_OscConfig+0x76c>)
 8001948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff f8ed 	bl	8000b2c <HAL_GetTick>
 8001952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001954:	e011      	b.n	800197a <HAL_RCC_OscConfig+0x78e>
 8001956:	bf00      	nop
 8001958:	58024400 	.word	0x58024400
 800195c:	58024800 	.word	0x58024800
 8001960:	fffffc0c 	.word	0xfffffc0c
 8001964:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f8e0 	bl	8000b2c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e08a      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197a:	4b47      	ldr	r3, [pc, #284]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x77c>
 8001986:	e082      	b.n	8001a8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a42      	ldr	r2, [pc, #264]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 800198e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f8ca 	bl	8000b2c <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f8c6 	bl	8000b2c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e070      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x7b0>
 80019ba:	e068      	b.n	8001a8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019bc:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 80019be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019c2:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d031      	beq.n	8001a34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d12a      	bne.n	8001a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d122      	bne.n	8001a34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d11a      	bne.n	8001a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	0a5b      	lsrs	r3, r3, #9
 8001a02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d111      	bne.n	8001a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	0e1b      	lsrs	r3, r3, #24
 8001a26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e02b      	b.n	8001a90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a38:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d01f      	beq.n	8001a8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 8001a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a52:	4a11      	ldr	r2, [pc, #68]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a5a:	f7ff f867 	bl	8000b2c <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a60:	bf00      	nop
 8001a62:	f7ff f863 	bl	8000b2c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d0f9      	beq.n	8001a62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 8001a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_RCC_OscConfig+0x8b0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a7a:	00d2      	lsls	r2, r2, #3
 8001a7c:	4906      	ldr	r1, [pc, #24]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_RCC_OscConfig+0x8ac>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3730      	adds	r7, #48	@ 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	ffff0007 	.word	0xffff0007

08001aa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e19c      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b87      	ldr	r3, [pc, #540]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 020f 	bic.w	r2, r3, #15
 8001aca:	4985      	ldr	r1, [pc, #532]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b83      	ldr	r3, [pc, #524]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e184      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d908      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b00:	4b78      	ldr	r3, [pc, #480]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4975      	ldr	r1, [pc, #468]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	4b70      	ldr	r3, [pc, #448]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d908      	bls.n	8001b40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	496a      	ldr	r1, [pc, #424]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699a      	ldr	r2, [r3, #24]
 8001b50:	4b64      	ldr	r3, [pc, #400]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d908      	bls.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b5c:	4b61      	ldr	r3, [pc, #388]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	495e      	ldr	r1, [pc, #376]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d010      	beq.n	8001b9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	4b59      	ldr	r3, [pc, #356]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d908      	bls.n	8001b9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b8a:	4b56      	ldr	r3, [pc, #344]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4953      	ldr	r1, [pc, #332]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d010      	beq.n	8001bca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d908      	bls.n	8001bca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f023 020f 	bic.w	r2, r3, #15
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4947      	ldr	r1, [pc, #284]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d055      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bd6:	4b43      	ldr	r3, [pc, #268]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4940      	ldr	r1, [pc, #256]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d121      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0f6      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c08:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d115      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0ea      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c20:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0de      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0d6      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f023 0207 	bic.w	r2, r3, #7
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4925      	ldr	r1, [pc, #148]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c52:	f7fe ff6b 	bl	8000b2c <HAL_GetTick>
 8001c56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5a:	f7fe ff67 	bl	8000b2c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0be      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d1eb      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d208      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f023 020f 	bic.w	r2, r3, #15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	490e      	ldr	r1, [pc, #56]	@ (8001ce4 <HAL_RCC_ClockConfig+0x244>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d214      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b08      	ldr	r3, [pc, #32]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 020f 	bic.w	r2, r3, #15
 8001cc6:	4906      	ldr	r1, [pc, #24]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <HAL_RCC_ClockConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e086      	b.n	8001dee <HAL_RCC_ClockConfig+0x34e>
 8001ce0:	52002000 	.word	0x52002000
 8001ce4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d208      	bcs.n	8001d16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d04:	4b3c      	ldr	r3, [pc, #240]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	4939      	ldr	r1, [pc, #228]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d010      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d208      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	492e      	ldr	r1, [pc, #184]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	4b28      	ldr	r3, [pc, #160]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d208      	bcs.n	8001d72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4922      	ldr	r1, [pc, #136]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d208      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4917      	ldr	r1, [pc, #92]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001da0:	f000 f834 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	4912      	ldr	r1, [pc, #72]	@ (8001dfc <HAL_RCC_ClockConfig+0x35c>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_RCC_ClockConfig+0x358>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <HAL_RCC_ClockConfig+0x35c>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <HAL_RCC_ClockConfig+0x360>)
 8001dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <HAL_RCC_ClockConfig+0x364>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_RCC_ClockConfig+0x368>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fe58 	bl	8000a98 <HAL_InitTick>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	58024400 	.word	0x58024400
 8001dfc:	0800373c 	.word	0x0800373c
 8001e00:	24000004 	.word	0x24000004
 8001e04:	24000000 	.word	0x24000000
 8001e08:	24000008 	.word	0x24000008

08001e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e12:	4bb3      	ldr	r3, [pc, #716]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e1a:	2b18      	cmp	r3, #24
 8001e1c:	f200 8155 	bhi.w	80020ca <HAL_RCC_GetSysClockFreq+0x2be>
 8001e20:	a201      	add	r2, pc, #4	@ (adr r2, 8001e28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e8d 	.word	0x08001e8d
 8001e2c:	080020cb 	.word	0x080020cb
 8001e30:	080020cb 	.word	0x080020cb
 8001e34:	080020cb 	.word	0x080020cb
 8001e38:	080020cb 	.word	0x080020cb
 8001e3c:	080020cb 	.word	0x080020cb
 8001e40:	080020cb 	.word	0x080020cb
 8001e44:	080020cb 	.word	0x080020cb
 8001e48:	08001eb3 	.word	0x08001eb3
 8001e4c:	080020cb 	.word	0x080020cb
 8001e50:	080020cb 	.word	0x080020cb
 8001e54:	080020cb 	.word	0x080020cb
 8001e58:	080020cb 	.word	0x080020cb
 8001e5c:	080020cb 	.word	0x080020cb
 8001e60:	080020cb 	.word	0x080020cb
 8001e64:	080020cb 	.word	0x080020cb
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	080020cb 	.word	0x080020cb
 8001e70:	080020cb 	.word	0x080020cb
 8001e74:	080020cb 	.word	0x080020cb
 8001e78:	080020cb 	.word	0x080020cb
 8001e7c:	080020cb 	.word	0x080020cb
 8001e80:	080020cb 	.word	0x080020cb
 8001e84:	080020cb 	.word	0x080020cb
 8001e88:	08001ebf 	.word	0x08001ebf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e8c:	4b94      	ldr	r3, [pc, #592]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e98:	4b91      	ldr	r3, [pc, #580]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	08db      	lsrs	r3, r3, #3
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	4a90      	ldr	r2, [pc, #576]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001eaa:	e111      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001eac:	4b8d      	ldr	r3, [pc, #564]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eae:	61bb      	str	r3, [r7, #24]
      break;
 8001eb0:	e10e      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001eb4:	61bb      	str	r3, [r7, #24]
      break;
 8001eb6:	e10b      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001eba:	61bb      	str	r3, [r7, #24]
      break;
 8001ebc:	e108      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ebe:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ec8:	4b85      	ldr	r3, [pc, #532]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ed2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ed4:	4b82      	ldr	r3, [pc, #520]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ede:	4b80      	ldr	r3, [pc, #512]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80e1 	beq.w	80020c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	f000 8083 	beq.w	8002010 <HAL_RCC_GetSysClockFreq+0x204>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	f200 80a1 	bhi.w	8002054 <HAL_RCC_GetSysClockFreq+0x248>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x114>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d056      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f1e:	e099      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f20:	4b6f      	ldr	r3, [pc, #444]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d02d      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	4a6b      	ldr	r2, [pc, #428]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f56:	4b62      	ldr	r3, [pc, #392]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f86:	e087      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9a:	4b51      	ldr	r3, [pc, #324]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fca:	e065      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fde:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ff2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800200e:	e043      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800201e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002022:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002032:	ed97 6a02 	vldr	s12, [r7, #8]
 8002036:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800203a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800203e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800204a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002052:	e021      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002076:	ed97 6a02 	vldr	s12, [r7, #8]
 800207a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800207e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800208a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002096:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	0a5b      	lsrs	r3, r3, #9
 800209e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a2:	3301      	adds	r3, #1
 80020a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80020b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020bc:	ee17 3a90 	vmov	r3, s15
 80020c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
      break;
 80020c8:	e002      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020cc:	61bb      	str	r3, [r7, #24]
      break;
 80020ce:	bf00      	nop
  }

  return sysclockfreq;
 80020d0:	69bb      	ldr	r3, [r7, #24]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	@ 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	58024400 	.word	0x58024400
 80020e4:	03d09000 	.word	0x03d09000
 80020e8:	003d0900 	.word	0x003d0900
 80020ec:	017d7840 	.word	0x017d7840
 80020f0:	46000000 	.word	0x46000000
 80020f4:	4c742400 	.word	0x4c742400
 80020f8:	4a742400 	.word	0x4a742400
 80020fc:	4bbebc20 	.word	0x4bbebc20

08002100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e049      	b.n	80021a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fb9e 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 fd5a 	bl	8002bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d001      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e054      	b.n	8002272 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a26      	ldr	r2, [pc, #152]	@ (8002280 <HAL_TIM_Base_Start_IT+0xd0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d022      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x80>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f2:	d01d      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x80>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <HAL_TIM_Base_Start_IT+0xd4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d018      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x80>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a21      	ldr	r2, [pc, #132]	@ (8002288 <HAL_TIM_Base_Start_IT+0xd8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d013      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x80>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1f      	ldr	r2, [pc, #124]	@ (800228c <HAL_TIM_Base_Start_IT+0xdc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00e      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x80>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <HAL_TIM_Base_Start_IT+0xe0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d009      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x80>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1c      	ldr	r2, [pc, #112]	@ (8002294 <HAL_TIM_Base_Start_IT+0xe4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d004      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x80>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_TIM_Base_Start_IT+0xe8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d115      	bne.n	800225c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_TIM_Base_Start_IT+0xec>)
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b06      	cmp	r3, #6
 8002240:	d015      	beq.n	800226e <HAL_TIM_Base_Start_IT+0xbe>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002248:	d011      	beq.n	800226e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	e008      	b.n	800226e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e000      	b.n	8002270 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	40010400 	.word	0x40010400
 8002294:	40001800 	.word	0x40001800
 8002298:	40014000 	.word	0x40014000
 800229c:	00010007 	.word	0x00010007

080022a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e049      	b.n	8002346 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f841 	bl	800234e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f000 fc8a 	bl	8002bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_TIM_PWM_Start+0x24>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e03c      	b.n	8002402 <HAL_TIM_PWM_Start+0x9e>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d109      	bne.n	80023a2 <HAL_TIM_PWM_Start+0x3e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	e02f      	b.n	8002402 <HAL_TIM_PWM_Start+0x9e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d109      	bne.n	80023bc <HAL_TIM_PWM_Start+0x58>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e022      	b.n	8002402 <HAL_TIM_PWM_Start+0x9e>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d109      	bne.n	80023d6 <HAL_TIM_PWM_Start+0x72>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e015      	b.n	8002402 <HAL_TIM_PWM_Start+0x9e>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d109      	bne.n	80023f0 <HAL_TIM_PWM_Start+0x8c>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e008      	b.n	8002402 <HAL_TIM_PWM_Start+0x9e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e0a1      	b.n	800254e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <HAL_TIM_PWM_Start+0xb6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002418:	e023      	b.n	8002462 <HAL_TIM_PWM_Start+0xfe>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d104      	bne.n	800242a <HAL_TIM_PWM_Start+0xc6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002428:	e01b      	b.n	8002462 <HAL_TIM_PWM_Start+0xfe>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d104      	bne.n	800243a <HAL_TIM_PWM_Start+0xd6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002438:	e013      	b.n	8002462 <HAL_TIM_PWM_Start+0xfe>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b0c      	cmp	r3, #12
 800243e:	d104      	bne.n	800244a <HAL_TIM_PWM_Start+0xe6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002448:	e00b      	b.n	8002462 <HAL_TIM_PWM_Start+0xfe>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b10      	cmp	r3, #16
 800244e:	d104      	bne.n	800245a <HAL_TIM_PWM_Start+0xf6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002458:	e003      	b.n	8002462 <HAL_TIM_PWM_Start+0xfe>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2201      	movs	r2, #1
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 ffde 	bl	800342c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a38      	ldr	r2, [pc, #224]	@ (8002558 <HAL_TIM_PWM_Start+0x1f4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x13e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_TIM_PWM_Start+0x1f8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x13e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a35      	ldr	r2, [pc, #212]	@ (8002560 <HAL_TIM_PWM_Start+0x1fc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x13e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a34      	ldr	r2, [pc, #208]	@ (8002564 <HAL_TIM_PWM_Start+0x200>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_TIM_PWM_Start+0x13e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a32      	ldr	r2, [pc, #200]	@ (8002568 <HAL_TIM_PWM_Start+0x204>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_TIM_PWM_Start+0x142>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_TIM_PWM_Start+0x144>
 80024a6:	2300      	movs	r3, #0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a25      	ldr	r2, [pc, #148]	@ (8002558 <HAL_TIM_PWM_Start+0x1f4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d022      	beq.n	800250c <HAL_TIM_PWM_Start+0x1a8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ce:	d01d      	beq.n	800250c <HAL_TIM_PWM_Start+0x1a8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a25      	ldr	r2, [pc, #148]	@ (800256c <HAL_TIM_PWM_Start+0x208>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d018      	beq.n	800250c <HAL_TIM_PWM_Start+0x1a8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a24      	ldr	r2, [pc, #144]	@ (8002570 <HAL_TIM_PWM_Start+0x20c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d013      	beq.n	800250c <HAL_TIM_PWM_Start+0x1a8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a22      	ldr	r2, [pc, #136]	@ (8002574 <HAL_TIM_PWM_Start+0x210>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00e      	beq.n	800250c <HAL_TIM_PWM_Start+0x1a8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1a      	ldr	r2, [pc, #104]	@ (800255c <HAL_TIM_PWM_Start+0x1f8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d009      	beq.n	800250c <HAL_TIM_PWM_Start+0x1a8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <HAL_TIM_PWM_Start+0x214>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_TIM_PWM_Start+0x1a8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a16      	ldr	r2, [pc, #88]	@ (8002560 <HAL_TIM_PWM_Start+0x1fc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d115      	bne.n	8002538 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <HAL_TIM_PWM_Start+0x218>)
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d015      	beq.n	800254a <HAL_TIM_PWM_Start+0x1e6>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002524:	d011      	beq.n	800254a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	e008      	b.n	800254a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e000      	b.n	800254c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	40010400 	.word	0x40010400
 8002560:	40014000 	.word	0x40014000
 8002564:	40014400 	.word	0x40014400
 8002568:	40014800 	.word	0x40014800
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40001800 	.word	0x40001800
 800257c:	00010007 	.word	0x00010007

08002580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 faf6 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fae8 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 faf9 	bl	8002bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d020      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0204 	mvn.w	r2, #4
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fad0 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fac2 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fad3 	bl	8002bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d020      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0208 	mvn.w	r2, #8
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 faaa 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa9c 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 faad 	bl	8002bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d020      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0210 	mvn.w	r2, #16
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2208      	movs	r2, #8
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa84 	bl	8002bbc <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa76 	bl	8002ba8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa87 	bl	8002bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0201 	mvn.w	r2, #1
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f864 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00c      	beq.n	800271a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 ffc5 	bl	80036a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00c      	beq.n	800273e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 ffbd 	bl	80036b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00c      	beq.n	8002762 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800275a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fa41 	bl	8002be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0220 	mvn.w	r2, #32
 800277e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 ff85 	bl	8003690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0ff      	b.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b14      	cmp	r3, #20
 80027ba:	f200 80f0 	bhi.w	800299e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80027be:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	08002819 	.word	0x08002819
 80027c8:	0800299f 	.word	0x0800299f
 80027cc:	0800299f 	.word	0x0800299f
 80027d0:	0800299f 	.word	0x0800299f
 80027d4:	08002859 	.word	0x08002859
 80027d8:	0800299f 	.word	0x0800299f
 80027dc:	0800299f 	.word	0x0800299f
 80027e0:	0800299f 	.word	0x0800299f
 80027e4:	0800289b 	.word	0x0800289b
 80027e8:	0800299f 	.word	0x0800299f
 80027ec:	0800299f 	.word	0x0800299f
 80027f0:	0800299f 	.word	0x0800299f
 80027f4:	080028db 	.word	0x080028db
 80027f8:	0800299f 	.word	0x0800299f
 80027fc:	0800299f 	.word	0x0800299f
 8002800:	0800299f 	.word	0x0800299f
 8002804:	0800291d 	.word	0x0800291d
 8002808:	0800299f 	.word	0x0800299f
 800280c:	0800299f 	.word	0x0800299f
 8002810:	0800299f 	.word	0x0800299f
 8002814:	0800295d 	.word	0x0800295d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fa90 	bl	8002d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0208 	orr.w	r2, r2, #8
 8002832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0204 	bic.w	r2, r2, #4
 8002842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6999      	ldr	r1, [r3, #24]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
      break;
 8002856:	e0a5      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 fb00 	bl	8002e64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6999      	ldr	r1, [r3, #24]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	619a      	str	r2, [r3, #24]
      break;
 8002898:	e084      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fb69 	bl	8002f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0208 	orr.w	r2, r2, #8
 80028b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0204 	bic.w	r2, r2, #4
 80028c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69d9      	ldr	r1, [r3, #28]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]
      break;
 80028d8:	e064      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fbd1 	bl	8003088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69d9      	ldr	r1, [r3, #28]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	021a      	lsls	r2, r3, #8
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	61da      	str	r2, [r3, #28]
      break;
 800291a:	e043      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fc1a 	bl	800315c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0208 	orr.w	r2, r2, #8
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0204 	bic.w	r2, r2, #4
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800295a:	e023      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fc5e 	bl	8003224 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	021a      	lsls	r2, r3, #8
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800299c:	e002      	b.n	80029a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
      break;
 80029a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop

080029b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_TIM_ConfigClockSource+0x1c>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0dc      	b.n	8002b8e <HAL_TIM_ConfigClockSource+0x1d6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002b98 <HAL_TIM_ConfigClockSource+0x1e0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a64      	ldr	r2, [pc, #400]	@ (8002b9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	f000 80a9 	beq.w	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a10:	4a62      	ldr	r2, [pc, #392]	@ (8002b9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	f200 80ae 	bhi.w	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a18:	4a61      	ldr	r2, [pc, #388]	@ (8002ba0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f000 80a1 	beq.w	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a20:	4a5f      	ldr	r2, [pc, #380]	@ (8002ba0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	f200 80a6 	bhi.w	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a28:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f000 8099 	beq.w	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a30:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	f200 809e 	bhi.w	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002a3c:	f000 8091 	beq.w	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002a44:	f200 8096 	bhi.w	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a4c:	f000 8089 	beq.w	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a54:	f200 808e 	bhi.w	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5c:	d03e      	beq.n	8002adc <HAL_TIM_ConfigClockSource+0x124>
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	f200 8087 	bhi.w	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6a:	f000 8086 	beq.w	8002b7a <HAL_TIM_ConfigClockSource+0x1c2>
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a72:	d87f      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a74:	2b70      	cmp	r3, #112	@ 0x70
 8002a76:	d01a      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0xf6>
 8002a78:	2b70      	cmp	r3, #112	@ 0x70
 8002a7a:	d87b      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a7c:	2b60      	cmp	r3, #96	@ 0x60
 8002a7e:	d050      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x16a>
 8002a80:	2b60      	cmp	r3, #96	@ 0x60
 8002a82:	d877      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a84:	2b50      	cmp	r3, #80	@ 0x50
 8002a86:	d03c      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x14a>
 8002a88:	2b50      	cmp	r3, #80	@ 0x50
 8002a8a:	d873      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a8c:	2b40      	cmp	r3, #64	@ 0x40
 8002a8e:	d058      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x18a>
 8002a90:	2b40      	cmp	r3, #64	@ 0x40
 8002a92:	d86f      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a94:	2b30      	cmp	r3, #48	@ 0x30
 8002a96:	d064      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a98:	2b30      	cmp	r3, #48	@ 0x30
 8002a9a:	d86b      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d060      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d867      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d05c      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d05a      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x1aa>
 8002aac:	e062      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002abe:	f000 fc95 	bl	80033ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	609a      	str	r2, [r3, #8]
      break;
 8002ada:	e04f      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aec:	f000 fc7e 	bl	80033ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002afe:	609a      	str	r2, [r3, #8]
      break;
 8002b00:	e03c      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f000 fbee 	bl	80032f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2150      	movs	r1, #80	@ 0x50
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fc48 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002b20:	e02c      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f000 fc0d 	bl	800334e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2160      	movs	r1, #96	@ 0x60
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fc38 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002b40:	e01c      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f000 fbce 	bl	80032f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fc28 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002b60:	e00c      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f000 fc1f 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002b72:	e003      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      break;
 8002b78:	e000      	b.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	ffceff88 	.word	0xffceff88
 8002b9c:	00100040 	.word	0x00100040
 8002ba0:	00100030 	.word	0x00100030
 8002ba4:	00100020 	.word	0x00100020

08002ba8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a46      	ldr	r2, [pc, #280]	@ (8002d24 <TIM_Base_SetConfig+0x12c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <TIM_Base_SetConfig+0x40>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c16:	d00f      	beq.n	8002c38 <TIM_Base_SetConfig+0x40>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a43      	ldr	r2, [pc, #268]	@ (8002d28 <TIM_Base_SetConfig+0x130>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a42      	ldr	r2, [pc, #264]	@ (8002d2c <TIM_Base_SetConfig+0x134>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a41      	ldr	r2, [pc, #260]	@ (8002d30 <TIM_Base_SetConfig+0x138>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a40      	ldr	r2, [pc, #256]	@ (8002d34 <TIM_Base_SetConfig+0x13c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d108      	bne.n	8002c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a35      	ldr	r2, [pc, #212]	@ (8002d24 <TIM_Base_SetConfig+0x12c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c58:	d01b      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a32      	ldr	r2, [pc, #200]	@ (8002d28 <TIM_Base_SetConfig+0x130>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d017      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a31      	ldr	r2, [pc, #196]	@ (8002d2c <TIM_Base_SetConfig+0x134>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a30      	ldr	r2, [pc, #192]	@ (8002d30 <TIM_Base_SetConfig+0x138>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00f      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2f      	ldr	r2, [pc, #188]	@ (8002d34 <TIM_Base_SetConfig+0x13c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00b      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d38 <TIM_Base_SetConfig+0x140>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2d      	ldr	r2, [pc, #180]	@ (8002d3c <TIM_Base_SetConfig+0x144>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d003      	beq.n	8002c92 <TIM_Base_SetConfig+0x9a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d40 <TIM_Base_SetConfig+0x148>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a16      	ldr	r2, [pc, #88]	@ (8002d24 <TIM_Base_SetConfig+0x12c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00f      	beq.n	8002cf0 <TIM_Base_SetConfig+0xf8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	@ (8002d34 <TIM_Base_SetConfig+0x13c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00b      	beq.n	8002cf0 <TIM_Base_SetConfig+0xf8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a17      	ldr	r2, [pc, #92]	@ (8002d38 <TIM_Base_SetConfig+0x140>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <TIM_Base_SetConfig+0xf8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a16      	ldr	r2, [pc, #88]	@ (8002d3c <TIM_Base_SetConfig+0x144>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <TIM_Base_SetConfig+0xf8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <TIM_Base_SetConfig+0x148>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d103      	bne.n	8002cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f023 0201 	bic.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]
  }
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40000800 	.word	0x40000800
 8002d30:	40000c00 	.word	0x40000c00
 8002d34:	40010400 	.word	0x40010400
 8002d38:	40014000 	.word	0x40014000
 8002d3c:	40014400 	.word	0x40014400
 8002d40:	40014800 	.word	0x40014800

08002d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f023 0201 	bic.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4b37      	ldr	r3, [pc, #220]	@ (8002e4c <TIM_OC1_SetConfig+0x108>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 0302 	bic.w	r3, r3, #2
 8002d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e50 <TIM_OC1_SetConfig+0x10c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00f      	beq.n	8002dc0 <TIM_OC1_SetConfig+0x7c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <TIM_OC1_SetConfig+0x110>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00b      	beq.n	8002dc0 <TIM_OC1_SetConfig+0x7c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a2b      	ldr	r2, [pc, #172]	@ (8002e58 <TIM_OC1_SetConfig+0x114>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <TIM_OC1_SetConfig+0x7c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e5c <TIM_OC1_SetConfig+0x118>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_OC1_SetConfig+0x7c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a29      	ldr	r2, [pc, #164]	@ (8002e60 <TIM_OC1_SetConfig+0x11c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10c      	bne.n	8002dda <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0308 	bic.w	r3, r3, #8
 8002dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <TIM_OC1_SetConfig+0x10c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00f      	beq.n	8002e02 <TIM_OC1_SetConfig+0xbe>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e54 <TIM_OC1_SetConfig+0x110>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <TIM_OC1_SetConfig+0xbe>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <TIM_OC1_SetConfig+0x114>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <TIM_OC1_SetConfig+0xbe>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a19      	ldr	r2, [pc, #100]	@ (8002e5c <TIM_OC1_SetConfig+0x118>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_OC1_SetConfig+0xbe>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	@ (8002e60 <TIM_OC1_SetConfig+0x11c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d111      	bne.n	8002e26 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	fffeff8f 	.word	0xfffeff8f
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800

08002e64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	f023 0210 	bic.w	r2, r3, #16
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <TIM_OC2_SetConfig+0xfc>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f023 0320 	bic.w	r3, r3, #32
 8002eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a29      	ldr	r2, [pc, #164]	@ (8002f64 <TIM_OC2_SetConfig+0x100>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_OC2_SetConfig+0x68>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a28      	ldr	r2, [pc, #160]	@ (8002f68 <TIM_OC2_SetConfig+0x104>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d10d      	bne.n	8002ee8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ee6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a1e      	ldr	r2, [pc, #120]	@ (8002f64 <TIM_OC2_SetConfig+0x100>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00f      	beq.n	8002f10 <TIM_OC2_SetConfig+0xac>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <TIM_OC2_SetConfig+0x104>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <TIM_OC2_SetConfig+0xac>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <TIM_OC2_SetConfig+0x108>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d007      	beq.n	8002f10 <TIM_OC2_SetConfig+0xac>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <TIM_OC2_SetConfig+0x10c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <TIM_OC2_SetConfig+0xac>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002f74 <TIM_OC2_SetConfig+0x110>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d113      	bne.n	8002f38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	feff8fff 	.word	0xfeff8fff
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800

08002f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4b33      	ldr	r3, [pc, #204]	@ (8003070 <TIM_OC3_SetConfig+0xf8>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	@ (8003074 <TIM_OC3_SetConfig+0xfc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_OC3_SetConfig+0x66>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	@ (8003078 <TIM_OC3_SetConfig+0x100>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10d      	bne.n	8002ffa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <TIM_OC3_SetConfig+0xfc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00f      	beq.n	8003022 <TIM_OC3_SetConfig+0xaa>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a1c      	ldr	r2, [pc, #112]	@ (8003078 <TIM_OC3_SetConfig+0x100>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00b      	beq.n	8003022 <TIM_OC3_SetConfig+0xaa>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1b      	ldr	r2, [pc, #108]	@ (800307c <TIM_OC3_SetConfig+0x104>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <TIM_OC3_SetConfig+0xaa>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1a      	ldr	r2, [pc, #104]	@ (8003080 <TIM_OC3_SetConfig+0x108>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d003      	beq.n	8003022 <TIM_OC3_SetConfig+0xaa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <TIM_OC3_SetConfig+0x10c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d113      	bne.n	800304a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	621a      	str	r2, [r3, #32]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	fffeff8f 	.word	0xfffeff8f
 8003074:	40010000 	.word	0x40010000
 8003078:	40010400 	.word	0x40010400
 800307c:	40014000 	.word	0x40014000
 8003080:	40014400 	.word	0x40014400
 8003084:	40014800 	.word	0x40014800

08003088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <TIM_OC4_SetConfig+0xbc>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	031b      	lsls	r3, r3, #12
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a19      	ldr	r2, [pc, #100]	@ (8003148 <TIM_OC4_SetConfig+0xc0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00f      	beq.n	8003108 <TIM_OC4_SetConfig+0x80>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a18      	ldr	r2, [pc, #96]	@ (800314c <TIM_OC4_SetConfig+0xc4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00b      	beq.n	8003108 <TIM_OC4_SetConfig+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <TIM_OC4_SetConfig+0xc8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d007      	beq.n	8003108 <TIM_OC4_SetConfig+0x80>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a16      	ldr	r2, [pc, #88]	@ (8003154 <TIM_OC4_SetConfig+0xcc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d003      	beq.n	8003108 <TIM_OC4_SetConfig+0x80>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a15      	ldr	r2, [pc, #84]	@ (8003158 <TIM_OC4_SetConfig+0xd0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d109      	bne.n	800311c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800310e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	621a      	str	r2, [r3, #32]
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	feff8fff 	.word	0xfeff8fff
 8003148:	40010000 	.word	0x40010000
 800314c:	40010400 	.word	0x40010400
 8003150:	40014000 	.word	0x40014000
 8003154:	40014400 	.word	0x40014400
 8003158:	40014800 	.word	0x40014800

0800315c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4b21      	ldr	r3, [pc, #132]	@ (800320c <TIM_OC5_SetConfig+0xb0>)
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800319c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a18      	ldr	r2, [pc, #96]	@ (8003210 <TIM_OC5_SetConfig+0xb4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00f      	beq.n	80031d2 <TIM_OC5_SetConfig+0x76>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <TIM_OC5_SetConfig+0xb8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_OC5_SetConfig+0x76>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <TIM_OC5_SetConfig+0xbc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <TIM_OC5_SetConfig+0x76>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a15      	ldr	r2, [pc, #84]	@ (800321c <TIM_OC5_SetConfig+0xc0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_OC5_SetConfig+0x76>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a14      	ldr	r2, [pc, #80]	@ (8003220 <TIM_OC5_SetConfig+0xc4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d109      	bne.n	80031e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	621a      	str	r2, [r3, #32]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	fffeff8f 	.word	0xfffeff8f
 8003210:	40010000 	.word	0x40010000
 8003214:	40010400 	.word	0x40010400
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800

08003224 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4b22      	ldr	r3, [pc, #136]	@ (80032d8 <TIM_OC6_SetConfig+0xb4>)
 8003250:	4013      	ands	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	051b      	lsls	r3, r3, #20
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <TIM_OC6_SetConfig+0xb8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00f      	beq.n	800329c <TIM_OC6_SetConfig+0x78>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a18      	ldr	r2, [pc, #96]	@ (80032e0 <TIM_OC6_SetConfig+0xbc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <TIM_OC6_SetConfig+0x78>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a17      	ldr	r2, [pc, #92]	@ (80032e4 <TIM_OC6_SetConfig+0xc0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_OC6_SetConfig+0x78>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a16      	ldr	r2, [pc, #88]	@ (80032e8 <TIM_OC6_SetConfig+0xc4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC6_SetConfig+0x78>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <TIM_OC6_SetConfig+0xc8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d109      	bne.n	80032b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	029b      	lsls	r3, r3, #10
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	feff8fff 	.word	0xfeff8fff
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40010400 	.word	0x40010400
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40014400 	.word	0x40014400
 80032ec:	40014800 	.word	0x40014800

080032f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800331a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 030a 	bic.w	r3, r3, #10
 800332c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800334e:	b480      	push	{r7}
 8003350:	b087      	sub	sp, #28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 0210 	bic.w	r2, r3, #16
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	031b      	lsls	r3, r3, #12
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800338a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	621a      	str	r2, [r3, #32]
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <TIM_ITRx_SetConfig+0x38>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f043 0307 	orr.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	ffcfff8f 	.word	0xffcfff8f

080033ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	021a      	lsls	r2, r3, #8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	431a      	orrs	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2201      	movs	r2, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1a      	ldr	r2, [r3, #32]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a1a      	ldr	r2, [r3, #32]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800348c:	2302      	movs	r3, #2
 800348e:	e06d      	b.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a30      	ldr	r2, [pc, #192]	@ (8003578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a20      	ldr	r2, [pc, #128]	@ (8003578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d022      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003502:	d01d      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1d      	ldr	r2, [pc, #116]	@ (8003580 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d018      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1c      	ldr	r2, [pc, #112]	@ (8003584 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1a      	ldr	r2, [pc, #104]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a15      	ldr	r2, [pc, #84]	@ (800357c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a16      	ldr	r2, [pc, #88]	@ (800358c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10c      	bne.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	4313      	orrs	r3, r2
 8003550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40010000 	.word	0x40010000
 800357c:	40010400 	.word	0x40010400
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40001800 	.word	0x40001800
 8003590:	40014000 	.word	0x40014000

08003594 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e065      	b.n	800367c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	@ (8003688 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d115      	bne.n	800366a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40010000 	.word	0x40010000
 800368c:	40010400 	.word	0x40010400

08003690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <memset>:
 80036cc:	4402      	add	r2, r0
 80036ce:	4603      	mov	r3, r0
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d100      	bne.n	80036d6 <memset+0xa>
 80036d4:	4770      	bx	lr
 80036d6:	f803 1b01 	strb.w	r1, [r3], #1
 80036da:	e7f9      	b.n	80036d0 <memset+0x4>

080036dc <__libc_init_array>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4d0d      	ldr	r5, [pc, #52]	@ (8003714 <__libc_init_array+0x38>)
 80036e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003718 <__libc_init_array+0x3c>)
 80036e2:	1b64      	subs	r4, r4, r5
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	2600      	movs	r6, #0
 80036e8:	42a6      	cmp	r6, r4
 80036ea:	d109      	bne.n	8003700 <__libc_init_array+0x24>
 80036ec:	4d0b      	ldr	r5, [pc, #44]	@ (800371c <__libc_init_array+0x40>)
 80036ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003720 <__libc_init_array+0x44>)
 80036f0:	f000 f818 	bl	8003724 <_init>
 80036f4:	1b64      	subs	r4, r4, r5
 80036f6:	10a4      	asrs	r4, r4, #2
 80036f8:	2600      	movs	r6, #0
 80036fa:	42a6      	cmp	r6, r4
 80036fc:	d105      	bne.n	800370a <__libc_init_array+0x2e>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	f855 3b04 	ldr.w	r3, [r5], #4
 8003704:	4798      	blx	r3
 8003706:	3601      	adds	r6, #1
 8003708:	e7ee      	b.n	80036e8 <__libc_init_array+0xc>
 800370a:	f855 3b04 	ldr.w	r3, [r5], #4
 800370e:	4798      	blx	r3
 8003710:	3601      	adds	r6, #1
 8003712:	e7f2      	b.n	80036fa <__libc_init_array+0x1e>
 8003714:	0800374c 	.word	0x0800374c
 8003718:	0800374c 	.word	0x0800374c
 800371c:	0800374c 	.word	0x0800374c
 8003720:	08003750 	.word	0x08003750

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
