
DATE_TIME_I2C_RTC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087a0  080087a0  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  080087a0  080087a0  000097a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087a8  080087a8  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087a8  080087a8  000097a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  24000000  080087b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  24000060  08008810  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002f8  08008810  0000a2f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b7a  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002753  00000000  00000000  0001ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00021360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb6  00000000  00000000  00022270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003efcb  00000000  00000000  00022e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169b9  00000000  00000000  00061df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001961b1  00000000  00000000  000787aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020e95b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  0020e9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00212de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080086ec 	.word	0x080086ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	080086ec 	.word	0x080086ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b4d      	ldr	r3, [pc, #308]	@ (80008f0 <main+0x144>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	60fa      	str	r2, [r7, #12]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fb15 	bl	8000e04 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fcbb 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f893 	bl	8000908 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b43      	ldr	r3, [pc, #268]	@ (80008f0 <main+0x144>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a41      	ldr	r2, [pc, #260]	@ (80008f0 <main+0x144>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b3f      	ldr	r3, [pc, #252]	@ (80008f0 <main+0x144>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f001 fa59 	bl	8001cb8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f001 fa6f 	bl	8001cec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b36      	ldr	r3, [pc, #216]	@ (80008f0 <main+0x144>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	60fa      	str	r2, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 fae7 	bl	8000e04 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f95b 	bl	8000af0 <MX_GPIO_Init>
  MX_I2C4_Init();
 800083a:	f000 f8cd 	bl	80009d8 <MX_I2C4_Init>
  MX_USART1_UART_Init();
 800083e:	f000 f90b 	bl	8000a58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t hour, min, sec, day, month, year;
  Set_Time(5,1,2);
 8000842:	2202      	movs	r2, #2
 8000844:	2101      	movs	r1, #1
 8000846:	2005      	movs	r0, #5
 8000848:	f000 f97c 	bl	8000b44 <Set_Time>
  Set_Date(13,12,24);
 800084c:	2218      	movs	r2, #24
 800084e:	210c      	movs	r1, #12
 8000850:	200d      	movs	r0, #13
 8000852:	f000 f9f9 	bl	8000c48 <Set_Date>
  while (1)
  {
	  static uint32_t last_tick = 0;

	      // Check if 1 second has passed
	      if (HAL_GetTick() - last_tick >= 1000) {
 8000856:	f000 fd03 	bl	8001260 <HAL_GetTick>
 800085a:	4602      	mov	r2, r0
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <main+0x148>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000866:	d3f6      	bcc.n	8000856 <main+0xaa>
	          last_tick = HAL_GetTick();
 8000868:	f000 fcfa 	bl	8001260 <HAL_GetTick>
 800086c:	4603      	mov	r3, r0
 800086e:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <main+0x148>)
 8000870:	6013      	str	r3, [r2, #0]

	          // Request time and date
	          Get_Time(&hour, &min, &sec);
 8000872:	f107 0209 	add.w	r2, r7, #9
 8000876:	f107 010a 	add.w	r1, r7, #10
 800087a:	f107 030b 	add.w	r3, r7, #11
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f99a 	bl	8000bb8 <Get_Time>
	          get_Date(&day, &month, &year);
 8000884:	1dba      	adds	r2, r7, #6
 8000886:	1df9      	adds	r1, r7, #7
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fa13 	bl	8000cb8 <get_Date>

	          // Print time and date
	          snprintf(uart_buffer, sizeof(uart_buffer), "Time: %02d:%02d:%02d\r\n", hour, min, sec);
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	4619      	mov	r1, r3
 8000896:	7abb      	ldrb	r3, [r7, #10]
 8000898:	7a7a      	ldrb	r2, [r7, #9]
 800089a:	9201      	str	r2, [sp, #4]
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	460b      	mov	r3, r1
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <main+0x14c>)
 80008a2:	2132      	movs	r1, #50	@ 0x32
 80008a4:	4815      	ldr	r0, [pc, #84]	@ (80008fc <main+0x150>)
 80008a6:	f007 fa6d 	bl	8007d84 <sniprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80008aa:	4814      	ldr	r0, [pc, #80]	@ (80008fc <main+0x150>)
 80008ac:	f7ff fd18 	bl	80002e0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	4910      	ldr	r1, [pc, #64]	@ (80008fc <main+0x150>)
 80008ba:	4811      	ldr	r0, [pc, #68]	@ (8000900 <main+0x154>)
 80008bc:	f006 f948 	bl	8006b50 <HAL_UART_Transmit>

	          snprintf(uart_buffer, sizeof(uart_buffer), "Date: %02d/%02d/%02d\r\n", day, month, year);
 80008c0:	7a3b      	ldrb	r3, [r7, #8]
 80008c2:	4619      	mov	r1, r3
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	79ba      	ldrb	r2, [r7, #6]
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	460b      	mov	r3, r1
 80008ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <main+0x158>)
 80008d0:	2132      	movs	r1, #50	@ 0x32
 80008d2:	480a      	ldr	r0, [pc, #40]	@ (80008fc <main+0x150>)
 80008d4:	f007 fa56 	bl	8007d84 <sniprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <main+0x150>)
 80008da:	f7ff fd01 	bl	80002e0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	4905      	ldr	r1, [pc, #20]	@ (80008fc <main+0x150>)
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <main+0x154>)
 80008ea:	f006 f931 	bl	8006b50 <HAL_UART_Transmit>
  {
 80008ee:	e7b2      	b.n	8000856 <main+0xaa>
 80008f0:	58024400 	.word	0x58024400
 80008f4:	2400019c 	.word	0x2400019c
 80008f8:	08008704 	.word	0x08008704
 80008fc:	24000168 	.word	0x24000168
 8000900:	240000d0 	.word	0x240000d0
 8000904:	0800871c 	.word	0x0800871c

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	@ 0x70
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000912:	224c      	movs	r2, #76	@ 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fa68 	bl	8007dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2220      	movs	r2, #32
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f007 fa62 	bl	8007dec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000928:	2004      	movs	r0, #4
 800092a:	f003 fa15 	bl	8003d58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <SystemClock_Config+0xc8>)
 8000934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000936:	4a26      	ldr	r2, [pc, #152]	@ (80009d0 <SystemClock_Config+0xc8>)
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800093e:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <SystemClock_Config+0xc8>)
 8000940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <SystemClock_Config+0xcc>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <SystemClock_Config+0xcc>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <SystemClock_Config+0xcc>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000960:	bf00      	nop
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <SystemClock_Config+0xcc>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800096e:	d1f8      	bne.n	8000962 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000974:	2301      	movs	r3, #1
 8000976:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2340      	movs	r3, #64	@ 0x40
 800097a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fa41 	bl	8003e0c <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000990:	f000 fa38 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	233f      	movs	r3, #63	@ 0x3f
 8000996:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 fe81 	bl	80046c0 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009c4:	f000 fa1e 	bl	8000e04 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3770      	adds	r7, #112	@ 0x70
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	58000400 	.word	0x58000400
 80009d4:	58024800 	.word	0x58024800

080009d8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_I2C4_Init+0x74>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	@ (8000a50 <MX_I2C4_Init+0x78>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_I2C4_Init+0x74>)
 80009e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a54 <MX_I2C4_Init+0x7c>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009e8:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_I2C4_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_I2C4_Init+0x74>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_I2C4_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_I2C4_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_I2C4_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_I2C4_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_I2C4_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a12:	480e      	ldr	r0, [pc, #56]	@ (8000a4c <MX_I2C4_Init+0x74>)
 8000a14:	f001 f97e 	bl	8001d14 <HAL_I2C_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a1e:	f000 f9f1 	bl	8000e04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <MX_I2C4_Init+0x74>)
 8000a26:	f003 f8ff 	bl	8003c28 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a30:	f000 f9e8 	bl	8000e04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_I2C4_Init+0x74>)
 8000a38:	f003 f941 	bl	8003cbe <HAL_I2CEx_ConfigDigitalFilter>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a42:	f000 f9df 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2400007c 	.word	0x2400007c
 8000a50:	58001c00 	.word	0x58001c00
 8000a54:	10707dbc 	.word	0x10707dbc

08000a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a5e:	4a23      	ldr	r2, [pc, #140]	@ (8000aec <MX_USART1_UART_Init+0x94>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa0:	4811      	ldr	r0, [pc, #68]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f006 f805 	bl	8006ab0 <HAL_UART_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 f9aa 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000ab4:	f007 f89b 	bl	8007bee <HAL_UARTEx_SetTxFifoThreshold>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000abe:	f000 f9a1 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4808      	ldr	r0, [pc, #32]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000ac6:	f007 f8d0 	bl	8007c6a <HAL_UARTEx_SetRxFifoThreshold>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad0:	f000 f998 	bl	8000e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_USART1_UART_Init+0x90>)
 8000ad6:	f007 f851 	bl	8007b7c <HAL_UARTEx_DisableFifoMode>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae0:	f000 f990 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	240000d0 	.word	0x240000d0
 8000aec:	40011000 	.word	0x40011000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_GPIO_Init+0x50>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <MX_GPIO_Init+0x50>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_GPIO_Init+0x50>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_GPIO_Init+0x50>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	4a09      	ldr	r2, [pc, #36]	@ (8000b40 <MX_GPIO_Init+0x50>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_GPIO_Init+0x50>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	58024400 	.word	0x58024400

08000b44 <Set_Time>:

/* USER CODE BEGIN 4 */
void Set_Time(uint8_t hour, uint8_t min, uint8_t sec) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	71bb      	strb	r3, [r7, #6]
 8000b52:	4613      	mov	r3, r2
 8000b54:	717b      	strb	r3, [r7, #5]
    uint8_t data[3];
    data[0] = DECtoBCD(sec);  // Convert to BCD
 8000b56:	797b      	ldrb	r3, [r7, #5]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f8eb 	bl	8000d34 <DECtoBCD>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	733b      	strb	r3, [r7, #12]
    data[1] = DECtoBCD(min);  // Convert to BCD
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f8e5 	bl	8000d34 <DECtoBCD>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	737b      	strb	r3, [r7, #13]
    data[2] = DECtoBCD(hour); // Convert to BCD
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f8df 	bl	8000d34 <DECtoBCD>
 8000b76:	4603      	mov	r3, r0
 8000b78:	73bb      	strb	r3, [r7, #14]

    // Start an interrupt-based write
    if (HAL_I2C_Mem_Write_IT(&hi2c4, DS1307_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, data, 3) != HAL_OK) {
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2301      	movs	r3, #1
 8000b86:	2200      	movs	r2, #0
 8000b88:	21d0      	movs	r1, #208	@ 0xd0
 8000b8a:	480a      	ldr	r0, [pc, #40]	@ (8000bb4 <Set_Time+0x70>)
 8000b8c:	f001 f95e 	bl	8001e4c <HAL_I2C_Mem_Write_IT>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <Set_Time+0x56>
        Error_Handler();  // Handle errors
 8000b96:	f000 f935 	bl	8000e04 <Error_Handler>
    }

    // Wait until the operation is complete (optional, based on application logic)
    while (HAL_I2C_GetState(&hi2c4) != HAL_I2C_STATE_READY);
 8000b9a:	bf00      	nop
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <Set_Time+0x70>)
 8000b9e:	f001 fb2e 	bl	80021fe <HAL_I2C_GetState>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	d1f9      	bne.n	8000b9c <Set_Time+0x58>
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2400007c 	.word	0x2400007c

08000bb8 <Get_Time>:


void Get_Time(uint8_t *hour, uint8_t *min, uint8_t *sec) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	static uint8_t data[3];

	    // Start an interrupt-based read
	    if (HAL_I2C_Mem_Read_IT(&hi2c4, DS1307_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, data, 3) == HAL_OK) {
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <Get_Time+0x84>)
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	21d0      	movs	r1, #208	@ 0xd0
 8000bd2:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <Get_Time+0x88>)
 8000bd4:	f001 f9c4 	bl	8001f60 <HAL_I2C_Mem_Read_IT>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d129      	bne.n	8000c32 <Get_Time+0x7a>
	        while (!i2c_rx_complete); // Wait for completion
 8000bde:	bf00      	nop
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <Get_Time+0x8c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0fa      	beq.n	8000be0 <Get_Time+0x28>
	        i2c_rx_complete = 0;
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <Get_Time+0x8c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]

	        // Decode data
	        *sec = BCDtoDEC(data[0] & 0x7F);
 8000bf0:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <Get_Time+0x84>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f8bc 	bl	8000d78 <BCDtoDEC>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	701a      	strb	r2, [r3, #0]
	        *min = BCDtoDEC(data[1]);
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <Get_Time+0x84>)
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f8b3 	bl	8000d78 <BCDtoDEC>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	701a      	strb	r2, [r3, #0]
	        *hour = BCDtoDEC(data[2] & 0x3F);
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <Get_Time+0x84>)
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8a7 	bl	8000d78 <BCDtoDEC>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	701a      	strb	r2, [r3, #0]
	    }
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	240001a0 	.word	0x240001a0
 8000c40:	2400007c 	.word	0x2400007c
 8000c44:	24000165 	.word	0x24000165

08000c48 <Set_Date>:

void Set_Date(uint8_t day, uint8_t month, uint8_t year)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
    static uint8_t data[3];
    data[0] = DECtoBCD(day);   // Day
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f869 	bl	8000d34 <DECtoBCD>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <Set_Date+0x68>)
 8000c68:	701a      	strb	r2, [r3, #0]
    data[1] = DECtoBCD(month); // Month
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f861 	bl	8000d34 <DECtoBCD>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <Set_Date+0x68>)
 8000c78:	705a      	strb	r2, [r3, #1]
    data[2] = DECtoBCD(year);  // Year
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f859 	bl	8000d34 <DECtoBCD>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <Set_Date+0x68>)
 8000c88:	709a      	strb	r2, [r3, #2]

    // Write to date registers (adjust address as needed)
    if (HAL_I2C_Mem_Write_IT(&hi2c4, DS1307_ADDRESS, 0x04, I2C_MEMADD_SIZE_8BIT, data, 3) != HAL_OK) {
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <Set_Date+0x68>)
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2301      	movs	r3, #1
 8000c94:	2204      	movs	r2, #4
 8000c96:	21d0      	movs	r1, #208	@ 0xd0
 8000c98:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <Set_Date+0x6c>)
 8000c9a:	f001 f8d7 	bl	8001e4c <HAL_I2C_Mem_Write_IT>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <Set_Date+0x60>
        Error_Handler();
 8000ca4:	f000 f8ae 	bl	8000e04 <Error_Handler>
    }
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240001a4 	.word	0x240001a4
 8000cb4:	2400007c 	.word	0x2400007c

08000cb8 <get_Date>:

void get_Date(uint8_t *day, uint8_t *month, uint8_t *year) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	uint8_t data[3];

	    // Start an interrupt-based read
	    if (HAL_I2C_Mem_Read_IT(&hi2c4, DS1307_ADDRESS, 0x04, I2C_MEMADD_SIZE_8BIT, data, 3) == HAL_OK) {
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	21d0      	movs	r1, #208	@ 0xd0
 8000cd4:	4815      	ldr	r0, [pc, #84]	@ (8000d2c <get_Date+0x74>)
 8000cd6:	f001 f943 	bl	8001f60 <HAL_I2C_Mem_Read_IT>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d120      	bne.n	8000d22 <get_Date+0x6a>
	        while (!i2c_rx_complete); // Wait for completion
 8000ce0:	bf00      	nop
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <get_Date+0x78>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0fa      	beq.n	8000ce2 <get_Date+0x2a>
	        i2c_rx_complete = 0;
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <get_Date+0x78>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]

	        // Decode data
	        *day = BCDtoDEC(data[0]);
 8000cf2:	7d3b      	ldrb	r3, [r7, #20]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f83f 	bl	8000d78 <BCDtoDEC>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
	        *month = BCDtoDEC(data[1]);
 8000d02:	7d7b      	ldrb	r3, [r7, #21]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f837 	bl	8000d78 <BCDtoDEC>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	701a      	strb	r2, [r3, #0]
	        *year = BCDtoDEC(data[2]);
 8000d12:	7dbb      	ldrb	r3, [r7, #22]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f82f 	bl	8000d78 <BCDtoDEC>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	701a      	strb	r2, [r3, #0]
	    }
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2400007c 	.word	0x2400007c
 8000d30:	24000165 	.word	0x24000165

08000d34 <DECtoBCD>:


uint8_t DECtoBCD(uint8_t dec) {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
    return ((dec / 10 * 16) + (dec % 10));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4a0c      	ldr	r2, [pc, #48]	@ (8000d74 <DECtoBCD+0x40>)
 8000d42:	fba2 2303 	umull	r2, r3, r2, r3
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	b2d8      	uxtb	r0, r3
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <DECtoBCD+0x40>)
 8000d52:	fba3 1302 	umull	r1, r3, r3, r2
 8000d56:	08d9      	lsrs	r1, r3, #3
 8000d58:	460b      	mov	r3, r1
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4403      	add	r3, r0
 8000d66:	b2db      	uxtb	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	cccccccd 	.word	0xcccccccd

08000d78 <BCDtoDEC>:

uint8_t BCDtoDEC(uint8_t bcd) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
    return ((bcd / 16 * 10) + (bcd % 16));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
//	if (hi2c->Instance == I2C4) {
//	        // Handle successful write completion
//	        snprintf(uart_buffer, sizeof(uart_buffer), "Write operation completed\r\n");
//	        HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
//	    }
	if (hi2c->Instance == I2C4) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d102      	bne.n	8000dc4 <HAL_I2C_MemTxCpltCallback+0x18>
	        i2c_tx_complete = 1;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_I2C_MemTxCpltCallback+0x28>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	701a      	strb	r2, [r3, #0]
	    }
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	58001c00 	.word	0x58001c00
 8000dd4:	24000164 	.word	0x24000164

08000dd8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
//	 if (hi2c->Instance == I2C4) {
//	        // Handle successful read completion
//	        snprintf(uart_buffer, sizeof(uart_buffer), "Read operation completed\r\n");
//	        HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
//}
	if (hi2c->Instance == I2C4) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <HAL_I2C_MemRxCpltCallback+0x24>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d102      	bne.n	8000df0 <HAL_I2C_MemRxCpltCallback+0x18>
	        i2c_rx_complete = 1;
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
	    }
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	58001c00 	.word	0x58001c00
 8000e00:	24000165 	.word	0x24000165

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_MspInit+0x30>)
 8000e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e1c:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_MspInit+0x30>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_MspInit+0x30>)
 8000e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	58024400 	.word	0x58024400

08000e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0bc      	sub	sp, #240	@ 0xf0
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	22c8      	movs	r2, #200	@ 0xc8
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f006 ffc1 	bl	8007dec <memset>
  if(hi2c->Instance==I2C4)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f2c <HAL_I2C_MspInit+0xe8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d156      	bne.n	8000f22 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e74:	f04f 0210 	mov.w	r2, #16
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 ffa4 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e96:	f7ff ffb5 	bl	8000e04 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b25      	ldr	r3, [pc, #148]	@ (8000f30 <HAL_I2C_MspInit+0xec>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a23      	ldr	r2, [pc, #140]	@ (8000f30 <HAL_I2C_MspInit+0xec>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <HAL_I2C_MspInit+0xec>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000eb8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000edc:	4619      	mov	r1, r3
 8000ede:	4815      	ldr	r0, [pc, #84]	@ (8000f34 <HAL_I2C_MspInit+0xf0>)
 8000ee0:	f000 fd3a 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_I2C_MspInit+0xec>)
 8000ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_I2C_MspInit+0xec>)
 8000eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ef0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_I2C_MspInit+0xec>)
 8000ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	205f      	movs	r0, #95	@ 0x5f
 8000f08:	f000 fa9d 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000f0c:	205f      	movs	r0, #95	@ 0x5f
 8000f0e:	f000 fab4 	bl	800147a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2060      	movs	r0, #96	@ 0x60
 8000f18:	f000 fa95 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8000f1c:	2060      	movs	r0, #96	@ 0x60
 8000f1e:	f000 faac 	bl	800147a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000f22:	bf00      	nop
 8000f24:	37f0      	adds	r7, #240	@ 0xf0
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	58001c00 	.word	0x58001c00
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020c00 	.word	0x58020c00

08000f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0bc      	sub	sp, #240	@ 0xf0
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	22c8      	movs	r2, #200	@ 0xc8
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 ff47 	bl	8007dec <memset>
  if(huart->Instance==USART1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a27      	ldr	r2, [pc, #156]	@ (8001000 <HAL_UART_MspInit+0xc8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d146      	bne.n	8000ff6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f68:	f04f 0201 	mov.w	r2, #1
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 ff2a 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f8a:	f7ff ff3b 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <HAL_UART_MspInit+0xcc>)
 8000f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f94:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <HAL_UART_MspInit+0xcc>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_UART_MspInit+0xcc>)
 8000fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_UART_MspInit+0xcc>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb2:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <HAL_UART_MspInit+0xcc>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_UART_MspInit+0xcc>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000fca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_UART_MspInit+0xd0>)
 8000ff2:	f000 fcb1 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	37f0      	adds	r7, #240	@ 0xf0
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40011000 	.word	0x40011000
 8001004:	58024400 	.word	0x58024400
 8001008:	58020000 	.word	0x58020000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <NMI_Handler+0x4>

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <UsageFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 f8e9 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <I2C4_EV_IRQHandler+0x10>)
 8001072:	f000 fffb 	bl	800206c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2400007c 	.word	0x2400007c

08001080 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <I2C4_ER_IRQHandler+0x10>)
 8001086:	f001 f80b 	bl	80020a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2400007c 	.word	0x2400007c

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f006 fe9a 	bl	8007dfc <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24080000 	.word	0x24080000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	240001a8 	.word	0x240001a8
 80010fc:	240002f8 	.word	0x240002f8

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001138 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001104:	f7ff fabc 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	@ (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f006 fe6b 	bl	8007e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fb3b 	bl	80007ac <main>
  bx  lr
 8001136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001138:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800113c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001140:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001144:	080087b0 	.word	0x080087b0
  ldr r2, =_sbss
 8001148:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 800114c:	240002f8 	.word	0x240002f8

08001150 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC3_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f968 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001160:	f003 fc64 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8001164:	4602      	mov	r2, r0
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <HAL_Init+0x68>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	4913      	ldr	r1, [pc, #76]	@ (80011c0 <HAL_Init+0x6c>)
 8001172:	5ccb      	ldrb	r3, [r1, r3]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_Init+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_Init+0x6c>)
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <HAL_Init+0x70>)
 8001196:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001198:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <HAL_Init+0x74>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f814 	bl	80011cc <HAL_InitTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e002      	b.n	80011b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ae:	f7ff fe2f 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58024400 	.word	0x58024400
 80011c0:	08008734 	.word	0x08008734
 80011c4:	24000004 	.word	0x24000004
 80011c8:	24000000 	.word	0x24000000

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_InitTick+0x60>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e021      	b.n	8001224 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <HAL_InitTick+0x64>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_InitTick+0x60>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f94d 	bl	8001496 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f917 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <HAL_InitTick+0x68>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2400000c 	.word	0x2400000c
 8001230:	24000000 	.word	0x24000000
 8001234:	24000008 	.word	0x24000008

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	2400000c 	.word	0x2400000c
 800125c:	240001ac 	.word	0x240001ac

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	240001ac 	.word	0x240001ac

08001278 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_GetREVID+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0c1b      	lsrs	r3, r3, #16
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	5c001000 	.word	0x5c001000

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x40>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012b8:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	@ (80012d0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	05fa0000 	.word	0x05fa0000

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	@ (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	@ (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	@ (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	@ 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	@ 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	@ (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff29 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff40 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff90 	bl	8001384 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5f 	bl	8001330 <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff33 	bl	80012f4 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa4 	bl	80013ec <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e237      	b.n	8001932 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e22c      	b.n	8001932 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001650 <HAL_DMA_Abort_IT+0x1a0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d04a      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001654 <HAL_DMA_Abort_IT+0x1a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d045      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a59      	ldr	r2, [pc, #356]	@ (8001658 <HAL_DMA_Abort_IT+0x1a8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d040      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a58      	ldr	r2, [pc, #352]	@ (800165c <HAL_DMA_Abort_IT+0x1ac>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d03b      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a56      	ldr	r2, [pc, #344]	@ (8001660 <HAL_DMA_Abort_IT+0x1b0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d036      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a55      	ldr	r2, [pc, #340]	@ (8001664 <HAL_DMA_Abort_IT+0x1b4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d031      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a53      	ldr	r2, [pc, #332]	@ (8001668 <HAL_DMA_Abort_IT+0x1b8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d02c      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a52      	ldr	r2, [pc, #328]	@ (800166c <HAL_DMA_Abort_IT+0x1bc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d027      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a50      	ldr	r2, [pc, #320]	@ (8001670 <HAL_DMA_Abort_IT+0x1c0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d022      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a4f      	ldr	r2, [pc, #316]	@ (8001674 <HAL_DMA_Abort_IT+0x1c4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d01d      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a4d      	ldr	r2, [pc, #308]	@ (8001678 <HAL_DMA_Abort_IT+0x1c8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d018      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <HAL_DMA_Abort_IT+0x1cc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a4a      	ldr	r2, [pc, #296]	@ (8001680 <HAL_DMA_Abort_IT+0x1d0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00e      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a49      	ldr	r2, [pc, #292]	@ (8001684 <HAL_DMA_Abort_IT+0x1d4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d009      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a47      	ldr	r2, [pc, #284]	@ (8001688 <HAL_DMA_Abort_IT+0x1d8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d004      	beq.n	8001578 <HAL_DMA_Abort_IT+0xc8>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a46      	ldr	r2, [pc, #280]	@ (800168c <HAL_DMA_Abort_IT+0x1dc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_DMA_Abort_IT+0xcc>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_DMA_Abort_IT+0xce>
 800157c:	2300      	movs	r3, #0
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 8086 	beq.w	8001690 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2f      	ldr	r2, [pc, #188]	@ (8001650 <HAL_DMA_Abort_IT+0x1a0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d04a      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a2e      	ldr	r2, [pc, #184]	@ (8001654 <HAL_DMA_Abort_IT+0x1a4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d045      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001658 <HAL_DMA_Abort_IT+0x1a8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d040      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a2b      	ldr	r2, [pc, #172]	@ (800165c <HAL_DMA_Abort_IT+0x1ac>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d03b      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <HAL_DMA_Abort_IT+0x1b0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d036      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a28      	ldr	r2, [pc, #160]	@ (8001664 <HAL_DMA_Abort_IT+0x1b4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d031      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a26      	ldr	r2, [pc, #152]	@ (8001668 <HAL_DMA_Abort_IT+0x1b8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d02c      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a25      	ldr	r2, [pc, #148]	@ (800166c <HAL_DMA_Abort_IT+0x1bc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d027      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <HAL_DMA_Abort_IT+0x1c0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d022      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_DMA_Abort_IT+0x1c4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d01d      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <HAL_DMA_Abort_IT+0x1c8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d018      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1f      	ldr	r2, [pc, #124]	@ (800167c <HAL_DMA_Abort_IT+0x1cc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <HAL_DMA_Abort_IT+0x1d0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00e      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_DMA_Abort_IT+0x1d4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d009      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1a      	ldr	r2, [pc, #104]	@ (8001688 <HAL_DMA_Abort_IT+0x1d8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_DMA_Abort_IT+0x17c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_DMA_Abort_IT+0x1dc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d108      	bne.n	800163e <HAL_DMA_Abort_IT+0x18e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e178      	b.n	8001930 <HAL_DMA_Abort_IT+0x480>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e16f      	b.n	8001930 <HAL_DMA_Abort_IT+0x480>
 8001650:	40020010 	.word	0x40020010
 8001654:	40020028 	.word	0x40020028
 8001658:	40020040 	.word	0x40020040
 800165c:	40020058 	.word	0x40020058
 8001660:	40020070 	.word	0x40020070
 8001664:	40020088 	.word	0x40020088
 8001668:	400200a0 	.word	0x400200a0
 800166c:	400200b8 	.word	0x400200b8
 8001670:	40020410 	.word	0x40020410
 8001674:	40020428 	.word	0x40020428
 8001678:	40020440 	.word	0x40020440
 800167c:	40020458 	.word	0x40020458
 8001680:	40020470 	.word	0x40020470
 8001684:	40020488 	.word	0x40020488
 8001688:	400204a0 	.word	0x400204a0
 800168c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 020e 	bic.w	r2, r2, #14
 800169e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6c      	ldr	r2, [pc, #432]	@ (8001858 <HAL_DMA_Abort_IT+0x3a8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d04a      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a6b      	ldr	r2, [pc, #428]	@ (800185c <HAL_DMA_Abort_IT+0x3ac>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d045      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a69      	ldr	r2, [pc, #420]	@ (8001860 <HAL_DMA_Abort_IT+0x3b0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d040      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a68      	ldr	r2, [pc, #416]	@ (8001864 <HAL_DMA_Abort_IT+0x3b4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d03b      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a66      	ldr	r2, [pc, #408]	@ (8001868 <HAL_DMA_Abort_IT+0x3b8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d036      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a65      	ldr	r2, [pc, #404]	@ (800186c <HAL_DMA_Abort_IT+0x3bc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d031      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a63      	ldr	r2, [pc, #396]	@ (8001870 <HAL_DMA_Abort_IT+0x3c0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d02c      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a62      	ldr	r2, [pc, #392]	@ (8001874 <HAL_DMA_Abort_IT+0x3c4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d027      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a60      	ldr	r2, [pc, #384]	@ (8001878 <HAL_DMA_Abort_IT+0x3c8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d022      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a5f      	ldr	r2, [pc, #380]	@ (800187c <HAL_DMA_Abort_IT+0x3cc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d01d      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a5d      	ldr	r2, [pc, #372]	@ (8001880 <HAL_DMA_Abort_IT+0x3d0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d018      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a5c      	ldr	r2, [pc, #368]	@ (8001884 <HAL_DMA_Abort_IT+0x3d4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d013      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a5a      	ldr	r2, [pc, #360]	@ (8001888 <HAL_DMA_Abort_IT+0x3d8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00e      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a59      	ldr	r2, [pc, #356]	@ (800188c <HAL_DMA_Abort_IT+0x3dc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d009      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a57      	ldr	r2, [pc, #348]	@ (8001890 <HAL_DMA_Abort_IT+0x3e0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d004      	beq.n	8001740 <HAL_DMA_Abort_IT+0x290>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a56      	ldr	r2, [pc, #344]	@ (8001894 <HAL_DMA_Abort_IT+0x3e4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d108      	bne.n	8001752 <HAL_DMA_Abort_IT+0x2a2>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_DMA_Abort_IT+0x2b2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3c      	ldr	r2, [pc, #240]	@ (8001858 <HAL_DMA_Abort_IT+0x3a8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d072      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3a      	ldr	r2, [pc, #232]	@ (800185c <HAL_DMA_Abort_IT+0x3ac>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d06d      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a39      	ldr	r2, [pc, #228]	@ (8001860 <HAL_DMA_Abort_IT+0x3b0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d068      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a37      	ldr	r2, [pc, #220]	@ (8001864 <HAL_DMA_Abort_IT+0x3b4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d063      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a36      	ldr	r2, [pc, #216]	@ (8001868 <HAL_DMA_Abort_IT+0x3b8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a34      	ldr	r2, [pc, #208]	@ (800186c <HAL_DMA_Abort_IT+0x3bc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d059      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a33      	ldr	r2, [pc, #204]	@ (8001870 <HAL_DMA_Abort_IT+0x3c0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d054      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a31      	ldr	r2, [pc, #196]	@ (8001874 <HAL_DMA_Abort_IT+0x3c4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d04f      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a30      	ldr	r2, [pc, #192]	@ (8001878 <HAL_DMA_Abort_IT+0x3c8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04a      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2e      	ldr	r2, [pc, #184]	@ (800187c <HAL_DMA_Abort_IT+0x3cc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d045      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001880 <HAL_DMA_Abort_IT+0x3d0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d040      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001884 <HAL_DMA_Abort_IT+0x3d4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d03b      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2a      	ldr	r2, [pc, #168]	@ (8001888 <HAL_DMA_Abort_IT+0x3d8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d036      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a28      	ldr	r2, [pc, #160]	@ (800188c <HAL_DMA_Abort_IT+0x3dc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a27      	ldr	r2, [pc, #156]	@ (8001890 <HAL_DMA_Abort_IT+0x3e0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d02c      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	@ (8001894 <HAL_DMA_Abort_IT+0x3e4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d027      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a24      	ldr	r2, [pc, #144]	@ (8001898 <HAL_DMA_Abort_IT+0x3e8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d022      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a22      	ldr	r2, [pc, #136]	@ (800189c <HAL_DMA_Abort_IT+0x3ec>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <HAL_DMA_Abort_IT+0x3f0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d018      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1f      	ldr	r2, [pc, #124]	@ (80018a4 <HAL_DMA_Abort_IT+0x3f4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <HAL_DMA_Abort_IT+0x3f8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <HAL_DMA_Abort_IT+0x3fc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <HAL_DMA_Abort_IT+0x400>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Abort_IT+0x3a2>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	@ (80018b4 <HAL_DMA_Abort_IT+0x404>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d132      	bne.n	80018b8 <HAL_DMA_Abort_IT+0x408>
 8001852:	2301      	movs	r3, #1
 8001854:	e031      	b.n	80018ba <HAL_DMA_Abort_IT+0x40a>
 8001856:	bf00      	nop
 8001858:	40020010 	.word	0x40020010
 800185c:	40020028 	.word	0x40020028
 8001860:	40020040 	.word	0x40020040
 8001864:	40020058 	.word	0x40020058
 8001868:	40020070 	.word	0x40020070
 800186c:	40020088 	.word	0x40020088
 8001870:	400200a0 	.word	0x400200a0
 8001874:	400200b8 	.word	0x400200b8
 8001878:	40020410 	.word	0x40020410
 800187c:	40020428 	.word	0x40020428
 8001880:	40020440 	.word	0x40020440
 8001884:	40020458 	.word	0x40020458
 8001888:	40020470 	.word	0x40020470
 800188c:	40020488 	.word	0x40020488
 8001890:	400204a0 	.word	0x400204a0
 8001894:	400204b8 	.word	0x400204b8
 8001898:	58025408 	.word	0x58025408
 800189c:	5802541c 	.word	0x5802541c
 80018a0:	58025430 	.word	0x58025430
 80018a4:	58025444 	.word	0x58025444
 80018a8:	58025458 	.word	0x58025458
 80018ac:	5802546c 	.word	0x5802546c
 80018b0:	58025480 	.word	0x58025480
 80018b4:	58025494 	.word	0x58025494
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d028      	beq.n	8001910 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	2201      	movs	r2, #1
 80018de:	409a      	lsls	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80018ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00c      	beq.n	8001910 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001904:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800190e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop

0800193c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800194a:	b2db      	uxtb	r3, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001966:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <HAL_GPIO_Init+0x234>)
 8001968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800196a:	e194      	b.n	8001c96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8186 	beq.w	8001c90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d005      	beq.n	800199c <HAL_GPIO_Init+0x44>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d130      	bne.n	80019fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019d2:	2201      	movs	r2, #1
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 0201 	and.w	r2, r3, #1
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d017      	beq.n	8001a3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d123      	bne.n	8001a8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	69b9      	ldr	r1, [r7, #24]
 8001a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0203 	and.w	r2, r3, #3
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80e0 	beq.w	8001c90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_GPIO_Init+0x238>)
 8001ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8001b90 <HAL_GPIO_Init+0x238>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <HAL_GPIO_Init+0x238>)
 8001ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <HAL_GPIO_Init+0x23c>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_GPIO_Init+0x240>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d052      	beq.n	8001bc0 <HAL_GPIO_Init+0x268>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <HAL_GPIO_Init+0x244>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d031      	beq.n	8001b86 <HAL_GPIO_Init+0x22e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba0 <HAL_GPIO_Init+0x248>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02b      	beq.n	8001b82 <HAL_GPIO_Init+0x22a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba4 <HAL_GPIO_Init+0x24c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d025      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <HAL_GPIO_Init+0x250>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01f      	beq.n	8001b7a <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <HAL_GPIO_Init+0x254>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb0 <HAL_GPIO_Init+0x258>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <HAL_GPIO_Init+0x25c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x216>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <HAL_GPIO_Init+0x260>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x212>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_GPIO_Init+0x264>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x20e>
 8001b62:	2309      	movs	r3, #9
 8001b64:	e02d      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b66:	230a      	movs	r3, #10
 8001b68:	e02b      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	e029      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e027      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e025      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e023      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e021      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e01f      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e01d      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e01b      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b8a:	bf00      	nop
 8001b8c:	58000080 	.word	0x58000080
 8001b90:	58024400 	.word	0x58024400
 8001b94:	58000400 	.word	0x58000400
 8001b98:	58020000 	.word	0x58020000
 8001b9c:	58020400 	.word	0x58020400
 8001ba0:	58020800 	.word	0x58020800
 8001ba4:	58020c00 	.word	0x58020c00
 8001ba8:	58021000 	.word	0x58021000
 8001bac:	58021400 	.word	0x58021400
 8001bb0:	58021800 	.word	0x58021800
 8001bb4:	58021c00 	.word	0x58021c00
 8001bb8:	58022000 	.word	0x58022000
 8001bbc:	58022400 	.word	0x58022400
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f002 0203 	and.w	r2, r2, #3
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	4093      	lsls	r3, r2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd2:	4938      	ldr	r1, [pc, #224]	@ (8001cb4 <HAL_GPIO_Init+0x35c>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f47f ae63 	bne.w	800196c <HAL_GPIO_Init+0x14>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	@ 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	58000400 	.word	0x58000400

08001cb8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cc0:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_HSEM_FastTake+0x2c>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3320      	adds	r3, #32
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_HSEM_FastTake+0x30>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	58026400 	.word	0x58026400
 8001ce8:	80000300 	.word	0x80000300

08001cec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001cf6:	4906      	ldr	r1, [pc, #24]	@ (8001d10 <HAL_HSEM_Release+0x24>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	58026400 	.word	0x58026400

08001d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e08b      	b.n	8001e3e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff f882 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2224      	movs	r2, #36	@ 0x24
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	e006      	b.n	8001d9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d108      	bne.n	8001db6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	e007      	b.n	8001dc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_I2C_Init+0x134>)
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69d9      	ldr	r1, [r3, #28]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	02008000 	.word	0x02008000

08001e4c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	817b      	strh	r3, [r7, #10]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	813b      	strh	r3, [r7, #8]
 8001e62:	4613      	mov	r3, r2
 8001e64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d16a      	bne.n	8001f48 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_I2C_Mem_Write_IT+0x32>
 8001e78:	8bbb      	ldrh	r3, [r7, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e05f      	b.n	8001f4a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e98:	d101      	bne.n	8001e9e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e055      	b.n	8001f4a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_I2C_Mem_Write_IT+0x60>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e04e      	b.n	8001f4a <HAL_I2C_Mem_Write_IT+0xfe>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2221      	movs	r2, #33	@ 0x21
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2240      	movs	r2, #64	@ 0x40
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8bba      	ldrh	r2, [r7, #28]
 8001eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	@ (8001f54 <HAL_I2C_Mem_Write_IT+0x108>)
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001ee6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001ee8:	897a      	ldrh	r2, [r7, #10]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d109      	bne.n	8001f08 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ef4:	893b      	ldrh	r3, [r7, #8]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f06:	e00b      	b.n	8001f20 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001f16:	893b      	ldrh	r3, [r7, #8]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	8979      	ldrh	r1, [r7, #10]
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <HAL_I2C_Mem_Write_IT+0x110>)
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f001 fd66 	bl	8003a00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f001 fd90 	bl	8003a64 <I2C_Enable_IRQ>

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	ffff0000 	.word	0xffff0000
 8001f58:	0800221d 	.word	0x0800221d
 8001f5c:	80002000 	.word	0x80002000

08001f60 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	817b      	strh	r3, [r7, #10]
 8001f72:	460b      	mov	r3, r1
 8001f74:	813b      	strh	r3, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d166      	bne.n	8002054 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <HAL_I2C_Mem_Read_IT+0x32>
 8001f8c:	8bbb      	ldrh	r3, [r7, #28]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d105      	bne.n	8001f9e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e05b      	b.n	8002056 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e051      	b.n	8002056 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_I2C_Mem_Read_IT+0x60>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e04a      	b.n	8002056 <HAL_I2C_Mem_Read_IT+0xf6>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2222      	movs	r2, #34	@ 0x22
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2240      	movs	r2, #64	@ 0x40
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8bba      	ldrh	r2, [r7, #28]
 8001fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_I2C_Mem_Read_IT+0x100>)
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8002064 <HAL_I2C_Mem_Read_IT+0x104>)
 8001ff4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001ff6:	897a      	ldrh	r2, [r7, #10]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d109      	bne.n	8002016 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002002:	893b      	ldrh	r3, [r7, #8]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	651a      	str	r2, [r3, #80]	@ 0x50
 8002014:	e00b      	b.n	800202e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002016:	893b      	ldrh	r3, [r7, #8]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29b      	uxth	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002024:	893b      	ldrh	r3, [r7, #8]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	8979      	ldrh	r1, [r7, #10]
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_I2C_Mem_Read_IT+0x108>)
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2300      	movs	r3, #0
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f001 fce0 	bl	8003a00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002048:	2101      	movs	r1, #1
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f001 fd0a 	bl	8003a64 <I2C_Enable_IRQ>

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	ffff0000 	.word	0xffff0000
 8002064:	0800221d 	.word	0x0800221d
 8002068:	80002000 	.word	0x80002000

0800206c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
  }
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00f      	beq.n	80020e2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00f      	beq.n	800210c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f043 0208 	orr.w	r2, r3, #8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800210a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00f      	beq.n	8002136 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f043 0202 	orr.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002134:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 030b 	and.w	r3, r3, #11
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f001 faff 	bl	800374c <I2C_ITError>
  }
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
 80021b2:	4613      	mov	r3, r2
 80021b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002228:	4b8d      	ldr	r3, [pc, #564]	@ (8002460 <I2C_Mem_ISR_IT+0x244>)
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <I2C_Mem_ISR_IT+0x22>
 800223a:	2302      	movs	r3, #2
 800223c:	e10c      	b.n	8002458 <I2C_Mem_ISR_IT+0x23c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d012      	beq.n	8002276 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2210      	movs	r2, #16
 8002260:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f043 0204 	orr.w	r2, r3, #4
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f001 fb83 	bl	800397a <I2C_Flush_TXDR>
 8002274:	e0dd      	b.n	8002432 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d022      	beq.n	80022c6 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01d      	beq.n	80022c6 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022c4:	e0b5      	b.n	8002432 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02c      	beq.n	800232a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d027      	beq.n	800232a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d118      	bne.n	8002316 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002314:	e08d      	b.n	8002432 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800231e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f04f 32ff 	mov.w	r2, #4294967295
 8002326:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002328:	e083      	b.n	8002432 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03c      	beq.n	80023ae <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800233a:	2b00      	cmp	r3, #0
 800233c:	d037      	beq.n	80023ae <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02c      	beq.n	80023a2 <I2C_Mem_ISR_IT+0x186>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d128      	bne.n	80023a2 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2bff      	cmp	r3, #255	@ 0xff
 8002358:	d910      	bls.n	800237c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	@ 0xff
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002364:	b299      	uxth	r1, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236a:	b2da      	uxtb	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f001 fb43 	bl	8003a00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237a:	e017      	b.n	80023ac <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	b299      	uxth	r1, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	b2da      	uxtb	r2, r3
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f001 fb30 	bl	8003a00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a0:	e004      	b.n	80023ac <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023a2:	2140      	movs	r1, #64	@ 0x40
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f001 f9d1 	bl	800374c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023aa:	e042      	b.n	8002432 <I2C_Mem_ISR_IT+0x216>
 80023ac:	e041      	b.n	8002432 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03c      	beq.n	8002432 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d037      	beq.n	8002432 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023c2:	2101      	movs	r1, #1
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f001 fbd1 	bl	8003b6c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023ca:	2102      	movs	r1, #2
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f001 fb49 	bl	8003a64 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b22      	cmp	r3, #34	@ 0x22
 80023dc:	d101      	bne.n	80023e2 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80023de:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <I2C_Mem_ISR_IT+0x248>)
 80023e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2bff      	cmp	r3, #255	@ 0xff
 80023ea:	d910      	bls.n	800240e <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	22ff      	movs	r2, #255	@ 0xff
 80023f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	b299      	uxth	r1, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f001 fafa 	bl	8003a00 <I2C_TransferConfig>
 800240c:	e011      	b.n	8002432 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241c:	b299      	uxth	r1, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	b2da      	uxtb	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f001 fae7 	bl	8003a00 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fe0f 	bl	800306c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	80002000 	.word	0x80002000
 8002464:	80002400 	.word	0x80002400

08002468 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <I2C_Slave_ISR_IT+0x24>
 8002488:	2302      	movs	r3, #2
 800248a:	e0e2      	b.n	8002652 <I2C_Slave_ISR_IT+0x1ea>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fea6 	bl	80031fc <I2C_ITSlaveCplt>
 80024b0:	e0ca      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d04b      	beq.n	8002554 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d046      	beq.n	8002554 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d128      	bne.n	8002522 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b28      	cmp	r3, #40	@ 0x28
 80024da:	d108      	bne.n	80024ee <I2C_Slave_ISR_IT+0x86>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024e2:	d104      	bne.n	80024ee <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024e4:	6939      	ldr	r1, [r7, #16]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f001 f8dc 	bl	80036a4 <I2C_ITListenCplt>
 80024ec:	e031      	b.n	8002552 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b29      	cmp	r3, #41	@ 0x29
 80024f8:	d10e      	bne.n	8002518 <I2C_Slave_ISR_IT+0xb0>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002500:	d00a      	beq.n	8002518 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2210      	movs	r2, #16
 8002508:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f001 fa35 	bl	800397a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fd4e 	bl	8002fb2 <I2C_ITSlaveSeqCplt>
 8002516:	e01c      	b.n	8002552 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2210      	movs	r2, #16
 800251e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002520:	e08f      	b.n	8002642 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2210      	movs	r2, #16
 8002528:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <I2C_Slave_ISR_IT+0xdc>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002542:	d17e      	bne.n	8002642 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002548:	4619      	mov	r1, r3
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f001 f8fe 	bl	800374c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002550:	e077      	b.n	8002642 <I2C_Slave_ISR_IT+0x1da>
 8002552:	e076      	b.n	8002642 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02f      	beq.n	80025be <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02a      	beq.n	80025be <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d14b      	bne.n	8002646 <I2C_Slave_ISR_IT+0x1de>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025b4:	d047      	beq.n	8002646 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fcfb 	bl	8002fb2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80025bc:	e043      	b.n	8002646 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025d2:	6939      	ldr	r1, [r7, #16]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fc2b 	bl	8002e30 <I2C_ITAddrCplt>
 80025da:	e035      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d030      	beq.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d02b      	beq.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	@ 0x28
 800262a:	e00d      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002632:	d002      	beq.n	800263a <I2C_Slave_ISR_IT+0x1d2>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fcb9 	bl	8002fb2 <I2C_ITSlaveSeqCplt>
 8002640:	e002      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002646:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b088      	sub	sp, #32
 800265e:	af02      	add	r7, sp, #8
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <I2C_Master_ISR_DMA+0x1a>
 8002670:	2302      	movs	r3, #2
 8002672:	e0d9      	b.n	8002828 <I2C_Master_ISR_DMA+0x1ce>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800268c:	2b00      	cmp	r3, #0
 800268e:	d011      	beq.n	80026b4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2210      	movs	r2, #16
 8002696:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80026a4:	2120      	movs	r1, #32
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f001 f9dc 	bl	8003a64 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f001 f964 	bl	800397a <I2C_Flush_TXDR>
 80026b2:	e0b4      	b.n	800281e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d071      	beq.n	80027a2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d06c      	beq.n	80027a2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d04e      	beq.n	8002780 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2bff      	cmp	r3, #255	@ 0xff
 80026f8:	d906      	bls.n	8002708 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	22ff      	movs	r2, #255	@ 0xff
 80026fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e010      	b.n	800272a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800271a:	d003      	beq.n	8002724 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e002      	b.n	800272a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002728:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	b2da      	uxtb	r2, r3
 8002730:	8a79      	ldrh	r1, [r7, #18]
 8002732:	2300      	movs	r3, #0
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f001 f961 	bl	8003a00 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b22      	cmp	r3, #34	@ 0x22
 800275a:	d108      	bne.n	800276e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800276a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800276c:	e057      	b.n	800281e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800277c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800277e:	e04e      	b.n	800281e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800278e:	d003      	beq.n	8002798 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fbd1 	bl	8002f38 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002796:	e042      	b.n	800281e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002798:	2140      	movs	r1, #64	@ 0x40
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 ffd6 	bl	800374c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80027a0:	e03d      	b.n	800281e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d028      	beq.n	80027fe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d023      	beq.n	80027fe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d119      	bne.n	80027f4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027ce:	d025      	beq.n	800281c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027d8:	d108      	bne.n	80027ec <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027e8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80027ea:	e017      	b.n	800281c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fba3 	bl	8002f38 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80027f2:	e013      	b.n	800281c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80027f4:	2140      	movs	r1, #64	@ 0x40
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 ffa8 	bl	800374c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027fc:	e00e      	b.n	800281c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fc29 	bl	800306c <I2C_ITMasterCplt>
 800281a:	e000      	b.n	800281e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800281c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800283c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a74 <I2C_Mem_ISR_DMA+0x244>)
 800283e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <I2C_Mem_ISR_DMA+0x1e>
 800284a:	2302      	movs	r3, #2
 800284c:	e10e      	b.n	8002a6c <I2C_Mem_ISR_DMA+0x23c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d016      	beq.n	800288e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002866:	2b00      	cmp	r3, #0
 8002868:	d011      	beq.n	800288e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2210      	movs	r2, #16
 8002870:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800287e:	2120      	movs	r1, #32
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f001 f8ef 	bl	8003a64 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f001 f877 	bl	800397a <I2C_Flush_TXDR>
 800288c:	e0e9      	b.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00e      	beq.n	80028b6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295
 80028b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80028b4:	e0d5      	b.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d05f      	beq.n	8002980 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d05a      	beq.n	8002980 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028ca:	2101      	movs	r1, #1
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f001 f94d 	bl	8003b6c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80028d2:	2110      	movs	r1, #16
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f001 f8c5 	bl	8003a64 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d048      	beq.n	8002976 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2bff      	cmp	r3, #255	@ 0xff
 80028ec:	d910      	bls.n	8002910 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	@ 0xff
 80028f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f8:	b299      	uxth	r1, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f001 f879 	bl	8003a00 <I2C_TransferConfig>
 800290e:	e011      	b.n	8002934 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	b299      	uxth	r1, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f001 f866 	bl	8003a00 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b22      	cmp	r3, #34	@ 0x22
 8002950:	d108      	bne.n	8002964 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002960:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002962:	e07e      	b.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002972:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002974:	e075      	b.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002976:	2140      	movs	r1, #64	@ 0x40
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fee7 	bl	800374c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800297e:	e070      	b.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d05d      	beq.n	8002a46 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002990:	2b00      	cmp	r3, #0
 8002992:	d058      	beq.n	8002a46 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002994:	2101      	movs	r1, #1
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f001 f8e8 	bl	8003b6c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800299c:	2110      	movs	r1, #16
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f001 f860 	bl	8003a64 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b22      	cmp	r3, #34	@ 0x22
 80029ae:	d101      	bne.n	80029b4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80029b0:	4b31      	ldr	r3, [pc, #196]	@ (8002a78 <I2C_Mem_ISR_DMA+0x248>)
 80029b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2bff      	cmp	r3, #255	@ 0xff
 80029bc:	d910      	bls.n	80029e0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	22ff      	movs	r2, #255	@ 0xff
 80029c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	b299      	uxth	r1, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f001 f811 	bl	8003a00 <I2C_TransferConfig>
 80029de:	e011      	b.n	8002a04 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	b299      	uxth	r1, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fffe 	bl	8003a00 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b22      	cmp	r3, #34	@ 0x22
 8002a20:	d108      	bne.n	8002a34 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a30:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a32:	e016      	b.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a44:	e00d      	b.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fb05 	bl	800306c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	80002000 	.word	0x80002000
 8002a78:	80002400 	.word	0x80002400

08002a7c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <I2C_Slave_ISR_DMA+0x24>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e1c2      	b.n	8002e26 <I2C_Slave_ISR_DMA+0x3aa>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fb9c 	bl	80031fc <I2C_ITSlaveCplt>
 8002ac4:	e1aa      	b.n	8002e1c <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8197 	beq.w	8002e00 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8191 	beq.w	8002e00 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 817f 	beq.w	8002df2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d07b      	beq.n	8002bf4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d076      	beq.n	8002bf4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a74      	ldr	r2, [pc, #464]	@ (8002ce0 <I2C_Slave_ISR_DMA+0x264>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d059      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a72      	ldr	r2, [pc, #456]	@ (8002ce4 <I2C_Slave_ISR_DMA+0x268>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d053      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a70      	ldr	r2, [pc, #448]	@ (8002ce8 <I2C_Slave_ISR_DMA+0x26c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d04d      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6e      	ldr	r2, [pc, #440]	@ (8002cec <I2C_Slave_ISR_DMA+0x270>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d047      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a6c      	ldr	r2, [pc, #432]	@ (8002cf0 <I2C_Slave_ISR_DMA+0x274>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d041      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf4 <I2C_Slave_ISR_DMA+0x278>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d03b      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a68      	ldr	r2, [pc, #416]	@ (8002cf8 <I2C_Slave_ISR_DMA+0x27c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d035      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a66      	ldr	r2, [pc, #408]	@ (8002cfc <I2C_Slave_ISR_DMA+0x280>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d02f      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a64      	ldr	r2, [pc, #400]	@ (8002d00 <I2C_Slave_ISR_DMA+0x284>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d029      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a62      	ldr	r2, [pc, #392]	@ (8002d04 <I2C_Slave_ISR_DMA+0x288>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d023      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a60      	ldr	r2, [pc, #384]	@ (8002d08 <I2C_Slave_ISR_DMA+0x28c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01d      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5e      	ldr	r2, [pc, #376]	@ (8002d0c <I2C_Slave_ISR_DMA+0x290>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d017      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002d10 <I2C_Slave_ISR_DMA+0x294>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d011      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d14 <I2C_Slave_ISR_DMA+0x298>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00b      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a58      	ldr	r2, [pc, #352]	@ (8002d18 <I2C_Slave_ISR_DMA+0x29c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d005      	beq.n	8002bc6 <I2C_Slave_ISR_DMA+0x14a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a56      	ldr	r2, [pc, #344]	@ (8002d1c <I2C_Slave_ISR_DMA+0x2a0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d109      	bne.n	8002bda <I2C_Slave_ISR_DMA+0x15e>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	e008      	b.n	8002bec <I2C_Slave_ISR_DMA+0x170>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 809e 	beq.w	8002d3a <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8098 	beq.w	8002d3a <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a33      	ldr	r2, [pc, #204]	@ (8002ce0 <I2C_Slave_ISR_DMA+0x264>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d059      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a31      	ldr	r2, [pc, #196]	@ (8002ce4 <I2C_Slave_ISR_DMA+0x268>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d053      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce8 <I2C_Slave_ISR_DMA+0x26c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d04d      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2d      	ldr	r2, [pc, #180]	@ (8002cec <I2C_Slave_ISR_DMA+0x270>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d047      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2b      	ldr	r2, [pc, #172]	@ (8002cf0 <I2C_Slave_ISR_DMA+0x274>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d041      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a29      	ldr	r2, [pc, #164]	@ (8002cf4 <I2C_Slave_ISR_DMA+0x278>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a27      	ldr	r2, [pc, #156]	@ (8002cf8 <I2C_Slave_ISR_DMA+0x27c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d035      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a25      	ldr	r2, [pc, #148]	@ (8002cfc <I2C_Slave_ISR_DMA+0x280>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02f      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <I2C_Slave_ISR_DMA+0x284>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d029      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <I2C_Slave_ISR_DMA+0x288>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d023      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <I2C_Slave_ISR_DMA+0x28c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <I2C_Slave_ISR_DMA+0x290>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d017      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d10 <I2C_Slave_ISR_DMA+0x294>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d011      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a19      	ldr	r2, [pc, #100]	@ (8002d14 <I2C_Slave_ISR_DMA+0x298>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a17      	ldr	r2, [pc, #92]	@ (8002d18 <I2C_Slave_ISR_DMA+0x29c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d005      	beq.n	8002cca <I2C_Slave_ISR_DMA+0x24e>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <I2C_Slave_ISR_DMA+0x2a0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d12a      	bne.n	8002d20 <I2C_Slave_ISR_DMA+0x2a4>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	e029      	b.n	8002d32 <I2C_Slave_ISR_DMA+0x2b6>
 8002cde:	bf00      	nop
 8002ce0:	40020010 	.word	0x40020010
 8002ce4:	40020028 	.word	0x40020028
 8002ce8:	40020040 	.word	0x40020040
 8002cec:	40020058 	.word	0x40020058
 8002cf0:	40020070 	.word	0x40020070
 8002cf4:	40020088 	.word	0x40020088
 8002cf8:	400200a0 	.word	0x400200a0
 8002cfc:	400200b8 	.word	0x400200b8
 8002d00:	40020410 	.word	0x40020410
 8002d04:	40020428 	.word	0x40020428
 8002d08:	40020440 	.word	0x40020440
 8002d0c:	40020458 	.word	0x40020458
 8002d10:	40020470 	.word	0x40020470
 8002d14:	40020488 	.word	0x40020488
 8002d18:	400204a0 	.word	0x400204a0
 8002d1c:	400204b8 	.word	0x400204b8
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d128      	bne.n	8002d92 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b28      	cmp	r3, #40	@ 0x28
 8002d4a:	d108      	bne.n	8002d5e <I2C_Slave_ISR_DMA+0x2e2>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d52:	d104      	bne.n	8002d5e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fca4 	bl	80036a4 <I2C_ITListenCplt>
 8002d5c:	e048      	b.n	8002df0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b29      	cmp	r3, #41	@ 0x29
 8002d68:	d10e      	bne.n	8002d88 <I2C_Slave_ISR_DMA+0x30c>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d70:	d00a      	beq.n	8002d88 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fdfd 	bl	800397a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f916 	bl	8002fb2 <I2C_ITSlaveSeqCplt>
 8002d86:	e033      	b.n	8002df0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002d90:	e034      	b.n	8002dfc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2210      	movs	r2, #16
 8002d98:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f043 0204 	orr.w	r2, r3, #4
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <I2C_Slave_ISR_DMA+0x340>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dba:	d11f      	bne.n	8002dfc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b21      	cmp	r3, #33	@ 0x21
 8002dc0:	d002      	beq.n	8002dc8 <I2C_Slave_ISR_DMA+0x34c>
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b29      	cmp	r3, #41	@ 0x29
 8002dc6:	d103      	bne.n	8002dd0 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2221      	movs	r2, #33	@ 0x21
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dce:	e008      	b.n	8002de2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b22      	cmp	r3, #34	@ 0x22
 8002dd4:	d002      	beq.n	8002ddc <I2C_Slave_ISR_DMA+0x360>
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
 8002dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dda:	d102      	bne.n	8002de2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2222      	movs	r2, #34	@ 0x22
 8002de0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	4619      	mov	r1, r3
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fcaf 	bl	800374c <I2C_ITError>
      if (treatdmanack == 1U)
 8002dee:	e005      	b.n	8002dfc <I2C_Slave_ISR_DMA+0x380>
 8002df0:	e004      	b.n	8002dfc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2210      	movs	r2, #16
 8002df8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dfa:	e00f      	b.n	8002e1c <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8002dfc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dfe:	e00d      	b.n	8002e1c <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f80a 	bl	8002e30 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop

08002e30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e46:	2b28      	cmp	r3, #40	@ 0x28
 8002e48:	d16a      	bne.n	8002f20 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e68:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e76:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e84:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d138      	bne.n	8002f00 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e8e:	897b      	ldrh	r3, [r7, #10]
 8002e90:	09db      	lsrs	r3, r3, #7
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	89bb      	ldrh	r3, [r7, #12]
 8002e96:	4053      	eors	r3, r2
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f003 0306 	and.w	r3, r3, #6
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11c      	bne.n	8002edc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ea2:	897b      	ldrh	r3, [r7, #10]
 8002ea4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d13b      	bne.n	8002f30 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ece:	89ba      	ldrh	r2, [r7, #12]
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff f966 	bl	80021a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002eda:	e029      	b.n	8002f30 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ee0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fe41 	bl	8003b6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ef2:	89ba      	ldrh	r2, [r7, #12]
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff f954 	bl	80021a6 <HAL_I2C_AddrCallback>
}
 8002efe:	e017      	b.n	8002f30 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fe31 	bl	8003b6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f12:	89ba      	ldrh	r2, [r7, #12]
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff f944 	bl	80021a6 <HAL_I2C_AddrCallback>
}
 8002f1e:	e007      	b.n	8002f30 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2208      	movs	r2, #8
 8002f26:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b21      	cmp	r3, #33	@ 0x21
 8002f52:	d115      	bne.n	8002f80 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2211      	movs	r2, #17
 8002f60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f68:	2101      	movs	r1, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fdfe 	bl	8003b6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff f8ec 	bl	8002156 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f7e:	e014      	b.n	8002faa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2212      	movs	r2, #18
 8002f8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f94:	2102      	movs	r1, #2
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fde8 	bl	8003b6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff f8e0 	bl	800216a <HAL_I2C_MasterRxCpltCallback>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e00c      	b.n	8003000 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b29      	cmp	r3, #41	@ 0x29
 800300a:	d112      	bne.n	8003032 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2228      	movs	r2, #40	@ 0x28
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2221      	movs	r2, #33	@ 0x21
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800301a:	2101      	movs	r1, #1
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fda5 	bl	8003b6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff f8a7 	bl	800217e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003030:	e017      	b.n	8003062 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b2a      	cmp	r3, #42	@ 0x2a
 800303c:	d111      	bne.n	8003062 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2228      	movs	r2, #40	@ 0x28
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2222      	movs	r2, #34	@ 0x22
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800304c:	2102      	movs	r1, #2
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fd8c 	bl	8003b6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff f898 	bl	8002192 <HAL_I2C_SlaveRxCpltCallback>
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b21      	cmp	r3, #33	@ 0x21
 800308c:	d107      	bne.n	800309e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800308e:	2101      	movs	r1, #1
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fd6b 	bl	8003b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2211      	movs	r2, #17
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
 800309c:	e00c      	b.n	80030b8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b22      	cmp	r3, #34	@ 0x22
 80030a8:	d106      	bne.n	80030b8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030aa:	2102      	movs	r1, #2
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fd5d 	bl	8003b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2212      	movs	r2, #18
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4b4c      	ldr	r3, [pc, #304]	@ (80031f4 <I2C_ITMasterCplt+0x188>)
 80030c4:	400b      	ands	r3, r1
 80030c6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a49      	ldr	r2, [pc, #292]	@ (80031f8 <I2C_ITMasterCplt+0x18c>)
 80030d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2210      	movs	r2, #16
 80030e4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b60      	cmp	r3, #96	@ 0x60
 80030fc:	d10a      	bne.n	8003114 <I2C_ITMasterCplt+0xa8>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	b2db      	uxtb	r3, r3
 8003110:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003112:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fc30 	bl	800397a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b60      	cmp	r3, #96	@ 0x60
 800312a:	d002      	beq.n	8003132 <I2C_ITMasterCplt+0xc6>
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fb07 	bl	800374c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800313e:	e054      	b.n	80031ea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b21      	cmp	r3, #33	@ 0x21
 800314a:	d124      	bne.n	8003196 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b40      	cmp	r3, #64	@ 0x40
 8003164:	d10b      	bne.n	800317e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd fe18 	bl	8000dac <HAL_I2C_MemTxCpltCallback>
}
 800317c:	e035      	b.n	80031ea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe ffe1 	bl	8002156 <HAL_I2C_MasterTxCpltCallback>
}
 8003194:	e029      	b.n	80031ea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b22      	cmp	r3, #34	@ 0x22
 80031a0:	d123      	bne.n	80031ea <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d10b      	bne.n	80031d4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fd fe03 	bl	8000dd8 <HAL_I2C_MemRxCpltCallback>
}
 80031d2:	e00a      	b.n	80031ea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe ffc0 	bl	800216a <HAL_I2C_MasterRxCpltCallback>
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	fe00e800 	.word	0xfe00e800
 80031f8:	ffff0000 	.word	0xffff0000

080031fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2220      	movs	r2, #32
 8003226:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003228:	7afb      	ldrb	r3, [r7, #11]
 800322a:	2b21      	cmp	r3, #33	@ 0x21
 800322c:	d002      	beq.n	8003234 <I2C_ITSlaveCplt+0x38>
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	2b29      	cmp	r3, #41	@ 0x29
 8003232:	d108      	bne.n	8003246 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003234:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fc97 	bl	8003b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2221      	movs	r2, #33	@ 0x21
 8003242:	631a      	str	r2, [r3, #48]	@ 0x30
 8003244:	e019      	b.n	800327a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	2b22      	cmp	r3, #34	@ 0x22
 800324a:	d002      	beq.n	8003252 <I2C_ITSlaveCplt+0x56>
 800324c:	7afb      	ldrb	r3, [r7, #11]
 800324e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003250:	d108      	bne.n	8003264 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003252:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fc88 	bl	8003b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2222      	movs	r2, #34	@ 0x22
 8003260:	631a      	str	r2, [r3, #48]	@ 0x30
 8003262:	e00a      	b.n	800327a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	2b28      	cmp	r3, #40	@ 0x28
 8003268:	d107      	bne.n	800327a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800326a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fc7c 	bl	8003b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003288:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b7f      	ldr	r3, [pc, #508]	@ (8003494 <I2C_ITSlaveCplt+0x298>)
 8003296:	400b      	ands	r3, r1
 8003298:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fb6d 	bl	800397a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d07a      	beq.n	80033a0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 8111 	beq.w	80034e6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a73      	ldr	r2, [pc, #460]	@ (8003498 <I2C_ITSlaveCplt+0x29c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d059      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a71      	ldr	r2, [pc, #452]	@ (800349c <I2C_ITSlaveCplt+0x2a0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d053      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6f      	ldr	r2, [pc, #444]	@ (80034a0 <I2C_ITSlaveCplt+0x2a4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d04d      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a6d      	ldr	r2, [pc, #436]	@ (80034a4 <I2C_ITSlaveCplt+0x2a8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d047      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6b      	ldr	r2, [pc, #428]	@ (80034a8 <I2C_ITSlaveCplt+0x2ac>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d041      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a69      	ldr	r2, [pc, #420]	@ (80034ac <I2C_ITSlaveCplt+0x2b0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03b      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a67      	ldr	r2, [pc, #412]	@ (80034b0 <I2C_ITSlaveCplt+0x2b4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d035      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a65      	ldr	r2, [pc, #404]	@ (80034b4 <I2C_ITSlaveCplt+0x2b8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02f      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a63      	ldr	r2, [pc, #396]	@ (80034b8 <I2C_ITSlaveCplt+0x2bc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d029      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a61      	ldr	r2, [pc, #388]	@ (80034bc <I2C_ITSlaveCplt+0x2c0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d023      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a5f      	ldr	r2, [pc, #380]	@ (80034c0 <I2C_ITSlaveCplt+0x2c4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5d      	ldr	r2, [pc, #372]	@ (80034c4 <I2C_ITSlaveCplt+0x2c8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d017      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5b      	ldr	r2, [pc, #364]	@ (80034c8 <I2C_ITSlaveCplt+0x2cc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d011      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a59      	ldr	r2, [pc, #356]	@ (80034cc <I2C_ITSlaveCplt+0x2d0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00b      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a57      	ldr	r2, [pc, #348]	@ (80034d0 <I2C_ITSlaveCplt+0x2d4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d005      	beq.n	8003384 <I2C_ITSlaveCplt+0x188>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a55      	ldr	r2, [pc, #340]	@ (80034d4 <I2C_ITSlaveCplt+0x2d8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d105      	bne.n	8003390 <I2C_ITSlaveCplt+0x194>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	b29b      	uxth	r3, r3
 800338e:	e004      	b.n	800339a <I2C_ITSlaveCplt+0x19e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	b29b      	uxth	r3, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800339e:	e0a2      	b.n	80034e6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 809d 	beq.w	80034e6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8090 	beq.w	80034e6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a32      	ldr	r2, [pc, #200]	@ (8003498 <I2C_ITSlaveCplt+0x29c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d059      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a30      	ldr	r2, [pc, #192]	@ (800349c <I2C_ITSlaveCplt+0x2a0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d053      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2e      	ldr	r2, [pc, #184]	@ (80034a0 <I2C_ITSlaveCplt+0x2a4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d04d      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2c      	ldr	r2, [pc, #176]	@ (80034a4 <I2C_ITSlaveCplt+0x2a8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d047      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2a      	ldr	r2, [pc, #168]	@ (80034a8 <I2C_ITSlaveCplt+0x2ac>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d041      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a28      	ldr	r2, [pc, #160]	@ (80034ac <I2C_ITSlaveCplt+0x2b0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a26      	ldr	r2, [pc, #152]	@ (80034b0 <I2C_ITSlaveCplt+0x2b4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d035      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a24      	ldr	r2, [pc, #144]	@ (80034b4 <I2C_ITSlaveCplt+0x2b8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02f      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <I2C_ITSlaveCplt+0x2bc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d029      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a20      	ldr	r2, [pc, #128]	@ (80034bc <I2C_ITSlaveCplt+0x2c0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d023      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1e      	ldr	r2, [pc, #120]	@ (80034c0 <I2C_ITSlaveCplt+0x2c4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1c      	ldr	r2, [pc, #112]	@ (80034c4 <I2C_ITSlaveCplt+0x2c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d017      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <I2C_ITSlaveCplt+0x2cc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d011      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <I2C_ITSlaveCplt+0x2d0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00b      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a16      	ldr	r2, [pc, #88]	@ (80034d0 <I2C_ITSlaveCplt+0x2d4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d005      	beq.n	8003486 <I2C_ITSlaveCplt+0x28a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a14      	ldr	r2, [pc, #80]	@ (80034d4 <I2C_ITSlaveCplt+0x2d8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d128      	bne.n	80034d8 <I2C_ITSlaveCplt+0x2dc>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	b29b      	uxth	r3, r3
 8003490:	e027      	b.n	80034e2 <I2C_ITSlaveCplt+0x2e6>
 8003492:	bf00      	nop
 8003494:	fe00e800 	.word	0xfe00e800
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	f043 0204 	orr.w	r2, r3, #4
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d049      	beq.n	80035e6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003558:	2b00      	cmp	r3, #0
 800355a:	d044      	beq.n	80035e6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d128      	bne.n	80035b8 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b28      	cmp	r3, #40	@ 0x28
 8003570:	d108      	bne.n	8003584 <I2C_ITSlaveCplt+0x388>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003578:	d104      	bne.n	8003584 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800357a:	6979      	ldr	r1, [r7, #20]
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f891 	bl	80036a4 <I2C_ITListenCplt>
 8003582:	e030      	b.n	80035e6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b29      	cmp	r3, #41	@ 0x29
 800358e:	d10e      	bne.n	80035ae <I2C_ITSlaveCplt+0x3b2>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003596:	d00a      	beq.n	80035ae <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2210      	movs	r2, #16
 800359e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f9ea 	bl	800397a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fd03 	bl	8002fb2 <I2C_ITSlaveSeqCplt>
 80035ac:	e01b      	b.n	80035e6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2210      	movs	r2, #16
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	e016      	b.n	80035e6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2210      	movs	r2, #16
 80035be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	f043 0204 	orr.w	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <I2C_ITSlaveCplt+0x3de>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035d8:	d105      	bne.n	80035e6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8b3 	bl	800374c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8a2 	bl	800374c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b28      	cmp	r3, #40	@ 0x28
 8003612:	d141      	bne.n	8003698 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f844 	bl	80036a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800361c:	e03c      	b.n	8003698 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003626:	d014      	beq.n	8003652 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff fcc2 	bl	8002fb2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1b      	ldr	r2, [pc, #108]	@ (80036a0 <I2C_ITSlaveCplt+0x4a4>)
 8003632:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe fdb9 	bl	80021c2 <HAL_I2C_ListenCpltCallback>
}
 8003650:	e022      	b.n	8003698 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b22      	cmp	r3, #34	@ 0x22
 800365c:	d10e      	bne.n	800367c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fe fd8c 	bl	8002192 <HAL_I2C_SlaveRxCpltCallback>
}
 800367a:	e00d      	b.n	8003698 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe fd73 	bl	800217e <HAL_I2C_SlaveTxCpltCallback>
}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	ffff0000 	.word	0xffff0000

080036a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a25      	ldr	r2, [pc, #148]	@ (8003748 <I2C_ITListenCplt+0xa4>)
 80036b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d022      	beq.n	8003720 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d012      	beq.n	8003720 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003718:	f043 0204 	orr.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003720:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fa21 	bl	8003b6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2210      	movs	r2, #16
 8003730:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fe fd41 	bl	80021c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	ffff0000 	.word	0xffff0000

0800374c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a6d      	ldr	r2, [pc, #436]	@ (8003920 <I2C_ITError+0x1d4>)
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b28      	cmp	r3, #40	@ 0x28
 8003782:	d005      	beq.n	8003790 <I2C_ITError+0x44>
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b29      	cmp	r3, #41	@ 0x29
 8003788:	d002      	beq.n	8003790 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b2a      	cmp	r3, #42	@ 0x2a
 800378e:	d10b      	bne.n	80037a8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003790:	2103      	movs	r1, #3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f9ea 	bl	8003b6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2228      	movs	r2, #40	@ 0x28
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a60      	ldr	r2, [pc, #384]	@ (8003924 <I2C_ITError+0x1d8>)
 80037a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80037a6:	e030      	b.n	800380a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f9dd 	bl	8003b6c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8e1 	bl	800397a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b60      	cmp	r3, #96	@ 0x60
 80037c2:	d01f      	beq.n	8003804 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d114      	bne.n	8003804 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d109      	bne.n	80037fc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2210      	movs	r2, #16
 80037ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2220      	movs	r2, #32
 8003802:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d039      	beq.n	800388c <I2C_ITError+0x140>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b11      	cmp	r3, #17
 800381c:	d002      	beq.n	8003824 <I2C_ITError+0xd8>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b21      	cmp	r3, #33	@ 0x21
 8003822:	d133      	bne.n	800388c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800382e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003832:	d107      	bne.n	8003844 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003842:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe f877 	bl	800193c <HAL_DMA_GetState>
 800384e:	4603      	mov	r3, r0
 8003850:	2b01      	cmp	r3, #1
 8003852:	d017      	beq.n	8003884 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003858:	4a33      	ldr	r2, [pc, #204]	@ (8003928 <I2C_ITError+0x1dc>)
 800385a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	4618      	mov	r0, r3
 800386a:	f7fd fe21 	bl	80014b0 <HAL_DMA_Abort_IT>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d04d      	beq.n	8003910 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800387e:	4610      	mov	r0, r2
 8003880:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003882:	e045      	b.n	8003910 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f851 	bl	800392c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800388a:	e041      	b.n	8003910 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d039      	beq.n	8003908 <I2C_ITError+0x1bc>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b12      	cmp	r3, #18
 8003898:	d002      	beq.n	80038a0 <I2C_ITError+0x154>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b22      	cmp	r3, #34	@ 0x22
 800389e:	d133      	bne.n	8003908 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ae:	d107      	bne.n	80038c0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe f839 	bl	800193c <HAL_DMA_GetState>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d017      	beq.n	8003900 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d4:	4a14      	ldr	r2, [pc, #80]	@ (8003928 <I2C_ITError+0x1dc>)
 80038d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fd fde3 	bl	80014b0 <HAL_DMA_Abort_IT>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d011      	beq.n	8003914 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038fa:	4610      	mov	r0, r2
 80038fc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038fe:	e009      	b.n	8003914 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f813 	bl	800392c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003906:	e005      	b.n	8003914 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f80f 	bl	800392c <I2C_TreatErrorCallback>
  }
}
 800390e:	e002      	b.n	8003916 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003914:	bf00      	nop
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	ffff0000 	.word	0xffff0000
 8003924:	08002469 	.word	0x08002469
 8003928:	080039c3 	.word	0x080039c3

0800392c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b60      	cmp	r3, #96	@ 0x60
 800393e:	d10e      	bne.n	800395e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fc47 	bl	80021ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800395c:	e009      	b.n	8003972 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fe fc32 	bl	80021d6 <HAL_I2C_ErrorCallback>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d103      	bne.n	8003998 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d007      	beq.n	80039b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	619a      	str	r2, [r3, #24]
  }
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	2200      	movs	r2, #0
 80039de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ec:	2200      	movs	r2, #0
 80039ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff ff9b 	bl	800392c <I2C_TreatErrorCallback>
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a18:	7a7b      	ldrb	r3, [r7, #9]
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	0d5b      	lsrs	r3, r3, #21
 8003a3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a3e:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <I2C_TransferConfig+0x60>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	43db      	mvns	r3, r3
 8003a44:	ea02 0103 	and.w	r1, r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	03ff63ff 	.word	0x03ff63ff

08003a64 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a78:	4a39      	ldr	r2, [pc, #228]	@ (8003b60 <I2C_Enable_IRQ+0xfc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d032      	beq.n	8003ae4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003a82:	4a38      	ldr	r2, [pc, #224]	@ (8003b64 <I2C_Enable_IRQ+0x100>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d02d      	beq.n	8003ae4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003a8c:	4a36      	ldr	r2, [pc, #216]	@ (8003b68 <I2C_Enable_IRQ+0x104>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d028      	beq.n	8003ae4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	da03      	bge.n	8003aa2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003aa0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003ab2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003ac4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d103      	bne.n	8003ad4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ad2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ad4:	887b      	ldrh	r3, [r7, #2]
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d133      	bne.n	8003b42 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f043 0320 	orr.w	r3, r3, #32
 8003ae0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ae2:	e02e      	b.n	8003b42 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da03      	bge.n	8003af4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003af2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003b04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003b16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d103      	bne.n	8003b26 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d103      	bne.n	8003b34 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b34:	887b      	ldrh	r3, [r7, #2]
 8003b36:	2b40      	cmp	r3, #64	@ 0x40
 8003b38:	d103      	bne.n	8003b42 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	0800265b 	.word	0x0800265b
 8003b64:	08002a7d 	.word	0x08002a7d
 8003b68:	08002831 	.word	0x08002831

08003b6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00f      	beq.n	8003ba6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003b8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b9a:	2b28      	cmp	r3, #40	@ 0x28
 8003b9c:	d003      	beq.n	8003ba6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003ba4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00f      	beq.n	8003bd0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003bb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003bc4:	2b28      	cmp	r3, #40	@ 0x28
 8003bc6:	d003      	beq.n	8003bd0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003bce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003bd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	da03      	bge.n	8003be0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d103      	bne.n	8003bee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bee:	887b      	ldrh	r3, [r7, #2]
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d103      	bne.n	8003bfc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f043 0320 	orr.w	r3, r3, #32
 8003bfa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	2b40      	cmp	r3, #64	@ 0x40
 8003c00:	d103      	bne.n	8003c0a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	400a      	ands	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d138      	bne.n	8003cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e032      	b.n	8003cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2224      	movs	r2, #36	@ 0x24
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d139      	bne.n	8003d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e033      	b.n	8003d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2224      	movs	r2, #36	@ 0x24
 8003cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003d60:	4b29      	ldr	r3, [pc, #164]	@ (8003e08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	2b06      	cmp	r3, #6
 8003d6a:	d00a      	beq.n	8003d82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d6c:	4b26      	ldr	r3, [pc, #152]	@ (8003e08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e040      	b.n	8003e00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e03e      	b.n	8003e00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d82:	4b21      	ldr	r3, [pc, #132]	@ (8003e08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003d8a:	491f      	ldr	r1, [pc, #124]	@ (8003e08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d92:	f7fd fa65 	bl	8001260 <HAL_GetTick>
 8003d96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d98:	e009      	b.n	8003dae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d9a:	f7fd fa61 	bl	8001260 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003da8:	d901      	bls.n	8003dae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e028      	b.n	8003e00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003dae:	4b16      	ldr	r3, [pc, #88]	@ (8003e08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dba:	d1ee      	bne.n	8003d9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b1e      	cmp	r3, #30
 8003dc0:	d008      	beq.n	8003dd4 <HAL_PWREx_ConfigSupply+0x7c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dc6:	d005      	beq.n	8003dd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b1d      	cmp	r3, #29
 8003dcc:	d002      	beq.n	8003dd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b2d      	cmp	r3, #45	@ 0x2d
 8003dd2:	d114      	bne.n	8003dfe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003dd4:	f7fd fa44 	bl	8001260 <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003dda:	e009      	b.n	8003df0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ddc:	f7fd fa40 	bl	8001260 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dea:	d901      	bls.n	8003df0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e007      	b.n	8003e00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_PWREx_ConfigSupply+0xb0>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfc:	d1ee      	bne.n	8003ddc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	58024800 	.word	0x58024800

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	@ 0x30
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f000 bc48 	b.w	80046b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8088 	beq.w	8003f3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2e:	4b99      	ldr	r3, [pc, #612]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e38:	4b96      	ldr	r3, [pc, #600]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d007      	beq.n	8003e54 <HAL_RCC_OscConfig+0x48>
 8003e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e46:	2b18      	cmp	r3, #24
 8003e48:	d111      	bne.n	8003e6e <HAL_RCC_OscConfig+0x62>
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e54:	4b8f      	ldr	r3, [pc, #572]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d06d      	beq.n	8003f3c <HAL_RCC_OscConfig+0x130>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d169      	bne.n	8003f3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f000 bc21 	b.w	80046b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x7a>
 8003e78:	4b86      	ldr	r3, [pc, #536]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a85      	ldr	r2, [pc, #532]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	e02e      	b.n	8003ee4 <HAL_RCC_OscConfig+0xd8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x9c>
 8003e8e:	4b81      	ldr	r3, [pc, #516]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a80      	ldr	r2, [pc, #512]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b7e      	ldr	r3, [pc, #504]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003ea0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e01d      	b.n	8003ee4 <HAL_RCC_OscConfig+0xd8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eb0:	d10c      	bne.n	8003ecc <HAL_RCC_OscConfig+0xc0>
 8003eb2:	4b78      	ldr	r3, [pc, #480]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a77      	ldr	r2, [pc, #476]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4b75      	ldr	r3, [pc, #468]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a74      	ldr	r2, [pc, #464]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e00b      	b.n	8003ee4 <HAL_RCC_OscConfig+0xd8>
 8003ecc:	4b71      	ldr	r3, [pc, #452]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a70      	ldr	r2, [pc, #448]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	4b6e      	ldr	r3, [pc, #440]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6d      	ldr	r2, [pc, #436]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d013      	beq.n	8003f14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd f9b8 	bl	8001260 <HAL_GetTick>
 8003ef0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fd f9b4 	bl	8001260 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	@ 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e3d4      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f06:	4b63      	ldr	r3, [pc, #396]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xe8>
 8003f12:	e014      	b.n	8003f3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd f9a4 	bl	8001260 <HAL_GetTick>
 8003f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fd f9a0 	bl	8001260 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	@ 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e3c0      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f2e:	4b59      	ldr	r3, [pc, #356]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x110>
 8003f3a:	e000      	b.n	8003f3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80ca 	beq.w	80040e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4c:	4b51      	ldr	r3, [pc, #324]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f56:	4b4f      	ldr	r3, [pc, #316]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_RCC_OscConfig+0x166>
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	2b18      	cmp	r3, #24
 8003f66:	d156      	bne.n	8004016 <HAL_RCC_OscConfig+0x20a>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d151      	bne.n	8004016 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f72:	4b48      	ldr	r3, [pc, #288]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_RCC_OscConfig+0x17e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e392      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f8a:	4b42      	ldr	r3, [pc, #264]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0219 	bic.w	r2, r3, #25
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	493f      	ldr	r1, [pc, #252]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f960 	bl	8001260 <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd f95c 	bl	8001260 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e37c      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb6:	4b37      	ldr	r3, [pc, #220]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	f7fd f959 	bl	8001278 <HAL_GetREVID>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d817      	bhi.n	8004000 <HAL_RCC_OscConfig+0x1f4>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b40      	cmp	r3, #64	@ 0x40
 8003fd6:	d108      	bne.n	8003fea <HAL_RCC_OscConfig+0x1de>
 8003fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe8:	e07a      	b.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b2a      	ldr	r3, [pc, #168]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	031b      	lsls	r3, r3, #12
 8003ff8:	4926      	ldr	r1, [pc, #152]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ffe:	e06f      	b.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	4921      	ldr	r1, [pc, #132]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004014:	e064      	b.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d047      	beq.n	80040ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800401e:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 0219 	bic.w	r2, r3, #25
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	491a      	ldr	r1, [pc, #104]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd f916 	bl	8001260 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004038:	f7fd f912 	bl	8001260 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e332      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404a:	4b12      	ldr	r3, [pc, #72]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004056:	f7fd f90f 	bl	8001278 <HAL_GetREVID>
 800405a:	4603      	mov	r3, r0
 800405c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004060:	4293      	cmp	r3, r2
 8004062:	d819      	bhi.n	8004098 <HAL_RCC_OscConfig+0x28c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b40      	cmp	r3, #64	@ 0x40
 800406a:	d108      	bne.n	800407e <HAL_RCC_OscConfig+0x272>
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004074:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8004076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407a:	6053      	str	r3, [r2, #4]
 800407c:	e030      	b.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
 800407e:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	031b      	lsls	r3, r3, #12
 800408c:	4901      	ldr	r1, [pc, #4]	@ (8004094 <HAL_RCC_OscConfig+0x288>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
 8004092:	e025      	b.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
 8004094:	58024400 	.word	0x58024400
 8004098:	4b9a      	ldr	r3, [pc, #616]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	4997      	ldr	r1, [pc, #604]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	e018      	b.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b95      	ldr	r3, [pc, #596]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a94      	ldr	r2, [pc, #592]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd f8d1 	bl	8001260 <HAL_GetTick>
 80040be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fd f8cd 	bl	8001260 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e2ed      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040d4:	4b8b      	ldr	r3, [pc, #556]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f0      	bne.n	80040c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80a9 	beq.w	8004240 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ee:	4b85      	ldr	r3, [pc, #532]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040f8:	4b82      	ldr	r3, [pc, #520]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d007      	beq.n	8004114 <HAL_RCC_OscConfig+0x308>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b18      	cmp	r3, #24
 8004108:	d13a      	bne.n	8004180 <HAL_RCC_OscConfig+0x374>
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d135      	bne.n	8004180 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004114:	4b7b      	ldr	r3, [pc, #492]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x320>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	2b80      	cmp	r3, #128	@ 0x80
 8004126:	d001      	beq.n	800412c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e2c1      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800412c:	f7fd f8a4 	bl	8001278 <HAL_GetREVID>
 8004130:	4603      	mov	r3, r0
 8004132:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004136:	4293      	cmp	r3, r2
 8004138:	d817      	bhi.n	800416a <HAL_RCC_OscConfig+0x35e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	2b20      	cmp	r3, #32
 8004140:	d108      	bne.n	8004154 <HAL_RCC_OscConfig+0x348>
 8004142:	4b70      	ldr	r3, [pc, #448]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800414a:	4a6e      	ldr	r2, [pc, #440]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800414c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004150:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004152:	e075      	b.n	8004240 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004154:	4b6b      	ldr	r3, [pc, #428]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	069b      	lsls	r3, r3, #26
 8004162:	4968      	ldr	r1, [pc, #416]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004168:	e06a      	b.n	8004240 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800416a:	4b66      	ldr	r3, [pc, #408]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	4962      	ldr	r1, [pc, #392]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800417a:	4313      	orrs	r3, r2
 800417c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800417e:	e05f      	b.n	8004240 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d042      	beq.n	800420e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004188:	4b5e      	ldr	r3, [pc, #376]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a5d      	ldr	r2, [pc, #372]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800418e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fd f864 	bl	8001260 <HAL_GetTick>
 8004198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800419c:	f7fd f860 	bl	8001260 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e280      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ae:	4b55      	ldr	r3, [pc, #340]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041ba:	f7fd f85d 	bl	8001278 <HAL_GetREVID>
 80041be:	4603      	mov	r3, r0
 80041c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d817      	bhi.n	80041f8 <HAL_RCC_OscConfig+0x3ec>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d108      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3d6>
 80041d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80041da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041de:	6053      	str	r3, [r2, #4]
 80041e0:	e02e      	b.n	8004240 <HAL_RCC_OscConfig+0x434>
 80041e2:	4b48      	ldr	r3, [pc, #288]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	4944      	ldr	r1, [pc, #272]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
 80041f6:	e023      	b.n	8004240 <HAL_RCC_OscConfig+0x434>
 80041f8:	4b42      	ldr	r3, [pc, #264]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	493f      	ldr	r1, [pc, #252]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
 800420c:	e018      	b.n	8004240 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800420e:	4b3d      	ldr	r3, [pc, #244]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3c      	ldr	r2, [pc, #240]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004214:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fd f821 	bl	8001260 <HAL_GetTick>
 800421e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004222:	f7fd f81d 	bl	8001260 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e23d      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004234:	4b33      	ldr	r3, [pc, #204]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d036      	beq.n	80042ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d019      	beq.n	8004288 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004258:	4a2a      	ldr	r2, [pc, #168]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fc fffe 	bl	8001260 <HAL_GetTick>
 8004264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004268:	f7fc fffa 	bl	8001260 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e21a      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800427a:	4b22      	ldr	r3, [pc, #136]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800427c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x45c>
 8004286:	e018      	b.n	80042ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004288:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428c:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fc ffe4 	bl	8001260 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429c:	f7fc ffe0 	bl	8001260 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e200      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042ae:	4b15      	ldr	r3, [pc, #84]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d039      	beq.n	800433a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01c      	beq.n	8004308 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80042d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042da:	f7fc ffc1 	bl	8001260 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042e2:	f7fc ffbd 	bl	8001260 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1dd      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042f4:	4b03      	ldr	r3, [pc, #12]	@ (8004304 <HAL_RCC_OscConfig+0x4f8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x4d6>
 8004300:	e01b      	b.n	800433a <HAL_RCC_OscConfig+0x52e>
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004308:	4b9b      	ldr	r3, [pc, #620]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a9a      	ldr	r2, [pc, #616]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800430e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004312:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004314:	f7fc ffa4 	bl	8001260 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800431c:	f7fc ffa0 	bl	8001260 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e1c0      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800432e:	4b92      	ldr	r3, [pc, #584]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8081 	beq.w	800444a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004348:	4b8c      	ldr	r3, [pc, #560]	@ (800457c <HAL_RCC_OscConfig+0x770>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a8b      	ldr	r2, [pc, #556]	@ (800457c <HAL_RCC_OscConfig+0x770>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004352:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004354:	f7fc ff84 	bl	8001260 <HAL_GetTick>
 8004358:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7fc ff80 	bl	8001260 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e1a0      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800436e:	4b83      	ldr	r3, [pc, #524]	@ (800457c <HAL_RCC_OscConfig+0x770>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x584>
 8004382:	4b7d      	ldr	r3, [pc, #500]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004386:	4a7c      	ldr	r2, [pc, #496]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6713      	str	r3, [r2, #112]	@ 0x70
 800438e:	e02d      	b.n	80043ec <HAL_RCC_OscConfig+0x5e0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x5a6>
 8004398:	4b77      	ldr	r3, [pc, #476]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439c:	4a76      	ldr	r2, [pc, #472]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a4:	4b74      	ldr	r3, [pc, #464]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	4a73      	ldr	r2, [pc, #460]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043aa:	f023 0304 	bic.w	r3, r3, #4
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b0:	e01c      	b.n	80043ec <HAL_RCC_OscConfig+0x5e0>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c8>
 80043ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	4a6e      	ldr	r2, [pc, #440]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	4a6b      	ldr	r2, [pc, #428]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0x5e0>
 80043d4:	4b68      	ldr	r3, [pc, #416]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a67      	ldr	r2, [pc, #412]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	4b65      	ldr	r3, [pc, #404]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	4a64      	ldr	r2, [pc, #400]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d015      	beq.n	8004420 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fc ff34 	bl	8001260 <HAL_GetTick>
 80043f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fc ff30 	bl	8001260 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e14e      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004412:	4b59      	ldr	r3, [pc, #356]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ee      	beq.n	80043fc <HAL_RCC_OscConfig+0x5f0>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fc ff1e 	bl	8001260 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fc ff1a 	bl	8001260 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e138      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800443e:	4b4e      	ldr	r3, [pc, #312]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ee      	bne.n	8004428 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 812d 	beq.w	80046ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004454:	4b48      	ldr	r3, [pc, #288]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800445c:	2b18      	cmp	r3, #24
 800445e:	f000 80bd 	beq.w	80045dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2b02      	cmp	r3, #2
 8004468:	f040 809e 	bne.w	80045a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b42      	ldr	r3, [pc, #264]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a41      	ldr	r2, [pc, #260]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fef2 	bl	8001260 <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fc feee 	bl	8001260 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e10e      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004492:	4b39      	ldr	r3, [pc, #228]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449e:	4b36      	ldr	r3, [pc, #216]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80044a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044a2:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <HAL_RCC_OscConfig+0x774>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	430a      	orrs	r2, r1
 80044b2:	4931      	ldr	r1, [pc, #196]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	3b01      	subs	r3, #1
 80044be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	3b01      	subs	r3, #1
 80044c8:	025b      	lsls	r3, r3, #9
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	3b01      	subs	r3, #1
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	3b01      	subs	r3, #1
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044e8:	4923      	ldr	r1, [pc, #140]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80044ee:	4b22      	ldr	r3, [pc, #136]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	4a21      	ldr	r2, [pc, #132]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 80044fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044fe:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <HAL_RCC_OscConfig+0x778>)
 8004500:	4013      	ands	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004506:	00d2      	lsls	r2, r2, #3
 8004508:	491b      	ldr	r1, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800450e:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	f023 020c 	bic.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	4917      	ldr	r1, [pc, #92]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800451c:	4313      	orrs	r3, r2
 800451e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004520:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	f023 0202 	bic.w	r2, r3, #2
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452c:	4912      	ldr	r1, [pc, #72]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004532:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	4a10      	ldr	r2, [pc, #64]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453e:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	4a0d      	ldr	r2, [pc, #52]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004548:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800454a:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4a0a      	ldr	r2, [pc, #40]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004556:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	4a07      	ldr	r2, [pc, #28]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004562:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a04      	ldr	r2, [pc, #16]	@ (8004578 <HAL_RCC_OscConfig+0x76c>)
 8004568:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800456c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fc fe77 	bl	8001260 <HAL_GetTick>
 8004572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004574:	e011      	b.n	800459a <HAL_RCC_OscConfig+0x78e>
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
 800457c:	58024800 	.word	0x58024800
 8004580:	fffffc0c 	.word	0xfffffc0c
 8004584:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004588:	f7fc fe6a 	bl	8001260 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e08a      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800459a:	4b47      	ldr	r3, [pc, #284]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x77c>
 80045a6:	e082      	b.n	80046ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a8:	4b43      	ldr	r3, [pc, #268]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a42      	ldr	r2, [pc, #264]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 80045ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fc fe54 	bl	8001260 <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fc fe50 	bl	8001260 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e070      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ce:	4b3a      	ldr	r3, [pc, #232]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x7b0>
 80045da:	e068      	b.n	80046ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045dc:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045e2:	4b35      	ldr	r3, [pc, #212]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d031      	beq.n	8004654 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f003 0203 	and.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d12a      	bne.n	8004654 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d122      	bne.n	8004654 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004618:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d11a      	bne.n	8004654 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	0a5b      	lsrs	r3, r3, #9
 8004622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d111      	bne.n	8004654 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d108      	bne.n	8004654 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	0e1b      	lsrs	r3, r3, #24
 8004646:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e02b      	b.n	80046b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004658:	4b17      	ldr	r3, [pc, #92]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 800465a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004662:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d01f      	beq.n	80046ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800466e:	4b12      	ldr	r3, [pc, #72]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	4a11      	ldr	r2, [pc, #68]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800467a:	f7fc fdf1 	bl	8001260 <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004680:	bf00      	nop
 8004682:	f7fc fded 	bl	8001260 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	4293      	cmp	r3, r2
 800468c:	d0f9      	beq.n	8004682 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 8004690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004692:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <HAL_RCC_OscConfig+0x8b0>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800469a:	00d2      	lsls	r2, r2, #3
 800469c:	4906      	ldr	r1, [pc, #24]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80046a2:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	4a04      	ldr	r2, [pc, #16]	@ (80046b8 <HAL_RCC_OscConfig+0x8ac>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3730      	adds	r7, #48	@ 0x30
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	58024400 	.word	0x58024400
 80046bc:	ffff0007 	.word	0xffff0007

080046c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e19c      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d910      	bls.n	8004704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b87      	ldr	r3, [pc, #540]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 020f 	bic.w	r2, r3, #15
 80046ea:	4985      	ldr	r1, [pc, #532]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b83      	ldr	r3, [pc, #524]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e184      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	4b7b      	ldr	r3, [pc, #492]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800471c:	429a      	cmp	r2, r3
 800471e:	d908      	bls.n	8004732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004720:	4b78      	ldr	r3, [pc, #480]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	4975      	ldr	r1, [pc, #468]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 800472e:	4313      	orrs	r3, r2
 8004730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d010      	beq.n	8004760 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800474a:	429a      	cmp	r2, r3
 800474c:	d908      	bls.n	8004760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800474e:	4b6d      	ldr	r3, [pc, #436]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	496a      	ldr	r1, [pc, #424]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 800475c:	4313      	orrs	r3, r2
 800475e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d010      	beq.n	800478e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	4b64      	ldr	r3, [pc, #400]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004778:	429a      	cmp	r2, r3
 800477a:	d908      	bls.n	800478e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800477c:	4b61      	ldr	r3, [pc, #388]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	495e      	ldr	r1, [pc, #376]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 800478a:	4313      	orrs	r3, r2
 800478c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d908      	bls.n	80047bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80047aa:	4b56      	ldr	r3, [pc, #344]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4953      	ldr	r1, [pc, #332]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d010      	beq.n	80047ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d908      	bls.n	80047ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	f023 020f 	bic.w	r2, r3, #15
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4947      	ldr	r1, [pc, #284]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d055      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047f6:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	4940      	ldr	r1, [pc, #256]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004804:	4313      	orrs	r3, r2
 8004806:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d107      	bne.n	8004820 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004810:	4b3c      	ldr	r3, [pc, #240]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d121      	bne.n	8004860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0f6      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004828:	4b36      	ldr	r3, [pc, #216]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0ea      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004840:	4b30      	ldr	r3, [pc, #192]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0de      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004850:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0d6      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004860:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f023 0207 	bic.w	r2, r3, #7
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4925      	ldr	r1, [pc, #148]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 800486e:	4313      	orrs	r3, r2
 8004870:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fc fcf5 	bl	8001260 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004878:	e00a      	b.n	8004890 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487a:	f7fc fcf1 	bl	8001260 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004888:	4293      	cmp	r3, r2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e0be      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004890:	4b1c      	ldr	r3, [pc, #112]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	429a      	cmp	r2, r3
 80048a0:	d1eb      	bne.n	800487a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d010      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d208      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048be:	4b11      	ldr	r3, [pc, #68]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f023 020f 	bic.w	r2, r3, #15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	490e      	ldr	r1, [pc, #56]	@ (8004904 <HAL_RCC_ClockConfig+0x244>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d214      	bcs.n	8004908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b08      	ldr	r3, [pc, #32]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 020f 	bic.w	r2, r3, #15
 80048e6:	4906      	ldr	r1, [pc, #24]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b04      	ldr	r3, [pc, #16]	@ (8004900 <HAL_RCC_ClockConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e086      	b.n	8004a0e <HAL_RCC_ClockConfig+0x34e>
 8004900:	52002000 	.word	0x52002000
 8004904:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d010      	beq.n	8004936 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	4b3f      	ldr	r3, [pc, #252]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004920:	429a      	cmp	r2, r3
 8004922:	d208      	bcs.n	8004936 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004924:	4b3c      	ldr	r3, [pc, #240]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	4939      	ldr	r1, [pc, #228]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 8004932:	4313      	orrs	r3, r2
 8004934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d010      	beq.n	8004964 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695a      	ldr	r2, [r3, #20]
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800494e:	429a      	cmp	r2, r3
 8004950:	d208      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004952:	4b31      	ldr	r3, [pc, #196]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	492e      	ldr	r1, [pc, #184]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 8004960:	4313      	orrs	r3, r2
 8004962:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	d010      	beq.n	8004992 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	4b28      	ldr	r3, [pc, #160]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800497c:	429a      	cmp	r2, r3
 800497e:	d208      	bcs.n	8004992 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004980:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	4922      	ldr	r1, [pc, #136]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 800498e:	4313      	orrs	r3, r2
 8004990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d010      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d208      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4917      	ldr	r1, [pc, #92]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049c0:	f000 f834 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	f003 030f 	and.w	r3, r3, #15
 80049d0:	4912      	ldr	r1, [pc, #72]	@ (8004a1c <HAL_RCC_ClockConfig+0x35c>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
 80049dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049de:	4b0e      	ldr	r3, [pc, #56]	@ (8004a18 <HAL_RCC_ClockConfig+0x358>)
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	4a0d      	ldr	r2, [pc, #52]	@ (8004a1c <HAL_RCC_ClockConfig+0x35c>)
 80049e8:	5cd3      	ldrb	r3, [r2, r3]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004a20 <HAL_RCC_ClockConfig+0x360>)
 80049f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004a24 <HAL_RCC_ClockConfig+0x364>)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80049fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004a28 <HAL_RCC_ClockConfig+0x368>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fc fbe2 	bl	80011cc <HAL_InitTick>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	08008734 	.word	0x08008734
 8004a20:	24000004 	.word	0x24000004
 8004a24:	24000000 	.word	0x24000000
 8004a28:	24000008 	.word	0x24000008

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	@ 0x24
 8004a30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a32:	4bb3      	ldr	r3, [pc, #716]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a3a:	2b18      	cmp	r3, #24
 8004a3c:	f200 8155 	bhi.w	8004cea <HAL_RCC_GetSysClockFreq+0x2be>
 8004a40:	a201      	add	r2, pc, #4	@ (adr r2, 8004a48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a46:	bf00      	nop
 8004a48:	08004aad 	.word	0x08004aad
 8004a4c:	08004ceb 	.word	0x08004ceb
 8004a50:	08004ceb 	.word	0x08004ceb
 8004a54:	08004ceb 	.word	0x08004ceb
 8004a58:	08004ceb 	.word	0x08004ceb
 8004a5c:	08004ceb 	.word	0x08004ceb
 8004a60:	08004ceb 	.word	0x08004ceb
 8004a64:	08004ceb 	.word	0x08004ceb
 8004a68:	08004ad3 	.word	0x08004ad3
 8004a6c:	08004ceb 	.word	0x08004ceb
 8004a70:	08004ceb 	.word	0x08004ceb
 8004a74:	08004ceb 	.word	0x08004ceb
 8004a78:	08004ceb 	.word	0x08004ceb
 8004a7c:	08004ceb 	.word	0x08004ceb
 8004a80:	08004ceb 	.word	0x08004ceb
 8004a84:	08004ceb 	.word	0x08004ceb
 8004a88:	08004ad9 	.word	0x08004ad9
 8004a8c:	08004ceb 	.word	0x08004ceb
 8004a90:	08004ceb 	.word	0x08004ceb
 8004a94:	08004ceb 	.word	0x08004ceb
 8004a98:	08004ceb 	.word	0x08004ceb
 8004a9c:	08004ceb 	.word	0x08004ceb
 8004aa0:	08004ceb 	.word	0x08004ceb
 8004aa4:	08004ceb 	.word	0x08004ceb
 8004aa8:	08004adf 	.word	0x08004adf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aac:	4b94      	ldr	r3, [pc, #592]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d009      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ab8:	4b91      	ldr	r3, [pc, #580]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	08db      	lsrs	r3, r3, #3
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	4a90      	ldr	r2, [pc, #576]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004aca:	e111      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004acc:	4b8d      	ldr	r3, [pc, #564]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ace:	61bb      	str	r3, [r7, #24]
      break;
 8004ad0:	e10e      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ad4:	61bb      	str	r3, [r7, #24]
      break;
 8004ad6:	e10b      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ada:	61bb      	str	r3, [r7, #24]
      break;
 8004adc:	e108      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ade:	4b88      	ldr	r3, [pc, #544]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ae8:	4b85      	ldr	r3, [pc, #532]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004af2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004af4:	4b82      	ldr	r3, [pc, #520]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004afe:	4b80      	ldr	r3, [pc, #512]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b02:	08db      	lsrs	r3, r3, #3
 8004b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80e1 	beq.w	8004ce4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	f000 8083 	beq.w	8004c30 <HAL_RCC_GetSysClockFreq+0x204>
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f200 80a1 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x248>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x114>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d056      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b3e:	e099      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b40:	4b6f      	ldr	r3, [pc, #444]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02d      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	4a6b      	ldr	r2, [pc, #428]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b76:	4b62      	ldr	r3, [pc, #392]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004ba6:	e087      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004d14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	4b51      	ldr	r3, [pc, #324]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bea:	e065      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfe:	4b40      	ldr	r3, [pc, #256]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c2e:	e043      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004d1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c42:	4b2f      	ldr	r3, [pc, #188]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c72:	e021      	b.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c86:	4b1e      	ldr	r3, [pc, #120]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004cb8:	4b11      	ldr	r3, [pc, #68]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	0a5b      	lsrs	r3, r3, #9
 8004cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cdc:	ee17 3a90 	vmov	r3, s15
 8004ce0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61bb      	str	r3, [r7, #24]
      break;
 8004ce8:	e002      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004cea:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cec:	61bb      	str	r3, [r7, #24]
      break;
 8004cee:	bf00      	nop
  }

  return sysclockfreq;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	@ 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	03d09000 	.word	0x03d09000
 8004d08:	003d0900 	.word	0x003d0900
 8004d0c:	017d7840 	.word	0x017d7840
 8004d10:	46000000 	.word	0x46000000
 8004d14:	4c742400 	.word	0x4c742400
 8004d18:	4a742400 	.word	0x4a742400
 8004d1c:	4bbebc20 	.word	0x4bbebc20

08004d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d26:	f7ff fe81 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	4b10      	ldr	r3, [pc, #64]	@ (8004d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	490f      	ldr	r1, [pc, #60]	@ (8004d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d38:	5ccb      	ldrb	r3, [r1, r3]
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d44:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5a:	4a07      	ldr	r2, [pc, #28]	@ (8004d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d5e:	4a07      	ldr	r2, [pc, #28]	@ (8004d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d64:	4b04      	ldr	r3, [pc, #16]	@ (8004d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d66:	681b      	ldr	r3, [r3, #0]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	58024400 	.word	0x58024400
 8004d74:	08008734 	.word	0x08008734
 8004d78:	24000004 	.word	0x24000004
 8004d7c:	24000000 	.word	0x24000000

08004d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d84:	f7ff ffcc 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4904      	ldr	r1, [pc, #16]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	58024400 	.word	0x58024400
 8004da8:	08008734 	.word	0x08008734

08004dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004db0:	f7ff ffb6 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4904      	ldr	r1, [pc, #16]	@ (8004dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	08008734 	.word	0x08008734

08004dd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b0cc      	sub	sp, #304	@ 0x130
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	ea54 0305 	orrs.w	r3, r4, r5
 8004e02:	d049      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e0e:	d02f      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e14:	d828      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e1a:	d01a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e20:	d822      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e2a:	d007      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e2c:	e01c      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2e:	4bb8      	ldr	r3, [pc, #736]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	4ab7      	ldr	r2, [pc, #732]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e3a:	e01a      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e40:	3308      	adds	r3, #8
 8004e42:	2102      	movs	r1, #2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fccf 	bl	80067e8 <RCCEx_PLL2_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e50:	e00f      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e56:	3328      	adds	r3, #40	@ 0x28
 8004e58:	2102      	movs	r1, #2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 fd76 	bl	800694c <RCCEx_PLL3_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e66:	e004      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e7a:	4ba5      	ldr	r3, [pc, #660]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e88:	4aa1      	ldr	r2, [pc, #644]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e8e:	e003      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e94:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004ea4:	f04f 0900 	mov.w	r9, #0
 8004ea8:	ea58 0309 	orrs.w	r3, r8, r9
 8004eac:	d047      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d82a      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004ee3 	.word	0x08004ee3
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004f17 	.word	0x08004f17
 8004ed0:	08004f17 	.word	0x08004f17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	4a8d      	ldr	r2, [pc, #564]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ee0:	e01a      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 fc7c 	bl	80067e8 <RCCEx_PLL2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004efc:	3328      	adds	r3, #40	@ 0x28
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fd23 	bl	800694c <RCCEx_PLL3_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f0c:	e004      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f14:	e000      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f20:	4b7b      	ldr	r3, [pc, #492]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	f023 0107 	bic.w	r1, r3, #7
 8004f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2e:	4a78      	ldr	r2, [pc, #480]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f34:	e003      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004f4a:	f04f 0b00 	mov.w	fp, #0
 8004f4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f52:	d04c      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f5e:	d030      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f64:	d829      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f68:	d02d      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f6c:	d825      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f6e:	2b80      	cmp	r3, #128	@ 0x80
 8004f70:	d018      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	d821      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d007      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004f7e:	e01c      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f80:	4b63      	ldr	r3, [pc, #396]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	4a62      	ldr	r2, [pc, #392]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004f8c:	e01c      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f92:	3308      	adds	r3, #8
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 fc26 	bl	80067e8 <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fa2:	e011      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fa8:	3328      	adds	r3, #40	@ 0x28
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fccd 	bl	800694c <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e006      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004fc0:	e002      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004fd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fde:	4a4c      	ldr	r2, [pc, #304]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ffa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004ffe:	2300      	movs	r3, #0
 8005000:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005004:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005008:	460b      	mov	r3, r1
 800500a:	4313      	orrs	r3, r2
 800500c:	d053      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800500e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005016:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800501a:	d035      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800501c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005020:	d82e      	bhi.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005022:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005026:	d031      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005028:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800502c:	d828      	bhi.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800502e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005032:	d01a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005038:	d822      	bhi.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800503e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005042:	d007      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005044:	e01c      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005046:	4b32      	ldr	r3, [pc, #200]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	4a31      	ldr	r2, [pc, #196]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800504c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005052:	e01c      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005058:	3308      	adds	r3, #8
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fbc3 	bl	80067e8 <RCCEx_PLL2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005068:	e011      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800506a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800506e:	3328      	adds	r3, #40	@ 0x28
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fc6a 	bl	800694c <RCCEx_PLL3_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800507e:	e006      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005086:	e002      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005088:	bf00      	nop
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800508c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005096:	4b1e      	ldr	r3, [pc, #120]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800509e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80050b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80050c6:	2300      	movs	r3, #0
 80050c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80050cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80050d0:	460b      	mov	r3, r1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d056      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80050d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e2:	d038      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80050e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e8:	d831      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050ee:	d034      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80050f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050f4:	d82b      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80050f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050fa:	d01d      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80050fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005100:	d825      	bhi.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800510c:	e01f      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005114:	4ba2      	ldr	r3, [pc, #648]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	4aa1      	ldr	r2, [pc, #644]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800511a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800511e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005120:	e01c      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005126:	3308      	adds	r3, #8
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fb5c 	bl	80067e8 <RCCEx_PLL2_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005136:	e011      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800513c:	3328      	adds	r3, #40	@ 0x28
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fc03 	bl	800694c <RCCEx_PLL3_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005154:	e002      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800515a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005164:	4b8e      	ldr	r3, [pc, #568]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005168:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800516c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005174:	4a8a      	ldr	r2, [pc, #552]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005176:	430b      	orrs	r3, r1
 8005178:	6593      	str	r3, [r2, #88]	@ 0x58
 800517a:	e003      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005180:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005190:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005194:	2300      	movs	r3, #0
 8005196:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800519a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800519e:	460b      	mov	r3, r1
 80051a0:	4313      	orrs	r3, r2
 80051a2:	d03a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80051a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051aa:	2b30      	cmp	r3, #48	@ 0x30
 80051ac:	d01f      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80051ae:	2b30      	cmp	r3, #48	@ 0x30
 80051b0:	d819      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d00c      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d815      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d019      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d111      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c2:	4b77      	ldr	r3, [pc, #476]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	4a76      	ldr	r2, [pc, #472]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80051ce:	e011      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d4:	3308      	adds	r3, #8
 80051d6:	2102      	movs	r1, #2
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fb05 	bl	80067e8 <RCCEx_PLL2_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80051e4:	e006      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80051f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80051fc:	4b68      	ldr	r3, [pc, #416]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005200:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005204:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800520a:	4a65      	ldr	r2, [pc, #404]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800520c:	430b      	orrs	r3, r1
 800520e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005212:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005216:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800521a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005226:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800522a:	2300      	movs	r3, #0
 800522c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005230:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005234:	460b      	mov	r3, r1
 8005236:	4313      	orrs	r3, r2
 8005238:	d051      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800523a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800523e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005244:	d035      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800524a:	d82e      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800524c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005250:	d031      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005252:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005256:	d828      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800525c:	d01a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005262:	d822      	bhi.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526c:	d007      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800526e:	e01c      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005270:	4b4b      	ldr	r3, [pc, #300]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	4a4a      	ldr	r2, [pc, #296]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800527c:	e01c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800527e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005282:	3308      	adds	r3, #8
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f001 faae 	bl	80067e8 <RCCEx_PLL2_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005292:	e011      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005298:	3328      	adds	r3, #40	@ 0x28
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f001 fb55 	bl	800694c <RCCEx_PLL3_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80052a8:	e006      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80052b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80052c0:	4b37      	ldr	r3, [pc, #220]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ce:	4a34      	ldr	r2, [pc, #208]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80052de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80052ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80052f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4313      	orrs	r3, r2
 80052fc:	d056      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80052fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005308:	d033      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800530a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800530e:	d82c      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005314:	d02f      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005316:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800531a:	d826      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800531c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005320:	d02b      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005322:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005326:	d820      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800532c:	d012      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800532e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005332:	d81a      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d022      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533c:	d115      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800533e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005342:	3308      	adds	r3, #8
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fa4e 	bl	80067e8 <RCCEx_PLL2_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005352:	e015      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005358:	3328      	adds	r3, #40	@ 0x28
 800535a:	2101      	movs	r1, #1
 800535c:	4618      	mov	r0, r3
 800535e:	f001 faf5 	bl	800694c <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005368:	e00a      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005370:	e006      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800537e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005380:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10d      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800538a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005396:	4a02      	ldr	r2, [pc, #8]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005398:	430b      	orrs	r3, r1
 800539a:	6513      	str	r3, [r2, #80]	@ 0x50
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800539e:	bf00      	nop
 80053a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80053b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053bc:	2300      	movs	r3, #0
 80053be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80053c2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80053c6:	460b      	mov	r3, r1
 80053c8:	4313      	orrs	r3, r2
 80053ca:	d055      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80053cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053d8:	d033      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80053da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053de:	d82c      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e4:	d02f      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80053e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ea:	d826      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053f0:	d02b      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80053f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053f6:	d820      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80053f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053fc:	d012      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80053fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005402:	d81a      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d022      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800540c:	d115      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800540e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005412:	3308      	adds	r3, #8
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f9e6 	bl	80067e8 <RCCEx_PLL2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005422:	e015      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005428:	3328      	adds	r3, #40	@ 0x28
 800542a:	2101      	movs	r1, #1
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fa8d 	bl	800694c <RCCEx_PLL3_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005438:	e00a      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005440:	e006      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005442:	bf00      	nop
 8005444:	e004      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800544e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005450:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005458:	4bb6      	ldr	r3, [pc, #728]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005464:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005468:	4ab2      	ldr	r2, [pc, #712]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800546a:	430b      	orrs	r3, r1
 800546c:	6593      	str	r3, [r2, #88]	@ 0x58
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005474:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005484:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800548e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d02a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800549c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d011      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054a6:	d10a      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054ac:	3308      	adds	r3, #8
 80054ae:	2101      	movs	r1, #1
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f999 	bl	80067e8 <RCCEx_PLL2_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80054bc:	e004      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054c4:	e000      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80054c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80054d0:	4b98      	ldr	r3, [pc, #608]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80054d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054de:	4a95      	ldr	r2, [pc, #596]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054e0:	430b      	orrs	r3, r1
 80054e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054e4:	e003      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80054fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054fe:	2300      	movs	r3, #0
 8005500:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005504:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005508:	460b      	mov	r3, r1
 800550a:	4313      	orrs	r3, r2
 800550c:	d037      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800550e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005518:	d00e      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800551a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800551e:	d816      	bhi.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d018      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005528:	d111      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552a:	4b82      	ldr	r3, [pc, #520]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	4a81      	ldr	r2, [pc, #516]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005536:	e00f      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800553c:	3308      	adds	r3, #8
 800553e:	2101      	movs	r1, #1
 8005540:	4618      	mov	r0, r3
 8005542:	f001 f951 	bl	80067e8 <RCCEx_PLL2_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800554c:	e004      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005558:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005560:	4b74      	ldr	r3, [pc, #464]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005564:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800556c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556e:	4a71      	ldr	r2, [pc, #452]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6513      	str	r3, [r2, #80]	@ 0x50
 8005574:	e003      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005576:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800557a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800557e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800558a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005594:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005598:	460b      	mov	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	d03a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800559e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d81d      	bhi.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80055a8:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055ed 	.word	0x080055ed
 80055b4:	080055c1 	.word	0x080055c1
 80055b8:	080055cf 	.word	0x080055cf
 80055bc:	080055ed 	.word	0x080055ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	4a5b      	ldr	r2, [pc, #364]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055cc:	e00f      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d2:	3308      	adds	r3, #8
 80055d4:	2102      	movs	r1, #2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f906 	bl	80067e8 <RCCEx_PLL2_Config>
 80055dc:	4603      	mov	r3, r0
 80055de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80055e2:	e004      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055ea:	e000      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80055ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fa:	f023 0103 	bic.w	r1, r3, #3
 80055fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005604:	4a4b      	ldr	r2, [pc, #300]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005606:	430b      	orrs	r3, r1
 8005608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800560a:	e003      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005610:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800562a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800562e:	460b      	mov	r3, r1
 8005630:	4313      	orrs	r3, r2
 8005632:	f000 80a0 	beq.w	8005776 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005636:	4b40      	ldr	r3, [pc, #256]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a3f      	ldr	r2, [pc, #252]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800563c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005642:	f7fb fe0d 	bl	8001260 <HAL_GetTick>
 8005646:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800564a:	e00b      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564c:	f7fb fe08 	bl	8001260 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b64      	cmp	r3, #100	@ 0x64
 800565a:	d903      	bls.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005662:	e005      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005664:	4b34      	ldr	r3, [pc, #208]	@ (8005738 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ed      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005670:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005674:	2b00      	cmp	r3, #0
 8005676:	d17a      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005678:	4b2e      	ldr	r3, [pc, #184]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800567a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800567c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005680:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005684:	4053      	eors	r3, r2
 8005686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d015      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800568e:	4b29      	ldr	r3, [pc, #164]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005696:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800569a:	4b26      	ldr	r3, [pc, #152]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569e:	4a25      	ldr	r2, [pc, #148]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056a6:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	4a22      	ldr	r2, [pc, #136]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80056b2:	4a20      	ldr	r2, [pc, #128]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80056b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80056ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c6:	d118      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fb fdca 	bl	8001260 <HAL_GetTick>
 80056cc:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056d0:	e00d      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d2:	f7fb fdc5 	bl	8001260 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80056dc:	1ad2      	subs	r2, r2, r3
 80056de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d903      	bls.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80056ec:	e005      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ee:	4b11      	ldr	r3, [pc, #68]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0eb      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80056fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d130      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005702:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005706:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800570a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005712:	d115      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005714:	4b07      	ldr	r3, [pc, #28]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800571c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005720:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005724:	091a      	lsrs	r2, r3, #4
 8005726:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005728:	4013      	ands	r3, r2
 800572a:	4a02      	ldr	r2, [pc, #8]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800572c:	430b      	orrs	r3, r1
 800572e:	6113      	str	r3, [r2, #16]
 8005730:	e00c      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005732:	bf00      	nop
 8005734:	58024400 	.word	0x58024400
 8005738:	58024800 	.word	0x58024800
 800573c:	00ffffcf 	.word	0x00ffffcf
 8005740:	4bd4      	ldr	r3, [pc, #848]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	4ad3      	ldr	r2, [pc, #844]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005746:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800574a:	6113      	str	r3, [r2, #16]
 800574c:	4bd1      	ldr	r3, [pc, #836]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800574e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005750:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005754:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575c:	4acd      	ldr	r2, [pc, #820]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800575e:	430b      	orrs	r3, r1
 8005760:	6713      	str	r3, [r2, #112]	@ 0x70
 8005762:	e008      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005764:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005768:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800576c:	e003      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005772:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005776:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f002 0301 	and.w	r3, r2, #1
 8005782:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005786:	2300      	movs	r3, #0
 8005788:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800578c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005790:	460b      	mov	r3, r1
 8005792:	4313      	orrs	r3, r2
 8005794:	f000 808b 	beq.w	80058ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005798:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800579c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057a0:	2b28      	cmp	r3, #40	@ 0x28
 80057a2:	d86b      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	08005885 	.word	0x08005885
 80057b0:	0800587d 	.word	0x0800587d
 80057b4:	0800587d 	.word	0x0800587d
 80057b8:	0800587d 	.word	0x0800587d
 80057bc:	0800587d 	.word	0x0800587d
 80057c0:	0800587d 	.word	0x0800587d
 80057c4:	0800587d 	.word	0x0800587d
 80057c8:	0800587d 	.word	0x0800587d
 80057cc:	08005851 	.word	0x08005851
 80057d0:	0800587d 	.word	0x0800587d
 80057d4:	0800587d 	.word	0x0800587d
 80057d8:	0800587d 	.word	0x0800587d
 80057dc:	0800587d 	.word	0x0800587d
 80057e0:	0800587d 	.word	0x0800587d
 80057e4:	0800587d 	.word	0x0800587d
 80057e8:	0800587d 	.word	0x0800587d
 80057ec:	08005867 	.word	0x08005867
 80057f0:	0800587d 	.word	0x0800587d
 80057f4:	0800587d 	.word	0x0800587d
 80057f8:	0800587d 	.word	0x0800587d
 80057fc:	0800587d 	.word	0x0800587d
 8005800:	0800587d 	.word	0x0800587d
 8005804:	0800587d 	.word	0x0800587d
 8005808:	0800587d 	.word	0x0800587d
 800580c:	08005885 	.word	0x08005885
 8005810:	0800587d 	.word	0x0800587d
 8005814:	0800587d 	.word	0x0800587d
 8005818:	0800587d 	.word	0x0800587d
 800581c:	0800587d 	.word	0x0800587d
 8005820:	0800587d 	.word	0x0800587d
 8005824:	0800587d 	.word	0x0800587d
 8005828:	0800587d 	.word	0x0800587d
 800582c:	08005885 	.word	0x08005885
 8005830:	0800587d 	.word	0x0800587d
 8005834:	0800587d 	.word	0x0800587d
 8005838:	0800587d 	.word	0x0800587d
 800583c:	0800587d 	.word	0x0800587d
 8005840:	0800587d 	.word	0x0800587d
 8005844:	0800587d 	.word	0x0800587d
 8005848:	0800587d 	.word	0x0800587d
 800584c:	08005885 	.word	0x08005885
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005850:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005854:	3308      	adds	r3, #8
 8005856:	2101      	movs	r1, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f000 ffc5 	bl	80067e8 <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005864:	e00f      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800586a:	3328      	adds	r3, #40	@ 0x28
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f001 f86c 	bl	800694c <RCCEx_PLL3_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800587a:	e004      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005882:	e000      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005886:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800588e:	4b81      	ldr	r3, [pc, #516]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005892:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005896:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800589a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80058ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f002 0302 	and.w	r3, r2, #2
 80058ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80058c4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80058c8:	460b      	mov	r3, r1
 80058ca:	4313      	orrs	r3, r2
 80058cc:	d042      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80058ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d825      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80058d8:	a201      	add	r2, pc, #4	@ (adr r2, 80058e0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	0800592d 	.word	0x0800592d
 80058e4:	080058f9 	.word	0x080058f9
 80058e8:	0800590f 	.word	0x0800590f
 80058ec:	0800592d 	.word	0x0800592d
 80058f0:	0800592d 	.word	0x0800592d
 80058f4:	0800592d 	.word	0x0800592d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058fc:	3308      	adds	r3, #8
 80058fe:	2101      	movs	r1, #1
 8005900:	4618      	mov	r0, r3
 8005902:	f000 ff71 	bl	80067e8 <RCCEx_PLL2_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800590c:	e00f      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800590e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005912:	3328      	adds	r3, #40	@ 0x28
 8005914:	2101      	movs	r1, #1
 8005916:	4618      	mov	r0, r3
 8005918:	f001 f818 	bl	800694c <RCCEx_PLL3_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005922:	e004      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800592c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005936:	4b57      	ldr	r3, [pc, #348]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593a:	f023 0107 	bic.w	r1, r3, #7
 800593e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005944:	4a53      	ldr	r2, [pc, #332]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005946:	430b      	orrs	r3, r1
 8005948:	6553      	str	r3, [r2, #84]	@ 0x54
 800594a:	e003      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005950:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f002 0304 	and.w	r3, r2, #4
 8005960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800596a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800596e:	460b      	mov	r3, r1
 8005970:	4313      	orrs	r3, r2
 8005972:	d044      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005974:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800597c:	2b05      	cmp	r3, #5
 800597e:	d825      	bhi.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005980:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005986:	bf00      	nop
 8005988:	080059d5 	.word	0x080059d5
 800598c:	080059a1 	.word	0x080059a1
 8005990:	080059b7 	.word	0x080059b7
 8005994:	080059d5 	.word	0x080059d5
 8005998:	080059d5 	.word	0x080059d5
 800599c:	080059d5 	.word	0x080059d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a4:	3308      	adds	r3, #8
 80059a6:	2101      	movs	r1, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 ff1d 	bl	80067e8 <RCCEx_PLL2_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80059b4:	e00f      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ba:	3328      	adds	r3, #40	@ 0x28
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 ffc4 	bl	800694c <RCCEx_PLL3_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80059ca:	e004      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80059d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10b      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059de:	4b2d      	ldr	r3, [pc, #180]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	f023 0107 	bic.w	r1, r3, #7
 80059e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ee:	4a29      	ldr	r2, [pc, #164]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059f4:	e003      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f002 0320 	and.w	r3, r2, #32
 8005a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	d057      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a2a:	d035      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a30:	d82c      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a36:	d031      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a3c:	d826      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005a3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a42:	d02d      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005a44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a48:	d820      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a4e:	d012      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a54:	d81a      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d024      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005a5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a5e:	d115      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a64:	3308      	adds	r3, #8
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 febd 	bl	80067e8 <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a74:	e017      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a7a:	3328      	adds	r3, #40	@ 0x28
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 ff64 	bl	800694c <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005a8a:	e00c      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a92:	e008      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005a94:	58024400 	.word	0x58024400
        break;
 8005a98:	bf00      	nop
 8005a9a:	e004      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005a9c:	bf00      	nop
 8005a9e:	e002      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aae:	4bc2      	ldr	r3, [pc, #776]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005abe:	4abe      	ldr	r2, [pc, #760]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ac4:	e003      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ae4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d055      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005aee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005af6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005afa:	d033      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005afc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005b00:	d82c      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b06:	d02f      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0c:	d826      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b12:	d02b      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005b14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b18:	d820      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1e:	d012      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b24:	d81a      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d022      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2e:	d115      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b34:	3308      	adds	r3, #8
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fe55 	bl	80067e8 <RCCEx_PLL2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b44:	e015      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b4a:	3328      	adds	r3, #40	@ 0x28
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fefc 	bl	800694c <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005b5a:	e00a      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b62:	e006      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005b64:	bf00      	nop
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10b      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b7a:	4b8f      	ldr	r3, [pc, #572]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b8a:	4a8b      	ldr	r2, [pc, #556]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b90:	e003      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005ba6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005baa:	2300      	movs	r3, #0
 8005bac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bb0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	d055      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bc2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005bc6:	d033      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005bc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005bcc:	d82c      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd2:	d02f      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd8:	d826      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005bda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005bde:	d02b      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005be0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005be4:	d820      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bea:	d012      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005bec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bf0:	d81a      	bhi.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d022      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfa:	d115      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c00:	3308      	adds	r3, #8
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fdef 	bl	80067e8 <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005c10:	e015      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c16:	3328      	adds	r3, #40	@ 0x28
 8005c18:	2102      	movs	r1, #2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fe96 	bl	800694c <RCCEx_PLL3_Config>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005c26:	e00a      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c2e:	e006      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005c30:	bf00      	nop
 8005c32:	e004      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005c34:	bf00      	nop
 8005c36:	e002      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005c38:	bf00      	nop
 8005c3a:	e000      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005c46:	4b5c      	ldr	r3, [pc, #368]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c4a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c56:	4a58      	ldr	r2, [pc, #352]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c5c:	e003      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f002 0308 	and.w	r3, r2, #8
 8005c72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c76:	2300      	movs	r3, #0
 8005c78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c7c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c80:	460b      	mov	r3, r1
 8005c82:	4313      	orrs	r3, r2
 8005c84:	d01e      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c92:	d10c      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c98:	3328      	adds	r3, #40	@ 0x28
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fe55 	bl	800694c <RCCEx_PLL3_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005cae:	4b42      	ldr	r3, [pc, #264]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f002 0310 	and.w	r3, r2, #16
 8005cd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005cda:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	d01e      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf0:	d10c      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cf6:	3328      	adds	r3, #40	@ 0x28
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fe26 	bl	800694c <RCCEx_PLL3_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d1c:	4a26      	ldr	r2, [pc, #152]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005d2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d38:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d040      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d4e:	d022      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d54:	d81b      	bhi.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d5e:	d00b      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005d60:	e015      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d66:	3308      	adds	r3, #8
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fd3c 	bl	80067e8 <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d76:	e00f      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d7c:	3328      	adds	r3, #40	@ 0x28
 8005d7e:	2102      	movs	r1, #2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fde3 	bl	800694c <RCCEx_PLL3_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005d8c:	e004      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d94:	e000      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10d      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005da0:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005db0:	4a01      	ldr	r2, [pc, #4]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005db2:	430b      	orrs	r3, r1
 8005db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005db6:	e005      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dc0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005dd6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	d03b      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005de8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dec:	d01f      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005dee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005df2:	d818      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df8:	d003      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005dfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dfe:	d007      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005e00:	e011      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e02:	4b64      	ldr	r3, [pc, #400]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e06:	4a63      	ldr	r2, [pc, #396]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e0e:	e00f      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e14:	3328      	adds	r3, #40	@ 0x28
 8005e16:	2101      	movs	r1, #1
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fd97 	bl	800694c <RCCEx_PLL3_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e24:	e004      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e2c:	e000      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10b      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e38:	4b56      	ldr	r3, [pc, #344]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e48:	4a52      	ldr	r2, [pc, #328]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e4e:	e003      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e60:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e64:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e66:	2300      	movs	r3, #0
 8005e68:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e6a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d031      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e82:	d007      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005e84:	e011      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e86:	4b43      	ldr	r3, [pc, #268]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8a:	4a42      	ldr	r2, [pc, #264]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005e92:	e00e      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e98:	3308      	adds	r3, #8
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fca3 	bl	80067e8 <RCCEx_PLL2_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005eba:	4b36      	ldr	r3, [pc, #216]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec8:	4a32      	ldr	r2, [pc, #200]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ece:	e003      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ed4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005eea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	d00c      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ef8:	3328      	adds	r3, #40	@ 0x28
 8005efa:	2102      	movs	r1, #2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fd25 	bl	800694c <RCCEx_PLL3_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d03a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f36:	d018      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005f38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f3c:	d811      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f42:	d014      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f48:	d80b      	bhi.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d011      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f52:	d106      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4b0f      	ldr	r3, [pc, #60]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	4a0e      	ldr	r2, [pc, #56]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005f60:	e008      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f68:	e004      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005f6a:	bf00      	nop
 8005f6c:	e002      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005f6e:	bf00      	nop
 8005f70:	e000      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10d      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f8c:	4a01      	ldr	r2, [pc, #4]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f92:	e005      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fae:	2300      	movs	r3, #0
 8005fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fb2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005fbc:	4baa      	ldr	r3, [pc, #680]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005fc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fca:	4aa7      	ldr	r2, [pc, #668]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005fdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fde:	2300      	movs	r3, #0
 8005fe0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fe2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fec:	4b9e      	ldr	r3, [pc, #632]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ffc:	4a9a      	ldr	r2, [pc, #616]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005ffe:	430b      	orrs	r3, r1
 8006000:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006002:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800600e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006010:	2300      	movs	r3, #0
 8006012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006014:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006018:	460b      	mov	r3, r1
 800601a:	4313      	orrs	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800601e:	4b92      	ldr	r3, [pc, #584]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006022:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800602a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602c:	4a8e      	ldr	r2, [pc, #568]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800602e:	430b      	orrs	r3, r1
 8006030:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800603e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006040:	2300      	movs	r3, #0
 8006042:	647b      	str	r3, [r7, #68]	@ 0x44
 8006044:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006048:	460b      	mov	r3, r1
 800604a:	4313      	orrs	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800604e:	4b86      	ldr	r3, [pc, #536]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	4a85      	ldr	r2, [pc, #532]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006054:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006058:	6113      	str	r3, [r2, #16]
 800605a:	4b83      	ldr	r3, [pc, #524]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006062:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006066:	4a80      	ldr	r2, [pc, #512]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800606c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800607e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006082:	460b      	mov	r3, r1
 8006084:	4313      	orrs	r3, r2
 8006086:	d009      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006088:	4b77      	ldr	r3, [pc, #476]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006090:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006096:	4a74      	ldr	r2, [pc, #464]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006098:	430b      	orrs	r3, r1
 800609a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800609c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80060a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d00a      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060b8:	4b6b      	ldr	r3, [pc, #428]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80060c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c8:	4a67      	ldr	r2, [pc, #412]	@ (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80060ca:	430b      	orrs	r3, r1
 80060cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80060ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	2100      	movs	r1, #0
 80060d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80060e4:	460b      	mov	r3, r1
 80060e6:	4313      	orrs	r3, r2
 80060e8:	d011      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ee:	3308      	adds	r3, #8
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fb78 	bl	80067e8 <RCCEx_PLL2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80060fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006106:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800610a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800610e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	2100      	movs	r1, #0
 8006118:	6239      	str	r1, [r7, #32]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006120:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006124:	460b      	mov	r3, r1
 8006126:	4313      	orrs	r3, r2
 8006128:	d011      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800612e:	3308      	adds	r3, #8
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fb58 	bl	80067e8 <RCCEx_PLL2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800613e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006146:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800614a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800614e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	2100      	movs	r1, #0
 8006158:	61b9      	str	r1, [r7, #24]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d011      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800616a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800616e:	3308      	adds	r3, #8
 8006170:	2102      	movs	r1, #2
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fb38 	bl	80067e8 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800617e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800618a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800618e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	2100      	movs	r1, #0
 8006198:	6139      	str	r1, [r7, #16]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d011      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ae:	3328      	adds	r3, #40	@ 0x28
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fbca 	bl	800694c <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80061be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80061ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	2100      	movs	r1, #0
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061e4:	460b      	mov	r3, r1
 80061e6:	4313      	orrs	r3, r2
 80061e8:	d011      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ee:	3328      	adds	r3, #40	@ 0x28
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fbaa 	bl	800694c <RCCEx_PLL3_Config>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80061fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800620a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800620e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	2100      	movs	r1, #0
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	607b      	str	r3, [r7, #4]
 8006220:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d011      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800622a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800622e:	3328      	adds	r3, #40	@ 0x28
 8006230:	2102      	movs	r1, #2
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fb8a 	bl	800694c <RCCEx_PLL3_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800623e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800624a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800624e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
}
 800625c:	4618      	mov	r0, r3
 800625e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006262:	46bd      	mov	sp, r7
 8006264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006268:	58024400 	.word	0x58024400

0800626c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006270:	f7fe fd56 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	091b      	lsrs	r3, r3, #4
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4904      	ldr	r1, [pc, #16]	@ (8006294 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	58024400 	.word	0x58024400
 8006294:	08008734 	.word	0x08008734

08006298 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006298:	b480      	push	{r7}
 800629a:	b089      	sub	sp, #36	@ 0x24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80062aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ae:	0b1b      	lsrs	r3, r3, #12
 80062b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80062c2:	4b99      	ldr	r3, [pc, #612]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8111 	beq.w	8006508 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	f000 8083 	beq.w	80063f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	f200 80a1 	bhi.w	8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d056      	beq.n	80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006302:	e099      	b.n	8006438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006304:	4b88      	ldr	r3, [pc, #544]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d02d      	beq.n	800636c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006310:	4b85      	ldr	r3, [pc, #532]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	08db      	lsrs	r3, r3, #3
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	4a84      	ldr	r2, [pc, #528]	@ (800652c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
 8006320:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633a:	4b7b      	ldr	r3, [pc, #492]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800633c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634a:	ed97 6a03 	vldr	s12, [r7, #12]
 800634e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800635e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006366:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800636a:	e087      	b.n	800647c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006376:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006534 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800637a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637e:	4b6a      	ldr	r3, [pc, #424]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006392:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ae:	e065      	b.n	800647c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c2:	4b59      	ldr	r3, [pc, #356]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063f2:	e043      	b.n	800647c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800653c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006406:	4b48      	ldr	r3, [pc, #288]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006416:	ed97 6a03 	vldr	s12, [r7, #12]
 800641a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800641e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800642a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800642e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006436:	e021      	b.n	800647c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644a:	4b37      	ldr	r3, [pc, #220]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006452:	ee07 3a90 	vmov	s15, r3
 8006456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645a:	ed97 6a03 	vldr	s12, [r7, #12]
 800645e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800646e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800647a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800647c:	4b2a      	ldr	r3, [pc, #168]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006480:	0a5b      	lsrs	r3, r3, #9
 8006482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006496:	edd7 6a07 	vldr	s13, [r7, #28]
 800649a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064a2:	ee17 2a90 	vmov	r2, s15
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80064aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064d0:	ee17 2a90 	vmov	r2, s15
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064d8:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	0e1b      	lsrs	r3, r3, #24
 80064de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064fe:	ee17 2a90 	vmov	r2, s15
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006506:	e008      	b.n	800651a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	609a      	str	r2, [r3, #8]
}
 800651a:	bf00      	nop
 800651c:	3724      	adds	r7, #36	@ 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	58024400 	.word	0x58024400
 800652c:	03d09000 	.word	0x03d09000
 8006530:	46000000 	.word	0x46000000
 8006534:	4c742400 	.word	0x4c742400
 8006538:	4a742400 	.word	0x4a742400
 800653c:	4bbebc20 	.word	0x4bbebc20

08006540 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006540:	b480      	push	{r7}
 8006542:	b089      	sub	sp, #36	@ 0x24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006548:	4ba1      	ldr	r3, [pc, #644]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006552:	4b9f      	ldr	r3, [pc, #636]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	0d1b      	lsrs	r3, r3, #20
 8006558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800655c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800655e:	4b9c      	ldr	r3, [pc, #624]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	0a1b      	lsrs	r3, r3, #8
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800656a:	4b99      	ldr	r3, [pc, #612]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	08db      	lsrs	r3, r3, #3
 8006570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006582:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8111 	beq.w	80067b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b02      	cmp	r3, #2
 8006592:	f000 8083 	beq.w	800669c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b02      	cmp	r3, #2
 800659a:	f200 80a1 	bhi.w	80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d056      	beq.n	8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80065aa:	e099      	b.n	80066e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ac:	4b88      	ldr	r3, [pc, #544]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02d      	beq.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065b8:	4b85      	ldr	r3, [pc, #532]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	08db      	lsrs	r3, r3, #3
 80065be:	f003 0303 	and.w	r3, r3, #3
 80065c2:	4a84      	ldr	r2, [pc, #528]	@ (80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
 80065c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	ee07 3a90 	vmov	s15, r3
 80065d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e2:	4b7b      	ldr	r3, [pc, #492]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006612:	e087      	b.n	8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006626:	4b6a      	ldr	r3, [pc, #424]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006636:	ed97 6a03 	vldr	s12, [r7, #12]
 800663a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800663e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800664a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006656:	e065      	b.n	8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006662:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800666a:	4b59      	ldr	r3, [pc, #356]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667a:	ed97 6a03 	vldr	s12, [r7, #12]
 800667e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800668a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800668e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800669a:	e043      	b.n	8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80066aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ae:	4b48      	ldr	r3, [pc, #288]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066be:	ed97 6a03 	vldr	s12, [r7, #12]
 80066c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066de:	e021      	b.n	8006724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f2:	4b37      	ldr	r3, [pc, #220]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006702:	ed97 6a03 	vldr	s12, [r7, #12]
 8006706:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800670a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800671a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006722:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006724:	4b2a      	ldr	r3, [pc, #168]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	0a5b      	lsrs	r3, r3, #9
 800672a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800673a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800673e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800674a:	ee17 2a90 	vmov	r2, s15
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006752:	4b1f      	ldr	r3, [pc, #124]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	0c1b      	lsrs	r3, r3, #16
 8006758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800676c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006778:	ee17 2a90 	vmov	r2, s15
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006780:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	0e1b      	lsrs	r3, r3, #24
 8006786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800679a:	edd7 6a07 	vldr	s13, [r7, #28]
 800679e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a6:	ee17 2a90 	vmov	r2, s15
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80067ae:	e008      	b.n	80067c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
}
 80067c2:	bf00      	nop
 80067c4:	3724      	adds	r7, #36	@ 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	58024400 	.word	0x58024400
 80067d4:	03d09000 	.word	0x03d09000
 80067d8:	46000000 	.word	0x46000000
 80067dc:	4c742400 	.word	0x4c742400
 80067e0:	4a742400 	.word	0x4a742400
 80067e4:	4bbebc20 	.word	0x4bbebc20

080067e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067f6:	4b53      	ldr	r3, [pc, #332]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80067f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d101      	bne.n	8006806 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e099      	b.n	800693a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006806:	4b4f      	ldr	r3, [pc, #316]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a4e      	ldr	r2, [pc, #312]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 800680c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006812:	f7fa fd25 	bl	8001260 <HAL_GetTick>
 8006816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006818:	e008      	b.n	800682c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800681a:	f7fa fd21 	bl	8001260 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e086      	b.n	800693a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800682c:	4b45      	ldr	r3, [pc, #276]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006838:	4b42      	ldr	r3, [pc, #264]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 800683a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	493f      	ldr	r1, [pc, #252]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006848:	4313      	orrs	r3, r2
 800684a:	628b      	str	r3, [r1, #40]	@ 0x28
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	3b01      	subs	r3, #1
 8006852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	3b01      	subs	r3, #1
 800685c:	025b      	lsls	r3, r3, #9
 800685e:	b29b      	uxth	r3, r3
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	3b01      	subs	r3, #1
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	3b01      	subs	r3, #1
 8006876:	061b      	lsls	r3, r3, #24
 8006878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800687c:	4931      	ldr	r1, [pc, #196]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 800687e:	4313      	orrs	r3, r2
 8006880:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006882:	4b30      	ldr	r3, [pc, #192]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	492d      	ldr	r1, [pc, #180]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006890:	4313      	orrs	r3, r2
 8006892:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006894:	4b2b      	ldr	r3, [pc, #172]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	f023 0220 	bic.w	r2, r3, #32
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	4928      	ldr	r1, [pc, #160]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80068a6:	4b27      	ldr	r3, [pc, #156]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068aa:	4a26      	ldr	r2, [pc, #152]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068ac:	f023 0310 	bic.w	r3, r3, #16
 80068b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80068b2:	4b24      	ldr	r3, [pc, #144]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068b6:	4b24      	ldr	r3, [pc, #144]	@ (8006948 <RCCEx_PLL2_Config+0x160>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	69d2      	ldr	r2, [r2, #28]
 80068be:	00d2      	lsls	r2, r2, #3
 80068c0:	4920      	ldr	r1, [pc, #128]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80068c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068cc:	f043 0310 	orr.w	r3, r3, #16
 80068d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80068d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068dc:	4a19      	ldr	r2, [pc, #100]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068e4:	e00f      	b.n	8006906 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d106      	bne.n	80068fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80068ec:	4b15      	ldr	r3, [pc, #84]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	4a14      	ldr	r2, [pc, #80]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068f8:	e005      	b.n	8006906 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068fa:	4b12      	ldr	r3, [pc, #72]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	4a11      	ldr	r2, [pc, #68]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006900:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006904:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006906:	4b0f      	ldr	r3, [pc, #60]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a0e      	ldr	r2, [pc, #56]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 800690c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006912:	f7fa fca5 	bl	8001260 <HAL_GetTick>
 8006916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006918:	e008      	b.n	800692c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800691a:	f7fa fca1 	bl	8001260 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e006      	b.n	800693a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800692c:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <RCCEx_PLL2_Config+0x15c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006938:	7bfb      	ldrb	r3, [r7, #15]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	58024400 	.word	0x58024400
 8006948:	ffff0007 	.word	0xffff0007

0800694c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800695a:	4b53      	ldr	r3, [pc, #332]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d101      	bne.n	800696a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e099      	b.n	8006a9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800696a:	4b4f      	ldr	r3, [pc, #316]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a4e      	ldr	r2, [pc, #312]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006976:	f7fa fc73 	bl	8001260 <HAL_GetTick>
 800697a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800697c:	e008      	b.n	8006990 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800697e:	f7fa fc6f 	bl	8001260 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e086      	b.n	8006a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006990:	4b45      	ldr	r3, [pc, #276]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f0      	bne.n	800697e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800699c:	4b42      	ldr	r3, [pc, #264]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	051b      	lsls	r3, r3, #20
 80069aa:	493f      	ldr	r1, [pc, #252]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	3b01      	subs	r3, #1
 80069c0:	025b      	lsls	r3, r3, #9
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	041b      	lsls	r3, r3, #16
 80069ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	3b01      	subs	r3, #1
 80069da:	061b      	lsls	r3, r3, #24
 80069dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069e0:	4931      	ldr	r1, [pc, #196]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80069e6:	4b30      	ldr	r3, [pc, #192]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	492d      	ldr	r1, [pc, #180]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069f8:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 80069fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4928      	ldr	r1, [pc, #160]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a0a:	4b27      	ldr	r3, [pc, #156]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	4a26      	ldr	r2, [pc, #152]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a16:	4b24      	ldr	r3, [pc, #144]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a1a:	4b24      	ldr	r3, [pc, #144]	@ (8006aac <RCCEx_PLL3_Config+0x160>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	69d2      	ldr	r2, [r2, #28]
 8006a22:	00d2      	lsls	r2, r2, #3
 8006a24:	4920      	ldr	r1, [pc, #128]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a40:	4a19      	ldr	r2, [pc, #100]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a48:	e00f      	b.n	8006a6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d106      	bne.n	8006a5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a50:	4b15      	ldr	r3, [pc, #84]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	4a14      	ldr	r2, [pc, #80]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a5c:	e005      	b.n	8006a6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a5e:	4b12      	ldr	r3, [pc, #72]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	4a11      	ldr	r2, [pc, #68]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a76:	f7fa fbf3 	bl	8001260 <HAL_GetTick>
 8006a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a7c:	e008      	b.n	8006a90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a7e:	f7fa fbef 	bl	8001260 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e006      	b.n	8006a9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a90:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <RCCEx_PLL3_Config+0x15c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	ffff0007 	.word	0xffff0007

08006ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e042      	b.n	8006b48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fa fa2f 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2224      	movs	r2, #36	@ 0x24
 8006ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0201 	bic.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fe1e 	bl	800773c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8b3 	bl	8006c6c <UART_SetConfig>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e01b      	b.n	8006b48 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fe9d 	bl	8007880 <UART_CheckIdleState>
 8006b46:	4603      	mov	r3, r0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	@ 0x28
 8006b54:	af02      	add	r7, sp, #8
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	d17b      	bne.n	8006c62 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <HAL_UART_Transmit+0x26>
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e074      	b.n	8006c64 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2221      	movs	r2, #33	@ 0x21
 8006b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b8a:	f7fa fb69 	bl	8001260 <HAL_GetTick>
 8006b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	88fa      	ldrh	r2, [r7, #6]
 8006b94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	88fa      	ldrh	r2, [r7, #6]
 8006b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba8:	d108      	bne.n	8006bbc <HAL_UART_Transmit+0x6c>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e003      	b.n	8006bc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006bc4:	e030      	b.n	8006c28 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2180      	movs	r1, #128	@ 0x80
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 feff 	bl	80079d4 <UART_WaitOnFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e03d      	b.n	8006c64 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bfc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	3302      	adds	r3, #2
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e007      	b.n	8006c16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	3301      	adds	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1c8      	bne.n	8006bc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2140      	movs	r1, #64	@ 0x40
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fec8 	bl	80079d4 <UART_WaitOnFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e006      	b.n	8006c64 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e000      	b.n	8006c64 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c62:	2302      	movs	r3, #2
  }
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c70:	b092      	sub	sp, #72	@ 0x48
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8006f94 <UART_SetConfig+0x328>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4ab3      	ldr	r2, [pc, #716]	@ (8006f98 <UART_SetConfig+0x32c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	4baf      	ldr	r3, [pc, #700]	@ (8006f9c <UART_SetConfig+0x330>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	f023 010f 	bic.w	r1, r3, #15
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4aa6      	ldr	r2, [pc, #664]	@ (8006fa0 <UART_SetConfig+0x334>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d177      	bne.n	8006dfc <UART_SetConfig+0x190>
 8006d0c:	4ba5      	ldr	r3, [pc, #660]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d14:	2b28      	cmp	r3, #40	@ 0x28
 8006d16:	d86d      	bhi.n	8006df4 <UART_SetConfig+0x188>
 8006d18:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <UART_SetConfig+0xb4>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006dc5 	.word	0x08006dc5
 8006d24:	08006df5 	.word	0x08006df5
 8006d28:	08006df5 	.word	0x08006df5
 8006d2c:	08006df5 	.word	0x08006df5
 8006d30:	08006df5 	.word	0x08006df5
 8006d34:	08006df5 	.word	0x08006df5
 8006d38:	08006df5 	.word	0x08006df5
 8006d3c:	08006df5 	.word	0x08006df5
 8006d40:	08006dcd 	.word	0x08006dcd
 8006d44:	08006df5 	.word	0x08006df5
 8006d48:	08006df5 	.word	0x08006df5
 8006d4c:	08006df5 	.word	0x08006df5
 8006d50:	08006df5 	.word	0x08006df5
 8006d54:	08006df5 	.word	0x08006df5
 8006d58:	08006df5 	.word	0x08006df5
 8006d5c:	08006df5 	.word	0x08006df5
 8006d60:	08006dd5 	.word	0x08006dd5
 8006d64:	08006df5 	.word	0x08006df5
 8006d68:	08006df5 	.word	0x08006df5
 8006d6c:	08006df5 	.word	0x08006df5
 8006d70:	08006df5 	.word	0x08006df5
 8006d74:	08006df5 	.word	0x08006df5
 8006d78:	08006df5 	.word	0x08006df5
 8006d7c:	08006df5 	.word	0x08006df5
 8006d80:	08006ddd 	.word	0x08006ddd
 8006d84:	08006df5 	.word	0x08006df5
 8006d88:	08006df5 	.word	0x08006df5
 8006d8c:	08006df5 	.word	0x08006df5
 8006d90:	08006df5 	.word	0x08006df5
 8006d94:	08006df5 	.word	0x08006df5
 8006d98:	08006df5 	.word	0x08006df5
 8006d9c:	08006df5 	.word	0x08006df5
 8006da0:	08006de5 	.word	0x08006de5
 8006da4:	08006df5 	.word	0x08006df5
 8006da8:	08006df5 	.word	0x08006df5
 8006dac:	08006df5 	.word	0x08006df5
 8006db0:	08006df5 	.word	0x08006df5
 8006db4:	08006df5 	.word	0x08006df5
 8006db8:	08006df5 	.word	0x08006df5
 8006dbc:	08006df5 	.word	0x08006df5
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dca:	e222      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd2:	e21e      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dda:	e21a      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de2:	e216      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006de4:	2320      	movs	r3, #32
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dea:	e212      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006dec:	2340      	movs	r3, #64	@ 0x40
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df2:	e20e      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfa:	e20a      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a69      	ldr	r2, [pc, #420]	@ (8006fa8 <UART_SetConfig+0x33c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d130      	bne.n	8006e68 <UART_SetConfig+0x1fc>
 8006e06:	4b67      	ldr	r3, [pc, #412]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d826      	bhi.n	8006e60 <UART_SetConfig+0x1f4>
 8006e12:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <UART_SetConfig+0x1ac>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e36:	e1ec      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3e:	e1e8      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e46:	e1e4      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4e:	e1e0      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006e50:	2320      	movs	r3, #32
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e56:	e1dc      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006e58:	2340      	movs	r3, #64	@ 0x40
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5e:	e1d8      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006e60:	2380      	movs	r3, #128	@ 0x80
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e66:	e1d4      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8006fac <UART_SetConfig+0x340>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d130      	bne.n	8006ed4 <UART_SetConfig+0x268>
 8006e72:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d826      	bhi.n	8006ecc <UART_SetConfig+0x260>
 8006e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0x218>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006ea5 	.word	0x08006ea5
 8006e8c:	08006ead 	.word	0x08006ead
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea2:	e1b6      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eaa:	e1b2      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb2:	e1ae      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e1aa      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e1a6      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006ec4:	2340      	movs	r3, #64	@ 0x40
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e1a2      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006ecc:	2380      	movs	r3, #128	@ 0x80
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed2:	e19e      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a35      	ldr	r2, [pc, #212]	@ (8006fb0 <UART_SetConfig+0x344>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d130      	bne.n	8006f40 <UART_SetConfig+0x2d4>
 8006ede:	4b31      	ldr	r3, [pc, #196]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d826      	bhi.n	8006f38 <UART_SetConfig+0x2cc>
 8006eea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <UART_SetConfig+0x284>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f09 	.word	0x08006f09
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e180      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f16:	e17c      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1e:	e178      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e174      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e170      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f30:	2340      	movs	r3, #64	@ 0x40
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e16c      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f38:	2380      	movs	r3, #128	@ 0x80
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e168      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb4 <UART_SetConfig+0x348>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d142      	bne.n	8006fd0 <UART_SetConfig+0x364>
 8006f4a:	4b16      	ldr	r3, [pc, #88]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d838      	bhi.n	8006fc8 <UART_SetConfig+0x35c>
 8006f56:	a201      	add	r2, pc, #4	@ (adr r2, 8006f5c <UART_SetConfig+0x2f0>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f75 	.word	0x08006f75
 8006f60:	08006f7d 	.word	0x08006f7d
 8006f64:	08006f85 	.word	0x08006f85
 8006f68:	08006f8d 	.word	0x08006f8d
 8006f6c:	08006fb9 	.word	0x08006fb9
 8006f70:	08006fc1 	.word	0x08006fc1
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e14a      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e146      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f84:	2308      	movs	r3, #8
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e142      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e13e      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006f94:	cfff69f3 	.word	0xcfff69f3
 8006f98:	58000c00 	.word	0x58000c00
 8006f9c:	11fff4ff 	.word	0x11fff4ff
 8006fa0:	40011000 	.word	0x40011000
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	40004400 	.word	0x40004400
 8006fac:	40004800 	.word	0x40004800
 8006fb0:	40004c00 	.word	0x40004c00
 8006fb4:	40005000 	.word	0x40005000
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e128      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006fc0:	2340      	movs	r3, #64	@ 0x40
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e124      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006fc8:	2380      	movs	r3, #128	@ 0x80
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fce:	e120      	b.n	8007212 <UART_SetConfig+0x5a6>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4acb      	ldr	r2, [pc, #812]	@ (8007304 <UART_SetConfig+0x698>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d176      	bne.n	80070c8 <UART_SetConfig+0x45c>
 8006fda:	4bcb      	ldr	r3, [pc, #812]	@ (8007308 <UART_SetConfig+0x69c>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fe2:	2b28      	cmp	r3, #40	@ 0x28
 8006fe4:	d86c      	bhi.n	80070c0 <UART_SetConfig+0x454>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0x380>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007091 	.word	0x08007091
 8006ff0:	080070c1 	.word	0x080070c1
 8006ff4:	080070c1 	.word	0x080070c1
 8006ff8:	080070c1 	.word	0x080070c1
 8006ffc:	080070c1 	.word	0x080070c1
 8007000:	080070c1 	.word	0x080070c1
 8007004:	080070c1 	.word	0x080070c1
 8007008:	080070c1 	.word	0x080070c1
 800700c:	08007099 	.word	0x08007099
 8007010:	080070c1 	.word	0x080070c1
 8007014:	080070c1 	.word	0x080070c1
 8007018:	080070c1 	.word	0x080070c1
 800701c:	080070c1 	.word	0x080070c1
 8007020:	080070c1 	.word	0x080070c1
 8007024:	080070c1 	.word	0x080070c1
 8007028:	080070c1 	.word	0x080070c1
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070c1 	.word	0x080070c1
 8007034:	080070c1 	.word	0x080070c1
 8007038:	080070c1 	.word	0x080070c1
 800703c:	080070c1 	.word	0x080070c1
 8007040:	080070c1 	.word	0x080070c1
 8007044:	080070c1 	.word	0x080070c1
 8007048:	080070c1 	.word	0x080070c1
 800704c:	080070a9 	.word	0x080070a9
 8007050:	080070c1 	.word	0x080070c1
 8007054:	080070c1 	.word	0x080070c1
 8007058:	080070c1 	.word	0x080070c1
 800705c:	080070c1 	.word	0x080070c1
 8007060:	080070c1 	.word	0x080070c1
 8007064:	080070c1 	.word	0x080070c1
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070b1 	.word	0x080070b1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070c1 	.word	0x080070c1
 8007080:	080070c1 	.word	0x080070c1
 8007084:	080070c1 	.word	0x080070c1
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007096:	e0bc      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709e:	e0b8      	b.n	8007212 <UART_SetConfig+0x5a6>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a6:	e0b4      	b.n	8007212 <UART_SetConfig+0x5a6>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ae:	e0b0      	b.n	8007212 <UART_SetConfig+0x5a6>
 80070b0:	2320      	movs	r3, #32
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b6:	e0ac      	b.n	8007212 <UART_SetConfig+0x5a6>
 80070b8:	2340      	movs	r3, #64	@ 0x40
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070be:	e0a8      	b.n	8007212 <UART_SetConfig+0x5a6>
 80070c0:	2380      	movs	r3, #128	@ 0x80
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c6:	e0a4      	b.n	8007212 <UART_SetConfig+0x5a6>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a8f      	ldr	r2, [pc, #572]	@ (800730c <UART_SetConfig+0x6a0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d130      	bne.n	8007134 <UART_SetConfig+0x4c8>
 80070d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007308 <UART_SetConfig+0x69c>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d826      	bhi.n	800712c <UART_SetConfig+0x4c0>
 80070de:	a201      	add	r2, pc, #4	@ (adr r2, 80070e4 <UART_SetConfig+0x478>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070fd 	.word	0x080070fd
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800710d 	.word	0x0800710d
 80070f0:	08007115 	.word	0x08007115
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007125 	.word	0x08007125
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007102:	e086      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710a:	e082      	b.n	8007212 <UART_SetConfig+0x5a6>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007112:	e07e      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e07a      	b.n	8007212 <UART_SetConfig+0x5a6>
 800711c:	2320      	movs	r3, #32
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e076      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007124:	2340      	movs	r3, #64	@ 0x40
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e072      	b.n	8007212 <UART_SetConfig+0x5a6>
 800712c:	2380      	movs	r3, #128	@ 0x80
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007132:	e06e      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a75      	ldr	r2, [pc, #468]	@ (8007310 <UART_SetConfig+0x6a4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d130      	bne.n	80071a0 <UART_SetConfig+0x534>
 800713e:	4b72      	ldr	r3, [pc, #456]	@ (8007308 <UART_SetConfig+0x69c>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b05      	cmp	r3, #5
 8007148:	d826      	bhi.n	8007198 <UART_SetConfig+0x52c>
 800714a:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <UART_SetConfig+0x4e4>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007169 	.word	0x08007169
 8007154:	08007171 	.word	0x08007171
 8007158:	08007179 	.word	0x08007179
 800715c:	08007181 	.word	0x08007181
 8007160:	08007189 	.word	0x08007189
 8007164:	08007191 	.word	0x08007191
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716e:	e050      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007176:	e04c      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717e:	e048      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e044      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007188:	2320      	movs	r3, #32
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e040      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007190:	2340      	movs	r3, #64	@ 0x40
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e03c      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719e:	e038      	b.n	8007212 <UART_SetConfig+0x5a6>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a5b      	ldr	r2, [pc, #364]	@ (8007314 <UART_SetConfig+0x6a8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d130      	bne.n	800720c <UART_SetConfig+0x5a0>
 80071aa:	4b57      	ldr	r3, [pc, #348]	@ (8007308 <UART_SetConfig+0x69c>)
 80071ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d826      	bhi.n	8007204 <UART_SetConfig+0x598>
 80071b6:	a201      	add	r2, pc, #4	@ (adr r2, 80071bc <UART_SetConfig+0x550>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071e5 	.word	0x080071e5
 80071c8:	080071ed 	.word	0x080071ed
 80071cc:	080071f5 	.word	0x080071f5
 80071d0:	080071fd 	.word	0x080071fd
 80071d4:	2302      	movs	r3, #2
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071da:	e01a      	b.n	8007212 <UART_SetConfig+0x5a6>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071e2:	e016      	b.n	8007212 <UART_SetConfig+0x5a6>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ea:	e012      	b.n	8007212 <UART_SetConfig+0x5a6>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e00e      	b.n	8007212 <UART_SetConfig+0x5a6>
 80071f4:	2320      	movs	r3, #32
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e00a      	b.n	8007212 <UART_SetConfig+0x5a6>
 80071fc:	2340      	movs	r3, #64	@ 0x40
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e006      	b.n	8007212 <UART_SetConfig+0x5a6>
 8007204:	2380      	movs	r3, #128	@ 0x80
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e002      	b.n	8007212 <UART_SetConfig+0x5a6>
 800720c:	2380      	movs	r3, #128	@ 0x80
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a3f      	ldr	r2, [pc, #252]	@ (8007314 <UART_SetConfig+0x6a8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	f040 80f8 	bne.w	800740e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800721e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007222:	2b20      	cmp	r3, #32
 8007224:	dc46      	bgt.n	80072b4 <UART_SetConfig+0x648>
 8007226:	2b02      	cmp	r3, #2
 8007228:	f2c0 8082 	blt.w	8007330 <UART_SetConfig+0x6c4>
 800722c:	3b02      	subs	r3, #2
 800722e:	2b1e      	cmp	r3, #30
 8007230:	d87e      	bhi.n	8007330 <UART_SetConfig+0x6c4>
 8007232:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <UART_SetConfig+0x5cc>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	080072bb 	.word	0x080072bb
 800723c:	08007331 	.word	0x08007331
 8007240:	080072c3 	.word	0x080072c3
 8007244:	08007331 	.word	0x08007331
 8007248:	08007331 	.word	0x08007331
 800724c:	08007331 	.word	0x08007331
 8007250:	080072d3 	.word	0x080072d3
 8007254:	08007331 	.word	0x08007331
 8007258:	08007331 	.word	0x08007331
 800725c:	08007331 	.word	0x08007331
 8007260:	08007331 	.word	0x08007331
 8007264:	08007331 	.word	0x08007331
 8007268:	08007331 	.word	0x08007331
 800726c:	08007331 	.word	0x08007331
 8007270:	080072e3 	.word	0x080072e3
 8007274:	08007331 	.word	0x08007331
 8007278:	08007331 	.word	0x08007331
 800727c:	08007331 	.word	0x08007331
 8007280:	08007331 	.word	0x08007331
 8007284:	08007331 	.word	0x08007331
 8007288:	08007331 	.word	0x08007331
 800728c:	08007331 	.word	0x08007331
 8007290:	08007331 	.word	0x08007331
 8007294:	08007331 	.word	0x08007331
 8007298:	08007331 	.word	0x08007331
 800729c:	08007331 	.word	0x08007331
 80072a0:	08007331 	.word	0x08007331
 80072a4:	08007331 	.word	0x08007331
 80072a8:	08007331 	.word	0x08007331
 80072ac:	08007331 	.word	0x08007331
 80072b0:	08007323 	.word	0x08007323
 80072b4:	2b40      	cmp	r3, #64	@ 0x40
 80072b6:	d037      	beq.n	8007328 <UART_SetConfig+0x6bc>
 80072b8:	e03a      	b.n	8007330 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80072ba:	f7fe ffd7 	bl	800626c <HAL_RCCEx_GetD3PCLK1Freq>
 80072be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80072c0:	e03c      	b.n	800733c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe ffe6 	bl	8006298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80072cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d0:	e034      	b.n	800733c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072d2:	f107 0318 	add.w	r3, r7, #24
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff f932 	bl	8006540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072e0:	e02c      	b.n	800733c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <UART_SetConfig+0x69c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072ee:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <UART_SetConfig+0x69c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	08db      	lsrs	r3, r3, #3
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	4a07      	ldr	r2, [pc, #28]	@ (8007318 <UART_SetConfig+0x6ac>)
 80072fa:	fa22 f303 	lsr.w	r3, r2, r3
 80072fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007300:	e01c      	b.n	800733c <UART_SetConfig+0x6d0>
 8007302:	bf00      	nop
 8007304:	40011400 	.word	0x40011400
 8007308:	58024400 	.word	0x58024400
 800730c:	40007800 	.word	0x40007800
 8007310:	40007c00 	.word	0x40007c00
 8007314:	58000c00 	.word	0x58000c00
 8007318:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800731c:	4b9d      	ldr	r3, [pc, #628]	@ (8007594 <UART_SetConfig+0x928>)
 800731e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007320:	e00c      	b.n	800733c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007322:	4b9d      	ldr	r3, [pc, #628]	@ (8007598 <UART_SetConfig+0x92c>)
 8007324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007326:	e009      	b.n	800733c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007328:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800732c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800732e:	e005      	b.n	800733c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800733a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800733c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 81de 	beq.w	8007700 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007348:	4a94      	ldr	r2, [pc, #592]	@ (800759c <UART_SetConfig+0x930>)
 800734a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800734e:	461a      	mov	r2, r3
 8007350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007352:	fbb3 f3f2 	udiv	r3, r3, r2
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	4413      	add	r3, r2
 8007362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007364:	429a      	cmp	r2, r3
 8007366:	d305      	bcc.n	8007374 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007370:	429a      	cmp	r2, r3
 8007372:	d903      	bls.n	800737c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800737a:	e1c1      	b.n	8007700 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800737c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800737e:	2200      	movs	r2, #0
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	60fa      	str	r2, [r7, #12]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007388:	4a84      	ldr	r2, [pc, #528]	@ (800759c <UART_SetConfig+0x930>)
 800738a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738e:	b29b      	uxth	r3, r3
 8007390:	2200      	movs	r2, #0
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	607a      	str	r2, [r7, #4]
 8007396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800739e:	f7f8 fff7 	bl	8000390 <__aeabi_uldivmod>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4610      	mov	r0, r2
 80073a8:	4619      	mov	r1, r3
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	f04f 0300 	mov.w	r3, #0
 80073b2:	020b      	lsls	r3, r1, #8
 80073b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073b8:	0202      	lsls	r2, r0, #8
 80073ba:	6979      	ldr	r1, [r7, #20]
 80073bc:	6849      	ldr	r1, [r1, #4]
 80073be:	0849      	lsrs	r1, r1, #1
 80073c0:	2000      	movs	r0, #0
 80073c2:	460c      	mov	r4, r1
 80073c4:	4605      	mov	r5, r0
 80073c6:	eb12 0804 	adds.w	r8, r2, r4
 80073ca:	eb43 0905 	adc.w	r9, r3, r5
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	469a      	mov	sl, r3
 80073d6:	4693      	mov	fp, r2
 80073d8:	4652      	mov	r2, sl
 80073da:	465b      	mov	r3, fp
 80073dc:	4640      	mov	r0, r8
 80073de:	4649      	mov	r1, r9
 80073e0:	f7f8 ffd6 	bl	8000390 <__aeabi_uldivmod>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4613      	mov	r3, r2
 80073ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073f2:	d308      	bcc.n	8007406 <UART_SetConfig+0x79a>
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073fa:	d204      	bcs.n	8007406 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007402:	60da      	str	r2, [r3, #12]
 8007404:	e17c      	b.n	8007700 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800740c:	e178      	b.n	8007700 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007416:	f040 80c5 	bne.w	80075a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800741a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800741e:	2b20      	cmp	r3, #32
 8007420:	dc48      	bgt.n	80074b4 <UART_SetConfig+0x848>
 8007422:	2b00      	cmp	r3, #0
 8007424:	db7b      	blt.n	800751e <UART_SetConfig+0x8b2>
 8007426:	2b20      	cmp	r3, #32
 8007428:	d879      	bhi.n	800751e <UART_SetConfig+0x8b2>
 800742a:	a201      	add	r2, pc, #4	@ (adr r2, 8007430 <UART_SetConfig+0x7c4>)
 800742c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007430:	080074bb 	.word	0x080074bb
 8007434:	080074c3 	.word	0x080074c3
 8007438:	0800751f 	.word	0x0800751f
 800743c:	0800751f 	.word	0x0800751f
 8007440:	080074cb 	.word	0x080074cb
 8007444:	0800751f 	.word	0x0800751f
 8007448:	0800751f 	.word	0x0800751f
 800744c:	0800751f 	.word	0x0800751f
 8007450:	080074db 	.word	0x080074db
 8007454:	0800751f 	.word	0x0800751f
 8007458:	0800751f 	.word	0x0800751f
 800745c:	0800751f 	.word	0x0800751f
 8007460:	0800751f 	.word	0x0800751f
 8007464:	0800751f 	.word	0x0800751f
 8007468:	0800751f 	.word	0x0800751f
 800746c:	0800751f 	.word	0x0800751f
 8007470:	080074eb 	.word	0x080074eb
 8007474:	0800751f 	.word	0x0800751f
 8007478:	0800751f 	.word	0x0800751f
 800747c:	0800751f 	.word	0x0800751f
 8007480:	0800751f 	.word	0x0800751f
 8007484:	0800751f 	.word	0x0800751f
 8007488:	0800751f 	.word	0x0800751f
 800748c:	0800751f 	.word	0x0800751f
 8007490:	0800751f 	.word	0x0800751f
 8007494:	0800751f 	.word	0x0800751f
 8007498:	0800751f 	.word	0x0800751f
 800749c:	0800751f 	.word	0x0800751f
 80074a0:	0800751f 	.word	0x0800751f
 80074a4:	0800751f 	.word	0x0800751f
 80074a8:	0800751f 	.word	0x0800751f
 80074ac:	0800751f 	.word	0x0800751f
 80074b0:	08007511 	.word	0x08007511
 80074b4:	2b40      	cmp	r3, #64	@ 0x40
 80074b6:	d02e      	beq.n	8007516 <UART_SetConfig+0x8aa>
 80074b8:	e031      	b.n	800751e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ba:	f7fd fc61 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 80074be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074c0:	e033      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074c2:	f7fd fc73 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 80074c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074c8:	e02f      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fee2 	bl	8006298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d8:	e027      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074da:	f107 0318 	add.w	r3, r7, #24
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff f82e 	bl	8006540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e8:	e01f      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ea:	4b2d      	ldr	r3, [pc, #180]	@ (80075a0 <UART_SetConfig+0x934>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074f6:	4b2a      	ldr	r3, [pc, #168]	@ (80075a0 <UART_SetConfig+0x934>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	4a24      	ldr	r2, [pc, #144]	@ (8007594 <UART_SetConfig+0x928>)
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007508:	e00f      	b.n	800752a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800750a:	4b22      	ldr	r3, [pc, #136]	@ (8007594 <UART_SetConfig+0x928>)
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750e:	e00c      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007510:	4b21      	ldr	r3, [pc, #132]	@ (8007598 <UART_SetConfig+0x92c>)
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007514:	e009      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751c:	e005      	b.n	800752a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800752a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80e7 	beq.w	8007700 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007536:	4a19      	ldr	r2, [pc, #100]	@ (800759c <UART_SetConfig+0x930>)
 8007538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800753c:	461a      	mov	r2, r3
 800753e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007540:	fbb3 f3f2 	udiv	r3, r3, r2
 8007544:	005a      	lsls	r2, r3, #1
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	441a      	add	r2, r3
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	fbb2 f3f3 	udiv	r3, r2, r3
 8007556:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755a:	2b0f      	cmp	r3, #15
 800755c:	d916      	bls.n	800758c <UART_SetConfig+0x920>
 800755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007564:	d212      	bcs.n	800758c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	b29b      	uxth	r3, r3
 800756a:	f023 030f 	bic.w	r3, r3, #15
 800756e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	b29b      	uxth	r3, r3
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	b29a      	uxth	r2, r3
 800757c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800757e:	4313      	orrs	r3, r2
 8007580:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007588:	60da      	str	r2, [r3, #12]
 800758a:	e0b9      	b.n	8007700 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007592:	e0b5      	b.n	8007700 <UART_SetConfig+0xa94>
 8007594:	03d09000 	.word	0x03d09000
 8007598:	003d0900 	.word	0x003d0900
 800759c:	08008744 	.word	0x08008744
 80075a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80075a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	dc49      	bgt.n	8007640 <UART_SetConfig+0x9d4>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	db7c      	blt.n	80076aa <UART_SetConfig+0xa3e>
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d87a      	bhi.n	80076aa <UART_SetConfig+0xa3e>
 80075b4:	a201      	add	r2, pc, #4	@ (adr r2, 80075bc <UART_SetConfig+0x950>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	08007647 	.word	0x08007647
 80075c0:	0800764f 	.word	0x0800764f
 80075c4:	080076ab 	.word	0x080076ab
 80075c8:	080076ab 	.word	0x080076ab
 80075cc:	08007657 	.word	0x08007657
 80075d0:	080076ab 	.word	0x080076ab
 80075d4:	080076ab 	.word	0x080076ab
 80075d8:	080076ab 	.word	0x080076ab
 80075dc:	08007667 	.word	0x08007667
 80075e0:	080076ab 	.word	0x080076ab
 80075e4:	080076ab 	.word	0x080076ab
 80075e8:	080076ab 	.word	0x080076ab
 80075ec:	080076ab 	.word	0x080076ab
 80075f0:	080076ab 	.word	0x080076ab
 80075f4:	080076ab 	.word	0x080076ab
 80075f8:	080076ab 	.word	0x080076ab
 80075fc:	08007677 	.word	0x08007677
 8007600:	080076ab 	.word	0x080076ab
 8007604:	080076ab 	.word	0x080076ab
 8007608:	080076ab 	.word	0x080076ab
 800760c:	080076ab 	.word	0x080076ab
 8007610:	080076ab 	.word	0x080076ab
 8007614:	080076ab 	.word	0x080076ab
 8007618:	080076ab 	.word	0x080076ab
 800761c:	080076ab 	.word	0x080076ab
 8007620:	080076ab 	.word	0x080076ab
 8007624:	080076ab 	.word	0x080076ab
 8007628:	080076ab 	.word	0x080076ab
 800762c:	080076ab 	.word	0x080076ab
 8007630:	080076ab 	.word	0x080076ab
 8007634:	080076ab 	.word	0x080076ab
 8007638:	080076ab 	.word	0x080076ab
 800763c:	0800769d 	.word	0x0800769d
 8007640:	2b40      	cmp	r3, #64	@ 0x40
 8007642:	d02e      	beq.n	80076a2 <UART_SetConfig+0xa36>
 8007644:	e031      	b.n	80076aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007646:	f7fd fb9b 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 800764a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800764c:	e033      	b.n	80076b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800764e:	f7fd fbad 	bl	8004dac <HAL_RCC_GetPCLK2Freq>
 8007652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007654:	e02f      	b.n	80076b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fe1c 	bl	8006298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007664:	e027      	b.n	80076b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007666:	f107 0318 	add.w	r3, r7, #24
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe ff68 	bl	8006540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007674:	e01f      	b.n	80076b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007676:	4b2d      	ldr	r3, [pc, #180]	@ (800772c <UART_SetConfig+0xac0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007682:	4b2a      	ldr	r3, [pc, #168]	@ (800772c <UART_SetConfig+0xac0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	08db      	lsrs	r3, r3, #3
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	4a28      	ldr	r2, [pc, #160]	@ (8007730 <UART_SetConfig+0xac4>)
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007694:	e00f      	b.n	80076b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007696:	4b26      	ldr	r3, [pc, #152]	@ (8007730 <UART_SetConfig+0xac4>)
 8007698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800769a:	e00c      	b.n	80076b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800769c:	4b25      	ldr	r3, [pc, #148]	@ (8007734 <UART_SetConfig+0xac8>)
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a0:	e009      	b.n	80076b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a8:	e005      	b.n	80076b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80076b4:	bf00      	nop
    }

    if (pclk != 0U)
 80076b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d021      	beq.n	8007700 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007738 <UART_SetConfig+0xacc>)
 80076c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c6:	461a      	mov	r2, r3
 80076c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	441a      	add	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e2:	2b0f      	cmp	r3, #15
 80076e4:	d909      	bls.n	80076fa <UART_SetConfig+0xa8e>
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ec:	d205      	bcs.n	80076fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60da      	str	r2, [r3, #12]
 80076f8:	e002      	b.n	8007700 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2201      	movs	r2, #1
 8007704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2201      	movs	r2, #1
 800770c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2200      	movs	r2, #0
 8007714:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2200      	movs	r2, #0
 800771a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800771c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007720:	4618      	mov	r0, r3
 8007722:	3748      	adds	r7, #72	@ 0x48
 8007724:	46bd      	mov	sp, r7
 8007726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	03d09000 	.word	0x03d09000
 8007734:	003d0900 	.word	0x003d0900
 8007738:	08008744 	.word	0x08008744

0800773c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01a      	beq.n	8007852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800783a:	d10a      	bne.n	8007852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b098      	sub	sp, #96	@ 0x60
 8007884:	af02      	add	r7, sp, #8
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007890:	f7f9 fce6 	bl	8001260 <HAL_GetTick>
 8007894:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0308 	and.w	r3, r3, #8
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d12f      	bne.n	8007904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ac:	2200      	movs	r2, #0
 80078ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f88e 	bl	80079d4 <UART_WaitOnFlagUntilTimeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d022      	beq.n	8007904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e6      	bne.n	80078be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e063      	b.n	80079cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	2b04      	cmp	r3, #4
 8007910:	d149      	bne.n	80079a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007912:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800791a:	2200      	movs	r2, #0
 800791c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f857 	bl	80079d4 <UART_WaitOnFlagUntilTimeout>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d03c      	beq.n	80079a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	623b      	str	r3, [r7, #32]
   return(result);
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800794a:	633b      	str	r3, [r7, #48]	@ 0x30
 800794c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e6      	bne.n	800792c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3308      	adds	r3, #8
 8007964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	60fb      	str	r3, [r7, #12]
   return(result);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f023 0301 	bic.w	r3, r3, #1
 8007974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800797e:	61fa      	str	r2, [r7, #28]
 8007980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	69b9      	ldr	r1, [r7, #24]
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	617b      	str	r3, [r7, #20]
   return(result);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e5      	bne.n	800795e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e012      	b.n	80079cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3758      	adds	r7, #88	@ 0x58
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079e4:	e04f      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d04b      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ee:	f7f9 fc37 	bl	8001260 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d302      	bcc.n	8007a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e04e      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d037      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b80      	cmp	r3, #128	@ 0x80
 8007a1a:	d034      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b40      	cmp	r3, #64	@ 0x40
 8007a20:	d031      	beq.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d110      	bne.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2208      	movs	r2, #8
 8007a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f839 	bl	8007ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2208      	movs	r2, #8
 8007a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e029      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a60:	d111      	bne.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f81f 	bl	8007ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e00f      	b.n	8007aa6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69da      	ldr	r2, [r3, #28]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	bf0c      	ite	eq
 8007a96:	2301      	moveq	r3, #1
 8007a98:	2300      	movne	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d0a0      	beq.n	80079e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	@ 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ad8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007adc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e6      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	4b1e      	ldr	r3, [pc, #120]	@ (8007b78 <UART_EndRxTransfer+0xc8>)
 8007afe:	4013      	ands	r3, r2
 8007b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e5      	bne.n	8007aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d118      	bne.n	8007b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 0310 	bic.w	r3, r3, #16
 8007b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	613b      	str	r3, [r7, #16]
   return(result);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e6      	bne.n	8007b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b6c:	bf00      	nop
 8007b6e:	3754      	adds	r7, #84	@ 0x54
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	effffffe 	.word	0xeffffffe

08007b7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e027      	b.n	8007be2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2224      	movs	r2, #36	@ 0x24
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007bc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e02d      	b.n	8007c62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2224      	movs	r2, #36	@ 0x24
 8007c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0201 	bic.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f850 	bl	8007ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e02d      	b.n	8007cde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2224      	movs	r2, #36	@ 0x24
 8007c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f812 	bl	8007ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d108      	bne.n	8007d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d08:	e031      	b.n	8007d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d0e:	2310      	movs	r3, #16
 8007d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	0e5b      	lsrs	r3, r3, #25
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	0f5b      	lsrs	r3, r3, #29
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	7b3a      	ldrb	r2, [r7, #12]
 8007d36:	4911      	ldr	r1, [pc, #68]	@ (8007d7c <UARTEx_SetNbDataToProcess+0x94>)
 8007d38:	5c8a      	ldrb	r2, [r1, r2]
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d3e:	7b3a      	ldrb	r2, [r7, #12]
 8007d40:	490f      	ldr	r1, [pc, #60]	@ (8007d80 <UARTEx_SetNbDataToProcess+0x98>)
 8007d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	7b7a      	ldrb	r2, [r7, #13]
 8007d54:	4909      	ldr	r1, [pc, #36]	@ (8007d7c <UARTEx_SetNbDataToProcess+0x94>)
 8007d56:	5c8a      	ldrb	r2, [r1, r2]
 8007d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d5c:	7b7a      	ldrb	r2, [r7, #13]
 8007d5e:	4908      	ldr	r1, [pc, #32]	@ (8007d80 <UARTEx_SetNbDataToProcess+0x98>)
 8007d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	0800875c 	.word	0x0800875c
 8007d80:	08008764 	.word	0x08008764

08007d84 <sniprintf>:
 8007d84:	b40c      	push	{r2, r3}
 8007d86:	b530      	push	{r4, r5, lr}
 8007d88:	4b17      	ldr	r3, [pc, #92]	@ (8007de8 <sniprintf+0x64>)
 8007d8a:	1e0c      	subs	r4, r1, #0
 8007d8c:	681d      	ldr	r5, [r3, #0]
 8007d8e:	b09d      	sub	sp, #116	@ 0x74
 8007d90:	da08      	bge.n	8007da4 <sniprintf+0x20>
 8007d92:	238b      	movs	r3, #139	@ 0x8b
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	b01d      	add	sp, #116	@ 0x74
 8007d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007da0:	b002      	add	sp, #8
 8007da2:	4770      	bx	lr
 8007da4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007da8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dac:	bf14      	ite	ne
 8007dae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007db2:	4623      	moveq	r3, r4
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	9307      	str	r3, [sp, #28]
 8007db8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007dbc:	9002      	str	r0, [sp, #8]
 8007dbe:	9006      	str	r0, [sp, #24]
 8007dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dc4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dc6:	ab21      	add	r3, sp, #132	@ 0x84
 8007dc8:	a902      	add	r1, sp, #8
 8007dca:	4628      	mov	r0, r5
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	f000 f995 	bl	80080fc <_svfiprintf_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	bfbc      	itt	lt
 8007dd6:	238b      	movlt	r3, #139	@ 0x8b
 8007dd8:	602b      	strlt	r3, [r5, #0]
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d0dd      	beq.n	8007d9a <sniprintf+0x16>
 8007dde:	9b02      	ldr	r3, [sp, #8]
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	e7d9      	b.n	8007d9a <sniprintf+0x16>
 8007de6:	bf00      	nop
 8007de8:	24000010 	.word	0x24000010

08007dec <memset>:
 8007dec:	4402      	add	r2, r0
 8007dee:	4603      	mov	r3, r0
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d100      	bne.n	8007df6 <memset+0xa>
 8007df4:	4770      	bx	lr
 8007df6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfa:	e7f9      	b.n	8007df0 <memset+0x4>

08007dfc <__errno>:
 8007dfc:	4b01      	ldr	r3, [pc, #4]	@ (8007e04 <__errno+0x8>)
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	24000010 	.word	0x24000010

08007e08 <__libc_init_array>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e40 <__libc_init_array+0x38>)
 8007e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e44 <__libc_init_array+0x3c>)
 8007e0e:	1b64      	subs	r4, r4, r5
 8007e10:	10a4      	asrs	r4, r4, #2
 8007e12:	2600      	movs	r6, #0
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	d109      	bne.n	8007e2c <__libc_init_array+0x24>
 8007e18:	4d0b      	ldr	r5, [pc, #44]	@ (8007e48 <__libc_init_array+0x40>)
 8007e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e4c <__libc_init_array+0x44>)
 8007e1c:	f000 fc66 	bl	80086ec <_init>
 8007e20:	1b64      	subs	r4, r4, r5
 8007e22:	10a4      	asrs	r4, r4, #2
 8007e24:	2600      	movs	r6, #0
 8007e26:	42a6      	cmp	r6, r4
 8007e28:	d105      	bne.n	8007e36 <__libc_init_array+0x2e>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e30:	4798      	blx	r3
 8007e32:	3601      	adds	r6, #1
 8007e34:	e7ee      	b.n	8007e14 <__libc_init_array+0xc>
 8007e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3a:	4798      	blx	r3
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	e7f2      	b.n	8007e26 <__libc_init_array+0x1e>
 8007e40:	080087a8 	.word	0x080087a8
 8007e44:	080087a8 	.word	0x080087a8
 8007e48:	080087a8 	.word	0x080087a8
 8007e4c:	080087ac 	.word	0x080087ac

08007e50 <__retarget_lock_acquire_recursive>:
 8007e50:	4770      	bx	lr

08007e52 <__retarget_lock_release_recursive>:
 8007e52:	4770      	bx	lr

08007e54 <_free_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4605      	mov	r5, r0
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	d041      	beq.n	8007ee0 <_free_r+0x8c>
 8007e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e60:	1f0c      	subs	r4, r1, #4
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bfb8      	it	lt
 8007e66:	18e4      	addlt	r4, r4, r3
 8007e68:	f000 f8e0 	bl	800802c <__malloc_lock>
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee4 <_free_r+0x90>)
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	b933      	cbnz	r3, 8007e80 <_free_r+0x2c>
 8007e72:	6063      	str	r3, [r4, #4]
 8007e74:	6014      	str	r4, [r2, #0]
 8007e76:	4628      	mov	r0, r5
 8007e78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e7c:	f000 b8dc 	b.w	8008038 <__malloc_unlock>
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	d908      	bls.n	8007e96 <_free_r+0x42>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf01      	itttt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	1809      	addeq	r1, r1, r0
 8007e92:	6021      	streq	r1, [r4, #0]
 8007e94:	e7ed      	b.n	8007e72 <_free_r+0x1e>
 8007e96:	461a      	mov	r2, r3
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	b10b      	cbz	r3, 8007ea0 <_free_r+0x4c>
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	d9fa      	bls.n	8007e96 <_free_r+0x42>
 8007ea0:	6811      	ldr	r1, [r2, #0]
 8007ea2:	1850      	adds	r0, r2, r1
 8007ea4:	42a0      	cmp	r0, r4
 8007ea6:	d10b      	bne.n	8007ec0 <_free_r+0x6c>
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	4401      	add	r1, r0
 8007eac:	1850      	adds	r0, r2, r1
 8007eae:	4283      	cmp	r3, r0
 8007eb0:	6011      	str	r1, [r2, #0]
 8007eb2:	d1e0      	bne.n	8007e76 <_free_r+0x22>
 8007eb4:	6818      	ldr	r0, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	6053      	str	r3, [r2, #4]
 8007eba:	4408      	add	r0, r1
 8007ebc:	6010      	str	r0, [r2, #0]
 8007ebe:	e7da      	b.n	8007e76 <_free_r+0x22>
 8007ec0:	d902      	bls.n	8007ec8 <_free_r+0x74>
 8007ec2:	230c      	movs	r3, #12
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	e7d6      	b.n	8007e76 <_free_r+0x22>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	1821      	adds	r1, r4, r0
 8007ecc:	428b      	cmp	r3, r1
 8007ece:	bf04      	itt	eq
 8007ed0:	6819      	ldreq	r1, [r3, #0]
 8007ed2:	685b      	ldreq	r3, [r3, #4]
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	bf04      	itt	eq
 8007ed8:	1809      	addeq	r1, r1, r0
 8007eda:	6021      	streq	r1, [r4, #0]
 8007edc:	6054      	str	r4, [r2, #4]
 8007ede:	e7ca      	b.n	8007e76 <_free_r+0x22>
 8007ee0:	bd38      	pop	{r3, r4, r5, pc}
 8007ee2:	bf00      	nop
 8007ee4:	240002f4 	.word	0x240002f4

08007ee8 <sbrk_aligned>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4e0f      	ldr	r6, [pc, #60]	@ (8007f28 <sbrk_aligned+0x40>)
 8007eec:	460c      	mov	r4, r1
 8007eee:	6831      	ldr	r1, [r6, #0]
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	b911      	cbnz	r1, 8007efa <sbrk_aligned+0x12>
 8007ef4:	f000 fba6 	bl	8008644 <_sbrk_r>
 8007ef8:	6030      	str	r0, [r6, #0]
 8007efa:	4621      	mov	r1, r4
 8007efc:	4628      	mov	r0, r5
 8007efe:	f000 fba1 	bl	8008644 <_sbrk_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	d103      	bne.n	8007f0e <sbrk_aligned+0x26>
 8007f06:	f04f 34ff 	mov.w	r4, #4294967295
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	1cc4      	adds	r4, r0, #3
 8007f10:	f024 0403 	bic.w	r4, r4, #3
 8007f14:	42a0      	cmp	r0, r4
 8007f16:	d0f8      	beq.n	8007f0a <sbrk_aligned+0x22>
 8007f18:	1a21      	subs	r1, r4, r0
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 fb92 	bl	8008644 <_sbrk_r>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d1f2      	bne.n	8007f0a <sbrk_aligned+0x22>
 8007f24:	e7ef      	b.n	8007f06 <sbrk_aligned+0x1e>
 8007f26:	bf00      	nop
 8007f28:	240002f0 	.word	0x240002f0

08007f2c <_malloc_r>:
 8007f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f30:	1ccd      	adds	r5, r1, #3
 8007f32:	f025 0503 	bic.w	r5, r5, #3
 8007f36:	3508      	adds	r5, #8
 8007f38:	2d0c      	cmp	r5, #12
 8007f3a:	bf38      	it	cc
 8007f3c:	250c      	movcc	r5, #12
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	4606      	mov	r6, r0
 8007f42:	db01      	blt.n	8007f48 <_malloc_r+0x1c>
 8007f44:	42a9      	cmp	r1, r5
 8007f46:	d904      	bls.n	8007f52 <_malloc_r+0x26>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	6033      	str	r3, [r6, #0]
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008028 <_malloc_r+0xfc>
 8007f56:	f000 f869 	bl	800802c <__malloc_lock>
 8007f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f5e:	461c      	mov	r4, r3
 8007f60:	bb44      	cbnz	r4, 8007fb4 <_malloc_r+0x88>
 8007f62:	4629      	mov	r1, r5
 8007f64:	4630      	mov	r0, r6
 8007f66:	f7ff ffbf 	bl	8007ee8 <sbrk_aligned>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	d158      	bne.n	8008022 <_malloc_r+0xf6>
 8007f70:	f8d8 4000 	ldr.w	r4, [r8]
 8007f74:	4627      	mov	r7, r4
 8007f76:	2f00      	cmp	r7, #0
 8007f78:	d143      	bne.n	8008002 <_malloc_r+0xd6>
 8007f7a:	2c00      	cmp	r4, #0
 8007f7c:	d04b      	beq.n	8008016 <_malloc_r+0xea>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	4639      	mov	r1, r7
 8007f82:	4630      	mov	r0, r6
 8007f84:	eb04 0903 	add.w	r9, r4, r3
 8007f88:	f000 fb5c 	bl	8008644 <_sbrk_r>
 8007f8c:	4581      	cmp	r9, r0
 8007f8e:	d142      	bne.n	8008016 <_malloc_r+0xea>
 8007f90:	6821      	ldr	r1, [r4, #0]
 8007f92:	1a6d      	subs	r5, r5, r1
 8007f94:	4629      	mov	r1, r5
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7ff ffa6 	bl	8007ee8 <sbrk_aligned>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d03a      	beq.n	8008016 <_malloc_r+0xea>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	442b      	add	r3, r5
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	bb62      	cbnz	r2, 8008008 <_malloc_r+0xdc>
 8007fae:	f8c8 7000 	str.w	r7, [r8]
 8007fb2:	e00f      	b.n	8007fd4 <_malloc_r+0xa8>
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	1b52      	subs	r2, r2, r5
 8007fb8:	d420      	bmi.n	8007ffc <_malloc_r+0xd0>
 8007fba:	2a0b      	cmp	r2, #11
 8007fbc:	d917      	bls.n	8007fee <_malloc_r+0xc2>
 8007fbe:	1961      	adds	r1, r4, r5
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	6025      	str	r5, [r4, #0]
 8007fc4:	bf18      	it	ne
 8007fc6:	6059      	strne	r1, [r3, #4]
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	bf08      	it	eq
 8007fcc:	f8c8 1000 	streq.w	r1, [r8]
 8007fd0:	5162      	str	r2, [r4, r5]
 8007fd2:	604b      	str	r3, [r1, #4]
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f000 f82f 	bl	8008038 <__malloc_unlock>
 8007fda:	f104 000b 	add.w	r0, r4, #11
 8007fde:	1d23      	adds	r3, r4, #4
 8007fe0:	f020 0007 	bic.w	r0, r0, #7
 8007fe4:	1ac2      	subs	r2, r0, r3
 8007fe6:	bf1c      	itt	ne
 8007fe8:	1a1b      	subne	r3, r3, r0
 8007fea:	50a3      	strne	r3, [r4, r2]
 8007fec:	e7af      	b.n	8007f4e <_malloc_r+0x22>
 8007fee:	6862      	ldr	r2, [r4, #4]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	bf0c      	ite	eq
 8007ff4:	f8c8 2000 	streq.w	r2, [r8]
 8007ff8:	605a      	strne	r2, [r3, #4]
 8007ffa:	e7eb      	b.n	8007fd4 <_malloc_r+0xa8>
 8007ffc:	4623      	mov	r3, r4
 8007ffe:	6864      	ldr	r4, [r4, #4]
 8008000:	e7ae      	b.n	8007f60 <_malloc_r+0x34>
 8008002:	463c      	mov	r4, r7
 8008004:	687f      	ldr	r7, [r7, #4]
 8008006:	e7b6      	b.n	8007f76 <_malloc_r+0x4a>
 8008008:	461a      	mov	r2, r3
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	42a3      	cmp	r3, r4
 800800e:	d1fb      	bne.n	8008008 <_malloc_r+0xdc>
 8008010:	2300      	movs	r3, #0
 8008012:	6053      	str	r3, [r2, #4]
 8008014:	e7de      	b.n	8007fd4 <_malloc_r+0xa8>
 8008016:	230c      	movs	r3, #12
 8008018:	6033      	str	r3, [r6, #0]
 800801a:	4630      	mov	r0, r6
 800801c:	f000 f80c 	bl	8008038 <__malloc_unlock>
 8008020:	e794      	b.n	8007f4c <_malloc_r+0x20>
 8008022:	6005      	str	r5, [r0, #0]
 8008024:	e7d6      	b.n	8007fd4 <_malloc_r+0xa8>
 8008026:	bf00      	nop
 8008028:	240002f4 	.word	0x240002f4

0800802c <__malloc_lock>:
 800802c:	4801      	ldr	r0, [pc, #4]	@ (8008034 <__malloc_lock+0x8>)
 800802e:	f7ff bf0f 	b.w	8007e50 <__retarget_lock_acquire_recursive>
 8008032:	bf00      	nop
 8008034:	240002ec 	.word	0x240002ec

08008038 <__malloc_unlock>:
 8008038:	4801      	ldr	r0, [pc, #4]	@ (8008040 <__malloc_unlock+0x8>)
 800803a:	f7ff bf0a 	b.w	8007e52 <__retarget_lock_release_recursive>
 800803e:	bf00      	nop
 8008040:	240002ec 	.word	0x240002ec

08008044 <__ssputs_r>:
 8008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	688e      	ldr	r6, [r1, #8]
 800804a:	461f      	mov	r7, r3
 800804c:	42be      	cmp	r6, r7
 800804e:	680b      	ldr	r3, [r1, #0]
 8008050:	4682      	mov	sl, r0
 8008052:	460c      	mov	r4, r1
 8008054:	4690      	mov	r8, r2
 8008056:	d82d      	bhi.n	80080b4 <__ssputs_r+0x70>
 8008058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800805c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008060:	d026      	beq.n	80080b0 <__ssputs_r+0x6c>
 8008062:	6965      	ldr	r5, [r4, #20]
 8008064:	6909      	ldr	r1, [r1, #16]
 8008066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800806a:	eba3 0901 	sub.w	r9, r3, r1
 800806e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008072:	1c7b      	adds	r3, r7, #1
 8008074:	444b      	add	r3, r9
 8008076:	106d      	asrs	r5, r5, #1
 8008078:	429d      	cmp	r5, r3
 800807a:	bf38      	it	cc
 800807c:	461d      	movcc	r5, r3
 800807e:	0553      	lsls	r3, r2, #21
 8008080:	d527      	bpl.n	80080d2 <__ssputs_r+0x8e>
 8008082:	4629      	mov	r1, r5
 8008084:	f7ff ff52 	bl	8007f2c <_malloc_r>
 8008088:	4606      	mov	r6, r0
 800808a:	b360      	cbz	r0, 80080e6 <__ssputs_r+0xa2>
 800808c:	6921      	ldr	r1, [r4, #16]
 800808e:	464a      	mov	r2, r9
 8008090:	f000 fae8 	bl	8008664 <memcpy>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800809a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	6126      	str	r6, [r4, #16]
 80080a2:	6165      	str	r5, [r4, #20]
 80080a4:	444e      	add	r6, r9
 80080a6:	eba5 0509 	sub.w	r5, r5, r9
 80080aa:	6026      	str	r6, [r4, #0]
 80080ac:	60a5      	str	r5, [r4, #8]
 80080ae:	463e      	mov	r6, r7
 80080b0:	42be      	cmp	r6, r7
 80080b2:	d900      	bls.n	80080b6 <__ssputs_r+0x72>
 80080b4:	463e      	mov	r6, r7
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	4632      	mov	r2, r6
 80080ba:	4641      	mov	r1, r8
 80080bc:	f000 faa8 	bl	8008610 <memmove>
 80080c0:	68a3      	ldr	r3, [r4, #8]
 80080c2:	1b9b      	subs	r3, r3, r6
 80080c4:	60a3      	str	r3, [r4, #8]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	4433      	add	r3, r6
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	2000      	movs	r0, #0
 80080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d2:	462a      	mov	r2, r5
 80080d4:	f000 fad4 	bl	8008680 <_realloc_r>
 80080d8:	4606      	mov	r6, r0
 80080da:	2800      	cmp	r0, #0
 80080dc:	d1e0      	bne.n	80080a0 <__ssputs_r+0x5c>
 80080de:	6921      	ldr	r1, [r4, #16]
 80080e0:	4650      	mov	r0, sl
 80080e2:	f7ff feb7 	bl	8007e54 <_free_r>
 80080e6:	230c      	movs	r3, #12
 80080e8:	f8ca 3000 	str.w	r3, [sl]
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e7e9      	b.n	80080ce <__ssputs_r+0x8a>
	...

080080fc <_svfiprintf_r>:
 80080fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008100:	4698      	mov	r8, r3
 8008102:	898b      	ldrh	r3, [r1, #12]
 8008104:	061b      	lsls	r3, r3, #24
 8008106:	b09d      	sub	sp, #116	@ 0x74
 8008108:	4607      	mov	r7, r0
 800810a:	460d      	mov	r5, r1
 800810c:	4614      	mov	r4, r2
 800810e:	d510      	bpl.n	8008132 <_svfiprintf_r+0x36>
 8008110:	690b      	ldr	r3, [r1, #16]
 8008112:	b973      	cbnz	r3, 8008132 <_svfiprintf_r+0x36>
 8008114:	2140      	movs	r1, #64	@ 0x40
 8008116:	f7ff ff09 	bl	8007f2c <_malloc_r>
 800811a:	6028      	str	r0, [r5, #0]
 800811c:	6128      	str	r0, [r5, #16]
 800811e:	b930      	cbnz	r0, 800812e <_svfiprintf_r+0x32>
 8008120:	230c      	movs	r3, #12
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	f04f 30ff 	mov.w	r0, #4294967295
 8008128:	b01d      	add	sp, #116	@ 0x74
 800812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812e:	2340      	movs	r3, #64	@ 0x40
 8008130:	616b      	str	r3, [r5, #20]
 8008132:	2300      	movs	r3, #0
 8008134:	9309      	str	r3, [sp, #36]	@ 0x24
 8008136:	2320      	movs	r3, #32
 8008138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800813c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008140:	2330      	movs	r3, #48	@ 0x30
 8008142:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082e0 <_svfiprintf_r+0x1e4>
 8008146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800814a:	f04f 0901 	mov.w	r9, #1
 800814e:	4623      	mov	r3, r4
 8008150:	469a      	mov	sl, r3
 8008152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008156:	b10a      	cbz	r2, 800815c <_svfiprintf_r+0x60>
 8008158:	2a25      	cmp	r2, #37	@ 0x25
 800815a:	d1f9      	bne.n	8008150 <_svfiprintf_r+0x54>
 800815c:	ebba 0b04 	subs.w	fp, sl, r4
 8008160:	d00b      	beq.n	800817a <_svfiprintf_r+0x7e>
 8008162:	465b      	mov	r3, fp
 8008164:	4622      	mov	r2, r4
 8008166:	4629      	mov	r1, r5
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff ff6b 	bl	8008044 <__ssputs_r>
 800816e:	3001      	adds	r0, #1
 8008170:	f000 80a7 	beq.w	80082c2 <_svfiprintf_r+0x1c6>
 8008174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008176:	445a      	add	r2, fp
 8008178:	9209      	str	r2, [sp, #36]	@ 0x24
 800817a:	f89a 3000 	ldrb.w	r3, [sl]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 809f 	beq.w	80082c2 <_svfiprintf_r+0x1c6>
 8008184:	2300      	movs	r3, #0
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800818e:	f10a 0a01 	add.w	sl, sl, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800819a:	931a      	str	r3, [sp, #104]	@ 0x68
 800819c:	4654      	mov	r4, sl
 800819e:	2205      	movs	r2, #5
 80081a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a4:	484e      	ldr	r0, [pc, #312]	@ (80082e0 <_svfiprintf_r+0x1e4>)
 80081a6:	f7f8 f8a3 	bl	80002f0 <memchr>
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	b9d8      	cbnz	r0, 80081e6 <_svfiprintf_r+0xea>
 80081ae:	06d0      	lsls	r0, r2, #27
 80081b0:	bf44      	itt	mi
 80081b2:	2320      	movmi	r3, #32
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b8:	0711      	lsls	r1, r2, #28
 80081ba:	bf44      	itt	mi
 80081bc:	232b      	movmi	r3, #43	@ 0x2b
 80081be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081c2:	f89a 3000 	ldrb.w	r3, [sl]
 80081c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081c8:	d015      	beq.n	80081f6 <_svfiprintf_r+0xfa>
 80081ca:	9a07      	ldr	r2, [sp, #28]
 80081cc:	4654      	mov	r4, sl
 80081ce:	2000      	movs	r0, #0
 80081d0:	f04f 0c0a 	mov.w	ip, #10
 80081d4:	4621      	mov	r1, r4
 80081d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081da:	3b30      	subs	r3, #48	@ 0x30
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d94b      	bls.n	8008278 <_svfiprintf_r+0x17c>
 80081e0:	b1b0      	cbz	r0, 8008210 <_svfiprintf_r+0x114>
 80081e2:	9207      	str	r2, [sp, #28]
 80081e4:	e014      	b.n	8008210 <_svfiprintf_r+0x114>
 80081e6:	eba0 0308 	sub.w	r3, r0, r8
 80081ea:	fa09 f303 	lsl.w	r3, r9, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	46a2      	mov	sl, r4
 80081f4:	e7d2      	b.n	800819c <_svfiprintf_r+0xa0>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	1d19      	adds	r1, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9103      	str	r1, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfbb      	ittet	lt
 8008202:	425b      	neglt	r3, r3
 8008204:	f042 0202 	orrlt.w	r2, r2, #2
 8008208:	9307      	strge	r3, [sp, #28]
 800820a:	9307      	strlt	r3, [sp, #28]
 800820c:	bfb8      	it	lt
 800820e:	9204      	strlt	r2, [sp, #16]
 8008210:	7823      	ldrb	r3, [r4, #0]
 8008212:	2b2e      	cmp	r3, #46	@ 0x2e
 8008214:	d10a      	bne.n	800822c <_svfiprintf_r+0x130>
 8008216:	7863      	ldrb	r3, [r4, #1]
 8008218:	2b2a      	cmp	r3, #42	@ 0x2a
 800821a:	d132      	bne.n	8008282 <_svfiprintf_r+0x186>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	1d1a      	adds	r2, r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	9203      	str	r2, [sp, #12]
 8008224:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008228:	3402      	adds	r4, #2
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082f0 <_svfiprintf_r+0x1f4>
 8008230:	7821      	ldrb	r1, [r4, #0]
 8008232:	2203      	movs	r2, #3
 8008234:	4650      	mov	r0, sl
 8008236:	f7f8 f85b 	bl	80002f0 <memchr>
 800823a:	b138      	cbz	r0, 800824c <_svfiprintf_r+0x150>
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	eba0 000a 	sub.w	r0, r0, sl
 8008242:	2240      	movs	r2, #64	@ 0x40
 8008244:	4082      	lsls	r2, r0
 8008246:	4313      	orrs	r3, r2
 8008248:	3401      	adds	r4, #1
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008250:	4824      	ldr	r0, [pc, #144]	@ (80082e4 <_svfiprintf_r+0x1e8>)
 8008252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008256:	2206      	movs	r2, #6
 8008258:	f7f8 f84a 	bl	80002f0 <memchr>
 800825c:	2800      	cmp	r0, #0
 800825e:	d036      	beq.n	80082ce <_svfiprintf_r+0x1d2>
 8008260:	4b21      	ldr	r3, [pc, #132]	@ (80082e8 <_svfiprintf_r+0x1ec>)
 8008262:	bb1b      	cbnz	r3, 80082ac <_svfiprintf_r+0x1b0>
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	3307      	adds	r3, #7
 8008268:	f023 0307 	bic.w	r3, r3, #7
 800826c:	3308      	adds	r3, #8
 800826e:	9303      	str	r3, [sp, #12]
 8008270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008272:	4433      	add	r3, r6
 8008274:	9309      	str	r3, [sp, #36]	@ 0x24
 8008276:	e76a      	b.n	800814e <_svfiprintf_r+0x52>
 8008278:	fb0c 3202 	mla	r2, ip, r2, r3
 800827c:	460c      	mov	r4, r1
 800827e:	2001      	movs	r0, #1
 8008280:	e7a8      	b.n	80081d4 <_svfiprintf_r+0xd8>
 8008282:	2300      	movs	r3, #0
 8008284:	3401      	adds	r4, #1
 8008286:	9305      	str	r3, [sp, #20]
 8008288:	4619      	mov	r1, r3
 800828a:	f04f 0c0a 	mov.w	ip, #10
 800828e:	4620      	mov	r0, r4
 8008290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008294:	3a30      	subs	r2, #48	@ 0x30
 8008296:	2a09      	cmp	r2, #9
 8008298:	d903      	bls.n	80082a2 <_svfiprintf_r+0x1a6>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0c6      	beq.n	800822c <_svfiprintf_r+0x130>
 800829e:	9105      	str	r1, [sp, #20]
 80082a0:	e7c4      	b.n	800822c <_svfiprintf_r+0x130>
 80082a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a6:	4604      	mov	r4, r0
 80082a8:	2301      	movs	r3, #1
 80082aa:	e7f0      	b.n	800828e <_svfiprintf_r+0x192>
 80082ac:	ab03      	add	r3, sp, #12
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	462a      	mov	r2, r5
 80082b2:	4b0e      	ldr	r3, [pc, #56]	@ (80082ec <_svfiprintf_r+0x1f0>)
 80082b4:	a904      	add	r1, sp, #16
 80082b6:	4638      	mov	r0, r7
 80082b8:	f3af 8000 	nop.w
 80082bc:	1c42      	adds	r2, r0, #1
 80082be:	4606      	mov	r6, r0
 80082c0:	d1d6      	bne.n	8008270 <_svfiprintf_r+0x174>
 80082c2:	89ab      	ldrh	r3, [r5, #12]
 80082c4:	065b      	lsls	r3, r3, #25
 80082c6:	f53f af2d 	bmi.w	8008124 <_svfiprintf_r+0x28>
 80082ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082cc:	e72c      	b.n	8008128 <_svfiprintf_r+0x2c>
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4b05      	ldr	r3, [pc, #20]	@ (80082ec <_svfiprintf_r+0x1f0>)
 80082d6:	a904      	add	r1, sp, #16
 80082d8:	4638      	mov	r0, r7
 80082da:	f000 f879 	bl	80083d0 <_printf_i>
 80082de:	e7ed      	b.n	80082bc <_svfiprintf_r+0x1c0>
 80082e0:	0800876c 	.word	0x0800876c
 80082e4:	08008776 	.word	0x08008776
 80082e8:	00000000 	.word	0x00000000
 80082ec:	08008045 	.word	0x08008045
 80082f0:	08008772 	.word	0x08008772

080082f4 <_printf_common>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	4616      	mov	r6, r2
 80082fa:	4698      	mov	r8, r3
 80082fc:	688a      	ldr	r2, [r1, #8]
 80082fe:	690b      	ldr	r3, [r1, #16]
 8008300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008304:	4293      	cmp	r3, r2
 8008306:	bfb8      	it	lt
 8008308:	4613      	movlt	r3, r2
 800830a:	6033      	str	r3, [r6, #0]
 800830c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008310:	4607      	mov	r7, r0
 8008312:	460c      	mov	r4, r1
 8008314:	b10a      	cbz	r2, 800831a <_printf_common+0x26>
 8008316:	3301      	adds	r3, #1
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	0699      	lsls	r1, r3, #26
 800831e:	bf42      	ittt	mi
 8008320:	6833      	ldrmi	r3, [r6, #0]
 8008322:	3302      	addmi	r3, #2
 8008324:	6033      	strmi	r3, [r6, #0]
 8008326:	6825      	ldr	r5, [r4, #0]
 8008328:	f015 0506 	ands.w	r5, r5, #6
 800832c:	d106      	bne.n	800833c <_printf_common+0x48>
 800832e:	f104 0a19 	add.w	sl, r4, #25
 8008332:	68e3      	ldr	r3, [r4, #12]
 8008334:	6832      	ldr	r2, [r6, #0]
 8008336:	1a9b      	subs	r3, r3, r2
 8008338:	42ab      	cmp	r3, r5
 800833a:	dc26      	bgt.n	800838a <_printf_common+0x96>
 800833c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008340:	6822      	ldr	r2, [r4, #0]
 8008342:	3b00      	subs	r3, #0
 8008344:	bf18      	it	ne
 8008346:	2301      	movne	r3, #1
 8008348:	0692      	lsls	r2, r2, #26
 800834a:	d42b      	bmi.n	80083a4 <_printf_common+0xb0>
 800834c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008350:	4641      	mov	r1, r8
 8008352:	4638      	mov	r0, r7
 8008354:	47c8      	blx	r9
 8008356:	3001      	adds	r0, #1
 8008358:	d01e      	beq.n	8008398 <_printf_common+0xa4>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	6922      	ldr	r2, [r4, #16]
 800835e:	f003 0306 	and.w	r3, r3, #6
 8008362:	2b04      	cmp	r3, #4
 8008364:	bf02      	ittt	eq
 8008366:	68e5      	ldreq	r5, [r4, #12]
 8008368:	6833      	ldreq	r3, [r6, #0]
 800836a:	1aed      	subeq	r5, r5, r3
 800836c:	68a3      	ldr	r3, [r4, #8]
 800836e:	bf0c      	ite	eq
 8008370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008374:	2500      	movne	r5, #0
 8008376:	4293      	cmp	r3, r2
 8008378:	bfc4      	itt	gt
 800837a:	1a9b      	subgt	r3, r3, r2
 800837c:	18ed      	addgt	r5, r5, r3
 800837e:	2600      	movs	r6, #0
 8008380:	341a      	adds	r4, #26
 8008382:	42b5      	cmp	r5, r6
 8008384:	d11a      	bne.n	80083bc <_printf_common+0xc8>
 8008386:	2000      	movs	r0, #0
 8008388:	e008      	b.n	800839c <_printf_common+0xa8>
 800838a:	2301      	movs	r3, #1
 800838c:	4652      	mov	r2, sl
 800838e:	4641      	mov	r1, r8
 8008390:	4638      	mov	r0, r7
 8008392:	47c8      	blx	r9
 8008394:	3001      	adds	r0, #1
 8008396:	d103      	bne.n	80083a0 <_printf_common+0xac>
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a0:	3501      	adds	r5, #1
 80083a2:	e7c6      	b.n	8008332 <_printf_common+0x3e>
 80083a4:	18e1      	adds	r1, r4, r3
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	2030      	movs	r0, #48	@ 0x30
 80083aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083ae:	4422      	add	r2, r4
 80083b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083b8:	3302      	adds	r3, #2
 80083ba:	e7c7      	b.n	800834c <_printf_common+0x58>
 80083bc:	2301      	movs	r3, #1
 80083be:	4622      	mov	r2, r4
 80083c0:	4641      	mov	r1, r8
 80083c2:	4638      	mov	r0, r7
 80083c4:	47c8      	blx	r9
 80083c6:	3001      	adds	r0, #1
 80083c8:	d0e6      	beq.n	8008398 <_printf_common+0xa4>
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7d9      	b.n	8008382 <_printf_common+0x8e>
	...

080083d0 <_printf_i>:
 80083d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	7e0f      	ldrb	r7, [r1, #24]
 80083d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083d8:	2f78      	cmp	r7, #120	@ 0x78
 80083da:	4691      	mov	r9, r2
 80083dc:	4680      	mov	r8, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	469a      	mov	sl, r3
 80083e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083e6:	d807      	bhi.n	80083f8 <_printf_i+0x28>
 80083e8:	2f62      	cmp	r7, #98	@ 0x62
 80083ea:	d80a      	bhi.n	8008402 <_printf_i+0x32>
 80083ec:	2f00      	cmp	r7, #0
 80083ee:	f000 80d2 	beq.w	8008596 <_printf_i+0x1c6>
 80083f2:	2f58      	cmp	r7, #88	@ 0x58
 80083f4:	f000 80b9 	beq.w	800856a <_printf_i+0x19a>
 80083f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008400:	e03a      	b.n	8008478 <_printf_i+0xa8>
 8008402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008406:	2b15      	cmp	r3, #21
 8008408:	d8f6      	bhi.n	80083f8 <_printf_i+0x28>
 800840a:	a101      	add	r1, pc, #4	@ (adr r1, 8008410 <_printf_i+0x40>)
 800840c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008410:	08008469 	.word	0x08008469
 8008414:	0800847d 	.word	0x0800847d
 8008418:	080083f9 	.word	0x080083f9
 800841c:	080083f9 	.word	0x080083f9
 8008420:	080083f9 	.word	0x080083f9
 8008424:	080083f9 	.word	0x080083f9
 8008428:	0800847d 	.word	0x0800847d
 800842c:	080083f9 	.word	0x080083f9
 8008430:	080083f9 	.word	0x080083f9
 8008434:	080083f9 	.word	0x080083f9
 8008438:	080083f9 	.word	0x080083f9
 800843c:	0800857d 	.word	0x0800857d
 8008440:	080084a7 	.word	0x080084a7
 8008444:	08008537 	.word	0x08008537
 8008448:	080083f9 	.word	0x080083f9
 800844c:	080083f9 	.word	0x080083f9
 8008450:	0800859f 	.word	0x0800859f
 8008454:	080083f9 	.word	0x080083f9
 8008458:	080084a7 	.word	0x080084a7
 800845c:	080083f9 	.word	0x080083f9
 8008460:	080083f9 	.word	0x080083f9
 8008464:	0800853f 	.word	0x0800853f
 8008468:	6833      	ldr	r3, [r6, #0]
 800846a:	1d1a      	adds	r2, r3, #4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6032      	str	r2, [r6, #0]
 8008470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008478:	2301      	movs	r3, #1
 800847a:	e09d      	b.n	80085b8 <_printf_i+0x1e8>
 800847c:	6833      	ldr	r3, [r6, #0]
 800847e:	6820      	ldr	r0, [r4, #0]
 8008480:	1d19      	adds	r1, r3, #4
 8008482:	6031      	str	r1, [r6, #0]
 8008484:	0606      	lsls	r6, r0, #24
 8008486:	d501      	bpl.n	800848c <_printf_i+0xbc>
 8008488:	681d      	ldr	r5, [r3, #0]
 800848a:	e003      	b.n	8008494 <_printf_i+0xc4>
 800848c:	0645      	lsls	r5, r0, #25
 800848e:	d5fb      	bpl.n	8008488 <_printf_i+0xb8>
 8008490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008494:	2d00      	cmp	r5, #0
 8008496:	da03      	bge.n	80084a0 <_printf_i+0xd0>
 8008498:	232d      	movs	r3, #45	@ 0x2d
 800849a:	426d      	negs	r5, r5
 800849c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084a0:	4859      	ldr	r0, [pc, #356]	@ (8008608 <_printf_i+0x238>)
 80084a2:	230a      	movs	r3, #10
 80084a4:	e011      	b.n	80084ca <_printf_i+0xfa>
 80084a6:	6821      	ldr	r1, [r4, #0]
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	0608      	lsls	r0, r1, #24
 80084ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80084b0:	d402      	bmi.n	80084b8 <_printf_i+0xe8>
 80084b2:	0649      	lsls	r1, r1, #25
 80084b4:	bf48      	it	mi
 80084b6:	b2ad      	uxthmi	r5, r5
 80084b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80084ba:	4853      	ldr	r0, [pc, #332]	@ (8008608 <_printf_i+0x238>)
 80084bc:	6033      	str	r3, [r6, #0]
 80084be:	bf14      	ite	ne
 80084c0:	230a      	movne	r3, #10
 80084c2:	2308      	moveq	r3, #8
 80084c4:	2100      	movs	r1, #0
 80084c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084ca:	6866      	ldr	r6, [r4, #4]
 80084cc:	60a6      	str	r6, [r4, #8]
 80084ce:	2e00      	cmp	r6, #0
 80084d0:	bfa2      	ittt	ge
 80084d2:	6821      	ldrge	r1, [r4, #0]
 80084d4:	f021 0104 	bicge.w	r1, r1, #4
 80084d8:	6021      	strge	r1, [r4, #0]
 80084da:	b90d      	cbnz	r5, 80084e0 <_printf_i+0x110>
 80084dc:	2e00      	cmp	r6, #0
 80084de:	d04b      	beq.n	8008578 <_printf_i+0x1a8>
 80084e0:	4616      	mov	r6, r2
 80084e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80084e6:	fb03 5711 	mls	r7, r3, r1, r5
 80084ea:	5dc7      	ldrb	r7, [r0, r7]
 80084ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084f0:	462f      	mov	r7, r5
 80084f2:	42bb      	cmp	r3, r7
 80084f4:	460d      	mov	r5, r1
 80084f6:	d9f4      	bls.n	80084e2 <_printf_i+0x112>
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d10b      	bne.n	8008514 <_printf_i+0x144>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	07df      	lsls	r7, r3, #31
 8008500:	d508      	bpl.n	8008514 <_printf_i+0x144>
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	6861      	ldr	r1, [r4, #4]
 8008506:	4299      	cmp	r1, r3
 8008508:	bfde      	ittt	le
 800850a:	2330      	movle	r3, #48	@ 0x30
 800850c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008510:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008514:	1b92      	subs	r2, r2, r6
 8008516:	6122      	str	r2, [r4, #16]
 8008518:	f8cd a000 	str.w	sl, [sp]
 800851c:	464b      	mov	r3, r9
 800851e:	aa03      	add	r2, sp, #12
 8008520:	4621      	mov	r1, r4
 8008522:	4640      	mov	r0, r8
 8008524:	f7ff fee6 	bl	80082f4 <_printf_common>
 8008528:	3001      	adds	r0, #1
 800852a:	d14a      	bne.n	80085c2 <_printf_i+0x1f2>
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	b004      	add	sp, #16
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f043 0320 	orr.w	r3, r3, #32
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	4833      	ldr	r0, [pc, #204]	@ (800860c <_printf_i+0x23c>)
 8008540:	2778      	movs	r7, #120	@ 0x78
 8008542:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	6831      	ldr	r1, [r6, #0]
 800854a:	061f      	lsls	r7, r3, #24
 800854c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008550:	d402      	bmi.n	8008558 <_printf_i+0x188>
 8008552:	065f      	lsls	r7, r3, #25
 8008554:	bf48      	it	mi
 8008556:	b2ad      	uxthmi	r5, r5
 8008558:	6031      	str	r1, [r6, #0]
 800855a:	07d9      	lsls	r1, r3, #31
 800855c:	bf44      	itt	mi
 800855e:	f043 0320 	orrmi.w	r3, r3, #32
 8008562:	6023      	strmi	r3, [r4, #0]
 8008564:	b11d      	cbz	r5, 800856e <_printf_i+0x19e>
 8008566:	2310      	movs	r3, #16
 8008568:	e7ac      	b.n	80084c4 <_printf_i+0xf4>
 800856a:	4827      	ldr	r0, [pc, #156]	@ (8008608 <_printf_i+0x238>)
 800856c:	e7e9      	b.n	8008542 <_printf_i+0x172>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	f023 0320 	bic.w	r3, r3, #32
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	e7f6      	b.n	8008566 <_printf_i+0x196>
 8008578:	4616      	mov	r6, r2
 800857a:	e7bd      	b.n	80084f8 <_printf_i+0x128>
 800857c:	6833      	ldr	r3, [r6, #0]
 800857e:	6825      	ldr	r5, [r4, #0]
 8008580:	6961      	ldr	r1, [r4, #20]
 8008582:	1d18      	adds	r0, r3, #4
 8008584:	6030      	str	r0, [r6, #0]
 8008586:	062e      	lsls	r6, r5, #24
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	d501      	bpl.n	8008590 <_printf_i+0x1c0>
 800858c:	6019      	str	r1, [r3, #0]
 800858e:	e002      	b.n	8008596 <_printf_i+0x1c6>
 8008590:	0668      	lsls	r0, r5, #25
 8008592:	d5fb      	bpl.n	800858c <_printf_i+0x1bc>
 8008594:	8019      	strh	r1, [r3, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	4616      	mov	r6, r2
 800859c:	e7bc      	b.n	8008518 <_printf_i+0x148>
 800859e:	6833      	ldr	r3, [r6, #0]
 80085a0:	1d1a      	adds	r2, r3, #4
 80085a2:	6032      	str	r2, [r6, #0]
 80085a4:	681e      	ldr	r6, [r3, #0]
 80085a6:	6862      	ldr	r2, [r4, #4]
 80085a8:	2100      	movs	r1, #0
 80085aa:	4630      	mov	r0, r6
 80085ac:	f7f7 fea0 	bl	80002f0 <memchr>
 80085b0:	b108      	cbz	r0, 80085b6 <_printf_i+0x1e6>
 80085b2:	1b80      	subs	r0, r0, r6
 80085b4:	6060      	str	r0, [r4, #4]
 80085b6:	6863      	ldr	r3, [r4, #4]
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	2300      	movs	r3, #0
 80085bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c0:	e7aa      	b.n	8008518 <_printf_i+0x148>
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	4632      	mov	r2, r6
 80085c6:	4649      	mov	r1, r9
 80085c8:	4640      	mov	r0, r8
 80085ca:	47d0      	blx	sl
 80085cc:	3001      	adds	r0, #1
 80085ce:	d0ad      	beq.n	800852c <_printf_i+0x15c>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	079b      	lsls	r3, r3, #30
 80085d4:	d413      	bmi.n	80085fe <_printf_i+0x22e>
 80085d6:	68e0      	ldr	r0, [r4, #12]
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	4298      	cmp	r0, r3
 80085dc:	bfb8      	it	lt
 80085de:	4618      	movlt	r0, r3
 80085e0:	e7a6      	b.n	8008530 <_printf_i+0x160>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4632      	mov	r2, r6
 80085e6:	4649      	mov	r1, r9
 80085e8:	4640      	mov	r0, r8
 80085ea:	47d0      	blx	sl
 80085ec:	3001      	adds	r0, #1
 80085ee:	d09d      	beq.n	800852c <_printf_i+0x15c>
 80085f0:	3501      	adds	r5, #1
 80085f2:	68e3      	ldr	r3, [r4, #12]
 80085f4:	9903      	ldr	r1, [sp, #12]
 80085f6:	1a5b      	subs	r3, r3, r1
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	dcf2      	bgt.n	80085e2 <_printf_i+0x212>
 80085fc:	e7eb      	b.n	80085d6 <_printf_i+0x206>
 80085fe:	2500      	movs	r5, #0
 8008600:	f104 0619 	add.w	r6, r4, #25
 8008604:	e7f5      	b.n	80085f2 <_printf_i+0x222>
 8008606:	bf00      	nop
 8008608:	0800877d 	.word	0x0800877d
 800860c:	0800878e 	.word	0x0800878e

08008610 <memmove>:
 8008610:	4288      	cmp	r0, r1
 8008612:	b510      	push	{r4, lr}
 8008614:	eb01 0402 	add.w	r4, r1, r2
 8008618:	d902      	bls.n	8008620 <memmove+0x10>
 800861a:	4284      	cmp	r4, r0
 800861c:	4623      	mov	r3, r4
 800861e:	d807      	bhi.n	8008630 <memmove+0x20>
 8008620:	1e43      	subs	r3, r0, #1
 8008622:	42a1      	cmp	r1, r4
 8008624:	d008      	beq.n	8008638 <memmove+0x28>
 8008626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800862e:	e7f8      	b.n	8008622 <memmove+0x12>
 8008630:	4402      	add	r2, r0
 8008632:	4601      	mov	r1, r0
 8008634:	428a      	cmp	r2, r1
 8008636:	d100      	bne.n	800863a <memmove+0x2a>
 8008638:	bd10      	pop	{r4, pc}
 800863a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800863e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008642:	e7f7      	b.n	8008634 <memmove+0x24>

08008644 <_sbrk_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d06      	ldr	r5, [pc, #24]	@ (8008660 <_sbrk_r+0x1c>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7f8 fd20 	bl	8001094 <_sbrk>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_sbrk_r+0x1a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_sbrk_r+0x1a>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	240002e8 	.word	0x240002e8

08008664 <memcpy>:
 8008664:	440a      	add	r2, r1
 8008666:	4291      	cmp	r1, r2
 8008668:	f100 33ff 	add.w	r3, r0, #4294967295
 800866c:	d100      	bne.n	8008670 <memcpy+0xc>
 800866e:	4770      	bx	lr
 8008670:	b510      	push	{r4, lr}
 8008672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800867a:	4291      	cmp	r1, r2
 800867c:	d1f9      	bne.n	8008672 <memcpy+0xe>
 800867e:	bd10      	pop	{r4, pc}

08008680 <_realloc_r>:
 8008680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008684:	4680      	mov	r8, r0
 8008686:	4615      	mov	r5, r2
 8008688:	460c      	mov	r4, r1
 800868a:	b921      	cbnz	r1, 8008696 <_realloc_r+0x16>
 800868c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008690:	4611      	mov	r1, r2
 8008692:	f7ff bc4b 	b.w	8007f2c <_malloc_r>
 8008696:	b92a      	cbnz	r2, 80086a4 <_realloc_r+0x24>
 8008698:	f7ff fbdc 	bl	8007e54 <_free_r>
 800869c:	2400      	movs	r4, #0
 800869e:	4620      	mov	r0, r4
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	f000 f81a 	bl	80086dc <_malloc_usable_size_r>
 80086a8:	4285      	cmp	r5, r0
 80086aa:	4606      	mov	r6, r0
 80086ac:	d802      	bhi.n	80086b4 <_realloc_r+0x34>
 80086ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086b2:	d8f4      	bhi.n	800869e <_realloc_r+0x1e>
 80086b4:	4629      	mov	r1, r5
 80086b6:	4640      	mov	r0, r8
 80086b8:	f7ff fc38 	bl	8007f2c <_malloc_r>
 80086bc:	4607      	mov	r7, r0
 80086be:	2800      	cmp	r0, #0
 80086c0:	d0ec      	beq.n	800869c <_realloc_r+0x1c>
 80086c2:	42b5      	cmp	r5, r6
 80086c4:	462a      	mov	r2, r5
 80086c6:	4621      	mov	r1, r4
 80086c8:	bf28      	it	cs
 80086ca:	4632      	movcs	r2, r6
 80086cc:	f7ff ffca 	bl	8008664 <memcpy>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4640      	mov	r0, r8
 80086d4:	f7ff fbbe 	bl	8007e54 <_free_r>
 80086d8:	463c      	mov	r4, r7
 80086da:	e7e0      	b.n	800869e <_realloc_r+0x1e>

080086dc <_malloc_usable_size_r>:
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f18      	subs	r0, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfbc      	itt	lt
 80086e6:	580b      	ldrlt	r3, [r1, r0]
 80086e8:	18c0      	addlt	r0, r0, r3
 80086ea:	4770      	bx	lr

080086ec <_init>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr

080086f8 <_fini>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr
