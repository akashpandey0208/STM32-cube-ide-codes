
I2C_TINY_RTC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006994  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006c34  08006c34  00007c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb8  08006cb8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb8  08006cb8  00007cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cc0  08006cc0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cc0  08006cc0  00007cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cc4  08006cc4  00007cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  24000000  08006cc8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  24000060  08006d28  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002f4  08006d28  000082f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013332  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fd  00000000  00000000  0001b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001d7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0f  00000000  00000000  0001e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ece3  00000000  00000000  0001f10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001408a  00000000  00000000  0005ddf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195909  00000000  00000000  00071e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00207785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  002077c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0020b88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006c1c 	.word	0x08006c1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08006c1c 	.word	0x08006c1c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <main+0xec>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	60fa      	str	r2, [r7, #12]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fa2a 	bl	8000c2e <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fbad 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f863 	bl	80008a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <main+0xec>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000898 <main+0xec>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <main+0xec>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 feef 	bl	80015e4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f000 ff05 	bl	8001618 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <main+0xec>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	60fa      	str	r2, [r7, #12]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 f9fc 	bl	8000c2e <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f92b 	bl	8000a90 <MX_GPIO_Init>
  MX_I2C4_Init();
 800083a:	f000 f89d 	bl	8000978 <MX_I2C4_Init>
  MX_USART1_UART_Init();
 800083e:	f000 f8db 	bl	80009f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t hour, minute, second;
  DS1307_SetTime(5, 33, 56);
 8000842:	2238      	movs	r2, #56	@ 0x38
 8000844:	2121      	movs	r1, #33	@ 0x21
 8000846:	2005      	movs	r0, #5
 8000848:	f000 f94c 	bl	8000ae4 <DS1307_SetTime>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get the current time
	          DS1307_GetTime(&hour, &minute, &second);
 800084c:	f107 0209 	add.w	r2, r7, #9
 8000850:	f107 010a 	add.w	r1, r7, #10
 8000854:	f107 030b 	add.w	r3, r7, #11
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f973 	bl	8000b44 <DS1307_GetTime>

	          // Format the time string and send it via UART
	          snprintf(uart_buffer, sizeof(uart_buffer), "Time: %02d:%02d:%02d\r\n", hour, minute, second);
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	4619      	mov	r1, r3
 8000862:	7abb      	ldrb	r3, [r7, #10]
 8000864:	7a7a      	ldrb	r2, [r7, #9]
 8000866:	9201      	str	r2, [sp, #4]
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	460b      	mov	r3, r1
 800086c:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <main+0xf0>)
 800086e:	2140      	movs	r1, #64	@ 0x40
 8000870:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <main+0xf4>)
 8000872:	f005 fd1f 	bl	80062b4 <sniprintf>
	          HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000876:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <main+0xf4>)
 8000878:	f7ff fd32 	bl	80002e0 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	4906      	ldr	r1, [pc, #24]	@ (80008a0 <main+0xf4>)
 8000886:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <main+0xf8>)
 8000888:	f004 fbfa 	bl	8005080 <HAL_UART_Transmit>

	          HAL_Delay(1000);  // Wait for 1 second
 800088c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000890:	f000 fbe4 	bl	800105c <HAL_Delay>
	          DS1307_GetTime(&hour, &minute, &second);
 8000894:	bf00      	nop
 8000896:	e7d9      	b.n	800084c <main+0xa0>
 8000898:	58024400 	.word	0x58024400
 800089c:	08006c34 	.word	0x08006c34
 80008a0:	24000164 	.word	0x24000164
 80008a4:	240000d0 	.word	0x240000d0

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	@ 0x70
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	224c      	movs	r2, #76	@ 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fd30 	bl	800631c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 fd2a 	bl	800631c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f001 fcdd 	bl	8002288 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <SystemClock_Config+0xc8>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	4a26      	ldr	r2, [pc, #152]	@ (8000970 <SystemClock_Config+0xc8>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008de:	4b24      	ldr	r3, [pc, #144]	@ (8000970 <SystemClock_Config+0xc8>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <SystemClock_Config+0xcc>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a21      	ldr	r2, [pc, #132]	@ (8000974 <SystemClock_Config+0xcc>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <SystemClock_Config+0xcc>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000900:	bf00      	nop
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <SystemClock_Config+0xcc>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090e:	d1f8      	bne.n	8000902 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000914:	2301      	movs	r3, #1
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2340      	movs	r3, #64	@ 0x40
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fd09 	bl	800233c <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000930:	f000 f97d 	bl	8000c2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	233f      	movs	r3, #63	@ 0x3f
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f002 f949 	bl	8002bf0 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000964:	f000 f963 	bl	8000c2e <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	@ 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58000400 	.word	0x58000400
 8000974:	58024800 	.word	0x58024800

08000978 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_I2C4_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	@ (80009f0 <MX_I2C4_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000982:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_I2C4_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <MX_I2C4_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_I2C4_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_I2C4_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_I2C4_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_I2C4_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_I2C4_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_I2C4_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_I2C4_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009b2:	480e      	ldr	r0, [pc, #56]	@ (80009ec <MX_I2C4_Init+0x74>)
 80009b4:	f000 fe44 	bl	8001640 <HAL_I2C_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 f936 	bl	8000c2e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	2100      	movs	r1, #0
 80009c4:	4809      	ldr	r0, [pc, #36]	@ (80009ec <MX_I2C4_Init+0x74>)
 80009c6:	f001 fbc7 	bl	8002158 <HAL_I2CEx_ConfigAnalogFilter>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 f92d 	bl	8000c2e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_I2C4_Init+0x74>)
 80009d8:	f001 fc09 	bl	80021ee <HAL_I2CEx_ConfigDigitalFilter>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f924 	bl	8000c2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2400007c 	.word	0x2400007c
 80009f0:	58001c00 	.word	0x58001c00
 80009f4:	10707dbc 	.word	0x10707dbc

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 80009fe:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <MX_USART1_UART_Init+0x94>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a40:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a42:	f004 facd 	bl	8004fe0 <HAL_UART_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f8ef 	bl	8000c2e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a54:	f005 fb63 	bl	800611e <HAL_UARTEx_SetTxFifoThreshold>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5e:	f000 f8e6 	bl	8000c2e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a66:	f005 fb98 	bl	800619a <HAL_UARTEx_SetRxFifoThreshold>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 f8dd 	bl	8000c2e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_USART1_UART_Init+0x90>)
 8000a76:	f005 fb19 	bl	80060ac <HAL_UARTEx_DisableFifoMode>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f000 f8d5 	bl	8000c2e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240000d0 	.word	0x240000d0
 8000a8c:	40011000 	.word	0x40011000

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_GPIO_Init+0x50>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <MX_GPIO_Init+0x50>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_GPIO_Init+0x50>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_GPIO_Init+0x50>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a09      	ldr	r2, [pc, #36]	@ (8000ae0 <MX_GPIO_Init+0x50>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_GPIO_Init+0x50>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	58024400 	.word	0x58024400

08000ae4 <DS1307_SetTime>:

/* USER CODE BEGIN 4 */
// Function to set time in DS1307
void DS1307_SetTime(uint8_t hour, uint8_t min, uint8_t sec) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af04      	add	r7, sp, #16
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	460b      	mov	r3, r1
 8000af0:	71bb      	strb	r3, [r7, #6]
 8000af2:	4613      	mov	r3, r2
 8000af4:	717b      	strb	r3, [r7, #5]
    uint8_t data[3];
    data[0] = DECtoBCD(sec);  // Convert to BCD
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f85b 	bl	8000bb4 <DECtoBCD>
 8000afe:	4603      	mov	r3, r0
 8000b00:	733b      	strb	r3, [r7, #12]
    data[1] = DECtoBCD(min);  // Convert to BCD
 8000b02:	79bb      	ldrb	r3, [r7, #6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f855 	bl	8000bb4 <DECtoBCD>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	737b      	strb	r3, [r7, #13]
    data[2] = DECtoBCD(hour);  // Convert to BCD
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f84f 	bl	8000bb4 <DECtoBCD>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(&hi2c4, DS1307_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, data, 3, HAL_MAX_DELAY);
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	2303      	movs	r3, #3
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	21d0      	movs	r1, #208	@ 0xd0
 8000b30:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <DS1307_SetTime+0x5c>)
 8000b32:	f000 fe21 	bl	8001778 <HAL_I2C_Mem_Write>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2400007c 	.word	0x2400007c

08000b44 <DS1307_GetTime>:

// Function to get time from DS1307
void DS1307_GetTime(uint8_t *hour, uint8_t *min, uint8_t *sec) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af04      	add	r7, sp, #16
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
    uint8_t data[3];
    HAL_I2C_Mem_Read(&hi2c4, DS1307_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, data, 3, HAL_MAX_DELAY);
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	9302      	str	r3, [sp, #8]
 8000b56:	2303      	movs	r3, #3
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2301      	movs	r3, #1
 8000b62:	2200      	movs	r2, #0
 8000b64:	21d0      	movs	r1, #208	@ 0xd0
 8000b66:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <DS1307_GetTime+0x6c>)
 8000b68:	f000 ff1a 	bl	80019a0 <HAL_I2C_Mem_Read>
    *sec = BCDtoDEC(data[0] & 0x7F);  // Convert from BCD
 8000b6c:	7d3b      	ldrb	r3, [r7, #20]
 8000b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f841 	bl	8000bfc <BCDtoDEC>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	701a      	strb	r2, [r3, #0]
    *min = BCDtoDEC(data[1]);  // Convert from BCD
 8000b82:	7d7b      	ldrb	r3, [r7, #21]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f839 	bl	8000bfc <BCDtoDEC>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	701a      	strb	r2, [r3, #0]
    *hour = BCDtoDEC(data[2] & 0x3F); // Convert from BCD
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f82e 	bl	8000bfc <BCDtoDEC>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	701a      	strb	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2400007c 	.word	0x2400007c

08000bb4 <DECtoBCD>:
 uint8_t DECtoBCD(uint8_t dec)
 {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	 return ((dec / 10 << 4) | (dec % 10));
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <DECtoBCD+0x44>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	b258      	sxtb	r0, r3
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <DECtoBCD+0x44>)
 8000bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd6:	08d9      	lsrs	r1, r3, #3
 8000bd8:	460b      	mov	r3, r1
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	440b      	add	r3, r1
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	4303      	orrs	r3, r0
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 }
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	cccccccd 	.word	0xcccccccd

08000bfc <BCDtoDEC>:
 uint8_t BCDtoDEC(uint8_t bcd)
 {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	 return ((bcd >> 4) * 10+ (bcd & 0x0F));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2db      	uxtb	r3, r3
 }
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c32:	b672      	cpsid	i
}
 8000c34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c36:	bf00      	nop
 8000c38:	e7fd      	b.n	8000c36 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c48:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x30>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	58024400 	.word	0x58024400

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0bc      	sub	sp, #240	@ 0xf0
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	22c8      	movs	r2, #200	@ 0xc8
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f005 fb43 	bl	800631c <memset>
  if(hi2c->Instance==I2C4)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <HAL_I2C_MspInit+0xc8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d146      	bne.n	8000d2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ca0:	f04f 0210 	mov.w	r2, #16
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fb26 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000cc2:	f7ff ffb4 	bl	8000c2e <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ce4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ce8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <HAL_I2C_MspInit+0xd0>)
 8000d0c:	f000 faba 	bl	8001284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8000d2e:	bf00      	nop
 8000d30:	37f0      	adds	r7, #240	@ 0xf0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	58001c00 	.word	0x58001c00
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020c00 	.word	0x58020c00

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0bc      	sub	sp, #240	@ 0xf0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	22c8      	movs	r2, #200	@ 0xc8
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f005 fad9 	bl	800631c <memset>
  if(huart->Instance==USART1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a27      	ldr	r2, [pc, #156]	@ (8000e0c <HAL_UART_MspInit+0xc8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d146      	bne.n	8000e02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d74:	f04f 0201 	mov.w	r2, #1
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fabc 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d96:	f7ff ff4a 	bl	8000c2e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <HAL_UART_MspInit+0xcc>)
 8000d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000da0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e10 <HAL_UART_MspInit+0xcc>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_UART_MspInit+0xcc>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000dd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df0:	2307      	movs	r3, #7
 8000df2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_UART_MspInit+0xd0>)
 8000dfe:	f000 fa41 	bl	8001284 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	37f0      	adds	r7, #240	@ 0xf0
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40011000 	.word	0x40011000
 8000e10:	58024400 	.word	0x58024400
 8000e14:	58020000 	.word	0x58020000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6e:	f000 f8d5 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f005 fa40 	bl	800632c <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	24080000 	.word	0x24080000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	240001a4 	.word	0x240001a4
 8000ee0:	240002f8 	.word	0x240002f8

08000ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee8:	f7ff fbca 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eee:	490d      	ldr	r1, [pc, #52]	@ (8000f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f04:	4c0a      	ldr	r4, [pc, #40]	@ (8000f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f005 fa11 	bl	8006338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f16:	f7ff fc49 	bl	80007ac <main>
  bx  lr
 8000f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f24:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000f28:	08006cc8 	.word	0x08006cc8
  ldr r2, =_sbss
 8000f2c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000f30:	240002f4 	.word	0x240002f4

08000f34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC3_IRQHandler>
	...

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f96e 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f44:	f002 f80a 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_Init+0x68>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	4913      	ldr	r1, [pc, #76]	@ (8000fa4 <HAL_Init+0x6c>)
 8000f56:	5ccb      	ldrb	r3, [r1, r3]
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_Init+0x68>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa4 <HAL_Init+0x6c>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <HAL_Init+0x70>)
 8000f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <HAL_Init+0x74>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f814 	bl	8000fb0 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e002      	b.n	8000f98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f92:	f7ff fe53 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	08006c4c 	.word	0x08006c4c
 8000fa8:	24000004 	.word	0x24000004
 8000fac:	24000000 	.word	0x24000000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <HAL_InitTick+0x60>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e021      	b.n	8001008 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <HAL_InitTick+0x64>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <HAL_InitTick+0x60>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f945 	bl	800126a <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f91d 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <HAL_InitTick+0x68>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2400000c 	.word	0x2400000c
 8001014:	24000000 	.word	0x24000000
 8001018:	24000008 	.word	0x24000008

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2400000c 	.word	0x2400000c
 8001040:	240001a8 	.word	0x240001a8

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	240001a8 	.word	0x240001a8

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2400000c 	.word	0x2400000c

080010a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetREVID+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0c1b      	lsrs	r3, r3, #16
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	5c001000 	.word	0x5c001000

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	05fa0000 	.word	0x05fa0000

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	@ (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	@ (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	@ 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff47 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff5e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff90 	bl	8001174 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5f 	bl	8001120 <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffb2 	bl	80011dc <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001292:	4b89      	ldr	r3, [pc, #548]	@ (80014b8 <HAL_GPIO_Init+0x234>)
 8001294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001296:	e194      	b.n	80015c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8186 	beq.w	80015bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d005      	beq.n	80012c8 <HAL_GPIO_Init+0x44>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d017      	beq.n	8001366 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d123      	bne.n	80013ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	220f      	movs	r2, #15
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	691a      	ldr	r2, [r3, #16]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	08da      	lsrs	r2, r3, #3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3208      	adds	r2, #8
 80013b4:	69b9      	ldr	r1, [r7, #24]
 80013b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0203 	and.w	r2, r3, #3
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80e0 	beq.w	80015bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <HAL_GPIO_Init+0x238>)
 80013fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001402:	4a2e      	ldr	r2, [pc, #184]	@ (80014bc <HAL_GPIO_Init+0x238>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <HAL_GPIO_Init+0x238>)
 800140e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141a:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <HAL_GPIO_Init+0x23c>)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a20      	ldr	r2, [pc, #128]	@ (80014c4 <HAL_GPIO_Init+0x240>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d052      	beq.n	80014ec <HAL_GPIO_Init+0x268>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a1f      	ldr	r2, [pc, #124]	@ (80014c8 <HAL_GPIO_Init+0x244>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d031      	beq.n	80014b2 <HAL_GPIO_Init+0x22e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a1e      	ldr	r2, [pc, #120]	@ (80014cc <HAL_GPIO_Init+0x248>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d02b      	beq.n	80014ae <HAL_GPIO_Init+0x22a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_GPIO_Init+0x24c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d025      	beq.n	80014aa <HAL_GPIO_Init+0x226>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <HAL_GPIO_Init+0x250>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d01f      	beq.n	80014a6 <HAL_GPIO_Init+0x222>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a1b      	ldr	r2, [pc, #108]	@ (80014d8 <HAL_GPIO_Init+0x254>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d019      	beq.n	80014a2 <HAL_GPIO_Init+0x21e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <HAL_GPIO_Init+0x258>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a19      	ldr	r2, [pc, #100]	@ (80014e0 <HAL_GPIO_Init+0x25c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00d      	beq.n	800149a <HAL_GPIO_Init+0x216>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a18      	ldr	r2, [pc, #96]	@ (80014e4 <HAL_GPIO_Init+0x260>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d007      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_GPIO_Init+0x264>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_GPIO_Init+0x20e>
 800148e:	2309      	movs	r3, #9
 8001490:	e02d      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 8001492:	230a      	movs	r3, #10
 8001494:	e02b      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 8001496:	2308      	movs	r3, #8
 8001498:	e029      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 800149a:	2307      	movs	r3, #7
 800149c:	e027      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 800149e:	2306      	movs	r3, #6
 80014a0:	e025      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 80014a2:	2305      	movs	r3, #5
 80014a4:	e023      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e021      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 80014aa:	2303      	movs	r3, #3
 80014ac:	e01f      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e01d      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e01b      	b.n	80014ee <HAL_GPIO_Init+0x26a>
 80014b6:	bf00      	nop
 80014b8:	58000080 	.word	0x58000080
 80014bc:	58024400 	.word	0x58024400
 80014c0:	58000400 	.word	0x58000400
 80014c4:	58020000 	.word	0x58020000
 80014c8:	58020400 	.word	0x58020400
 80014cc:	58020800 	.word	0x58020800
 80014d0:	58020c00 	.word	0x58020c00
 80014d4:	58021000 	.word	0x58021000
 80014d8:	58021400 	.word	0x58021400
 80014dc:	58021800 	.word	0x58021800
 80014e0:	58021c00 	.word	0x58021c00
 80014e4:	58022000 	.word	0x58022000
 80014e8:	58022400 	.word	0x58022400
 80014ec:	2300      	movs	r3, #0
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	f002 0203 	and.w	r2, r2, #3
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	4093      	lsls	r3, r2
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fe:	4938      	ldr	r1, [pc, #224]	@ (80015e0 <HAL_GPIO_Init+0x35c>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800153a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	3301      	adds	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f47f ae63 	bne.w	8001298 <HAL_GPIO_Init+0x14>
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	3724      	adds	r7, #36	@ 0x24
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	58000400 	.word	0x58000400

080015e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80015ec:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_HSEM_FastTake+0x2c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3320      	adds	r3, #32
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <HAL_HSEM_FastTake+0x30>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e000      	b.n	8001602 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	58026400 	.word	0x58026400
 8001614:	80000300 	.word	0x80000300

08001618 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001622:	4906      	ldr	r1, [pc, #24]	@ (800163c <HAL_HSEM_Release+0x24>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	58026400 	.word	0x58026400

08001640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e08b      	b.n	800176a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d106      	bne.n	800166c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fb02 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2224      	movs	r2, #36	@ 0x24
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d107      	bne.n	80016ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e006      	b.n	80016c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d108      	bne.n	80016e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e007      	b.n	80016f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_I2C_Init+0x134>)
 80016fe:	430b      	orrs	r3, r1
 8001700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69d9      	ldr	r1, [r3, #28]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	02008000 	.word	0x02008000

08001778 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af02      	add	r7, sp, #8
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	817b      	strh	r3, [r7, #10]
 800178a:	460b      	mov	r3, r1
 800178c:	813b      	strh	r3, [r7, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b20      	cmp	r3, #32
 800179c:	f040 80f9 	bne.w	8001992 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <HAL_I2C_Mem_Write+0x34>
 80017a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0ed      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_I2C_Mem_Write+0x4e>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e0e6      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017ce:	f7ff fc39 	bl	8001044 <HAL_GetTick>
 80017d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2319      	movs	r3, #25
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 fac3 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0d1      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2221      	movs	r2, #33	@ 0x21
 80017f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2240      	movs	r2, #64	@ 0x40
 80017fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a3a      	ldr	r2, [r7, #32]
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001818:	88f8      	ldrh	r0, [r7, #6]
 800181a:	893a      	ldrh	r2, [r7, #8]
 800181c:	8979      	ldrh	r1, [r7, #10]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4603      	mov	r3, r0
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f9d3 	bl	8001bd4 <I2C_RequestMemoryWrite>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0a9      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	2bff      	cmp	r3, #255	@ 0xff
 8001848:	d90e      	bls.n	8001868 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	22ff      	movs	r2, #255	@ 0xff
 800184e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001854:	b2da      	uxtb	r2, r3
 8001856:	8979      	ldrh	r1, [r7, #10]
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fc47 	bl	80020f4 <I2C_TransferConfig>
 8001866:	e00f      	b.n	8001888 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001876:	b2da      	uxtb	r2, r3
 8001878:	8979      	ldrh	r1, [r7, #10]
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fc36 	bl	80020f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fac6 	bl	8001e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e07b      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d034      	beq.n	8001940 <HAL_I2C_Mem_Write+0x1c8>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d130      	bne.n	8001940 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	2200      	movs	r2, #0
 80018e6:	2180      	movs	r1, #128	@ 0x80
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fa3f 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e04d      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2bff      	cmp	r3, #255	@ 0xff
 8001900:	d90e      	bls.n	8001920 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	22ff      	movs	r2, #255	@ 0xff
 8001906:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190c:	b2da      	uxtb	r2, r3
 800190e:	8979      	ldrh	r1, [r7, #10]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fbeb 	bl	80020f4 <I2C_TransferConfig>
 800191e:	e00f      	b.n	8001940 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192e:	b2da      	uxtb	r2, r3
 8001930:	8979      	ldrh	r1, [r7, #10]
 8001932:	2300      	movs	r3, #0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fbda 	bl	80020f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d19e      	bne.n	8001888 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 faac 	bl	8001eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e01a      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_I2C_Mem_Write+0x224>)
 8001972:	400b      	ands	r3, r1
 8001974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001992:	2302      	movs	r3, #2
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	fe00e800 	.word	0xfe00e800

080019a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	4608      	mov	r0, r1
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	817b      	strh	r3, [r7, #10]
 80019b2:	460b      	mov	r3, r1
 80019b4:	813b      	strh	r3, [r7, #8]
 80019b6:	4613      	mov	r3, r2
 80019b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	f040 80fd 	bne.w	8001bc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_I2C_Mem_Read+0x34>
 80019ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0f1      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_I2C_Mem_Read+0x4e>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e0ea      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019f6:	f7ff fb25 	bl	8001044 <HAL_GetTick>
 80019fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2319      	movs	r3, #25
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f9af 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0d5      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2222      	movs	r2, #34	@ 0x22
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2240      	movs	r2, #64	@ 0x40
 8001a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a3a      	ldr	r2, [r7, #32]
 8001a32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a40:	88f8      	ldrh	r0, [r7, #6]
 8001a42:	893a      	ldrh	r2, [r7, #8]
 8001a44:	8979      	ldrh	r1, [r7, #10]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f913 	bl	8001c7c <I2C_RequestMemoryRead>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0ad      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d90e      	bls.n	8001a90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	22ff      	movs	r2, #255	@ 0xff
 8001a76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	8979      	ldrh	r1, [r7, #10]
 8001a80:	4b52      	ldr	r3, [pc, #328]	@ (8001bcc <HAL_I2C_Mem_Read+0x22c>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fb33 	bl	80020f4 <I2C_TransferConfig>
 8001a8e:	e00f      	b.n	8001ab0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	8979      	ldrh	r1, [r7, #10]
 8001aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bcc <HAL_I2C_Mem_Read+0x22c>)
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fb22 	bl	80020f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2104      	movs	r1, #4
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f956 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e07c      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d034      	beq.n	8001b70 <HAL_I2C_Mem_Read+0x1d0>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d130      	bne.n	8001b70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b14:	2200      	movs	r2, #0
 8001b16:	2180      	movs	r1, #128	@ 0x80
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f927 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e04d      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2bff      	cmp	r3, #255	@ 0xff
 8001b30:	d90e      	bls.n	8001b50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	22ff      	movs	r2, #255	@ 0xff
 8001b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	8979      	ldrh	r1, [r7, #10]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fad3 	bl	80020f4 <I2C_TransferConfig>
 8001b4e:	e00f      	b.n	8001b70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	8979      	ldrh	r1, [r7, #10]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fac2 	bl	80020f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d19a      	bne.n	8001ab0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f994 	bl	8001eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e01a      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2220      	movs	r2, #32
 8001b94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_I2C_Mem_Read+0x230>)
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001bc2:	2302      	movs	r3, #2
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	80002400 	.word	0x80002400
 8001bd0:	fe00e800 	.word	0xfe00e800

08001bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	817b      	strh	r3, [r7, #10]
 8001be6:	460b      	mov	r3, r1
 8001be8:	813b      	strh	r3, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	8979      	ldrh	r1, [r7, #10]
 8001bf4:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <I2C_RequestMemoryWrite+0xa4>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fa79 	bl	80020f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f909 	bl	8001e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e02c      	b.n	8001c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c26:	e015      	b.n	8001c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c28:	893b      	ldrh	r3, [r7, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	69b9      	ldr	r1, [r7, #24]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f8ef 	bl	8001e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e012      	b.n	8001c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c4a:	893b      	ldrh	r3, [r7, #8]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2180      	movs	r1, #128	@ 0x80
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f884 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	80002000 	.word	0x80002000

08001c7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	4608      	mov	r0, r1
 8001c86:	4611      	mov	r1, r2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	817b      	strh	r3, [r7, #10]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	813b      	strh	r3, [r7, #8]
 8001c92:	4613      	mov	r3, r2
 8001c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	8979      	ldrh	r1, [r7, #10]
 8001c9c:	4b20      	ldr	r3, [pc, #128]	@ (8001d20 <I2C_RequestMemoryRead+0xa4>)
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fa26 	bl	80020f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	69b9      	ldr	r1, [r7, #24]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f8b6 	bl	8001e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e02c      	b.n	8001d16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d105      	bne.n	8001cce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc2:	893b      	ldrh	r3, [r7, #8]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ccc:	e015      	b.n	8001cfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cce:	893b      	ldrh	r3, [r7, #8]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f89c 	bl	8001e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e012      	b.n	8001d16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cf0:	893b      	ldrh	r3, [r7, #8]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2140      	movs	r1, #64	@ 0x40
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f831 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	80002000 	.word	0x80002000

08001d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d103      	bne.n	8001d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d007      	beq.n	8001d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	619a      	str	r2, [r3, #24]
  }
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7c:	e03b      	b.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f8d6 	bl	8001f34 <I2C_IsErrorOccurred>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e041      	b.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d02d      	beq.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff f953 	bl	8001044 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d122      	bne.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4013      	ands	r3, r2
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d113      	bne.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d0b4      	beq.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e2a:	e033      	b.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f87f 	bl	8001f34 <I2C_IsErrorOccurred>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e031      	b.n	8001ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d025      	beq.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e48:	f7ff f8fc 	bl	8001044 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d302      	bcc.n	8001e5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11a      	bne.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d013      	beq.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e007      	b.n	8001ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d1c4      	bne.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb8:	e02f      	b.n	8001f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f838 	bl	8001f34 <I2C_IsErrorOccurred>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e02d      	b.n	8001f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ece:	f7ff f8b9 	bl	8001044 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d11a      	bne.n	8001f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d013      	beq.n	8001f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e007      	b.n	8001f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d1c8      	bne.n	8001eba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d068      	beq.n	8002032 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2210      	movs	r2, #16
 8001f66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f68:	e049      	b.n	8001ffe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d045      	beq.n	8001ffe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f72:	f7ff f867 	bl	8001044 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d302      	bcc.n	8001f88 <I2C_IsErrorOccurred+0x54>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d13a      	bne.n	8001ffe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001faa:	d121      	bne.n	8001ff0 <I2C_IsErrorOccurred+0xbc>
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fb2:	d01d      	beq.n	8001ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d01a      	beq.n	8001ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001fca:	f7ff f83b 	bl	8001044 <HAL_GetTick>
 8001fce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd0:	e00e      	b.n	8001ff0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001fd2:	f7ff f837 	bl	8001044 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b19      	cmp	r3, #25
 8001fde:	d907      	bls.n	8001ff0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001fee:	e006      	b.n	8001ffe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d1e9      	bne.n	8001fd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b20      	cmp	r3, #32
 800200a:	d003      	beq.n	8002014 <I2C_IsErrorOccurred+0xe0>
 800200c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0aa      	beq.n	8001f6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002018:	2b00      	cmp	r3, #0
 800201a:	d103      	bne.n	8002024 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2220      	movs	r2, #32
 8002022:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00b      	beq.n	800205c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00b      	beq.n	80020a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80020a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff fe3b 	bl	8001d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <I2C_IsErrorOccurred+0x1bc>)
 80020ba:	400b      	ands	r3, r1
 80020bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80020e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3728      	adds	r7, #40	@ 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	fe00e800 	.word	0xfe00e800

080020f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	817b      	strh	r3, [r7, #10]
 8002102:	4613      	mov	r3, r2
 8002104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800210c:	7a7b      	ldrb	r3, [r7, #9]
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	4313      	orrs	r3, r2
 800211e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <I2C_TransferConfig+0x60>)
 8002134:	430b      	orrs	r3, r1
 8002136:	43db      	mvns	r3, r3
 8002138:	ea02 0103 	and.w	r1, r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	03ff63ff 	.word	0x03ff63ff

08002158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	d138      	bne.n	80021e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002178:	2302      	movs	r3, #2
 800217a:	e032      	b.n	80021e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2224      	movs	r2, #36	@ 0x24
 8002188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e000      	b.n	80021e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b20      	cmp	r3, #32
 8002202:	d139      	bne.n	8002278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800220e:	2302      	movs	r3, #2
 8002210:	e033      	b.n	800227a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2224      	movs	r2, #36	@ 0x24
 800221e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002240:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002278:	2302      	movs	r3, #2
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002290:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <HAL_PWREx_ConfigSupply+0xb0>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	2b06      	cmp	r3, #6
 800229a:	d00a      	beq.n	80022b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800229c:	4b26      	ldr	r3, [pc, #152]	@ (8002338 <HAL_PWREx_ConfigSupply+0xb0>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e040      	b.n	8002330 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e03e      	b.n	8002330 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022b2:	4b21      	ldr	r3, [pc, #132]	@ (8002338 <HAL_PWREx_ConfigSupply+0xb0>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80022ba:	491f      	ldr	r1, [pc, #124]	@ (8002338 <HAL_PWREx_ConfigSupply+0xb0>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4313      	orrs	r3, r2
 80022c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022c2:	f7fe febf 	bl	8001044 <HAL_GetTick>
 80022c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022c8:	e009      	b.n	80022de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ca:	f7fe febb 	bl	8001044 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d8:	d901      	bls.n	80022de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e028      	b.n	8002330 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_PWREx_ConfigSupply+0xb0>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022ea:	d1ee      	bne.n	80022ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b1e      	cmp	r3, #30
 80022f0:	d008      	beq.n	8002304 <HAL_PWREx_ConfigSupply+0x7c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80022f6:	d005      	beq.n	8002304 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b1d      	cmp	r3, #29
 80022fc:	d002      	beq.n	8002304 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b2d      	cmp	r3, #45	@ 0x2d
 8002302:	d114      	bne.n	800232e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002304:	f7fe fe9e 	bl	8001044 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800230a:	e009      	b.n	8002320 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800230c:	f7fe fe9a 	bl	8001044 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800231a:	d901      	bls.n	8002320 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e007      	b.n	8002330 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_PWREx_ConfigSupply+0xb0>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232c:	d1ee      	bne.n	800230c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	58024800 	.word	0x58024800

0800233c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f000 bc48 	b.w	8002be0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8088 	beq.w	800246e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b99      	ldr	r3, [pc, #612]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002368:	4b96      	ldr	r3, [pc, #600]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800236a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	2b10      	cmp	r3, #16
 8002372:	d007      	beq.n	8002384 <HAL_RCC_OscConfig+0x48>
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	2b18      	cmp	r3, #24
 8002378:	d111      	bne.n	800239e <HAL_RCC_OscConfig+0x62>
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	4b8f      	ldr	r3, [pc, #572]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06d      	beq.n	800246c <HAL_RCC_OscConfig+0x130>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d169      	bne.n	800246c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f000 bc21 	b.w	8002be0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x7a>
 80023a8:	4b86      	ldr	r3, [pc, #536]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a85      	ldr	r2, [pc, #532]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e02e      	b.n	8002414 <HAL_RCC_OscConfig+0xd8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x9c>
 80023be:	4b81      	ldr	r3, [pc, #516]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a80      	ldr	r2, [pc, #512]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b7e      	ldr	r3, [pc, #504]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7d      	ldr	r2, [pc, #500]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xd8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0xc0>
 80023e2:	4b78      	ldr	r3, [pc, #480]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a77      	ldr	r2, [pc, #476]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b75      	ldr	r3, [pc, #468]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a74      	ldr	r2, [pc, #464]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xd8>
 80023fc:	4b71      	ldr	r3, [pc, #452]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a70      	ldr	r2, [pc, #448]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b6e      	ldr	r3, [pc, #440]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6d      	ldr	r2, [pc, #436]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fe12 	bl	8001044 <HAL_GetTick>
 8002420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fe0e 	bl	8001044 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e3d4      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002436:	4b63      	ldr	r3, [pc, #396]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xe8>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fdfe 	bl	8001044 <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fdfa 	bl	8001044 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e3c0      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800245e:	4b59      	ldr	r3, [pc, #356]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x110>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80ca 	beq.w	8002610 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247c:	4b51      	ldr	r3, [pc, #324]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002484:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002486:	4b4f      	ldr	r3, [pc, #316]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_RCC_OscConfig+0x166>
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2b18      	cmp	r3, #24
 8002496:	d156      	bne.n	8002546 <HAL_RCC_OscConfig+0x20a>
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d151      	bne.n	8002546 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a2:	4b48      	ldr	r3, [pc, #288]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x17e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e392      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024ba:	4b42      	ldr	r3, [pc, #264]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 0219 	bic.w	r2, r3, #25
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	493f      	ldr	r1, [pc, #252]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fdba 	bl	8001044 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe fdb6 	bl	8001044 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e37c      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024e6:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	f7fe fdd7 	bl	80010a4 <HAL_GetREVID>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d817      	bhi.n	8002530 <HAL_RCC_OscConfig+0x1f4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b40      	cmp	r3, #64	@ 0x40
 8002506:	d108      	bne.n	800251a <HAL_RCC_OscConfig+0x1de>
 8002508:	4b2e      	ldr	r3, [pc, #184]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002510:	4a2c      	ldr	r2, [pc, #176]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002516:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	e07a      	b.n	8002610 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	031b      	lsls	r3, r3, #12
 8002528:	4926      	ldr	r1, [pc, #152]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252e:	e06f      	b.n	8002610 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	4921      	ldr	r1, [pc, #132]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002544:	e064      	b.n	8002610 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d047      	beq.n	80025de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0219 	bic.w	r2, r3, #25
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	491a      	ldr	r1, [pc, #104]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fd70 	bl	8001044 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7fe fd6c 	bl	8001044 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e332      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	f7fe fd8d 	bl	80010a4 <HAL_GetREVID>
 800258a:	4603      	mov	r3, r0
 800258c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002590:	4293      	cmp	r3, r2
 8002592:	d819      	bhi.n	80025c8 <HAL_RCC_OscConfig+0x28c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b40      	cmp	r3, #64	@ 0x40
 800259a:	d108      	bne.n	80025ae <HAL_RCC_OscConfig+0x272>
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025a4:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80025a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025aa:	6053      	str	r3, [r2, #4]
 80025ac:	e030      	b.n	8002610 <HAL_RCC_OscConfig+0x2d4>
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	031b      	lsls	r3, r3, #12
 80025bc:	4901      	ldr	r1, [pc, #4]	@ (80025c4 <HAL_RCC_OscConfig+0x288>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
 80025c2:	e025      	b.n	8002610 <HAL_RCC_OscConfig+0x2d4>
 80025c4:	58024400 	.word	0x58024400
 80025c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	4997      	ldr	r1, [pc, #604]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
 80025dc:	e018      	b.n	8002610 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b95      	ldr	r3, [pc, #596]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a94      	ldr	r2, [pc, #592]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fd2b 	bl	8001044 <HAL_GetTick>
 80025ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f2:	f7fe fd27 	bl	8001044 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e2ed      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002604:	4b8b      	ldr	r3, [pc, #556]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a9 	beq.w	8002770 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4b85      	ldr	r3, [pc, #532]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002626:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002628:	4b82      	ldr	r3, [pc, #520]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d007      	beq.n	8002644 <HAL_RCC_OscConfig+0x308>
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b18      	cmp	r3, #24
 8002638:	d13a      	bne.n	80026b0 <HAL_RCC_OscConfig+0x374>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d135      	bne.n	80026b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002644:	4b7b      	ldr	r3, [pc, #492]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_OscConfig+0x320>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b80      	cmp	r3, #128	@ 0x80
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e2c1      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800265c:	f7fe fd22 	bl	80010a4 <HAL_GetREVID>
 8002660:	4603      	mov	r3, r0
 8002662:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002666:	4293      	cmp	r3, r2
 8002668:	d817      	bhi.n	800269a <HAL_RCC_OscConfig+0x35e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	2b20      	cmp	r3, #32
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x348>
 8002672:	4b70      	ldr	r3, [pc, #448]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800267a:	4a6e      	ldr	r2, [pc, #440]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800267c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002680:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002682:	e075      	b.n	8002770 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002684:	4b6b      	ldr	r3, [pc, #428]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	069b      	lsls	r3, r3, #26
 8002692:	4968      	ldr	r1, [pc, #416]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002698:	e06a      	b.n	8002770 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800269a:	4b66      	ldr	r3, [pc, #408]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	4962      	ldr	r1, [pc, #392]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ae:	e05f      	b.n	8002770 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d042      	beq.n	800273e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80026be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fcbe 	bl	8001044 <HAL_GetTick>
 80026c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026cc:	f7fe fcba 	bl	8001044 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e280      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026de:	4b55      	ldr	r3, [pc, #340]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ea:	f7fe fcdb 	bl	80010a4 <HAL_GetREVID>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d817      	bhi.n	8002728 <HAL_RCC_OscConfig+0x3ec>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d108      	bne.n	8002712 <HAL_RCC_OscConfig+0x3d6>
 8002700:	4b4c      	ldr	r3, [pc, #304]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002708:	4a4a      	ldr	r2, [pc, #296]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800270e:	6053      	str	r3, [r2, #4]
 8002710:	e02e      	b.n	8002770 <HAL_RCC_OscConfig+0x434>
 8002712:	4b48      	ldr	r3, [pc, #288]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	069b      	lsls	r3, r3, #26
 8002720:	4944      	ldr	r1, [pc, #272]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
 8002726:	e023      	b.n	8002770 <HAL_RCC_OscConfig+0x434>
 8002728:	4b42      	ldr	r3, [pc, #264]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	493f      	ldr	r1, [pc, #252]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002738:	4313      	orrs	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
 800273c:	e018      	b.n	8002770 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800273e:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3c      	ldr	r2, [pc, #240]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fc7b 	bl	8001044 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002752:	f7fe fc77 	bl	8001044 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e23d      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002764:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d036      	beq.n	80027ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d019      	beq.n	80027b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002784:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002788:	4a2a      	ldr	r2, [pc, #168]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe fc58 	bl	8001044 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe fc54 	bl	8001044 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e21a      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027aa:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x45c>
 80027b6:	e018      	b.n	80027ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe fc3e 	bl	8001044 <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe fc3a 	bl	8001044 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e200      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d039      	beq.n	800286a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01c      	beq.n	8002838 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a0c      	ldr	r2, [pc, #48]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002804:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002808:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800280a:	f7fe fc1b 	bl	8001044 <HAL_GetTick>
 800280e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002812:	f7fe fc17 	bl	8001044 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e1dd      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_RCC_OscConfig+0x4f8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x4d6>
 8002830:	e01b      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
 8002832:	bf00      	nop
 8002834:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002838:	4b9b      	ldr	r3, [pc, #620]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a9a      	ldr	r2, [pc, #616]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 800283e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002842:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002844:	f7fe fbfe 	bl	8001044 <HAL_GetTick>
 8002848:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800284c:	f7fe fbfa 	bl	8001044 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1c0      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800285e:	4b92      	ldr	r3, [pc, #584]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8081 	beq.w	800297a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002878:	4b8c      	ldr	r3, [pc, #560]	@ (8002aac <HAL_RCC_OscConfig+0x770>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a8b      	ldr	r2, [pc, #556]	@ (8002aac <HAL_RCC_OscConfig+0x770>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002884:	f7fe fbde 	bl	8001044 <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fe fbda 	bl	8001044 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	@ 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1a0      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800289e:	4b83      	ldr	r3, [pc, #524]	@ (8002aac <HAL_RCC_OscConfig+0x770>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d106      	bne.n	80028c0 <HAL_RCC_OscConfig+0x584>
 80028b2:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028be:	e02d      	b.n	800291c <HAL_RCC_OscConfig+0x5e0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10c      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5a6>
 80028c8:	4b77      	ldr	r3, [pc, #476]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	4a76      	ldr	r2, [pc, #472]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d4:	4b74      	ldr	r3, [pc, #464]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a73      	ldr	r2, [pc, #460]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028da:	f023 0304 	bic.w	r3, r3, #4
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x5e0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c8>
 80028ea:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f6:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	@ 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x5e0>
 8002904:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002908:	4a67      	ldr	r2, [pc, #412]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002910:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a64      	ldr	r2, [pc, #400]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fb8e 	bl	8001044 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe fb8a 	bl	8001044 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e14e      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002942:	4b59      	ldr	r3, [pc, #356]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x5f0>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe fb78 	bl	8001044 <HAL_GetTick>
 8002954:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fb74 	bl	8001044 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e138      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800296e:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 812d 	beq.w	8002bde <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002984:	4b48      	ldr	r3, [pc, #288]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800298c:	2b18      	cmp	r3, #24
 800298e:	f000 80bd 	beq.w	8002b0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	2b02      	cmp	r3, #2
 8002998:	f040 809e 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b42      	ldr	r3, [pc, #264]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a41      	ldr	r2, [pc, #260]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80029a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fb4c 	bl	8001044 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fb48 	bl	8001044 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e10e      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029c2:	4b39      	ldr	r3, [pc, #228]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ce:	4b36      	ldr	r3, [pc, #216]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029d2:	4b37      	ldr	r3, [pc, #220]	@ (8002ab0 <HAL_RCC_OscConfig+0x774>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	430a      	orrs	r2, r1
 80029e2:	4931      	ldr	r1, [pc, #196]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	3b01      	subs	r3, #1
 80029ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f6:	3b01      	subs	r3, #1
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	3b01      	subs	r3, #1
 8002a12:	061b      	lsls	r3, r3, #24
 8002a14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a18:	4923      	ldr	r1, [pc, #140]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a1e:	4b22      	ldr	r3, [pc, #136]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	4a21      	ldr	r2, [pc, #132]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2e:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_RCC_OscConfig+0x778>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a36:	00d2      	lsls	r2, r2, #3
 8002a38:	491b      	ldr	r1, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a42:	f023 020c 	bic.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	4917      	ldr	r1, [pc, #92]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a50:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	f023 0202 	bic.w	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	4912      	ldr	r1, [pc, #72]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	4a10      	ldr	r2, [pc, #64]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a86:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a92:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <HAL_RCC_OscConfig+0x76c>)
 8002a98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fad1 	bl	8001044 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aa4:	e011      	b.n	8002aca <HAL_RCC_OscConfig+0x78e>
 8002aa6:	bf00      	nop
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	58024800 	.word	0x58024800
 8002ab0:	fffffc0c 	.word	0xfffffc0c
 8002ab4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fac4 	bl	8001044 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e08a      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aca:	4b47      	ldr	r3, [pc, #284]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x77c>
 8002ad6:	e082      	b.n	8002bde <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b43      	ldr	r3, [pc, #268]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a42      	ldr	r2, [pc, #264]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe faae 	bl	8001044 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe faaa 	bl	8001044 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e070      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002afe:	4b3a      	ldr	r3, [pc, #232]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x7b0>
 8002b0a:	e068      	b.n	8002bde <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b12:	4b35      	ldr	r3, [pc, #212]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d031      	beq.n	8002b84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0203 	and.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d12a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d122      	bne.n	8002b84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d11a      	bne.n	8002b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d111      	bne.n	8002b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d108      	bne.n	8002b84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	0e1b      	lsrs	r3, r3, #24
 8002b76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e02b      	b.n	8002be0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b88:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8c:	08db      	lsrs	r3, r3, #3
 8002b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d01f      	beq.n	8002bde <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	4a11      	ldr	r2, [pc, #68]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002baa:	f7fe fa4b 	bl	8001044 <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bb0:	bf00      	nop
 8002bb2:	f7fe fa47 	bl	8001044 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d0f9      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <HAL_RCC_OscConfig+0x8b0>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bca:	00d2      	lsls	r2, r2, #3
 8002bcc:	4906      	ldr	r1, [pc, #24]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bd2:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	4a04      	ldr	r2, [pc, #16]	@ (8002be8 <HAL_RCC_OscConfig+0x8ac>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3730      	adds	r7, #48	@ 0x30
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	58024400 	.word	0x58024400
 8002bec:	ffff0007 	.word	0xffff0007

08002bf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e19c      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b8a      	ldr	r3, [pc, #552]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d910      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b87      	ldr	r3, [pc, #540]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 020f 	bic.w	r2, r3, #15
 8002c1a:	4985      	ldr	r1, [pc, #532]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b83      	ldr	r3, [pc, #524]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e184      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	4b7b      	ldr	r3, [pc, #492]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d908      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c50:	4b78      	ldr	r3, [pc, #480]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	4975      	ldr	r1, [pc, #468]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	4b70      	ldr	r3, [pc, #448]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d908      	bls.n	8002c90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	496a      	ldr	r1, [pc, #424]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	4b64      	ldr	r3, [pc, #400]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d908      	bls.n	8002cbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cac:	4b61      	ldr	r3, [pc, #388]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	495e      	ldr	r1, [pc, #376]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	4b59      	ldr	r3, [pc, #356]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d908      	bls.n	8002cec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cda:	4b56      	ldr	r3, [pc, #344]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4953      	ldr	r1, [pc, #332]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d908      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b4a      	ldr	r3, [pc, #296]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f023 020f 	bic.w	r2, r3, #15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4947      	ldr	r1, [pc, #284]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d055      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d26:	4b43      	ldr	r3, [pc, #268]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	4940      	ldr	r1, [pc, #256]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d40:	4b3c      	ldr	r3, [pc, #240]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d121      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0f6      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d58:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d115      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0ea      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d70:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0de      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d80:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0d6      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d90:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f023 0207 	bic.w	r2, r3, #7
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4925      	ldr	r1, [pc, #148]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da2:	f7fe f94f 	bl	8001044 <HAL_GetTick>
 8002da6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002daa:	f7fe f94b 	bl	8001044 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0be      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d1eb      	bne.n	8002daa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d208      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f023 020f 	bic.w	r2, r3, #15
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	490e      	ldr	r1, [pc, #56]	@ (8002e34 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d214      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 020f 	bic.w	r2, r3, #15
 8002e16:	4906      	ldr	r1, [pc, #24]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <HAL_RCC_ClockConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e086      	b.n	8002f3e <HAL_RCC_ClockConfig+0x34e>
 8002e30:	52002000 	.word	0x52002000
 8002e34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	4b3f      	ldr	r3, [pc, #252]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d208      	bcs.n	8002e66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e54:	4b3c      	ldr	r3, [pc, #240]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	4939      	ldr	r1, [pc, #228]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d208      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e82:	4b31      	ldr	r3, [pc, #196]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	492e      	ldr	r1, [pc, #184]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d010      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d208      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	4922      	ldr	r1, [pc, #136]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d208      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ede:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	4917      	ldr	r1, [pc, #92]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ef0:	f000 f834 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b14      	ldr	r3, [pc, #80]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	4912      	ldr	r1, [pc, #72]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <HAL_RCC_ClockConfig+0x358>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <HAL_RCC_ClockConfig+0x35c>)
 8002f18:	5cd3      	ldrb	r3, [r2, r3]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <HAL_RCC_ClockConfig+0x360>)
 8002f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f28:	4a0a      	ldr	r2, [pc, #40]	@ (8002f54 <HAL_RCC_ClockConfig+0x364>)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <HAL_RCC_ClockConfig+0x368>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe f83c 	bl	8000fb0 <HAL_InitTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	08006c4c 	.word	0x08006c4c
 8002f50:	24000004 	.word	0x24000004
 8002f54:	24000000 	.word	0x24000000
 8002f58:	24000008 	.word	0x24000008

08002f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f62:	4bb3      	ldr	r3, [pc, #716]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f6a:	2b18      	cmp	r3, #24
 8002f6c:	f200 8155 	bhi.w	800321a <HAL_RCC_GetSysClockFreq+0x2be>
 8002f70:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002fdd 	.word	0x08002fdd
 8002f7c:	0800321b 	.word	0x0800321b
 8002f80:	0800321b 	.word	0x0800321b
 8002f84:	0800321b 	.word	0x0800321b
 8002f88:	0800321b 	.word	0x0800321b
 8002f8c:	0800321b 	.word	0x0800321b
 8002f90:	0800321b 	.word	0x0800321b
 8002f94:	0800321b 	.word	0x0800321b
 8002f98:	08003003 	.word	0x08003003
 8002f9c:	0800321b 	.word	0x0800321b
 8002fa0:	0800321b 	.word	0x0800321b
 8002fa4:	0800321b 	.word	0x0800321b
 8002fa8:	0800321b 	.word	0x0800321b
 8002fac:	0800321b 	.word	0x0800321b
 8002fb0:	0800321b 	.word	0x0800321b
 8002fb4:	0800321b 	.word	0x0800321b
 8002fb8:	08003009 	.word	0x08003009
 8002fbc:	0800321b 	.word	0x0800321b
 8002fc0:	0800321b 	.word	0x0800321b
 8002fc4:	0800321b 	.word	0x0800321b
 8002fc8:	0800321b 	.word	0x0800321b
 8002fcc:	0800321b 	.word	0x0800321b
 8002fd0:	0800321b 	.word	0x0800321b
 8002fd4:	0800321b 	.word	0x0800321b
 8002fd8:	0800300f 	.word	0x0800300f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fdc:	4b94      	ldr	r3, [pc, #592]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fe8:	4b91      	ldr	r3, [pc, #580]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	4a90      	ldr	r2, [pc, #576]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ffa:	e111      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ffc:	4b8d      	ldr	r3, [pc, #564]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ffe:	61bb      	str	r3, [r7, #24]
      break;
 8003000:	e10e      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003002:	4b8d      	ldr	r3, [pc, #564]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003004:	61bb      	str	r3, [r7, #24]
      break;
 8003006:	e10b      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003008:	4b8c      	ldr	r3, [pc, #560]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800300a:	61bb      	str	r3, [r7, #24]
      break;
 800300c:	e108      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800300e:	4b88      	ldr	r3, [pc, #544]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003018:	4b85      	ldr	r3, [pc, #532]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003022:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003024:	4b82      	ldr	r3, [pc, #520]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800302e:	4b80      	ldr	r3, [pc, #512]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	08db      	lsrs	r3, r3, #3
 8003034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80e1 	beq.w	8003214 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b02      	cmp	r3, #2
 8003056:	f000 8083 	beq.w	8003160 <HAL_RCC_GetSysClockFreq+0x204>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b02      	cmp	r3, #2
 800305e:	f200 80a1 	bhi.w	80031a4 <HAL_RCC_GetSysClockFreq+0x248>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x114>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d056      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x1c0>
 800306e:	e099      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003070:	4b6f      	ldr	r3, [pc, #444]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02d      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800307c:	4b6c      	ldr	r3, [pc, #432]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	08db      	lsrs	r3, r3, #3
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	4a6b      	ldr	r2, [pc, #428]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	ee07 3a90 	vmov	s15, r3
 8003094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a6:	4b62      	ldr	r3, [pc, #392]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030d6:	e087      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003244 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ea:	4b51      	ldr	r3, [pc, #324]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800311a:	e065      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003126:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003248 <HAL_RCC_GetSysClockFreq+0x2ec>
 800312a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312e:	4b40      	ldr	r3, [pc, #256]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003142:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003240 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800314e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800315e:	e043      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2f0>
 800316e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003172:	4b2f      	ldr	r3, [pc, #188]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003182:	ed97 6a02 	vldr	s12, [r7, #8]
 8003186:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003240 <HAL_RCC_GetSysClockFreq+0x2e4>
 800318a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031a2:	e021      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003248 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003240 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	0a5b      	lsrs	r3, r3, #9
 80031ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f2:	3301      	adds	r3, #1
 80031f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003200:	edd7 6a07 	vldr	s13, [r7, #28]
 8003204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800320c:	ee17 3a90 	vmov	r3, s15
 8003210:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003212:	e005      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
      break;
 8003218:	e002      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800321c:	61bb      	str	r3, [r7, #24]
      break;
 800321e:	bf00      	nop
  }

  return sysclockfreq;
 8003220:	69bb      	ldr	r3, [r7, #24]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	@ 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	58024400 	.word	0x58024400
 8003234:	03d09000 	.word	0x03d09000
 8003238:	003d0900 	.word	0x003d0900
 800323c:	017d7840 	.word	0x017d7840
 8003240:	46000000 	.word	0x46000000
 8003244:	4c742400 	.word	0x4c742400
 8003248:	4a742400 	.word	0x4a742400
 800324c:	4bbebc20 	.word	0x4bbebc20

08003250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003256:	f7ff fe81 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490f      	ldr	r1, [pc, #60]	@ (80032a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003274:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a07      	ldr	r2, [pc, #28]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800328c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800328e:	4a07      	ldr	r2, [pc, #28]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003294:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	58024400 	.word	0x58024400
 80032a4:	08006c4c 	.word	0x08006c4c
 80032a8:	24000004 	.word	0x24000004
 80032ac:	24000000 	.word	0x24000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032b4:	f7ff ffcc 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4904      	ldr	r1, [pc, #16]	@ (80032d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	58024400 	.word	0x58024400
 80032d8:	08006c4c 	.word	0x08006c4c

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032e0:	f7ff ffb6 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4904      	ldr	r1, [pc, #16]	@ (8003304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58024400 	.word	0x58024400
 8003304:	08006c4c 	.word	0x08006c4c

08003308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800330c:	b0cc      	sub	sp, #304	@ 0x130
 800330e:	af00      	add	r7, sp, #0
 8003310:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003314:	2300      	movs	r3, #0
 8003316:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800331a:	2300      	movs	r3, #0
 800331c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003320:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800332c:	2500      	movs	r5, #0
 800332e:	ea54 0305 	orrs.w	r3, r4, r5
 8003332:	d049      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800333a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800333e:	d02f      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003340:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003344:	d828      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800334a:	d01a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800334c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003350:	d822      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335a:	d007      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800335c:	e01c      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335e:	4bb8      	ldr	r3, [pc, #736]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	4ab7      	ldr	r2, [pc, #732]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800336a:	e01a      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800336c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003370:	3308      	adds	r3, #8
 8003372:	2102      	movs	r1, #2
 8003374:	4618      	mov	r0, r3
 8003376:	f001 fccf 	bl	8004d18 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003380:	e00f      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003386:	3328      	adds	r3, #40	@ 0x28
 8003388:	2102      	movs	r1, #2
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fd76 	bl	8004e7c <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003396:	e004      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033aa:	4ba5      	ldr	r3, [pc, #660]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b8:	4aa1      	ldr	r2, [pc, #644]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80033be:	e003      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033d4:	f04f 0900 	mov.w	r9, #0
 80033d8:	ea58 0309 	orrs.w	r3, r8, r9
 80033dc:	d047      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d82a      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033e8:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003405 	.word	0x08003405
 80033f4:	08003413 	.word	0x08003413
 80033f8:	08003429 	.word	0x08003429
 80033fc:	08003447 	.word	0x08003447
 8003400:	08003447 	.word	0x08003447
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4b8e      	ldr	r3, [pc, #568]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	4a8d      	ldr	r2, [pc, #564]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003410:	e01a      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003416:	3308      	adds	r3, #8
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fc7c 	bl	8004d18 <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003426:	e00f      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800342c:	3328      	adds	r3, #40	@ 0x28
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f001 fd23 	bl	8004e7c <RCCEx_PLL3_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800343c:	e004      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003444:	e000      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003450:	4b7b      	ldr	r3, [pc, #492]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003454:	f023 0107 	bic.w	r1, r3, #7
 8003458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	4a78      	ldr	r2, [pc, #480]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003460:	430b      	orrs	r3, r1
 8003462:	6513      	str	r3, [r2, #80]	@ 0x50
 8003464:	e003      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003466:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800346a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800346e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800347a:	f04f 0b00 	mov.w	fp, #0
 800347e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003482:	d04c      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800348e:	d030      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003494:	d829      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003496:	2bc0      	cmp	r3, #192	@ 0xc0
 8003498:	d02d      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800349a:	2bc0      	cmp	r3, #192	@ 0xc0
 800349c:	d825      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800349e:	2b80      	cmp	r3, #128	@ 0x80
 80034a0:	d018      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034a2:	2b80      	cmp	r3, #128	@ 0x80
 80034a4:	d821      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80034aa:	2b40      	cmp	r3, #64	@ 0x40
 80034ac:	d007      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80034ae:	e01c      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b0:	4b63      	ldr	r3, [pc, #396]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	4a62      	ldr	r2, [pc, #392]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034bc:	e01c      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034c2:	3308      	adds	r3, #8
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f001 fc26 	bl	8004d18 <RCCEx_PLL2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034d2:	e011      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d8:	3328      	adds	r3, #40	@ 0x28
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fccd 	bl	8004e7c <RCCEx_PLL3_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034e8:	e006      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034f0:	e002      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003500:	4b4f      	ldr	r3, [pc, #316]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003504:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	4a4c      	ldr	r2, [pc, #304]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6513      	str	r3, [r2, #80]	@ 0x50
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003516:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800351a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800351e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800352a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003534:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	d053      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800353e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003546:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800354a:	d035      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800354c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003550:	d82e      	bhi.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003552:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003556:	d031      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003558:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800355c:	d828      	bhi.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800355e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003562:	d01a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003564:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003568:	d822      	bhi.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003572:	d007      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003574:	e01c      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003576:	4b32      	ldr	r3, [pc, #200]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	4a31      	ldr	r2, [pc, #196]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003582:	e01c      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003588:	3308      	adds	r3, #8
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fbc3 	bl	8004d18 <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003598:	e011      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800359a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800359e:	3328      	adds	r3, #40	@ 0x28
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fc6a 	bl	8004e7c <RCCEx_PLL3_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ae:	e006      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035b6:	e002      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035b8:	bf00      	nop
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d8:	430b      	orrs	r3, r1
 80035da:	6593      	str	r3, [r2, #88]	@ 0x58
 80035dc:	e003      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003600:	460b      	mov	r3, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	d056      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800360a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800360e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003612:	d038      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003614:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003618:	d831      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800361a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800361e:	d034      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003620:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003624:	d82b      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800362a:	d01d      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800362c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003630:	d825      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800363c:	e01f      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800363e:	bf00      	nop
 8003640:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003644:	4ba2      	ldr	r3, [pc, #648]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	4aa1      	ldr	r2, [pc, #644]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003650:	e01c      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003656:	3308      	adds	r3, #8
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fb5c 	bl	8004d18 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003666:	e011      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800366c:	3328      	adds	r3, #40	@ 0x28
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fc03 	bl	8004e7c <RCCEx_PLL3_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800367c:	e006      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800368a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003694:	4b8e      	ldr	r3, [pc, #568]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800369c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036a4:	4a8a      	ldr	r2, [pc, #552]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036aa:	e003      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036c0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036ca:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80036ce:	460b      	mov	r3, r1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	d03a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036da:	2b30      	cmp	r3, #48	@ 0x30
 80036dc:	d01f      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036de:	2b30      	cmp	r3, #48	@ 0x30
 80036e0:	d819      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d00c      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d815      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d019      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d111      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f2:	4b77      	ldr	r3, [pc, #476]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	4a76      	ldr	r2, [pc, #472]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80036fe:	e011      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003704:	3308      	adds	r3, #8
 8003706:	2102      	movs	r1, #2
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fb05 	bl	8004d18 <RCCEx_PLL2_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800371c:	e002      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003724:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800372c:	4b68      	ldr	r3, [pc, #416]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003730:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	4a65      	ldr	r2, [pc, #404]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800373c:	430b      	orrs	r3, r1
 800373e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003746:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003756:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003760:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d051      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003774:	d035      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003776:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800377a:	d82e      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800377c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003780:	d031      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003782:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003786:	d828      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800378c:	d01a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800378e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003792:	d822      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379c:	d007      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800379e:	e01c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a0:	4b4b      	ldr	r3, [pc, #300]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	4a4a      	ldr	r2, [pc, #296]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ac:	e01c      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037b2:	3308      	adds	r3, #8
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 faae 	bl	8004d18 <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c2:	e011      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037c8:	3328      	adds	r3, #40	@ 0x28
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fb55 	bl	8004e7c <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037f0:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037fe:	4a34      	ldr	r2, [pc, #208]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003800:	430b      	orrs	r3, r1
 8003802:	6513      	str	r3, [r2, #80]	@ 0x50
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800380a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800380e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800381a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003824:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d056      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800382e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003838:	d033      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800383a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800383e:	d82c      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003840:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003844:	d02f      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003846:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800384a:	d826      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800384c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003850:	d02b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003852:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003856:	d820      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800385c:	d012      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800385e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003862:	d81a      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d022      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800386c:	d115      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800386e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003872:	3308      	adds	r3, #8
 8003874:	2101      	movs	r1, #1
 8003876:	4618      	mov	r0, r3
 8003878:	f001 fa4e 	bl	8004d18 <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003882:	e015      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003884:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003888:	3328      	adds	r3, #40	@ 0x28
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f001 faf5 	bl	8004e7c <RCCEx_PLL3_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003898:	e00a      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038a0:	e006      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038a2:	bf00      	nop
 80038a4:	e004      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038b8:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038c6:	4a02      	ldr	r2, [pc, #8]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038ce:	bf00      	nop
 80038d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038f2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038f6:	460b      	mov	r3, r1
 80038f8:	4313      	orrs	r3, r2
 80038fa:	d055      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003908:	d033      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800390a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800390e:	d82c      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003914:	d02f      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391a:	d826      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800391c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003920:	d02b      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003926:	d820      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800392c:	d012      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800392e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003932:	d81a      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d022      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800393c:	d115      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800393e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003942:	3308      	adds	r3, #8
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f001 f9e6 	bl	8004d18 <RCCEx_PLL2_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003952:	e015      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003958:	3328      	adds	r3, #40	@ 0x28
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f001 fa8d 	bl	8004e7c <RCCEx_PLL3_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003968:	e00a      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003970:	e006      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003972:	bf00      	nop
 8003974:	e004      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800397e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003980:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003988:	4bb6      	ldr	r3, [pc, #728]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003998:	4ab2      	ldr	r2, [pc, #712]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800399a:	430b      	orrs	r3, r1
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58
 800399e:	e003      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80039a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d02a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80039c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d011      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d6:	d10a      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039dc:	3308      	adds	r3, #8
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f999 	bl	8004d18 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80039ec:	e004      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80039f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003a00:	4b98      	ldr	r3, [pc, #608]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a04:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0e:	4a95      	ldr	r2, [pc, #596]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a10:	430b      	orrs	r3, r1
 8003a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a34:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	d037      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a48:	d00e      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a4e:	d816      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d018      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003a54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a58:	d111      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5a:	4b82      	ldr	r3, [pc, #520]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5e:	4a81      	ldr	r2, [pc, #516]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a66:	e00f      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	2101      	movs	r1, #1
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f951 	bl	8004d18 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a7c:	e004      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a90:	4b74      	ldr	r3, [pc, #464]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a94:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	4a71      	ldr	r2, [pc, #452]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003aaa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003aba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ac4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d03a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d81d      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003b1d 	.word	0x08003b1d
 8003ae4:	08003af1 	.word	0x08003af1
 8003ae8:	08003aff 	.word	0x08003aff
 8003aec:	08003b1d 	.word	0x08003b1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af0:	4b5c      	ldr	r3, [pc, #368]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	4a5b      	ldr	r2, [pc, #364]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003afc:	e00f      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b02:	3308      	adds	r3, #8
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f906 	bl	8004d18 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b12:	e004      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b1a:	e000      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b26:	4b4f      	ldr	r3, [pc, #316]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2a:	f023 0103 	bic.w	r1, r3, #3
 8003b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b34:	4a4b      	ldr	r2, [pc, #300]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b3a:	e003      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f000 80a0 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b66:	4b40      	ldr	r3, [pc, #256]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b72:	f7fd fa67 	bl	8001044 <HAL_GetTick>
 8003b76:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fd fa62 	bl	8001044 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	@ 0x64
 8003b8a:	d903      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b92:	e005      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b94:	4b34      	ldr	r3, [pc, #208]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ed      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003ba0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d17a      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003baa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003bb4:	4053      	eors	r3, r2
 8003bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d015      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbe:	4b29      	ldr	r3, [pc, #164]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bca:	4b26      	ldr	r3, [pc, #152]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bce:	4a25      	ldr	r2, [pc, #148]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd6:	4b23      	ldr	r3, [pc, #140]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	4a22      	ldr	r2, [pc, #136]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003be2:	4a20      	ldr	r2, [pc, #128]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003be4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003be8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf6:	d118      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fa24 	bl	8001044 <HAL_GetTick>
 8003bfc:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c00:	e00d      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fd fa1f 	bl	8001044 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003c0c:	1ad2      	subs	r2, r2, r3
 8003c0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d903      	bls.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003c1c:	e005      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c1e:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0eb      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d130      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c42:	d115      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003c44:	4b07      	ldr	r3, [pc, #28]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c54:	091a      	lsrs	r2, r3, #4
 8003c56:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	4a02      	ldr	r2, [pc, #8]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6113      	str	r3, [r2, #16]
 8003c60:	e00c      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003c62:	bf00      	nop
 8003c64:	58024400 	.word	0x58024400
 8003c68:	58024800 	.word	0x58024800
 8003c6c:	00ffffcf 	.word	0x00ffffcf
 8003c70:	4bd4      	ldr	r3, [pc, #848]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	4ad3      	ldr	r2, [pc, #844]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c7a:	6113      	str	r3, [r2, #16]
 8003c7c:	4bd1      	ldr	r3, [pc, #836]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c7e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	4acd      	ldr	r2, [pc, #820]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c92:	e008      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8003c9c:	e003      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ca2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f002 0301 	and.w	r3, r2, #1
 8003cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f000 808b 	beq.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cd0:	2b28      	cmp	r3, #40	@ 0x28
 8003cd2:	d86b      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003db5 	.word	0x08003db5
 8003ce0:	08003dad 	.word	0x08003dad
 8003ce4:	08003dad 	.word	0x08003dad
 8003ce8:	08003dad 	.word	0x08003dad
 8003cec:	08003dad 	.word	0x08003dad
 8003cf0:	08003dad 	.word	0x08003dad
 8003cf4:	08003dad 	.word	0x08003dad
 8003cf8:	08003dad 	.word	0x08003dad
 8003cfc:	08003d81 	.word	0x08003d81
 8003d00:	08003dad 	.word	0x08003dad
 8003d04:	08003dad 	.word	0x08003dad
 8003d08:	08003dad 	.word	0x08003dad
 8003d0c:	08003dad 	.word	0x08003dad
 8003d10:	08003dad 	.word	0x08003dad
 8003d14:	08003dad 	.word	0x08003dad
 8003d18:	08003dad 	.word	0x08003dad
 8003d1c:	08003d97 	.word	0x08003d97
 8003d20:	08003dad 	.word	0x08003dad
 8003d24:	08003dad 	.word	0x08003dad
 8003d28:	08003dad 	.word	0x08003dad
 8003d2c:	08003dad 	.word	0x08003dad
 8003d30:	08003dad 	.word	0x08003dad
 8003d34:	08003dad 	.word	0x08003dad
 8003d38:	08003dad 	.word	0x08003dad
 8003d3c:	08003db5 	.word	0x08003db5
 8003d40:	08003dad 	.word	0x08003dad
 8003d44:	08003dad 	.word	0x08003dad
 8003d48:	08003dad 	.word	0x08003dad
 8003d4c:	08003dad 	.word	0x08003dad
 8003d50:	08003dad 	.word	0x08003dad
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003dad 	.word	0x08003dad
 8003d64:	08003dad 	.word	0x08003dad
 8003d68:	08003dad 	.word	0x08003dad
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003dad 	.word	0x08003dad
 8003d74:	08003dad 	.word	0x08003dad
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003db5 	.word	0x08003db5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d84:	3308      	adds	r3, #8
 8003d86:	2101      	movs	r1, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 ffc5 	bl	8004d18 <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d94:	e00f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d9a:	3328      	adds	r3, #40	@ 0x28
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f86c 	bl	8004e7c <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dbe:	4b81      	ldr	r3, [pc, #516]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dce:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dda:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f002 0302 	and.w	r3, r2, #2
 8003dea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003df4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d042      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d825      	bhi.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003e08:	a201      	add	r2, pc, #4	@ (adr r2, 8003e10 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e5d 	.word	0x08003e5d
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003e3f 	.word	0x08003e3f
 8003e1c:	08003e5d 	.word	0x08003e5d
 8003e20:	08003e5d 	.word	0x08003e5d
 8003e24:	08003e5d 	.word	0x08003e5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 ff71 	bl	8004d18 <RCCEx_PLL2_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e3c:	e00f      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e42:	3328      	adds	r3, #40	@ 0x28
 8003e44:	2101      	movs	r1, #1
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f818 	bl	8004e7c <RCCEx_PLL3_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e52:	e004      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e66:	4b57      	ldr	r3, [pc, #348]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	f023 0107 	bic.w	r1, r3, #7
 8003e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e74:	4a53      	ldr	r2, [pc, #332]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f002 0304 	and.w	r3, r2, #4
 8003e90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	d044      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d825      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003f05 	.word	0x08003f05
 8003ebc:	08003ed1 	.word	0x08003ed1
 8003ec0:	08003ee7 	.word	0x08003ee7
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003f05 	.word	0x08003f05
 8003ecc:	08003f05 	.word	0x08003f05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 ff1d 	bl	8004d18 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ee4:	e00f      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eea:	3328      	adds	r3, #40	@ 0x28
 8003eec:	2101      	movs	r1, #1
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 ffc4 	bl	8004e7c <RCCEx_PLL3_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f12:	f023 0107 	bic.w	r1, r3, #7
 8003f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f1e:	4a29      	ldr	r2, [pc, #164]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f002 0320 	and.w	r3, r2, #32
 8003f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d057      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5a:	d035      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f60:	d82c      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f66:	d031      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6c:	d826      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f72:	d02d      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003f74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f78:	d820      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f7e:	d012      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f84:	d81a      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d024      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f94:	3308      	adds	r3, #8
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 febd 	bl	8004d18 <RCCEx_PLL2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fa4:	e017      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003faa:	3328      	adds	r3, #40	@ 0x28
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 ff64 	bl	8004e7c <RCCEx_PLL3_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fba:	e00c      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003fc4:	58024400 	.word	0x58024400
        break;
 8003fc8:	bf00      	nop
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e002      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fde:	4bc2      	ldr	r3, [pc, #776]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fee:	4abe      	ldr	r2, [pc, #760]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ff4:	e003      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ffa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800400a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800400e:	2300      	movs	r3, #0
 8004010:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004014:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004018:	460b      	mov	r3, r1
 800401a:	4313      	orrs	r3, r2
 800401c:	d055      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800401e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004022:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004026:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800402a:	d033      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800402c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004030:	d82c      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004036:	d02f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403c:	d826      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800403e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004042:	d02b      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004044:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004048:	d820      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800404a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800404e:	d012      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004054:	d81a      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d022      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405e:	d115      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004064:	3308      	adds	r3, #8
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fe55 	bl	8004d18 <RCCEx_PLL2_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004074:	e015      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800407a:	3328      	adds	r3, #40	@ 0x28
 800407c:	2102      	movs	r1, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fefc 	bl	8004e7c <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800408a:	e00a      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004092:	e006      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004094:	bf00      	nop
 8004096:	e004      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004098:	bf00      	nop
 800409a:	e002      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80040a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040aa:	4b8f      	ldr	r3, [pc, #572]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040ba:	4a8b      	ldr	r2, [pc, #556]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040bc:	430b      	orrs	r3, r1
 80040be:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c0:	e003      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80040c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040e0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040e4:	460b      	mov	r3, r1
 80040e6:	4313      	orrs	r3, r2
 80040e8:	d055      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80040ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040f6:	d033      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80040f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040fc:	d82c      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80040fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004102:	d02f      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004108:	d826      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800410a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800410e:	d02b      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004110:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004114:	d820      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800411a:	d012      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800411c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004120:	d81a      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d022      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800412a:	d115      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800412c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004130:	3308      	adds	r3, #8
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fdef 	bl	8004d18 <RCCEx_PLL2_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004140:	e015      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004146:	3328      	adds	r3, #40	@ 0x28
 8004148:	2102      	movs	r1, #2
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fe96 	bl	8004e7c <RCCEx_PLL3_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004156:	e00a      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800415e:	e006      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004160:	bf00      	nop
 8004162:	e004      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004164:	bf00      	nop
 8004166:	e002      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004168:	bf00      	nop
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800416c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004176:	4b5c      	ldr	r3, [pc, #368]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800417e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004182:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004186:	4a58      	ldr	r2, [pc, #352]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004188:	430b      	orrs	r3, r1
 800418a:	6593      	str	r3, [r2, #88]	@ 0x58
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004192:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f002 0308 	and.w	r3, r2, #8
 80041a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041ac:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041b0:	460b      	mov	r3, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	d01e      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041c2:	d10c      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041c8:	3328      	adds	r3, #40	@ 0x28
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fe55 	bl	8004e7c <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041de:	4b42      	ldr	r3, [pc, #264]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	4a3e      	ldr	r2, [pc, #248]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	f002 0310 	and.w	r3, r2, #16
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800420a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800420e:	460b      	mov	r3, r1
 8004210:	4313      	orrs	r3, r2
 8004212:	d01e      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004218:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800421c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004220:	d10c      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004226:	3328      	adds	r3, #40	@ 0x28
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fe26 	bl	8004e7c <RCCEx_PLL3_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800423c:	4b2a      	ldr	r3, [pc, #168]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004240:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004248:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800424c:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800424e:	430b      	orrs	r3, r1
 8004250:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800425e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004268:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d040      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800427a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800427e:	d022      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004284:	d81b      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800428a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800428e:	d00b      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004290:	e015      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004292:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004296:	3308      	adds	r3, #8
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fd3c 	bl	8004d18 <RCCEx_PLL2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042a6:	e00f      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042ac:	3328      	adds	r3, #40	@ 0x28
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fde3 	bl	8004e7c <RCCEx_PLL3_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042bc:	e004      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80042c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10d      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d0:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042e0:	4a01      	ldr	r2, [pc, #4]	@ (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e6:	e005      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80042e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80042f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004302:	2300      	movs	r3, #0
 8004304:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004306:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800430a:	460b      	mov	r3, r1
 800430c:	4313      	orrs	r3, r2
 800430e:	d03b      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004318:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800431c:	d01f      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800431e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004322:	d818      	bhi.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004324:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004328:	d003      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800432a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800432e:	d007      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004330:	e011      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004332:	4b64      	ldr	r3, [pc, #400]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	4a63      	ldr	r2, [pc, #396]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800433e:	e00f      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004344:	3328      	adds	r3, #40	@ 0x28
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fd97 	bl	8004e7c <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004354:	e004      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800435c:	e000      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800435e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004360:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004368:	4b56      	ldr	r3, [pc, #344]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800436a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004370:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004378:	4a52      	ldr	r2, [pc, #328]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800437a:	430b      	orrs	r3, r1
 800437c:	6553      	str	r3, [r2, #84]	@ 0x54
 800437e:	e003      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004384:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004394:	673b      	str	r3, [r7, #112]	@ 0x70
 8004396:	2300      	movs	r3, #0
 8004398:	677b      	str	r3, [r7, #116]	@ 0x74
 800439a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800439e:	460b      	mov	r3, r1
 80043a0:	4313      	orrs	r3, r2
 80043a2:	d031      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80043ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b2:	d007      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80043b4:	e011      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b6:	4b43      	ldr	r3, [pc, #268]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	4a42      	ldr	r2, [pc, #264]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043c2:	e00e      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043c8:	3308      	adds	r3, #8
 80043ca:	2102      	movs	r1, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fca3 	bl	8004d18 <RCCEx_PLL2_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80043e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043ea:	4b36      	ldr	r3, [pc, #216]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f8:	4a32      	ldr	r2, [pc, #200]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043fa:	430b      	orrs	r3, r1
 80043fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043fe:	e003      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004404:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004414:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004416:	2300      	movs	r3, #0
 8004418:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800441a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800441e:	460b      	mov	r3, r1
 8004420:	4313      	orrs	r3, r2
 8004422:	d00c      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004428:	3328      	adds	r3, #40	@ 0x28
 800442a:	2102      	movs	r1, #2
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fd25 	bl	8004e7c <RCCEx_PLL3_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800443e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800444a:	663b      	str	r3, [r7, #96]	@ 0x60
 800444c:	2300      	movs	r3, #0
 800444e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004450:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004454:	460b      	mov	r3, r1
 8004456:	4313      	orrs	r3, r2
 8004458:	d03a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800445a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004466:	d018      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004468:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800446c:	d811      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800446e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004472:	d014      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004478:	d80b      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d011      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800447e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004482:	d106      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004484:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	4a0e      	ldr	r2, [pc, #56]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800448a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800448e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004498:	e004      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80044a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10d      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044bc:	4a01      	ldr	r2, [pc, #4]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044be:	430b      	orrs	r3, r1
 80044c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80044c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044de:	2300      	movs	r3, #0
 80044e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044e6:	460b      	mov	r3, r1
 80044e8:	4313      	orrs	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ec:	4baa      	ldr	r3, [pc, #680]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80044ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044fa:	4aa7      	ldr	r2, [pc, #668]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004500:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800450c:	653b      	str	r3, [r7, #80]	@ 0x50
 800450e:	2300      	movs	r3, #0
 8004510:	657b      	str	r3, [r7, #84]	@ 0x54
 8004512:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800451c:	4b9e      	ldr	r3, [pc, #632]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004524:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004528:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800452c:	4a9a      	ldr	r2, [pc, #616]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004532:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800453e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004540:	2300      	movs	r3, #0
 8004542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004544:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d009      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800454e:	4b92      	ldr	r3, [pc, #584]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004552:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800455a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455c:	4a8e      	ldr	r2, [pc, #568]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800455e:	430b      	orrs	r3, r1
 8004560:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800456e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004570:	2300      	movs	r3, #0
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
 8004574:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800457e:	4b86      	ldr	r3, [pc, #536]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	4a85      	ldr	r2, [pc, #532]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004584:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004588:	6113      	str	r3, [r2, #16]
 800458a:	4b83      	ldr	r3, [pc, #524]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800458c:	6919      	ldr	r1, [r3, #16]
 800458e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004592:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004596:	4a80      	ldr	r2, [pc, #512]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004598:	430b      	orrs	r3, r1
 800459a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800459c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045aa:	2300      	movs	r3, #0
 80045ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045b8:	4b77      	ldr	r3, [pc, #476]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045bc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	4a74      	ldr	r2, [pc, #464]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045da:	2300      	movs	r3, #0
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80045de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	4a67      	ldr	r2, [pc, #412]	@ (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	2100      	movs	r1, #0
 8004608:	62b9      	str	r1, [r7, #40]	@ 0x28
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004610:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d011      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800461a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800461e:	3308      	adds	r3, #8
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb78 	bl	8004d18 <RCCEx_PLL2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800462e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800463a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800463e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	2100      	movs	r1, #0
 8004648:	6239      	str	r1, [r7, #32]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004650:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d011      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800465a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800465e:	3308      	adds	r3, #8
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fb58 	bl	8004d18 <RCCEx_PLL2_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800466e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800467a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800467e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	2100      	movs	r1, #0
 8004688:	61b9      	str	r1, [r7, #24]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d011      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800469a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800469e:	3308      	adds	r3, #8
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fb38 	bl	8004d18 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80046ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	2100      	movs	r1, #0
 80046c8:	6139      	str	r1, [r7, #16]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d011      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046de:	3328      	adds	r3, #40	@ 0x28
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fbca 	bl	8004e7c <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80046ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	2100      	movs	r1, #0
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d011      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800471a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800471e:	3328      	adds	r3, #40	@ 0x28
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fbaa 	bl	8004e7c <RCCEx_PLL3_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800472e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800473a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800473e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	2100      	movs	r1, #0
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800475a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800475e:	3328      	adds	r3, #40	@ 0x28
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb8a 	bl	8004e7c <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800476e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800477a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800477e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
}
 800478c:	4618      	mov	r0, r3
 800478e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004798:	58024400 	.word	0x58024400

0800479c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047a0:	f7fe fd56 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4904      	ldr	r1, [pc, #16]	@ (80047c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047bc:	4618      	mov	r0, r3
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	58024400 	.word	0x58024400
 80047c4:	08006c4c 	.word	0x08006c4c

080047c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047da:	4b9f      	ldr	r3, [pc, #636]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047de:	0b1b      	lsrs	r3, r3, #12
 80047e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	091b      	lsrs	r3, r3, #4
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047f2:	4b99      	ldr	r3, [pc, #612]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8111 	beq.w	8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b02      	cmp	r3, #2
 800481a:	f000 8083 	beq.w	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f200 80a1 	bhi.w	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d056      	beq.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004832:	e099      	b.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004834:	4b88      	ldr	r3, [pc, #544]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02d      	beq.n	800489c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004840:	4b85      	ldr	r3, [pc, #532]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	08db      	lsrs	r3, r3, #3
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	4a84      	ldr	r2, [pc, #528]	@ (8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
 8004850:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800489a:	e087      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048de:	e065      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b59      	ldr	r3, [pc, #356]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004922:	e043      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b48      	ldr	r3, [pc, #288]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004966:	e021      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b37      	ldr	r3, [pc, #220]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a03 	vldr	s12, [r7, #12]
 800498e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	0a5b      	lsrs	r3, r3, #9
 80049b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d2:	ee17 2a90 	vmov	r2, s15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049da:	4b1f      	ldr	r3, [pc, #124]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a00:	ee17 2a90 	vmov	r2, s15
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a08:	4b13      	ldr	r3, [pc, #76]	@ (8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	0e1b      	lsrs	r3, r3, #24
 8004a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2e:	ee17 2a90 	vmov	r2, s15
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a36:	e008      	b.n	8004a4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	609a      	str	r2, [r3, #8]
}
 8004a4a:	bf00      	nop
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	03d09000 	.word	0x03d09000
 8004a60:	46000000 	.word	0x46000000
 8004a64:	4c742400 	.word	0x4c742400
 8004a68:	4a742400 	.word	0x4a742400
 8004a6c:	4bbebc20 	.word	0x4bbebc20

08004a70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	@ 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a78:	4ba1      	ldr	r3, [pc, #644]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a82:	4b9f      	ldr	r3, [pc, #636]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a86:	0d1b      	lsrs	r3, r3, #20
 8004a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a9a:	4b99      	ldr	r3, [pc, #612]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8111 	beq.w	8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f000 8083 	beq.w	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	f200 80a1 	bhi.w	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d056      	beq.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ada:	e099      	b.n	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004adc:	4b88      	ldr	r3, [pc, #544]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02d      	beq.n	8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ae8:	4b85      	ldr	r3, [pc, #532]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	08db      	lsrs	r3, r3, #3
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	4a84      	ldr	r2, [pc, #528]	@ (8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b7b      	ldr	r3, [pc, #492]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b42:	e087      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b86:	e065      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b59      	ldr	r3, [pc, #356]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bca:	e043      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b48      	ldr	r3, [pc, #288]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0e:	e021      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b37      	ldr	r3, [pc, #220]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c54:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	0a5b      	lsrs	r3, r3, #9
 8004c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7a:	ee17 2a90 	vmov	r2, s15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c82:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca8:	ee17 2a90 	vmov	r2, s15
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cb0:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	0e1b      	lsrs	r3, r3, #24
 8004cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd6:	ee17 2a90 	vmov	r2, s15
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cde:	e008      	b.n	8004cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	bf00      	nop
 8004cf4:	3724      	adds	r7, #36	@ 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	03d09000 	.word	0x03d09000
 8004d08:	46000000 	.word	0x46000000
 8004d0c:	4c742400 	.word	0x4c742400
 8004d10:	4a742400 	.word	0x4a742400
 8004d14:	4bbebc20 	.word	0x4bbebc20

08004d18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d26:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d101      	bne.n	8004d36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e099      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d36:	4b4f      	ldr	r3, [pc, #316]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fc f97f 	bl	8001044 <HAL_GetTick>
 8004d46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d4a:	f7fc f97b 	bl	8001044 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e086      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d5c:	4b45      	ldr	r3, [pc, #276]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d68:	4b42      	ldr	r3, [pc, #264]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	031b      	lsls	r3, r3, #12
 8004d76:	493f      	ldr	r1, [pc, #252]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dac:	4931      	ldr	r1, [pc, #196]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004db2:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	492d      	ldr	r1, [pc, #180]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	f023 0220 	bic.w	r2, r3, #32
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4928      	ldr	r1, [pc, #160]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dd6:	4b27      	ldr	r3, [pc, #156]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f023 0310 	bic.w	r3, r3, #16
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004de2:	4b24      	ldr	r3, [pc, #144]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004de6:	4b24      	ldr	r3, [pc, #144]	@ (8004e78 <RCCEx_PLL2_Config+0x160>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	69d2      	ldr	r2, [r2, #28]
 8004dee:	00d2      	lsls	r2, r2, #3
 8004df0:	4920      	ldr	r1, [pc, #128]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004df6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	f043 0310 	orr.w	r3, r3, #16
 8004e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e08:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e14:	e00f      	b.n	8004e36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d106      	bne.n	8004e2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e28:	e005      	b.n	8004e36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	4a11      	ldr	r2, [pc, #68]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e36:	4b0f      	ldr	r3, [pc, #60]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fc f8ff 	bl	8001044 <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e4a:	f7fc f8fb 	bl	8001044 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e006      	b.n	8004e6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
 8004e78:	ffff0007 	.word	0xffff0007

08004e7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e8a:	4b53      	ldr	r3, [pc, #332]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d101      	bne.n	8004e9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e099      	b.n	8004fce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4e      	ldr	r2, [pc, #312]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fc f8cd 	bl	8001044 <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eac:	e008      	b.n	8004ec0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004eae:	f7fc f8c9 	bl	8001044 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e086      	b.n	8004fce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ec0:	4b45      	ldr	r3, [pc, #276]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ecc:	4b42      	ldr	r3, [pc, #264]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	051b      	lsls	r3, r3, #20
 8004eda:	493f      	ldr	r1, [pc, #252]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	025b      	lsls	r3, r3, #9
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f10:	4931      	ldr	r1, [pc, #196]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f16:	4b30      	ldr	r3, [pc, #192]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	492d      	ldr	r1, [pc, #180]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f28:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	4928      	ldr	r1, [pc, #160]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f3a:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	4a26      	ldr	r2, [pc, #152]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f46:	4b24      	ldr	r3, [pc, #144]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f4a:	4b24      	ldr	r3, [pc, #144]	@ (8004fdc <RCCEx_PLL3_Config+0x160>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	69d2      	ldr	r2, [r2, #28]
 8004f52:	00d2      	lsls	r2, r2, #3
 8004f54:	4920      	ldr	r1, [pc, #128]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f78:	e00f      	b.n	8004f9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f80:	4b15      	ldr	r3, [pc, #84]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f8c:	e005      	b.n	8004f9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f8e:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	4a11      	ldr	r2, [pc, #68]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fc f84d 	bl	8001044 <HAL_GetTick>
 8004faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fac:	e008      	b.n	8004fc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fae:	f7fc f849 	bl	8001044 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	ffff0007 	.word	0xffff0007

08004fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e042      	b.n	8005078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fb fe9d 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2224      	movs	r2, #36	@ 0x24
 800500e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fe1e 	bl	8005c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8b3 	bl	800519c <UART_SetConfig>
 8005036:	4603      	mov	r3, r0
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e01b      	b.n	8005078 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800504e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800505e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fe9d 	bl	8005db0 <UART_CheckIdleState>
 8005076:	4603      	mov	r3, r0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	@ 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005096:	2b20      	cmp	r3, #32
 8005098:	d17b      	bne.n	8005192 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_UART_Transmit+0x26>
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e074      	b.n	8005194 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2221      	movs	r2, #33	@ 0x21
 80050b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ba:	f7fb ffc3 	bl	8001044 <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d8:	d108      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e003      	b.n	80050f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050f4:	e030      	b.n	8005158 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	@ 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 feff 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e03d      	b.n	8005194 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	3302      	adds	r3, #2
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e007      	b.n	8005146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1c8      	bne.n	80050f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2200      	movs	r2, #0
 800516c:	2140      	movs	r1, #64	@ 0x40
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fec8 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e006      	b.n	8005194 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a0:	b092      	sub	sp, #72	@ 0x48
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4bbe      	ldr	r3, [pc, #760]	@ (80054c4 <UART_SetConfig+0x328>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4ab3      	ldr	r2, [pc, #716]	@ (80054c8 <UART_SetConfig+0x32c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005204:	4313      	orrs	r3, r2
 8005206:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	4baf      	ldr	r3, [pc, #700]	@ (80054cc <UART_SetConfig+0x330>)
 8005210:	4013      	ands	r3, r2
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005218:	430b      	orrs	r3, r1
 800521a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	f023 010f 	bic.w	r1, r3, #15
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4aa6      	ldr	r2, [pc, #664]	@ (80054d0 <UART_SetConfig+0x334>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d177      	bne.n	800532c <UART_SetConfig+0x190>
 800523c:	4ba5      	ldr	r3, [pc, #660]	@ (80054d4 <UART_SetConfig+0x338>)
 800523e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005244:	2b28      	cmp	r3, #40	@ 0x28
 8005246:	d86d      	bhi.n	8005324 <UART_SetConfig+0x188>
 8005248:	a201      	add	r2, pc, #4	@ (adr r2, 8005250 <UART_SetConfig+0xb4>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	080052f5 	.word	0x080052f5
 8005254:	08005325 	.word	0x08005325
 8005258:	08005325 	.word	0x08005325
 800525c:	08005325 	.word	0x08005325
 8005260:	08005325 	.word	0x08005325
 8005264:	08005325 	.word	0x08005325
 8005268:	08005325 	.word	0x08005325
 800526c:	08005325 	.word	0x08005325
 8005270:	080052fd 	.word	0x080052fd
 8005274:	08005325 	.word	0x08005325
 8005278:	08005325 	.word	0x08005325
 800527c:	08005325 	.word	0x08005325
 8005280:	08005325 	.word	0x08005325
 8005284:	08005325 	.word	0x08005325
 8005288:	08005325 	.word	0x08005325
 800528c:	08005325 	.word	0x08005325
 8005290:	08005305 	.word	0x08005305
 8005294:	08005325 	.word	0x08005325
 8005298:	08005325 	.word	0x08005325
 800529c:	08005325 	.word	0x08005325
 80052a0:	08005325 	.word	0x08005325
 80052a4:	08005325 	.word	0x08005325
 80052a8:	08005325 	.word	0x08005325
 80052ac:	08005325 	.word	0x08005325
 80052b0:	0800530d 	.word	0x0800530d
 80052b4:	08005325 	.word	0x08005325
 80052b8:	08005325 	.word	0x08005325
 80052bc:	08005325 	.word	0x08005325
 80052c0:	08005325 	.word	0x08005325
 80052c4:	08005325 	.word	0x08005325
 80052c8:	08005325 	.word	0x08005325
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005315 	.word	0x08005315
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005325 	.word	0x08005325
 80052dc:	08005325 	.word	0x08005325
 80052e0:	08005325 	.word	0x08005325
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005325 	.word	0x08005325
 80052ec:	08005325 	.word	0x08005325
 80052f0:	0800531d 	.word	0x0800531d
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e222      	b.n	8005742 <UART_SetConfig+0x5a6>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e21e      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e21a      	b.n	8005742 <UART_SetConfig+0x5a6>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e216      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005314:	2320      	movs	r3, #32
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e212      	b.n	8005742 <UART_SetConfig+0x5a6>
 800531c:	2340      	movs	r3, #64	@ 0x40
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e20e      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e20a      	b.n	8005742 <UART_SetConfig+0x5a6>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a69      	ldr	r2, [pc, #420]	@ (80054d8 <UART_SetConfig+0x33c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d130      	bne.n	8005398 <UART_SetConfig+0x1fc>
 8005336:	4b67      	ldr	r3, [pc, #412]	@ (80054d4 <UART_SetConfig+0x338>)
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	2b05      	cmp	r3, #5
 8005340:	d826      	bhi.n	8005390 <UART_SetConfig+0x1f4>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <UART_SetConfig+0x1ac>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005361 	.word	0x08005361
 800534c:	08005369 	.word	0x08005369
 8005350:	08005371 	.word	0x08005371
 8005354:	08005379 	.word	0x08005379
 8005358:	08005381 	.word	0x08005381
 800535c:	08005389 	.word	0x08005389
 8005360:	2300      	movs	r3, #0
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e1ec      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e1e8      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e1e4      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e1e0      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005380:	2320      	movs	r3, #32
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e1dc      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005388:	2340      	movs	r3, #64	@ 0x40
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e1d8      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e1d4      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4f      	ldr	r2, [pc, #316]	@ (80054dc <UART_SetConfig+0x340>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d130      	bne.n	8005404 <UART_SetConfig+0x268>
 80053a2:	4b4c      	ldr	r3, [pc, #304]	@ (80054d4 <UART_SetConfig+0x338>)
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d826      	bhi.n	80053fc <UART_SetConfig+0x260>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <UART_SetConfig+0x218>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	080053dd 	.word	0x080053dd
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053ed 	.word	0x080053ed
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e1b6      	b.n	8005742 <UART_SetConfig+0x5a6>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e1b2      	b.n	8005742 <UART_SetConfig+0x5a6>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e1ae      	b.n	8005742 <UART_SetConfig+0x5a6>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e1aa      	b.n	8005742 <UART_SetConfig+0x5a6>
 80053ec:	2320      	movs	r3, #32
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e1a6      	b.n	8005742 <UART_SetConfig+0x5a6>
 80053f4:	2340      	movs	r3, #64	@ 0x40
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e1a2      	b.n	8005742 <UART_SetConfig+0x5a6>
 80053fc:	2380      	movs	r3, #128	@ 0x80
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e19e      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a35      	ldr	r2, [pc, #212]	@ (80054e0 <UART_SetConfig+0x344>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d130      	bne.n	8005470 <UART_SetConfig+0x2d4>
 800540e:	4b31      	ldr	r3, [pc, #196]	@ (80054d4 <UART_SetConfig+0x338>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b05      	cmp	r3, #5
 8005418:	d826      	bhi.n	8005468 <UART_SetConfig+0x2cc>
 800541a:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <UART_SetConfig+0x284>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005439 	.word	0x08005439
 8005424:	08005441 	.word	0x08005441
 8005428:	08005449 	.word	0x08005449
 800542c:	08005451 	.word	0x08005451
 8005430:	08005459 	.word	0x08005459
 8005434:	08005461 	.word	0x08005461
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e180      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e17c      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e178      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e174      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005458:	2320      	movs	r3, #32
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e170      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005460:	2340      	movs	r3, #64	@ 0x40
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e16c      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e168      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <UART_SetConfig+0x348>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d142      	bne.n	8005500 <UART_SetConfig+0x364>
 800547a:	4b16      	ldr	r3, [pc, #88]	@ (80054d4 <UART_SetConfig+0x338>)
 800547c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	2b05      	cmp	r3, #5
 8005484:	d838      	bhi.n	80054f8 <UART_SetConfig+0x35c>
 8005486:	a201      	add	r2, pc, #4	@ (adr r2, 800548c <UART_SetConfig+0x2f0>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	080054a5 	.word	0x080054a5
 8005490:	080054ad 	.word	0x080054ad
 8005494:	080054b5 	.word	0x080054b5
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e14a      	b.n	8005742 <UART_SetConfig+0x5a6>
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e146      	b.n	8005742 <UART_SetConfig+0x5a6>
 80054b4:	2308      	movs	r3, #8
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e142      	b.n	8005742 <UART_SetConfig+0x5a6>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e13e      	b.n	8005742 <UART_SetConfig+0x5a6>
 80054c4:	cfff69f3 	.word	0xcfff69f3
 80054c8:	58000c00 	.word	0x58000c00
 80054cc:	11fff4ff 	.word	0x11fff4ff
 80054d0:	40011000 	.word	0x40011000
 80054d4:	58024400 	.word	0x58024400
 80054d8:	40004400 	.word	0x40004400
 80054dc:	40004800 	.word	0x40004800
 80054e0:	40004c00 	.word	0x40004c00
 80054e4:	40005000 	.word	0x40005000
 80054e8:	2320      	movs	r3, #32
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e128      	b.n	8005742 <UART_SetConfig+0x5a6>
 80054f0:	2340      	movs	r3, #64	@ 0x40
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e124      	b.n	8005742 <UART_SetConfig+0x5a6>
 80054f8:	2380      	movs	r3, #128	@ 0x80
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e120      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4acb      	ldr	r2, [pc, #812]	@ (8005834 <UART_SetConfig+0x698>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d176      	bne.n	80055f8 <UART_SetConfig+0x45c>
 800550a:	4bcb      	ldr	r3, [pc, #812]	@ (8005838 <UART_SetConfig+0x69c>)
 800550c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005512:	2b28      	cmp	r3, #40	@ 0x28
 8005514:	d86c      	bhi.n	80055f0 <UART_SetConfig+0x454>
 8005516:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <UART_SetConfig+0x380>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	080055c1 	.word	0x080055c1
 8005520:	080055f1 	.word	0x080055f1
 8005524:	080055f1 	.word	0x080055f1
 8005528:	080055f1 	.word	0x080055f1
 800552c:	080055f1 	.word	0x080055f1
 8005530:	080055f1 	.word	0x080055f1
 8005534:	080055f1 	.word	0x080055f1
 8005538:	080055f1 	.word	0x080055f1
 800553c:	080055c9 	.word	0x080055c9
 8005540:	080055f1 	.word	0x080055f1
 8005544:	080055f1 	.word	0x080055f1
 8005548:	080055f1 	.word	0x080055f1
 800554c:	080055f1 	.word	0x080055f1
 8005550:	080055f1 	.word	0x080055f1
 8005554:	080055f1 	.word	0x080055f1
 8005558:	080055f1 	.word	0x080055f1
 800555c:	080055d1 	.word	0x080055d1
 8005560:	080055f1 	.word	0x080055f1
 8005564:	080055f1 	.word	0x080055f1
 8005568:	080055f1 	.word	0x080055f1
 800556c:	080055f1 	.word	0x080055f1
 8005570:	080055f1 	.word	0x080055f1
 8005574:	080055f1 	.word	0x080055f1
 8005578:	080055f1 	.word	0x080055f1
 800557c:	080055d9 	.word	0x080055d9
 8005580:	080055f1 	.word	0x080055f1
 8005584:	080055f1 	.word	0x080055f1
 8005588:	080055f1 	.word	0x080055f1
 800558c:	080055f1 	.word	0x080055f1
 8005590:	080055f1 	.word	0x080055f1
 8005594:	080055f1 	.word	0x080055f1
 8005598:	080055f1 	.word	0x080055f1
 800559c:	080055e1 	.word	0x080055e1
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	080055f1 	.word	0x080055f1
 80055a8:	080055f1 	.word	0x080055f1
 80055ac:	080055f1 	.word	0x080055f1
 80055b0:	080055f1 	.word	0x080055f1
 80055b4:	080055f1 	.word	0x080055f1
 80055b8:	080055f1 	.word	0x080055f1
 80055bc:	080055e9 	.word	0x080055e9
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e0bc      	b.n	8005742 <UART_SetConfig+0x5a6>
 80055c8:	2304      	movs	r3, #4
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ce:	e0b8      	b.n	8005742 <UART_SetConfig+0x5a6>
 80055d0:	2308      	movs	r3, #8
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d6:	e0b4      	b.n	8005742 <UART_SetConfig+0x5a6>
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e0b0      	b.n	8005742 <UART_SetConfig+0x5a6>
 80055e0:	2320      	movs	r3, #32
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e0ac      	b.n	8005742 <UART_SetConfig+0x5a6>
 80055e8:	2340      	movs	r3, #64	@ 0x40
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e0a8      	b.n	8005742 <UART_SetConfig+0x5a6>
 80055f0:	2380      	movs	r3, #128	@ 0x80
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e0a4      	b.n	8005742 <UART_SetConfig+0x5a6>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a8f      	ldr	r2, [pc, #572]	@ (800583c <UART_SetConfig+0x6a0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d130      	bne.n	8005664 <UART_SetConfig+0x4c8>
 8005602:	4b8d      	ldr	r3, [pc, #564]	@ (8005838 <UART_SetConfig+0x69c>)
 8005604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	2b05      	cmp	r3, #5
 800560c:	d826      	bhi.n	800565c <UART_SetConfig+0x4c0>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <UART_SetConfig+0x478>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	0800562d 	.word	0x0800562d
 8005618:	08005635 	.word	0x08005635
 800561c:	0800563d 	.word	0x0800563d
 8005620:	08005645 	.word	0x08005645
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005655 	.word	0x08005655
 800562c:	2300      	movs	r3, #0
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e086      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005634:	2304      	movs	r3, #4
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e082      	b.n	8005742 <UART_SetConfig+0x5a6>
 800563c:	2308      	movs	r3, #8
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005642:	e07e      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005644:	2310      	movs	r3, #16
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e07a      	b.n	8005742 <UART_SetConfig+0x5a6>
 800564c:	2320      	movs	r3, #32
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e076      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005654:	2340      	movs	r3, #64	@ 0x40
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e072      	b.n	8005742 <UART_SetConfig+0x5a6>
 800565c:	2380      	movs	r3, #128	@ 0x80
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e06e      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a75      	ldr	r2, [pc, #468]	@ (8005840 <UART_SetConfig+0x6a4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d130      	bne.n	80056d0 <UART_SetConfig+0x534>
 800566e:	4b72      	ldr	r3, [pc, #456]	@ (8005838 <UART_SetConfig+0x69c>)
 8005670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b05      	cmp	r3, #5
 8005678:	d826      	bhi.n	80056c8 <UART_SetConfig+0x52c>
 800567a:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <UART_SetConfig+0x4e4>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	08005699 	.word	0x08005699
 8005684:	080056a1 	.word	0x080056a1
 8005688:	080056a9 	.word	0x080056a9
 800568c:	080056b1 	.word	0x080056b1
 8005690:	080056b9 	.word	0x080056b9
 8005694:	080056c1 	.word	0x080056c1
 8005698:	2300      	movs	r3, #0
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569e:	e050      	b.n	8005742 <UART_SetConfig+0x5a6>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a6:	e04c      	b.n	8005742 <UART_SetConfig+0x5a6>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ae:	e048      	b.n	8005742 <UART_SetConfig+0x5a6>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e044      	b.n	8005742 <UART_SetConfig+0x5a6>
 80056b8:	2320      	movs	r3, #32
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e040      	b.n	8005742 <UART_SetConfig+0x5a6>
 80056c0:	2340      	movs	r3, #64	@ 0x40
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e03c      	b.n	8005742 <UART_SetConfig+0x5a6>
 80056c8:	2380      	movs	r3, #128	@ 0x80
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e038      	b.n	8005742 <UART_SetConfig+0x5a6>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a5b      	ldr	r2, [pc, #364]	@ (8005844 <UART_SetConfig+0x6a8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d130      	bne.n	800573c <UART_SetConfig+0x5a0>
 80056da:	4b57      	ldr	r3, [pc, #348]	@ (8005838 <UART_SetConfig+0x69c>)
 80056dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d826      	bhi.n	8005734 <UART_SetConfig+0x598>
 80056e6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <UART_SetConfig+0x550>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005705 	.word	0x08005705
 80056f0:	0800570d 	.word	0x0800570d
 80056f4:	08005715 	.word	0x08005715
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800572d 	.word	0x0800572d
 8005704:	2302      	movs	r3, #2
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570a:	e01a      	b.n	8005742 <UART_SetConfig+0x5a6>
 800570c:	2304      	movs	r3, #4
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005712:	e016      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005714:	2308      	movs	r3, #8
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e012      	b.n	8005742 <UART_SetConfig+0x5a6>
 800571c:	2310      	movs	r3, #16
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e00e      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005724:	2320      	movs	r3, #32
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e00a      	b.n	8005742 <UART_SetConfig+0x5a6>
 800572c:	2340      	movs	r3, #64	@ 0x40
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e006      	b.n	8005742 <UART_SetConfig+0x5a6>
 8005734:	2380      	movs	r3, #128	@ 0x80
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e002      	b.n	8005742 <UART_SetConfig+0x5a6>
 800573c:	2380      	movs	r3, #128	@ 0x80
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a3f      	ldr	r2, [pc, #252]	@ (8005844 <UART_SetConfig+0x6a8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	f040 80f8 	bne.w	800593e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800574e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005752:	2b20      	cmp	r3, #32
 8005754:	dc46      	bgt.n	80057e4 <UART_SetConfig+0x648>
 8005756:	2b02      	cmp	r3, #2
 8005758:	f2c0 8082 	blt.w	8005860 <UART_SetConfig+0x6c4>
 800575c:	3b02      	subs	r3, #2
 800575e:	2b1e      	cmp	r3, #30
 8005760:	d87e      	bhi.n	8005860 <UART_SetConfig+0x6c4>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x5cc>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	080057eb 	.word	0x080057eb
 800576c:	08005861 	.word	0x08005861
 8005770:	080057f3 	.word	0x080057f3
 8005774:	08005861 	.word	0x08005861
 8005778:	08005861 	.word	0x08005861
 800577c:	08005861 	.word	0x08005861
 8005780:	08005803 	.word	0x08005803
 8005784:	08005861 	.word	0x08005861
 8005788:	08005861 	.word	0x08005861
 800578c:	08005861 	.word	0x08005861
 8005790:	08005861 	.word	0x08005861
 8005794:	08005861 	.word	0x08005861
 8005798:	08005861 	.word	0x08005861
 800579c:	08005861 	.word	0x08005861
 80057a0:	08005813 	.word	0x08005813
 80057a4:	08005861 	.word	0x08005861
 80057a8:	08005861 	.word	0x08005861
 80057ac:	08005861 	.word	0x08005861
 80057b0:	08005861 	.word	0x08005861
 80057b4:	08005861 	.word	0x08005861
 80057b8:	08005861 	.word	0x08005861
 80057bc:	08005861 	.word	0x08005861
 80057c0:	08005861 	.word	0x08005861
 80057c4:	08005861 	.word	0x08005861
 80057c8:	08005861 	.word	0x08005861
 80057cc:	08005861 	.word	0x08005861
 80057d0:	08005861 	.word	0x08005861
 80057d4:	08005861 	.word	0x08005861
 80057d8:	08005861 	.word	0x08005861
 80057dc:	08005861 	.word	0x08005861
 80057e0:	08005853 	.word	0x08005853
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d037      	beq.n	8005858 <UART_SetConfig+0x6bc>
 80057e8:	e03a      	b.n	8005860 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80057ea:	f7fe ffd7 	bl	800479c <HAL_RCCEx_GetD3PCLK1Freq>
 80057ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057f0:	e03c      	b.n	800586c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe ffe6 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005800:	e034      	b.n	800586c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005802:	f107 0318 	add.w	r3, r7, #24
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff f932 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005810:	e02c      	b.n	800586c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005812:	4b09      	ldr	r3, [pc, #36]	@ (8005838 <UART_SetConfig+0x69c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <UART_SetConfig+0x69c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	08db      	lsrs	r3, r3, #3
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	4a07      	ldr	r2, [pc, #28]	@ (8005848 <UART_SetConfig+0x6ac>)
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005830:	e01c      	b.n	800586c <UART_SetConfig+0x6d0>
 8005832:	bf00      	nop
 8005834:	40011400 	.word	0x40011400
 8005838:	58024400 	.word	0x58024400
 800583c:	40007800 	.word	0x40007800
 8005840:	40007c00 	.word	0x40007c00
 8005844:	58000c00 	.word	0x58000c00
 8005848:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800584c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ac4 <UART_SetConfig+0x928>)
 800584e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005850:	e00c      	b.n	800586c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005852:	4b9d      	ldr	r3, [pc, #628]	@ (8005ac8 <UART_SetConfig+0x92c>)
 8005854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005856:	e009      	b.n	800586c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800585e:	e005      	b.n	800586c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800586a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800586c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 81de 	beq.w	8005c30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	4a94      	ldr	r2, [pc, #592]	@ (8005acc <UART_SetConfig+0x930>)
 800587a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800587e:	461a      	mov	r2, r3
 8005880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005882:	fbb3 f3f2 	udiv	r3, r3, r2
 8005886:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4413      	add	r3, r2
 8005892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005894:	429a      	cmp	r2, r3
 8005896:	d305      	bcc.n	80058a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800589e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d903      	bls.n	80058ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058aa:	e1c1      	b.n	8005c30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ae:	2200      	movs	r2, #0
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	60fa      	str	r2, [r7, #12]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	4a84      	ldr	r2, [pc, #528]	@ (8005acc <UART_SetConfig+0x930>)
 80058ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2200      	movs	r2, #0
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058ce:	f7fa fd5f 	bl	8000390 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	020b      	lsls	r3, r1, #8
 80058e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058e8:	0202      	lsls	r2, r0, #8
 80058ea:	6979      	ldr	r1, [r7, #20]
 80058ec:	6849      	ldr	r1, [r1, #4]
 80058ee:	0849      	lsrs	r1, r1, #1
 80058f0:	2000      	movs	r0, #0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4605      	mov	r5, r0
 80058f6:	eb12 0804 	adds.w	r8, r2, r4
 80058fa:	eb43 0905 	adc.w	r9, r3, r5
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	469a      	mov	sl, r3
 8005906:	4693      	mov	fp, r2
 8005908:	4652      	mov	r2, sl
 800590a:	465b      	mov	r3, fp
 800590c:	4640      	mov	r0, r8
 800590e:	4649      	mov	r1, r9
 8005910:	f7fa fd3e 	bl	8000390 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4613      	mov	r3, r2
 800591a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005922:	d308      	bcc.n	8005936 <UART_SetConfig+0x79a>
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592a:	d204      	bcs.n	8005936 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e17c      	b.n	8005c30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800593c:	e178      	b.n	8005c30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005946:	f040 80c5 	bne.w	8005ad4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800594a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800594e:	2b20      	cmp	r3, #32
 8005950:	dc48      	bgt.n	80059e4 <UART_SetConfig+0x848>
 8005952:	2b00      	cmp	r3, #0
 8005954:	db7b      	blt.n	8005a4e <UART_SetConfig+0x8b2>
 8005956:	2b20      	cmp	r3, #32
 8005958:	d879      	bhi.n	8005a4e <UART_SetConfig+0x8b2>
 800595a:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0x7c4>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	080059eb 	.word	0x080059eb
 8005964:	080059f3 	.word	0x080059f3
 8005968:	08005a4f 	.word	0x08005a4f
 800596c:	08005a4f 	.word	0x08005a4f
 8005970:	080059fb 	.word	0x080059fb
 8005974:	08005a4f 	.word	0x08005a4f
 8005978:	08005a4f 	.word	0x08005a4f
 800597c:	08005a4f 	.word	0x08005a4f
 8005980:	08005a0b 	.word	0x08005a0b
 8005984:	08005a4f 	.word	0x08005a4f
 8005988:	08005a4f 	.word	0x08005a4f
 800598c:	08005a4f 	.word	0x08005a4f
 8005990:	08005a4f 	.word	0x08005a4f
 8005994:	08005a4f 	.word	0x08005a4f
 8005998:	08005a4f 	.word	0x08005a4f
 800599c:	08005a4f 	.word	0x08005a4f
 80059a0:	08005a1b 	.word	0x08005a1b
 80059a4:	08005a4f 	.word	0x08005a4f
 80059a8:	08005a4f 	.word	0x08005a4f
 80059ac:	08005a4f 	.word	0x08005a4f
 80059b0:	08005a4f 	.word	0x08005a4f
 80059b4:	08005a4f 	.word	0x08005a4f
 80059b8:	08005a4f 	.word	0x08005a4f
 80059bc:	08005a4f 	.word	0x08005a4f
 80059c0:	08005a4f 	.word	0x08005a4f
 80059c4:	08005a4f 	.word	0x08005a4f
 80059c8:	08005a4f 	.word	0x08005a4f
 80059cc:	08005a4f 	.word	0x08005a4f
 80059d0:	08005a4f 	.word	0x08005a4f
 80059d4:	08005a4f 	.word	0x08005a4f
 80059d8:	08005a4f 	.word	0x08005a4f
 80059dc:	08005a4f 	.word	0x08005a4f
 80059e0:	08005a41 	.word	0x08005a41
 80059e4:	2b40      	cmp	r3, #64	@ 0x40
 80059e6:	d02e      	beq.n	8005a46 <UART_SetConfig+0x8aa>
 80059e8:	e031      	b.n	8005a4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059ea:	f7fd fc61 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80059ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059f0:	e033      	b.n	8005a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f2:	f7fd fc73 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 80059f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059f8:	e02f      	b.n	8005a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fee2 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a08:	e027      	b.n	8005a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a0a:	f107 0318 	add.w	r3, r7, #24
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff f82e 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a18:	e01f      	b.n	8005a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad0 <UART_SetConfig+0x934>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a26:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad0 <UART_SetConfig+0x934>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	08db      	lsrs	r3, r3, #3
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	4a24      	ldr	r2, [pc, #144]	@ (8005ac4 <UART_SetConfig+0x928>)
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a38:	e00f      	b.n	8005a5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a3a:	4b22      	ldr	r3, [pc, #136]	@ (8005ac4 <UART_SetConfig+0x928>)
 8005a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a3e:	e00c      	b.n	8005a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a40:	4b21      	ldr	r3, [pc, #132]	@ (8005ac8 <UART_SetConfig+0x92c>)
 8005a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a44:	e009      	b.n	8005a5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a4c:	e005      	b.n	8005a5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80e7 	beq.w	8005c30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a66:	4a19      	ldr	r2, [pc, #100]	@ (8005acc <UART_SetConfig+0x930>)
 8005a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a74:	005a      	lsls	r2, r3, #1
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	441a      	add	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8a:	2b0f      	cmp	r3, #15
 8005a8c:	d916      	bls.n	8005abc <UART_SetConfig+0x920>
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a94:	d212      	bcs.n	8005abc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f023 030f 	bic.w	r3, r3, #15
 8005a9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	085b      	lsrs	r3, r3, #1
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	e0b9      	b.n	8005c30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ac2:	e0b5      	b.n	8005c30 <UART_SetConfig+0xa94>
 8005ac4:	03d09000 	.word	0x03d09000
 8005ac8:	003d0900 	.word	0x003d0900
 8005acc:	08006c5c 	.word	0x08006c5c
 8005ad0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ad4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	dc49      	bgt.n	8005b70 <UART_SetConfig+0x9d4>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	db7c      	blt.n	8005bda <UART_SetConfig+0xa3e>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d87a      	bhi.n	8005bda <UART_SetConfig+0xa3e>
 8005ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <UART_SetConfig+0x950>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b77 	.word	0x08005b77
 8005af0:	08005b7f 	.word	0x08005b7f
 8005af4:	08005bdb 	.word	0x08005bdb
 8005af8:	08005bdb 	.word	0x08005bdb
 8005afc:	08005b87 	.word	0x08005b87
 8005b00:	08005bdb 	.word	0x08005bdb
 8005b04:	08005bdb 	.word	0x08005bdb
 8005b08:	08005bdb 	.word	0x08005bdb
 8005b0c:	08005b97 	.word	0x08005b97
 8005b10:	08005bdb 	.word	0x08005bdb
 8005b14:	08005bdb 	.word	0x08005bdb
 8005b18:	08005bdb 	.word	0x08005bdb
 8005b1c:	08005bdb 	.word	0x08005bdb
 8005b20:	08005bdb 	.word	0x08005bdb
 8005b24:	08005bdb 	.word	0x08005bdb
 8005b28:	08005bdb 	.word	0x08005bdb
 8005b2c:	08005ba7 	.word	0x08005ba7
 8005b30:	08005bdb 	.word	0x08005bdb
 8005b34:	08005bdb 	.word	0x08005bdb
 8005b38:	08005bdb 	.word	0x08005bdb
 8005b3c:	08005bdb 	.word	0x08005bdb
 8005b40:	08005bdb 	.word	0x08005bdb
 8005b44:	08005bdb 	.word	0x08005bdb
 8005b48:	08005bdb 	.word	0x08005bdb
 8005b4c:	08005bdb 	.word	0x08005bdb
 8005b50:	08005bdb 	.word	0x08005bdb
 8005b54:	08005bdb 	.word	0x08005bdb
 8005b58:	08005bdb 	.word	0x08005bdb
 8005b5c:	08005bdb 	.word	0x08005bdb
 8005b60:	08005bdb 	.word	0x08005bdb
 8005b64:	08005bdb 	.word	0x08005bdb
 8005b68:	08005bdb 	.word	0x08005bdb
 8005b6c:	08005bcd 	.word	0x08005bcd
 8005b70:	2b40      	cmp	r3, #64	@ 0x40
 8005b72:	d02e      	beq.n	8005bd2 <UART_SetConfig+0xa36>
 8005b74:	e031      	b.n	8005bda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b76:	f7fd fb9b 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8005b7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b7c:	e033      	b.n	8005be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b7e:	f7fd fbad 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8005b82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b84:	e02f      	b.n	8005be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe fe1c 	bl	80047c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b94:	e027      	b.n	8005be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b96:	f107 0318 	add.w	r3, r7, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe ff68 	bl	8004a70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba4:	e01f      	b.n	8005be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c5c <UART_SetConfig+0xac0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c5c <UART_SetConfig+0xac0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	08db      	lsrs	r3, r3, #3
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	4a28      	ldr	r2, [pc, #160]	@ (8005c60 <UART_SetConfig+0xac4>)
 8005bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bc4:	e00f      	b.n	8005be6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005bc6:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <UART_SetConfig+0xac4>)
 8005bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bca:	e00c      	b.n	8005be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bcc:	4b25      	ldr	r3, [pc, #148]	@ (8005c64 <UART_SetConfig+0xac8>)
 8005bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd0:	e009      	b.n	8005be6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd8:	e005      	b.n	8005be6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005be4:	bf00      	nop
    }

    if (pclk != 0U)
 8005be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d021      	beq.n	8005c30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <UART_SetConfig+0xacc>)
 8005bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	441a      	add	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	d909      	bls.n	8005c2a <UART_SetConfig+0xa8e>
 8005c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1c:	d205      	bcs.n	8005c2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60da      	str	r2, [r3, #12]
 8005c28:	e002      	b.n	8005c30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2200      	movs	r2, #0
 8005c44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c4c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3748      	adds	r7, #72	@ 0x48
 8005c54:	46bd      	mov	sp, r7
 8005c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5a:	bf00      	nop
 8005c5c:	58024400 	.word	0x58024400
 8005c60:	03d09000 	.word	0x03d09000
 8005c64:	003d0900 	.word	0x003d0900
 8005c68:	08006c5c 	.word	0x08006c5c

08005c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01a      	beq.n	8005d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d6a:	d10a      	bne.n	8005d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b098      	sub	sp, #96	@ 0x60
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc0:	f7fb f940 	bl	8001044 <HAL_GetTick>
 8005dc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d12f      	bne.n	8005e34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f88e 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d022      	beq.n	8005e34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e063      	b.n	8005efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d149      	bne.n	8005ed6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f857 	bl	8005f04 <UART_WaitOnFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d03c      	beq.n	8005ed6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	623b      	str	r3, [r7, #32]
   return(result);
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e6      	bne.n	8005e5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3308      	adds	r3, #8
 8005e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eae:	61fa      	str	r2, [r7, #28]
 8005eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	69b9      	ldr	r1, [r7, #24]
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	617b      	str	r3, [r7, #20]
   return(result);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e012      	b.n	8005efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3758      	adds	r7, #88	@ 0x58
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f14:	e04f      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d04b      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1e:	f7fb f891 	bl	8001044 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e04e      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d037      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b80      	cmp	r3, #128	@ 0x80
 8005f4a:	d034      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2b40      	cmp	r3, #64	@ 0x40
 8005f50:	d031      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d110      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2208      	movs	r2, #8
 8005f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f839 	bl	8005fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2208      	movs	r2, #8
 8005f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e029      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f90:	d111      	bne.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f81f 	bl	8005fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e00f      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	bf0c      	ite	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	2300      	movne	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d0a0      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b095      	sub	sp, #84	@ 0x54
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006006:	643b      	str	r3, [r7, #64]	@ 0x40
 8006008:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800600c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e6      	bne.n	8005fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	61fb      	str	r3, [r7, #28]
   return(result);
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	4b1e      	ldr	r3, [pc, #120]	@ (80060a8 <UART_EndRxTransfer+0xc8>)
 800602e:	4013      	ands	r3, r2
 8006030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800603a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e5      	bne.n	800601a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d118      	bne.n	8006088 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	60bb      	str	r3, [r7, #8]
   return(result);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f023 0310 	bic.w	r3, r3, #16
 800606a:	647b      	str	r3, [r7, #68]	@ 0x44
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006074:	61bb      	str	r3, [r7, #24]
 8006076:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6979      	ldr	r1, [r7, #20]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	613b      	str	r3, [r7, #16]
   return(result);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e6      	bne.n	8006056 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800609c:	bf00      	nop
 800609e:	3754      	adds	r7, #84	@ 0x54
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	effffffe 	.word	0xeffffffe

080060ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80060be:	2302      	movs	r3, #2
 80060c0:	e027      	b.n	8006112 <HAL_UARTEx_DisableFifoMode+0x66>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2224      	movs	r2, #36	@ 0x24
 80060ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006132:	2302      	movs	r3, #2
 8006134:	e02d      	b.n	8006192 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2224      	movs	r2, #36	@ 0x24
 8006142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f850 	bl	8006218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2220      	movs	r2, #32
 8006184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e02d      	b.n	800620e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2224      	movs	r2, #36	@ 0x24
 80061be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f812 	bl	8006218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2220      	movs	r2, #32
 8006200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006224:	2b00      	cmp	r3, #0
 8006226:	d108      	bne.n	800623a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006238:	e031      	b.n	800629e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800623a:	2310      	movs	r3, #16
 800623c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800623e:	2310      	movs	r3, #16
 8006240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	0e5b      	lsrs	r3, r3, #25
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	0f5b      	lsrs	r3, r3, #29
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	7b3a      	ldrb	r2, [r7, #12]
 8006266:	4911      	ldr	r1, [pc, #68]	@ (80062ac <UARTEx_SetNbDataToProcess+0x94>)
 8006268:	5c8a      	ldrb	r2, [r1, r2]
 800626a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800626e:	7b3a      	ldrb	r2, [r7, #12]
 8006270:	490f      	ldr	r1, [pc, #60]	@ (80062b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006274:	fb93 f3f2 	sdiv	r3, r3, r2
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	7b7a      	ldrb	r2, [r7, #13]
 8006284:	4909      	ldr	r1, [pc, #36]	@ (80062ac <UARTEx_SetNbDataToProcess+0x94>)
 8006286:	5c8a      	ldrb	r2, [r1, r2]
 8006288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800628c:	7b7a      	ldrb	r2, [r7, #13]
 800628e:	4908      	ldr	r1, [pc, #32]	@ (80062b0 <UARTEx_SetNbDataToProcess+0x98>)
 8006290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006292:	fb93 f3f2 	sdiv	r3, r3, r2
 8006296:	b29a      	uxth	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	08006c74 	.word	0x08006c74
 80062b0:	08006c7c 	.word	0x08006c7c

080062b4 <sniprintf>:
 80062b4:	b40c      	push	{r2, r3}
 80062b6:	b530      	push	{r4, r5, lr}
 80062b8:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <sniprintf+0x64>)
 80062ba:	1e0c      	subs	r4, r1, #0
 80062bc:	681d      	ldr	r5, [r3, #0]
 80062be:	b09d      	sub	sp, #116	@ 0x74
 80062c0:	da08      	bge.n	80062d4 <sniprintf+0x20>
 80062c2:	238b      	movs	r3, #139	@ 0x8b
 80062c4:	602b      	str	r3, [r5, #0]
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	b01d      	add	sp, #116	@ 0x74
 80062cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d0:	b002      	add	sp, #8
 80062d2:	4770      	bx	lr
 80062d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80062d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062dc:	bf14      	ite	ne
 80062de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062e2:	4623      	moveq	r3, r4
 80062e4:	9304      	str	r3, [sp, #16]
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80062ec:	9002      	str	r0, [sp, #8]
 80062ee:	9006      	str	r0, [sp, #24]
 80062f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062f6:	ab21      	add	r3, sp, #132	@ 0x84
 80062f8:	a902      	add	r1, sp, #8
 80062fa:	4628      	mov	r0, r5
 80062fc:	9301      	str	r3, [sp, #4]
 80062fe:	f000 f995 	bl	800662c <_svfiprintf_r>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	bfbc      	itt	lt
 8006306:	238b      	movlt	r3, #139	@ 0x8b
 8006308:	602b      	strlt	r3, [r5, #0]
 800630a:	2c00      	cmp	r4, #0
 800630c:	d0dd      	beq.n	80062ca <sniprintf+0x16>
 800630e:	9b02      	ldr	r3, [sp, #8]
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	e7d9      	b.n	80062ca <sniprintf+0x16>
 8006316:	bf00      	nop
 8006318:	24000010 	.word	0x24000010

0800631c <memset>:
 800631c:	4402      	add	r2, r0
 800631e:	4603      	mov	r3, r0
 8006320:	4293      	cmp	r3, r2
 8006322:	d100      	bne.n	8006326 <memset+0xa>
 8006324:	4770      	bx	lr
 8006326:	f803 1b01 	strb.w	r1, [r3], #1
 800632a:	e7f9      	b.n	8006320 <memset+0x4>

0800632c <__errno>:
 800632c:	4b01      	ldr	r3, [pc, #4]	@ (8006334 <__errno+0x8>)
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	24000010 	.word	0x24000010

08006338 <__libc_init_array>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	4d0d      	ldr	r5, [pc, #52]	@ (8006370 <__libc_init_array+0x38>)
 800633c:	4c0d      	ldr	r4, [pc, #52]	@ (8006374 <__libc_init_array+0x3c>)
 800633e:	1b64      	subs	r4, r4, r5
 8006340:	10a4      	asrs	r4, r4, #2
 8006342:	2600      	movs	r6, #0
 8006344:	42a6      	cmp	r6, r4
 8006346:	d109      	bne.n	800635c <__libc_init_array+0x24>
 8006348:	4d0b      	ldr	r5, [pc, #44]	@ (8006378 <__libc_init_array+0x40>)
 800634a:	4c0c      	ldr	r4, [pc, #48]	@ (800637c <__libc_init_array+0x44>)
 800634c:	f000 fc66 	bl	8006c1c <_init>
 8006350:	1b64      	subs	r4, r4, r5
 8006352:	10a4      	asrs	r4, r4, #2
 8006354:	2600      	movs	r6, #0
 8006356:	42a6      	cmp	r6, r4
 8006358:	d105      	bne.n	8006366 <__libc_init_array+0x2e>
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006360:	4798      	blx	r3
 8006362:	3601      	adds	r6, #1
 8006364:	e7ee      	b.n	8006344 <__libc_init_array+0xc>
 8006366:	f855 3b04 	ldr.w	r3, [r5], #4
 800636a:	4798      	blx	r3
 800636c:	3601      	adds	r6, #1
 800636e:	e7f2      	b.n	8006356 <__libc_init_array+0x1e>
 8006370:	08006cc0 	.word	0x08006cc0
 8006374:	08006cc0 	.word	0x08006cc0
 8006378:	08006cc0 	.word	0x08006cc0
 800637c:	08006cc4 	.word	0x08006cc4

08006380 <__retarget_lock_acquire_recursive>:
 8006380:	4770      	bx	lr

08006382 <__retarget_lock_release_recursive>:
 8006382:	4770      	bx	lr

08006384 <_free_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4605      	mov	r5, r0
 8006388:	2900      	cmp	r1, #0
 800638a:	d041      	beq.n	8006410 <_free_r+0x8c>
 800638c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006390:	1f0c      	subs	r4, r1, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	bfb8      	it	lt
 8006396:	18e4      	addlt	r4, r4, r3
 8006398:	f000 f8e0 	bl	800655c <__malloc_lock>
 800639c:	4a1d      	ldr	r2, [pc, #116]	@ (8006414 <_free_r+0x90>)
 800639e:	6813      	ldr	r3, [r2, #0]
 80063a0:	b933      	cbnz	r3, 80063b0 <_free_r+0x2c>
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	6014      	str	r4, [r2, #0]
 80063a6:	4628      	mov	r0, r5
 80063a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ac:	f000 b8dc 	b.w	8006568 <__malloc_unlock>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d908      	bls.n	80063c6 <_free_r+0x42>
 80063b4:	6820      	ldr	r0, [r4, #0]
 80063b6:	1821      	adds	r1, r4, r0
 80063b8:	428b      	cmp	r3, r1
 80063ba:	bf01      	itttt	eq
 80063bc:	6819      	ldreq	r1, [r3, #0]
 80063be:	685b      	ldreq	r3, [r3, #4]
 80063c0:	1809      	addeq	r1, r1, r0
 80063c2:	6021      	streq	r1, [r4, #0]
 80063c4:	e7ed      	b.n	80063a2 <_free_r+0x1e>
 80063c6:	461a      	mov	r2, r3
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	b10b      	cbz	r3, 80063d0 <_free_r+0x4c>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d9fa      	bls.n	80063c6 <_free_r+0x42>
 80063d0:	6811      	ldr	r1, [r2, #0]
 80063d2:	1850      	adds	r0, r2, r1
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d10b      	bne.n	80063f0 <_free_r+0x6c>
 80063d8:	6820      	ldr	r0, [r4, #0]
 80063da:	4401      	add	r1, r0
 80063dc:	1850      	adds	r0, r2, r1
 80063de:	4283      	cmp	r3, r0
 80063e0:	6011      	str	r1, [r2, #0]
 80063e2:	d1e0      	bne.n	80063a6 <_free_r+0x22>
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	6053      	str	r3, [r2, #4]
 80063ea:	4408      	add	r0, r1
 80063ec:	6010      	str	r0, [r2, #0]
 80063ee:	e7da      	b.n	80063a6 <_free_r+0x22>
 80063f0:	d902      	bls.n	80063f8 <_free_r+0x74>
 80063f2:	230c      	movs	r3, #12
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	e7d6      	b.n	80063a6 <_free_r+0x22>
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	1821      	adds	r1, r4, r0
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf04      	itt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	6063      	str	r3, [r4, #4]
 8006406:	bf04      	itt	eq
 8006408:	1809      	addeq	r1, r1, r0
 800640a:	6021      	streq	r1, [r4, #0]
 800640c:	6054      	str	r4, [r2, #4]
 800640e:	e7ca      	b.n	80063a6 <_free_r+0x22>
 8006410:	bd38      	pop	{r3, r4, r5, pc}
 8006412:	bf00      	nop
 8006414:	240002f0 	.word	0x240002f0

08006418 <sbrk_aligned>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4e0f      	ldr	r6, [pc, #60]	@ (8006458 <sbrk_aligned+0x40>)
 800641c:	460c      	mov	r4, r1
 800641e:	6831      	ldr	r1, [r6, #0]
 8006420:	4605      	mov	r5, r0
 8006422:	b911      	cbnz	r1, 800642a <sbrk_aligned+0x12>
 8006424:	f000 fba6 	bl	8006b74 <_sbrk_r>
 8006428:	6030      	str	r0, [r6, #0]
 800642a:	4621      	mov	r1, r4
 800642c:	4628      	mov	r0, r5
 800642e:	f000 fba1 	bl	8006b74 <_sbrk_r>
 8006432:	1c43      	adds	r3, r0, #1
 8006434:	d103      	bne.n	800643e <sbrk_aligned+0x26>
 8006436:	f04f 34ff 	mov.w	r4, #4294967295
 800643a:	4620      	mov	r0, r4
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	1cc4      	adds	r4, r0, #3
 8006440:	f024 0403 	bic.w	r4, r4, #3
 8006444:	42a0      	cmp	r0, r4
 8006446:	d0f8      	beq.n	800643a <sbrk_aligned+0x22>
 8006448:	1a21      	subs	r1, r4, r0
 800644a:	4628      	mov	r0, r5
 800644c:	f000 fb92 	bl	8006b74 <_sbrk_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d1f2      	bne.n	800643a <sbrk_aligned+0x22>
 8006454:	e7ef      	b.n	8006436 <sbrk_aligned+0x1e>
 8006456:	bf00      	nop
 8006458:	240002ec 	.word	0x240002ec

0800645c <_malloc_r>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	1ccd      	adds	r5, r1, #3
 8006462:	f025 0503 	bic.w	r5, r5, #3
 8006466:	3508      	adds	r5, #8
 8006468:	2d0c      	cmp	r5, #12
 800646a:	bf38      	it	cc
 800646c:	250c      	movcc	r5, #12
 800646e:	2d00      	cmp	r5, #0
 8006470:	4606      	mov	r6, r0
 8006472:	db01      	blt.n	8006478 <_malloc_r+0x1c>
 8006474:	42a9      	cmp	r1, r5
 8006476:	d904      	bls.n	8006482 <_malloc_r+0x26>
 8006478:	230c      	movs	r3, #12
 800647a:	6033      	str	r3, [r6, #0]
 800647c:	2000      	movs	r0, #0
 800647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006482:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006558 <_malloc_r+0xfc>
 8006486:	f000 f869 	bl	800655c <__malloc_lock>
 800648a:	f8d8 3000 	ldr.w	r3, [r8]
 800648e:	461c      	mov	r4, r3
 8006490:	bb44      	cbnz	r4, 80064e4 <_malloc_r+0x88>
 8006492:	4629      	mov	r1, r5
 8006494:	4630      	mov	r0, r6
 8006496:	f7ff ffbf 	bl	8006418 <sbrk_aligned>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	4604      	mov	r4, r0
 800649e:	d158      	bne.n	8006552 <_malloc_r+0xf6>
 80064a0:	f8d8 4000 	ldr.w	r4, [r8]
 80064a4:	4627      	mov	r7, r4
 80064a6:	2f00      	cmp	r7, #0
 80064a8:	d143      	bne.n	8006532 <_malloc_r+0xd6>
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	d04b      	beq.n	8006546 <_malloc_r+0xea>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	4639      	mov	r1, r7
 80064b2:	4630      	mov	r0, r6
 80064b4:	eb04 0903 	add.w	r9, r4, r3
 80064b8:	f000 fb5c 	bl	8006b74 <_sbrk_r>
 80064bc:	4581      	cmp	r9, r0
 80064be:	d142      	bne.n	8006546 <_malloc_r+0xea>
 80064c0:	6821      	ldr	r1, [r4, #0]
 80064c2:	1a6d      	subs	r5, r5, r1
 80064c4:	4629      	mov	r1, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ffa6 	bl	8006418 <sbrk_aligned>
 80064cc:	3001      	adds	r0, #1
 80064ce:	d03a      	beq.n	8006546 <_malloc_r+0xea>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	442b      	add	r3, r5
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	f8d8 3000 	ldr.w	r3, [r8]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	bb62      	cbnz	r2, 8006538 <_malloc_r+0xdc>
 80064de:	f8c8 7000 	str.w	r7, [r8]
 80064e2:	e00f      	b.n	8006504 <_malloc_r+0xa8>
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	1b52      	subs	r2, r2, r5
 80064e8:	d420      	bmi.n	800652c <_malloc_r+0xd0>
 80064ea:	2a0b      	cmp	r2, #11
 80064ec:	d917      	bls.n	800651e <_malloc_r+0xc2>
 80064ee:	1961      	adds	r1, r4, r5
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	6025      	str	r5, [r4, #0]
 80064f4:	bf18      	it	ne
 80064f6:	6059      	strne	r1, [r3, #4]
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	bf08      	it	eq
 80064fc:	f8c8 1000 	streq.w	r1, [r8]
 8006500:	5162      	str	r2, [r4, r5]
 8006502:	604b      	str	r3, [r1, #4]
 8006504:	4630      	mov	r0, r6
 8006506:	f000 f82f 	bl	8006568 <__malloc_unlock>
 800650a:	f104 000b 	add.w	r0, r4, #11
 800650e:	1d23      	adds	r3, r4, #4
 8006510:	f020 0007 	bic.w	r0, r0, #7
 8006514:	1ac2      	subs	r2, r0, r3
 8006516:	bf1c      	itt	ne
 8006518:	1a1b      	subne	r3, r3, r0
 800651a:	50a3      	strne	r3, [r4, r2]
 800651c:	e7af      	b.n	800647e <_malloc_r+0x22>
 800651e:	6862      	ldr	r2, [r4, #4]
 8006520:	42a3      	cmp	r3, r4
 8006522:	bf0c      	ite	eq
 8006524:	f8c8 2000 	streq.w	r2, [r8]
 8006528:	605a      	strne	r2, [r3, #4]
 800652a:	e7eb      	b.n	8006504 <_malloc_r+0xa8>
 800652c:	4623      	mov	r3, r4
 800652e:	6864      	ldr	r4, [r4, #4]
 8006530:	e7ae      	b.n	8006490 <_malloc_r+0x34>
 8006532:	463c      	mov	r4, r7
 8006534:	687f      	ldr	r7, [r7, #4]
 8006536:	e7b6      	b.n	80064a6 <_malloc_r+0x4a>
 8006538:	461a      	mov	r2, r3
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	42a3      	cmp	r3, r4
 800653e:	d1fb      	bne.n	8006538 <_malloc_r+0xdc>
 8006540:	2300      	movs	r3, #0
 8006542:	6053      	str	r3, [r2, #4]
 8006544:	e7de      	b.n	8006504 <_malloc_r+0xa8>
 8006546:	230c      	movs	r3, #12
 8006548:	6033      	str	r3, [r6, #0]
 800654a:	4630      	mov	r0, r6
 800654c:	f000 f80c 	bl	8006568 <__malloc_unlock>
 8006550:	e794      	b.n	800647c <_malloc_r+0x20>
 8006552:	6005      	str	r5, [r0, #0]
 8006554:	e7d6      	b.n	8006504 <_malloc_r+0xa8>
 8006556:	bf00      	nop
 8006558:	240002f0 	.word	0x240002f0

0800655c <__malloc_lock>:
 800655c:	4801      	ldr	r0, [pc, #4]	@ (8006564 <__malloc_lock+0x8>)
 800655e:	f7ff bf0f 	b.w	8006380 <__retarget_lock_acquire_recursive>
 8006562:	bf00      	nop
 8006564:	240002e8 	.word	0x240002e8

08006568 <__malloc_unlock>:
 8006568:	4801      	ldr	r0, [pc, #4]	@ (8006570 <__malloc_unlock+0x8>)
 800656a:	f7ff bf0a 	b.w	8006382 <__retarget_lock_release_recursive>
 800656e:	bf00      	nop
 8006570:	240002e8 	.word	0x240002e8

08006574 <__ssputs_r>:
 8006574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	688e      	ldr	r6, [r1, #8]
 800657a:	461f      	mov	r7, r3
 800657c:	42be      	cmp	r6, r7
 800657e:	680b      	ldr	r3, [r1, #0]
 8006580:	4682      	mov	sl, r0
 8006582:	460c      	mov	r4, r1
 8006584:	4690      	mov	r8, r2
 8006586:	d82d      	bhi.n	80065e4 <__ssputs_r+0x70>
 8006588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800658c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006590:	d026      	beq.n	80065e0 <__ssputs_r+0x6c>
 8006592:	6965      	ldr	r5, [r4, #20]
 8006594:	6909      	ldr	r1, [r1, #16]
 8006596:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800659a:	eba3 0901 	sub.w	r9, r3, r1
 800659e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065a2:	1c7b      	adds	r3, r7, #1
 80065a4:	444b      	add	r3, r9
 80065a6:	106d      	asrs	r5, r5, #1
 80065a8:	429d      	cmp	r5, r3
 80065aa:	bf38      	it	cc
 80065ac:	461d      	movcc	r5, r3
 80065ae:	0553      	lsls	r3, r2, #21
 80065b0:	d527      	bpl.n	8006602 <__ssputs_r+0x8e>
 80065b2:	4629      	mov	r1, r5
 80065b4:	f7ff ff52 	bl	800645c <_malloc_r>
 80065b8:	4606      	mov	r6, r0
 80065ba:	b360      	cbz	r0, 8006616 <__ssputs_r+0xa2>
 80065bc:	6921      	ldr	r1, [r4, #16]
 80065be:	464a      	mov	r2, r9
 80065c0:	f000 fae8 	bl	8006b94 <memcpy>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	6126      	str	r6, [r4, #16]
 80065d2:	6165      	str	r5, [r4, #20]
 80065d4:	444e      	add	r6, r9
 80065d6:	eba5 0509 	sub.w	r5, r5, r9
 80065da:	6026      	str	r6, [r4, #0]
 80065dc:	60a5      	str	r5, [r4, #8]
 80065de:	463e      	mov	r6, r7
 80065e0:	42be      	cmp	r6, r7
 80065e2:	d900      	bls.n	80065e6 <__ssputs_r+0x72>
 80065e4:	463e      	mov	r6, r7
 80065e6:	6820      	ldr	r0, [r4, #0]
 80065e8:	4632      	mov	r2, r6
 80065ea:	4641      	mov	r1, r8
 80065ec:	f000 faa8 	bl	8006b40 <memmove>
 80065f0:	68a3      	ldr	r3, [r4, #8]
 80065f2:	1b9b      	subs	r3, r3, r6
 80065f4:	60a3      	str	r3, [r4, #8]
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	4433      	add	r3, r6
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	2000      	movs	r0, #0
 80065fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006602:	462a      	mov	r2, r5
 8006604:	f000 fad4 	bl	8006bb0 <_realloc_r>
 8006608:	4606      	mov	r6, r0
 800660a:	2800      	cmp	r0, #0
 800660c:	d1e0      	bne.n	80065d0 <__ssputs_r+0x5c>
 800660e:	6921      	ldr	r1, [r4, #16]
 8006610:	4650      	mov	r0, sl
 8006612:	f7ff feb7 	bl	8006384 <_free_r>
 8006616:	230c      	movs	r3, #12
 8006618:	f8ca 3000 	str.w	r3, [sl]
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	f04f 30ff 	mov.w	r0, #4294967295
 8006628:	e7e9      	b.n	80065fe <__ssputs_r+0x8a>
	...

0800662c <_svfiprintf_r>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	4698      	mov	r8, r3
 8006632:	898b      	ldrh	r3, [r1, #12]
 8006634:	061b      	lsls	r3, r3, #24
 8006636:	b09d      	sub	sp, #116	@ 0x74
 8006638:	4607      	mov	r7, r0
 800663a:	460d      	mov	r5, r1
 800663c:	4614      	mov	r4, r2
 800663e:	d510      	bpl.n	8006662 <_svfiprintf_r+0x36>
 8006640:	690b      	ldr	r3, [r1, #16]
 8006642:	b973      	cbnz	r3, 8006662 <_svfiprintf_r+0x36>
 8006644:	2140      	movs	r1, #64	@ 0x40
 8006646:	f7ff ff09 	bl	800645c <_malloc_r>
 800664a:	6028      	str	r0, [r5, #0]
 800664c:	6128      	str	r0, [r5, #16]
 800664e:	b930      	cbnz	r0, 800665e <_svfiprintf_r+0x32>
 8006650:	230c      	movs	r3, #12
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	b01d      	add	sp, #116	@ 0x74
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	2340      	movs	r3, #64	@ 0x40
 8006660:	616b      	str	r3, [r5, #20]
 8006662:	2300      	movs	r3, #0
 8006664:	9309      	str	r3, [sp, #36]	@ 0x24
 8006666:	2320      	movs	r3, #32
 8006668:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800666c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006670:	2330      	movs	r3, #48	@ 0x30
 8006672:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006810 <_svfiprintf_r+0x1e4>
 8006676:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800667a:	f04f 0901 	mov.w	r9, #1
 800667e:	4623      	mov	r3, r4
 8006680:	469a      	mov	sl, r3
 8006682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006686:	b10a      	cbz	r2, 800668c <_svfiprintf_r+0x60>
 8006688:	2a25      	cmp	r2, #37	@ 0x25
 800668a:	d1f9      	bne.n	8006680 <_svfiprintf_r+0x54>
 800668c:	ebba 0b04 	subs.w	fp, sl, r4
 8006690:	d00b      	beq.n	80066aa <_svfiprintf_r+0x7e>
 8006692:	465b      	mov	r3, fp
 8006694:	4622      	mov	r2, r4
 8006696:	4629      	mov	r1, r5
 8006698:	4638      	mov	r0, r7
 800669a:	f7ff ff6b 	bl	8006574 <__ssputs_r>
 800669e:	3001      	adds	r0, #1
 80066a0:	f000 80a7 	beq.w	80067f2 <_svfiprintf_r+0x1c6>
 80066a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066a6:	445a      	add	r2, fp
 80066a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80066aa:	f89a 3000 	ldrb.w	r3, [sl]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 809f 	beq.w	80067f2 <_svfiprintf_r+0x1c6>
 80066b4:	2300      	movs	r3, #0
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066be:	f10a 0a01 	add.w	sl, sl, #1
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	9307      	str	r3, [sp, #28]
 80066c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80066cc:	4654      	mov	r4, sl
 80066ce:	2205      	movs	r2, #5
 80066d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d4:	484e      	ldr	r0, [pc, #312]	@ (8006810 <_svfiprintf_r+0x1e4>)
 80066d6:	f7f9 fe0b 	bl	80002f0 <memchr>
 80066da:	9a04      	ldr	r2, [sp, #16]
 80066dc:	b9d8      	cbnz	r0, 8006716 <_svfiprintf_r+0xea>
 80066de:	06d0      	lsls	r0, r2, #27
 80066e0:	bf44      	itt	mi
 80066e2:	2320      	movmi	r3, #32
 80066e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066e8:	0711      	lsls	r1, r2, #28
 80066ea:	bf44      	itt	mi
 80066ec:	232b      	movmi	r3, #43	@ 0x2b
 80066ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066f2:	f89a 3000 	ldrb.w	r3, [sl]
 80066f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f8:	d015      	beq.n	8006726 <_svfiprintf_r+0xfa>
 80066fa:	9a07      	ldr	r2, [sp, #28]
 80066fc:	4654      	mov	r4, sl
 80066fe:	2000      	movs	r0, #0
 8006700:	f04f 0c0a 	mov.w	ip, #10
 8006704:	4621      	mov	r1, r4
 8006706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800670a:	3b30      	subs	r3, #48	@ 0x30
 800670c:	2b09      	cmp	r3, #9
 800670e:	d94b      	bls.n	80067a8 <_svfiprintf_r+0x17c>
 8006710:	b1b0      	cbz	r0, 8006740 <_svfiprintf_r+0x114>
 8006712:	9207      	str	r2, [sp, #28]
 8006714:	e014      	b.n	8006740 <_svfiprintf_r+0x114>
 8006716:	eba0 0308 	sub.w	r3, r0, r8
 800671a:	fa09 f303 	lsl.w	r3, r9, r3
 800671e:	4313      	orrs	r3, r2
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	46a2      	mov	sl, r4
 8006724:	e7d2      	b.n	80066cc <_svfiprintf_r+0xa0>
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	1d19      	adds	r1, r3, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	9103      	str	r1, [sp, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfbb      	ittet	lt
 8006732:	425b      	neglt	r3, r3
 8006734:	f042 0202 	orrlt.w	r2, r2, #2
 8006738:	9307      	strge	r3, [sp, #28]
 800673a:	9307      	strlt	r3, [sp, #28]
 800673c:	bfb8      	it	lt
 800673e:	9204      	strlt	r2, [sp, #16]
 8006740:	7823      	ldrb	r3, [r4, #0]
 8006742:	2b2e      	cmp	r3, #46	@ 0x2e
 8006744:	d10a      	bne.n	800675c <_svfiprintf_r+0x130>
 8006746:	7863      	ldrb	r3, [r4, #1]
 8006748:	2b2a      	cmp	r3, #42	@ 0x2a
 800674a:	d132      	bne.n	80067b2 <_svfiprintf_r+0x186>
 800674c:	9b03      	ldr	r3, [sp, #12]
 800674e:	1d1a      	adds	r2, r3, #4
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	9203      	str	r2, [sp, #12]
 8006754:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006758:	3402      	adds	r4, #2
 800675a:	9305      	str	r3, [sp, #20]
 800675c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006820 <_svfiprintf_r+0x1f4>
 8006760:	7821      	ldrb	r1, [r4, #0]
 8006762:	2203      	movs	r2, #3
 8006764:	4650      	mov	r0, sl
 8006766:	f7f9 fdc3 	bl	80002f0 <memchr>
 800676a:	b138      	cbz	r0, 800677c <_svfiprintf_r+0x150>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	eba0 000a 	sub.w	r0, r0, sl
 8006772:	2240      	movs	r2, #64	@ 0x40
 8006774:	4082      	lsls	r2, r0
 8006776:	4313      	orrs	r3, r2
 8006778:	3401      	adds	r4, #1
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006780:	4824      	ldr	r0, [pc, #144]	@ (8006814 <_svfiprintf_r+0x1e8>)
 8006782:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006786:	2206      	movs	r2, #6
 8006788:	f7f9 fdb2 	bl	80002f0 <memchr>
 800678c:	2800      	cmp	r0, #0
 800678e:	d036      	beq.n	80067fe <_svfiprintf_r+0x1d2>
 8006790:	4b21      	ldr	r3, [pc, #132]	@ (8006818 <_svfiprintf_r+0x1ec>)
 8006792:	bb1b      	cbnz	r3, 80067dc <_svfiprintf_r+0x1b0>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	3307      	adds	r3, #7
 8006798:	f023 0307 	bic.w	r3, r3, #7
 800679c:	3308      	adds	r3, #8
 800679e:	9303      	str	r3, [sp, #12]
 80067a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a2:	4433      	add	r3, r6
 80067a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a6:	e76a      	b.n	800667e <_svfiprintf_r+0x52>
 80067a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ac:	460c      	mov	r4, r1
 80067ae:	2001      	movs	r0, #1
 80067b0:	e7a8      	b.n	8006704 <_svfiprintf_r+0xd8>
 80067b2:	2300      	movs	r3, #0
 80067b4:	3401      	adds	r4, #1
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	4619      	mov	r1, r3
 80067ba:	f04f 0c0a 	mov.w	ip, #10
 80067be:	4620      	mov	r0, r4
 80067c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067c4:	3a30      	subs	r2, #48	@ 0x30
 80067c6:	2a09      	cmp	r2, #9
 80067c8:	d903      	bls.n	80067d2 <_svfiprintf_r+0x1a6>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0c6      	beq.n	800675c <_svfiprintf_r+0x130>
 80067ce:	9105      	str	r1, [sp, #20]
 80067d0:	e7c4      	b.n	800675c <_svfiprintf_r+0x130>
 80067d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80067d6:	4604      	mov	r4, r0
 80067d8:	2301      	movs	r3, #1
 80067da:	e7f0      	b.n	80067be <_svfiprintf_r+0x192>
 80067dc:	ab03      	add	r3, sp, #12
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	462a      	mov	r2, r5
 80067e2:	4b0e      	ldr	r3, [pc, #56]	@ (800681c <_svfiprintf_r+0x1f0>)
 80067e4:	a904      	add	r1, sp, #16
 80067e6:	4638      	mov	r0, r7
 80067e8:	f3af 8000 	nop.w
 80067ec:	1c42      	adds	r2, r0, #1
 80067ee:	4606      	mov	r6, r0
 80067f0:	d1d6      	bne.n	80067a0 <_svfiprintf_r+0x174>
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	065b      	lsls	r3, r3, #25
 80067f6:	f53f af2d 	bmi.w	8006654 <_svfiprintf_r+0x28>
 80067fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067fc:	e72c      	b.n	8006658 <_svfiprintf_r+0x2c>
 80067fe:	ab03      	add	r3, sp, #12
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	462a      	mov	r2, r5
 8006804:	4b05      	ldr	r3, [pc, #20]	@ (800681c <_svfiprintf_r+0x1f0>)
 8006806:	a904      	add	r1, sp, #16
 8006808:	4638      	mov	r0, r7
 800680a:	f000 f879 	bl	8006900 <_printf_i>
 800680e:	e7ed      	b.n	80067ec <_svfiprintf_r+0x1c0>
 8006810:	08006c84 	.word	0x08006c84
 8006814:	08006c8e 	.word	0x08006c8e
 8006818:	00000000 	.word	0x00000000
 800681c:	08006575 	.word	0x08006575
 8006820:	08006c8a 	.word	0x08006c8a

08006824 <_printf_common>:
 8006824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	4616      	mov	r6, r2
 800682a:	4698      	mov	r8, r3
 800682c:	688a      	ldr	r2, [r1, #8]
 800682e:	690b      	ldr	r3, [r1, #16]
 8006830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006834:	4293      	cmp	r3, r2
 8006836:	bfb8      	it	lt
 8006838:	4613      	movlt	r3, r2
 800683a:	6033      	str	r3, [r6, #0]
 800683c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006840:	4607      	mov	r7, r0
 8006842:	460c      	mov	r4, r1
 8006844:	b10a      	cbz	r2, 800684a <_printf_common+0x26>
 8006846:	3301      	adds	r3, #1
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	0699      	lsls	r1, r3, #26
 800684e:	bf42      	ittt	mi
 8006850:	6833      	ldrmi	r3, [r6, #0]
 8006852:	3302      	addmi	r3, #2
 8006854:	6033      	strmi	r3, [r6, #0]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	f015 0506 	ands.w	r5, r5, #6
 800685c:	d106      	bne.n	800686c <_printf_common+0x48>
 800685e:	f104 0a19 	add.w	sl, r4, #25
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	42ab      	cmp	r3, r5
 800686a:	dc26      	bgt.n	80068ba <_printf_common+0x96>
 800686c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	3b00      	subs	r3, #0
 8006874:	bf18      	it	ne
 8006876:	2301      	movne	r3, #1
 8006878:	0692      	lsls	r2, r2, #26
 800687a:	d42b      	bmi.n	80068d4 <_printf_common+0xb0>
 800687c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006880:	4641      	mov	r1, r8
 8006882:	4638      	mov	r0, r7
 8006884:	47c8      	blx	r9
 8006886:	3001      	adds	r0, #1
 8006888:	d01e      	beq.n	80068c8 <_printf_common+0xa4>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	6922      	ldr	r2, [r4, #16]
 800688e:	f003 0306 	and.w	r3, r3, #6
 8006892:	2b04      	cmp	r3, #4
 8006894:	bf02      	ittt	eq
 8006896:	68e5      	ldreq	r5, [r4, #12]
 8006898:	6833      	ldreq	r3, [r6, #0]
 800689a:	1aed      	subeq	r5, r5, r3
 800689c:	68a3      	ldr	r3, [r4, #8]
 800689e:	bf0c      	ite	eq
 80068a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068a4:	2500      	movne	r5, #0
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bfc4      	itt	gt
 80068aa:	1a9b      	subgt	r3, r3, r2
 80068ac:	18ed      	addgt	r5, r5, r3
 80068ae:	2600      	movs	r6, #0
 80068b0:	341a      	adds	r4, #26
 80068b2:	42b5      	cmp	r5, r6
 80068b4:	d11a      	bne.n	80068ec <_printf_common+0xc8>
 80068b6:	2000      	movs	r0, #0
 80068b8:	e008      	b.n	80068cc <_printf_common+0xa8>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4641      	mov	r1, r8
 80068c0:	4638      	mov	r0, r7
 80068c2:	47c8      	blx	r9
 80068c4:	3001      	adds	r0, #1
 80068c6:	d103      	bne.n	80068d0 <_printf_common+0xac>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	3501      	adds	r5, #1
 80068d2:	e7c6      	b.n	8006862 <_printf_common+0x3e>
 80068d4:	18e1      	adds	r1, r4, r3
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	2030      	movs	r0, #48	@ 0x30
 80068da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068de:	4422      	add	r2, r4
 80068e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068e8:	3302      	adds	r3, #2
 80068ea:	e7c7      	b.n	800687c <_printf_common+0x58>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4622      	mov	r2, r4
 80068f0:	4641      	mov	r1, r8
 80068f2:	4638      	mov	r0, r7
 80068f4:	47c8      	blx	r9
 80068f6:	3001      	adds	r0, #1
 80068f8:	d0e6      	beq.n	80068c8 <_printf_common+0xa4>
 80068fa:	3601      	adds	r6, #1
 80068fc:	e7d9      	b.n	80068b2 <_printf_common+0x8e>
	...

08006900 <_printf_i>:
 8006900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	7e0f      	ldrb	r7, [r1, #24]
 8006906:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006908:	2f78      	cmp	r7, #120	@ 0x78
 800690a:	4691      	mov	r9, r2
 800690c:	4680      	mov	r8, r0
 800690e:	460c      	mov	r4, r1
 8006910:	469a      	mov	sl, r3
 8006912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006916:	d807      	bhi.n	8006928 <_printf_i+0x28>
 8006918:	2f62      	cmp	r7, #98	@ 0x62
 800691a:	d80a      	bhi.n	8006932 <_printf_i+0x32>
 800691c:	2f00      	cmp	r7, #0
 800691e:	f000 80d2 	beq.w	8006ac6 <_printf_i+0x1c6>
 8006922:	2f58      	cmp	r7, #88	@ 0x58
 8006924:	f000 80b9 	beq.w	8006a9a <_printf_i+0x19a>
 8006928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800692c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006930:	e03a      	b.n	80069a8 <_printf_i+0xa8>
 8006932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006936:	2b15      	cmp	r3, #21
 8006938:	d8f6      	bhi.n	8006928 <_printf_i+0x28>
 800693a:	a101      	add	r1, pc, #4	@ (adr r1, 8006940 <_printf_i+0x40>)
 800693c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006940:	08006999 	.word	0x08006999
 8006944:	080069ad 	.word	0x080069ad
 8006948:	08006929 	.word	0x08006929
 800694c:	08006929 	.word	0x08006929
 8006950:	08006929 	.word	0x08006929
 8006954:	08006929 	.word	0x08006929
 8006958:	080069ad 	.word	0x080069ad
 800695c:	08006929 	.word	0x08006929
 8006960:	08006929 	.word	0x08006929
 8006964:	08006929 	.word	0x08006929
 8006968:	08006929 	.word	0x08006929
 800696c:	08006aad 	.word	0x08006aad
 8006970:	080069d7 	.word	0x080069d7
 8006974:	08006a67 	.word	0x08006a67
 8006978:	08006929 	.word	0x08006929
 800697c:	08006929 	.word	0x08006929
 8006980:	08006acf 	.word	0x08006acf
 8006984:	08006929 	.word	0x08006929
 8006988:	080069d7 	.word	0x080069d7
 800698c:	08006929 	.word	0x08006929
 8006990:	08006929 	.word	0x08006929
 8006994:	08006a6f 	.word	0x08006a6f
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	1d1a      	adds	r2, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6032      	str	r2, [r6, #0]
 80069a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069a8:	2301      	movs	r3, #1
 80069aa:	e09d      	b.n	8006ae8 <_printf_i+0x1e8>
 80069ac:	6833      	ldr	r3, [r6, #0]
 80069ae:	6820      	ldr	r0, [r4, #0]
 80069b0:	1d19      	adds	r1, r3, #4
 80069b2:	6031      	str	r1, [r6, #0]
 80069b4:	0606      	lsls	r6, r0, #24
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0xbc>
 80069b8:	681d      	ldr	r5, [r3, #0]
 80069ba:	e003      	b.n	80069c4 <_printf_i+0xc4>
 80069bc:	0645      	lsls	r5, r0, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0xb8>
 80069c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	da03      	bge.n	80069d0 <_printf_i+0xd0>
 80069c8:	232d      	movs	r3, #45	@ 0x2d
 80069ca:	426d      	negs	r5, r5
 80069cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069d0:	4859      	ldr	r0, [pc, #356]	@ (8006b38 <_printf_i+0x238>)
 80069d2:	230a      	movs	r3, #10
 80069d4:	e011      	b.n	80069fa <_printf_i+0xfa>
 80069d6:	6821      	ldr	r1, [r4, #0]
 80069d8:	6833      	ldr	r3, [r6, #0]
 80069da:	0608      	lsls	r0, r1, #24
 80069dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80069e0:	d402      	bmi.n	80069e8 <_printf_i+0xe8>
 80069e2:	0649      	lsls	r1, r1, #25
 80069e4:	bf48      	it	mi
 80069e6:	b2ad      	uxthmi	r5, r5
 80069e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80069ea:	4853      	ldr	r0, [pc, #332]	@ (8006b38 <_printf_i+0x238>)
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	bf14      	ite	ne
 80069f0:	230a      	movne	r3, #10
 80069f2:	2308      	moveq	r3, #8
 80069f4:	2100      	movs	r1, #0
 80069f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069fa:	6866      	ldr	r6, [r4, #4]
 80069fc:	60a6      	str	r6, [r4, #8]
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	bfa2      	ittt	ge
 8006a02:	6821      	ldrge	r1, [r4, #0]
 8006a04:	f021 0104 	bicge.w	r1, r1, #4
 8006a08:	6021      	strge	r1, [r4, #0]
 8006a0a:	b90d      	cbnz	r5, 8006a10 <_printf_i+0x110>
 8006a0c:	2e00      	cmp	r6, #0
 8006a0e:	d04b      	beq.n	8006aa8 <_printf_i+0x1a8>
 8006a10:	4616      	mov	r6, r2
 8006a12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a16:	fb03 5711 	mls	r7, r3, r1, r5
 8006a1a:	5dc7      	ldrb	r7, [r0, r7]
 8006a1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a20:	462f      	mov	r7, r5
 8006a22:	42bb      	cmp	r3, r7
 8006a24:	460d      	mov	r5, r1
 8006a26:	d9f4      	bls.n	8006a12 <_printf_i+0x112>
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d10b      	bne.n	8006a44 <_printf_i+0x144>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	07df      	lsls	r7, r3, #31
 8006a30:	d508      	bpl.n	8006a44 <_printf_i+0x144>
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	6861      	ldr	r1, [r4, #4]
 8006a36:	4299      	cmp	r1, r3
 8006a38:	bfde      	ittt	le
 8006a3a:	2330      	movle	r3, #48	@ 0x30
 8006a3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a44:	1b92      	subs	r2, r2, r6
 8006a46:	6122      	str	r2, [r4, #16]
 8006a48:	f8cd a000 	str.w	sl, [sp]
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	aa03      	add	r2, sp, #12
 8006a50:	4621      	mov	r1, r4
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff fee6 	bl	8006824 <_printf_common>
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d14a      	bne.n	8006af2 <_printf_i+0x1f2>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a60:	b004      	add	sp, #16
 8006a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f043 0320 	orr.w	r3, r3, #32
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	4833      	ldr	r0, [pc, #204]	@ (8006b3c <_printf_i+0x23c>)
 8006a70:	2778      	movs	r7, #120	@ 0x78
 8006a72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	6831      	ldr	r1, [r6, #0]
 8006a7a:	061f      	lsls	r7, r3, #24
 8006a7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a80:	d402      	bmi.n	8006a88 <_printf_i+0x188>
 8006a82:	065f      	lsls	r7, r3, #25
 8006a84:	bf48      	it	mi
 8006a86:	b2ad      	uxthmi	r5, r5
 8006a88:	6031      	str	r1, [r6, #0]
 8006a8a:	07d9      	lsls	r1, r3, #31
 8006a8c:	bf44      	itt	mi
 8006a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a92:	6023      	strmi	r3, [r4, #0]
 8006a94:	b11d      	cbz	r5, 8006a9e <_printf_i+0x19e>
 8006a96:	2310      	movs	r3, #16
 8006a98:	e7ac      	b.n	80069f4 <_printf_i+0xf4>
 8006a9a:	4827      	ldr	r0, [pc, #156]	@ (8006b38 <_printf_i+0x238>)
 8006a9c:	e7e9      	b.n	8006a72 <_printf_i+0x172>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	f023 0320 	bic.w	r3, r3, #32
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	e7f6      	b.n	8006a96 <_printf_i+0x196>
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	e7bd      	b.n	8006a28 <_printf_i+0x128>
 8006aac:	6833      	ldr	r3, [r6, #0]
 8006aae:	6825      	ldr	r5, [r4, #0]
 8006ab0:	6961      	ldr	r1, [r4, #20]
 8006ab2:	1d18      	adds	r0, r3, #4
 8006ab4:	6030      	str	r0, [r6, #0]
 8006ab6:	062e      	lsls	r6, r5, #24
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	d501      	bpl.n	8006ac0 <_printf_i+0x1c0>
 8006abc:	6019      	str	r1, [r3, #0]
 8006abe:	e002      	b.n	8006ac6 <_printf_i+0x1c6>
 8006ac0:	0668      	lsls	r0, r5, #25
 8006ac2:	d5fb      	bpl.n	8006abc <_printf_i+0x1bc>
 8006ac4:	8019      	strh	r1, [r3, #0]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	4616      	mov	r6, r2
 8006acc:	e7bc      	b.n	8006a48 <_printf_i+0x148>
 8006ace:	6833      	ldr	r3, [r6, #0]
 8006ad0:	1d1a      	adds	r2, r3, #4
 8006ad2:	6032      	str	r2, [r6, #0]
 8006ad4:	681e      	ldr	r6, [r3, #0]
 8006ad6:	6862      	ldr	r2, [r4, #4]
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7f9 fc08 	bl	80002f0 <memchr>
 8006ae0:	b108      	cbz	r0, 8006ae6 <_printf_i+0x1e6>
 8006ae2:	1b80      	subs	r0, r0, r6
 8006ae4:	6060      	str	r0, [r4, #4]
 8006ae6:	6863      	ldr	r3, [r4, #4]
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	2300      	movs	r3, #0
 8006aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006af0:	e7aa      	b.n	8006a48 <_printf_i+0x148>
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	4632      	mov	r2, r6
 8006af6:	4649      	mov	r1, r9
 8006af8:	4640      	mov	r0, r8
 8006afa:	47d0      	blx	sl
 8006afc:	3001      	adds	r0, #1
 8006afe:	d0ad      	beq.n	8006a5c <_printf_i+0x15c>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	079b      	lsls	r3, r3, #30
 8006b04:	d413      	bmi.n	8006b2e <_printf_i+0x22e>
 8006b06:	68e0      	ldr	r0, [r4, #12]
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	4298      	cmp	r0, r3
 8006b0c:	bfb8      	it	lt
 8006b0e:	4618      	movlt	r0, r3
 8006b10:	e7a6      	b.n	8006a60 <_printf_i+0x160>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4632      	mov	r2, r6
 8006b16:	4649      	mov	r1, r9
 8006b18:	4640      	mov	r0, r8
 8006b1a:	47d0      	blx	sl
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d09d      	beq.n	8006a5c <_printf_i+0x15c>
 8006b20:	3501      	adds	r5, #1
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	9903      	ldr	r1, [sp, #12]
 8006b26:	1a5b      	subs	r3, r3, r1
 8006b28:	42ab      	cmp	r3, r5
 8006b2a:	dcf2      	bgt.n	8006b12 <_printf_i+0x212>
 8006b2c:	e7eb      	b.n	8006b06 <_printf_i+0x206>
 8006b2e:	2500      	movs	r5, #0
 8006b30:	f104 0619 	add.w	r6, r4, #25
 8006b34:	e7f5      	b.n	8006b22 <_printf_i+0x222>
 8006b36:	bf00      	nop
 8006b38:	08006c95 	.word	0x08006c95
 8006b3c:	08006ca6 	.word	0x08006ca6

08006b40 <memmove>:
 8006b40:	4288      	cmp	r0, r1
 8006b42:	b510      	push	{r4, lr}
 8006b44:	eb01 0402 	add.w	r4, r1, r2
 8006b48:	d902      	bls.n	8006b50 <memmove+0x10>
 8006b4a:	4284      	cmp	r4, r0
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	d807      	bhi.n	8006b60 <memmove+0x20>
 8006b50:	1e43      	subs	r3, r0, #1
 8006b52:	42a1      	cmp	r1, r4
 8006b54:	d008      	beq.n	8006b68 <memmove+0x28>
 8006b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b5e:	e7f8      	b.n	8006b52 <memmove+0x12>
 8006b60:	4402      	add	r2, r0
 8006b62:	4601      	mov	r1, r0
 8006b64:	428a      	cmp	r2, r1
 8006b66:	d100      	bne.n	8006b6a <memmove+0x2a>
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b72:	e7f7      	b.n	8006b64 <memmove+0x24>

08006b74 <_sbrk_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d06      	ldr	r5, [pc, #24]	@ (8006b90 <_sbrk_r+0x1c>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f7fa f97a 	bl	8000e78 <_sbrk>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_sbrk_r+0x1a>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_sbrk_r+0x1a>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	240002e4 	.word	0x240002e4

08006b94 <memcpy>:
 8006b94:	440a      	add	r2, r1
 8006b96:	4291      	cmp	r1, r2
 8006b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b9c:	d100      	bne.n	8006ba0 <memcpy+0xc>
 8006b9e:	4770      	bx	lr
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006baa:	4291      	cmp	r1, r2
 8006bac:	d1f9      	bne.n	8006ba2 <memcpy+0xe>
 8006bae:	bd10      	pop	{r4, pc}

08006bb0 <_realloc_r>:
 8006bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4615      	mov	r5, r2
 8006bb8:	460c      	mov	r4, r1
 8006bba:	b921      	cbnz	r1, 8006bc6 <_realloc_r+0x16>
 8006bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	f7ff bc4b 	b.w	800645c <_malloc_r>
 8006bc6:	b92a      	cbnz	r2, 8006bd4 <_realloc_r+0x24>
 8006bc8:	f7ff fbdc 	bl	8006384 <_free_r>
 8006bcc:	2400      	movs	r4, #0
 8006bce:	4620      	mov	r0, r4
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd4:	f000 f81a 	bl	8006c0c <_malloc_usable_size_r>
 8006bd8:	4285      	cmp	r5, r0
 8006bda:	4606      	mov	r6, r0
 8006bdc:	d802      	bhi.n	8006be4 <_realloc_r+0x34>
 8006bde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006be2:	d8f4      	bhi.n	8006bce <_realloc_r+0x1e>
 8006be4:	4629      	mov	r1, r5
 8006be6:	4640      	mov	r0, r8
 8006be8:	f7ff fc38 	bl	800645c <_malloc_r>
 8006bec:	4607      	mov	r7, r0
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d0ec      	beq.n	8006bcc <_realloc_r+0x1c>
 8006bf2:	42b5      	cmp	r5, r6
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	bf28      	it	cs
 8006bfa:	4632      	movcs	r2, r6
 8006bfc:	f7ff ffca 	bl	8006b94 <memcpy>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4640      	mov	r0, r8
 8006c04:	f7ff fbbe 	bl	8006384 <_free_r>
 8006c08:	463c      	mov	r4, r7
 8006c0a:	e7e0      	b.n	8006bce <_realloc_r+0x1e>

08006c0c <_malloc_usable_size_r>:
 8006c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c10:	1f18      	subs	r0, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bfbc      	itt	lt
 8006c16:	580b      	ldrlt	r3, [r1, r0]
 8006c18:	18c0      	addlt	r0, r0, r3
 8006c1a:	4770      	bx	lr

08006c1c <_init>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr

08006c28 <_fini>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr
