
UART_Polling_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005960  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005c00  08005c00  00006c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c70  08005c70  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005c70  08005c70  00006c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c78  08005c78  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c7c  08005c7c  00006c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  24000000  08005c80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  24000064  08005ce4  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400026c  08005ce4  0000726c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f678  00000000  00000000  00007092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d44  00000000  00000000  0001670a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00018450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000834  00000000  00000000  00018f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e443  00000000  00000000  00019734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaad  00000000  00000000  00057b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194566  00000000  00000000  00066624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fab8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b4  00000000  00000000  001fabd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001fdc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005be8 	.word	0x08005be8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08005be8 	.word	0x08005be8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fa0e 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f824 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f8d6 	bl	8000968 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007bc:	f000 f888 	bl	80008d0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(num,"%d\n",tx_buff);
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <main+0x44>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	490b      	ldr	r1, [pc, #44]	@ (80007f4 <main+0x48>)
 80007c8:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <main+0x4c>)
 80007ca:	f004 fd6d 	bl	80052a8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)num, strlen(num), 1000);
 80007ce:	480a      	ldr	r0, [pc, #40]	@ (80007f8 <main+0x4c>)
 80007d0:	f7ff fd86 	bl	80002e0 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007dc:	4906      	ldr	r1, [pc, #24]	@ (80007f8 <main+0x4c>)
 80007de:	4807      	ldr	r0, [pc, #28]	@ (80007fc <main+0x50>)
 80007e0:	f003 fc48 	bl	8004074 <HAL_UART_Transmit>
//	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	    HAL_Delay(2000);
 80007e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007e8:	f000 fa84 	bl	8000cf4 <HAL_Delay>
	  sprintf(num,"%d\n",tx_buff);
 80007ec:	bf00      	nop
 80007ee:	e7e7      	b.n	80007c0 <main+0x14>
 80007f0:	24000008 	.word	0x24000008
 80007f4:	08005c00 	.word	0x08005c00
 80007f8:	24000114 	.word	0x24000114
 80007fc:	24000080 	.word	0x24000080

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	@ 0x70
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	224c      	movs	r2, #76	@ 0x4c
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fd6a 	bl	80052e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2220      	movs	r2, #32
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fd64 	bl	80052e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000820:	2004      	movs	r0, #4
 8000822:	f000 fd2b 	bl	800127c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <SystemClock_Config+0xc8>)
 800082c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082e:	4a26      	ldr	r2, [pc, #152]	@ (80008c8 <SystemClock_Config+0xc8>)
 8000830:	f023 0301 	bic.w	r3, r3, #1
 8000834:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <SystemClock_Config+0xc8>)
 8000838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <SystemClock_Config+0xcc>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a21      	ldr	r2, [pc, #132]	@ (80008cc <SystemClock_Config+0xcc>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <SystemClock_Config+0xcc>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000858:	bf00      	nop
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <SystemClock_Config+0xcc>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000866:	d1f8      	bne.n	800085a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800086c:	2301      	movs	r3, #1
 800086e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2340      	movs	r3, #64	@ 0x40
 8000872:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fd57 	bl	8001330 <HAL_RCC_OscConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000888:	f000 f888 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088c:	233f      	movs	r3, #63	@ 0x3f
 800088e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 f997 	bl	8001be4 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008bc:	f000 f86e 	bl	800099c <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3770      	adds	r7, #112	@ 0x70
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58000400 	.word	0x58000400
 80008cc:	58024800 	.word	0x58024800

080008d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_USART1_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 800091a:	f003 fb5b 	bl	8003fd4 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f83a 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 800092c:	f004 fbf1 	bl	8005112 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f831 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 800093e:	f004 fc26 	bl	800518e <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f828 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART1_UART_Init+0x90>)
 800094e:	f004 fba7 	bl	80050a0 <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f820 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000080 	.word	0x24000080
 8000964:	40011000 	.word	0x40011000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <MX_GPIO_Init+0x30>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	4a08      	ldr	r2, [pc, #32]	@ (8000998 <MX_GPIO_Init+0x30>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_GPIO_Init+0x30>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	58024400 	.word	0x58024400

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_MspInit+0x30>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x30>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x30>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58024400 	.word	0x58024400

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0bc      	sub	sp, #240	@ 0xf0
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	22c8      	movs	r2, #200	@ 0xc8
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fc73 	bl	80052e8 <memset>
  if(huart->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a27      	ldr	r2, [pc, #156]	@ (8000aa4 <HAL_UART_MspInit+0xc8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d146      	bne.n	8000a9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a0c:	f04f 0201 	mov.w	r2, #1
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fc6a 	bl	80022fc <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a2e:	f7ff ffb5 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a32:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a42:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000a6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_UART_MspInit+0xd0>)
 8000a96:	f000 fa41 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a9a:	bf00      	nop
 8000a9c:	37f0      	adds	r7, #240	@ 0xf0
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	58020000 	.word	0x58020000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f8d5 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f004 fbda 	bl	80052f8 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	24080000 	.word	0x24080000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2400011c 	.word	0x2400011c
 8000b78:	24000270 	.word	0x24000270

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b80:	f7ff fd7e 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f004 fbab 	bl	8005304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fdfd 	bl	80007ac <main>
  bx  lr
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bbc:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000bc0:	08005c80 	.word	0x08005c80
  ldr r2, =_sbss
 8000bc4:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8000bc8:	2400026c 	.word	0x2400026c

08000bcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC3_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f000 f96e 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bdc:	f001 f9b8 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8000be0:	4602      	mov	r2, r0
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_Init+0x68>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	4913      	ldr	r1, [pc, #76]	@ (8000c3c <HAL_Init+0x6c>)
 8000bee:	5ccb      	ldrb	r3, [r1, r3]
 8000bf0:	f003 031f 	and.w	r3, r3, #31
 8000bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_Init+0x68>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_Init+0x6c>)
 8000c04:	5cd3      	ldrb	r3, [r2, r3]
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c10:	4a0b      	ldr	r2, [pc, #44]	@ (8000c40 <HAL_Init+0x70>)
 8000c12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c14:	4a0b      	ldr	r2, [pc, #44]	@ (8000c44 <HAL_Init+0x74>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f814 	bl	8000c48 <HAL_InitTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e002      	b.n	8000c30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2a:	f7ff febd 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	08005c04 	.word	0x08005c04
 8000c40:	24000004 	.word	0x24000004
 8000c44:	24000000 	.word	0x24000000

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <HAL_InitTick+0x60>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e021      	b.n	8000ca0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_InitTick+0x64>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_InitTick+0x60>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f945 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f91d 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <HAL_InitTick+0x68>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	24000010 	.word	0x24000010
 8000cac:	24000000 	.word	0x24000000
 8000cb0:	2400000c 	.word	0x2400000c

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	24000010 	.word	0x24000010
 8000cd8:	24000120 	.word	0x24000120

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	24000120 	.word	0x24000120

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000010 	.word	0x24000010

08000d3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetREVID+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	0c1b      	lsrs	r3, r3, #16
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	5c001000 	.word	0x5c001000

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x40>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x40>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	05fa0000 	.word	0x05fa0000

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	@ (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	@ (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	@ 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff47 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff5e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff90 	bl	8000e0c <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5f 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffb2 	bl	8000e74 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f2a:	4b89      	ldr	r3, [pc, #548]	@ (8001150 <HAL_GPIO_Init+0x234>)
 8000f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f2e:	e194      	b.n	800125a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8186 	beq.w	8001254 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d005      	beq.n	8000f60 <HAL_GPIO_Init+0x44>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d130      	bne.n	8000fc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f96:	2201      	movs	r2, #1
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 0201 	and.w	r2, r3, #1
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d017      	beq.n	8000ffe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d123      	bne.n	8001052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	69b9      	ldr	r1, [r7, #24]
 800104e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0203 	and.w	r2, r3, #3
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 80e0 	beq.w	8001254 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <HAL_GPIO_Init+0x238>)
 8001096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800109a:	4a2e      	ldr	r2, [pc, #184]	@ (8001154 <HAL_GPIO_Init+0x238>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <HAL_GPIO_Init+0x238>)
 80010a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a29      	ldr	r2, [pc, #164]	@ (8001158 <HAL_GPIO_Init+0x23c>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a20      	ldr	r2, [pc, #128]	@ (800115c <HAL_GPIO_Init+0x240>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d052      	beq.n	8001184 <HAL_GPIO_Init+0x268>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <HAL_GPIO_Init+0x244>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d031      	beq.n	800114a <HAL_GPIO_Init+0x22e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <HAL_GPIO_Init+0x248>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d02b      	beq.n	8001146 <HAL_GPIO_Init+0x22a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001168 <HAL_GPIO_Init+0x24c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d025      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <HAL_GPIO_Init+0x250>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01f      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <HAL_GPIO_Init+0x254>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a1a      	ldr	r2, [pc, #104]	@ (8001174 <HAL_GPIO_Init+0x258>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <HAL_GPIO_Init+0x25c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a18      	ldr	r2, [pc, #96]	@ (800117c <HAL_GPIO_Init+0x260>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x212>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <HAL_GPIO_Init+0x264>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x20e>
 8001126:	2309      	movs	r3, #9
 8001128:	e02d      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800112a:	230a      	movs	r3, #10
 800112c:	e02b      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800112e:	2308      	movs	r3, #8
 8001130:	e029      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001132:	2307      	movs	r3, #7
 8001134:	e027      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001136:	2306      	movs	r3, #6
 8001138:	e025      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800113a:	2305      	movs	r3, #5
 800113c:	e023      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800113e:	2304      	movs	r3, #4
 8001140:	e021      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001142:	2303      	movs	r3, #3
 8001144:	e01f      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001146:	2302      	movs	r3, #2
 8001148:	e01d      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800114a:	2301      	movs	r3, #1
 800114c:	e01b      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800114e:	bf00      	nop
 8001150:	58000080 	.word	0x58000080
 8001154:	58024400 	.word	0x58024400
 8001158:	58000400 	.word	0x58000400
 800115c:	58020000 	.word	0x58020000
 8001160:	58020400 	.word	0x58020400
 8001164:	58020800 	.word	0x58020800
 8001168:	58020c00 	.word	0x58020c00
 800116c:	58021000 	.word	0x58021000
 8001170:	58021400 	.word	0x58021400
 8001174:	58021800 	.word	0x58021800
 8001178:	58021c00 	.word	0x58021c00
 800117c:	58022000 	.word	0x58022000
 8001180:	58022400 	.word	0x58022400
 8001184:	2300      	movs	r3, #0
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	f002 0203 	and.w	r2, r2, #3
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	4093      	lsls	r3, r2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001196:	4938      	ldr	r1, [pc, #224]	@ (8001278 <HAL_GPIO_Init+0x35c>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	3301      	adds	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	f47f ae63 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3724      	adds	r7, #36	@ 0x24
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	58000400 	.word	0x58000400

0800127c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <HAL_PWREx_ConfigSupply+0xb0>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	2b06      	cmp	r3, #6
 800128e:	d00a      	beq.n	80012a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <HAL_PWREx_ConfigSupply+0xb0>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d001      	beq.n	80012a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e040      	b.n	8001324 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e03e      	b.n	8001324 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012a6:	4b21      	ldr	r3, [pc, #132]	@ (800132c <HAL_PWREx_ConfigSupply+0xb0>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80012ae:	491f      	ldr	r1, [pc, #124]	@ (800132c <HAL_PWREx_ConfigSupply+0xb0>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012b6:	f7ff fd11 	bl	8000cdc <HAL_GetTick>
 80012ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012bc:	e009      	b.n	80012d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012be:	f7ff fd0d 	bl	8000cdc <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012cc:	d901      	bls.n	80012d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e028      	b.n	8001324 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_PWREx_ConfigSupply+0xb0>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012de:	d1ee      	bne.n	80012be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b1e      	cmp	r3, #30
 80012e4:	d008      	beq.n	80012f8 <HAL_PWREx_ConfigSupply+0x7c>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80012ea:	d005      	beq.n	80012f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b1d      	cmp	r3, #29
 80012f0:	d002      	beq.n	80012f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80012f6:	d114      	bne.n	8001322 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80012f8:	f7ff fcf0 	bl	8000cdc <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80012fe:	e009      	b.n	8001314 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001300:	f7ff fcec 	bl	8000cdc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800130e:	d901      	bls.n	8001314 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e007      	b.n	8001324 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_PWREx_ConfigSupply+0xb0>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d1ee      	bne.n	8001300 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58024800 	.word	0x58024800

08001330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	@ 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	f000 bc48 	b.w	8001bd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8088 	beq.w	8001462 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001352:	4b99      	ldr	r3, [pc, #612]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800135c:	4b96      	ldr	r3, [pc, #600]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001364:	2b10      	cmp	r3, #16
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x48>
 8001368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136a:	2b18      	cmp	r3, #24
 800136c:	d111      	bne.n	8001392 <HAL_RCC_OscConfig+0x62>
 800136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001378:	4b8f      	ldr	r3, [pc, #572]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d06d      	beq.n	8001460 <HAL_RCC_OscConfig+0x130>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d169      	bne.n	8001460 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	f000 bc21 	b.w	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x7a>
 800139c:	4b86      	ldr	r3, [pc, #536]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a85      	ldr	r2, [pc, #532]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0xd8>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x9c>
 80013b2:	4b81      	ldr	r3, [pc, #516]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a80      	ldr	r2, [pc, #512]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b7e      	ldr	r3, [pc, #504]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a7d      	ldr	r2, [pc, #500]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xd8>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 80013d6:	4b78      	ldr	r3, [pc, #480]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a77      	ldr	r2, [pc, #476]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b75      	ldr	r3, [pc, #468]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a74      	ldr	r2, [pc, #464]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xd8>
 80013f0:	4b71      	ldr	r3, [pc, #452]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a70      	ldr	r2, [pc, #448]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b6e      	ldr	r3, [pc, #440]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6d      	ldr	r2, [pc, #436]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fc64 	bl	8000cdc <HAL_GetTick>
 8001414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fc60 	bl	8000cdc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e3d4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800142a:	4b63      	ldr	r3, [pc, #396]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xe8>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc50 	bl	8000cdc <HAL_GetTick>
 800143c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc4c 	bl	8000cdc <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e3c0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001452:	4b59      	ldr	r3, [pc, #356]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x110>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80ca 	beq.w	8001604 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001470:	4b51      	ldr	r3, [pc, #324]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001478:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800147a:	4b4f      	ldr	r3, [pc, #316]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 800147c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_RCC_OscConfig+0x166>
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	2b18      	cmp	r3, #24
 800148a:	d156      	bne.n	800153a <HAL_RCC_OscConfig+0x20a>
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d151      	bne.n	800153a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001496:	4b48      	ldr	r3, [pc, #288]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x17e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e392      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014ae:	4b42      	ldr	r3, [pc, #264]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0219 	bic.w	r2, r3, #25
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	493f      	ldr	r1, [pc, #252]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc0c 	bl	8000cdc <HAL_GetTick>
 80014c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fc08 	bl	8000cdc <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e37c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	f7ff fc29 	bl	8000d3c <HAL_GetREVID>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d817      	bhi.n	8001524 <HAL_RCC_OscConfig+0x1f4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b40      	cmp	r3, #64	@ 0x40
 80014fa:	d108      	bne.n	800150e <HAL_RCC_OscConfig+0x1de>
 80014fc:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001504:	4a2c      	ldr	r2, [pc, #176]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	e07a      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	031b      	lsls	r3, r3, #12
 800151c:	4926      	ldr	r1, [pc, #152]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001522:	e06f      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	4921      	ldr	r1, [pc, #132]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	e064      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d047      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0219 	bic.w	r2, r3, #25
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	491a      	ldr	r1, [pc, #104]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fbc2 	bl	8000cdc <HAL_GetTick>
 8001558:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fbbe 	bl	8000cdc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e332      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	f7ff fbdf 	bl	8000d3c <HAL_GetREVID>
 800157e:	4603      	mov	r3, r0
 8001580:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001584:	4293      	cmp	r3, r2
 8001586:	d819      	bhi.n	80015bc <HAL_RCC_OscConfig+0x28c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b40      	cmp	r3, #64	@ 0x40
 800158e:	d108      	bne.n	80015a2 <HAL_RCC_OscConfig+0x272>
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159e:	6053      	str	r3, [r2, #4]
 80015a0:	e030      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
 80015a2:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	031b      	lsls	r3, r3, #12
 80015b0:	4901      	ldr	r1, [pc, #4]	@ (80015b8 <HAL_RCC_OscConfig+0x288>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
 80015b6:	e025      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
 80015b8:	58024400 	.word	0x58024400
 80015bc:	4b9a      	ldr	r3, [pc, #616]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	4997      	ldr	r1, [pc, #604]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b95      	ldr	r3, [pc, #596]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a94      	ldr	r2, [pc, #592]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fb7d 	bl	8000cdc <HAL_GetTick>
 80015e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb79 	bl	8000cdc <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e2ed      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015f8:	4b8b      	ldr	r3, [pc, #556]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a9 	beq.w	8001764 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001612:	4b85      	ldr	r3, [pc, #532]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800161a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800161c:	4b82      	ldr	r3, [pc, #520]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800161e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001620:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b08      	cmp	r3, #8
 8001626:	d007      	beq.n	8001638 <HAL_RCC_OscConfig+0x308>
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b18      	cmp	r3, #24
 800162c:	d13a      	bne.n	80016a4 <HAL_RCC_OscConfig+0x374>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d135      	bne.n	80016a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001638:	4b7b      	ldr	r3, [pc, #492]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x320>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b80      	cmp	r3, #128	@ 0x80
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e2c1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001650:	f7ff fb74 	bl	8000d3c <HAL_GetREVID>
 8001654:	4603      	mov	r3, r0
 8001656:	f241 0203 	movw	r2, #4099	@ 0x1003
 800165a:	4293      	cmp	r3, r2
 800165c:	d817      	bhi.n	800168e <HAL_RCC_OscConfig+0x35e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	2b20      	cmp	r3, #32
 8001664:	d108      	bne.n	8001678 <HAL_RCC_OscConfig+0x348>
 8001666:	4b70      	ldr	r3, [pc, #448]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800166e:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001674:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001676:	e075      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001678:	4b6b      	ldr	r3, [pc, #428]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	069b      	lsls	r3, r3, #26
 8001686:	4968      	ldr	r1, [pc, #416]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800168c:	e06a      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800168e:	4b66      	ldr	r3, [pc, #408]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	4962      	ldr	r1, [pc, #392]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016a2:	e05f      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d042      	beq.n	8001732 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb10 	bl	8000cdc <HAL_GetTick>
 80016bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016c0:	f7ff fb0c 	bl	8000cdc <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e280      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016d2:	4b55      	ldr	r3, [pc, #340]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016de:	f7ff fb2d 	bl	8000d3c <HAL_GetREVID>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d817      	bhi.n	800171c <HAL_RCC_OscConfig+0x3ec>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d108      	bne.n	8001706 <HAL_RCC_OscConfig+0x3d6>
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80016fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80016fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001702:	6053      	str	r3, [r2, #4]
 8001704:	e02e      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
 8001706:	4b48      	ldr	r3, [pc, #288]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	069b      	lsls	r3, r3, #26
 8001714:	4944      	ldr	r1, [pc, #272]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
 800171a:	e023      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
 800171c:	4b42      	ldr	r3, [pc, #264]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	493f      	ldr	r1, [pc, #252]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
 8001730:	e018      	b.n	8001764 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a3c      	ldr	r2, [pc, #240]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 8001738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800173c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff facd 	bl	8000cdc <HAL_GetTick>
 8001742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001746:	f7ff fac9 	bl	8000cdc <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e23d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001758:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d036      	beq.n	80017de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d019      	beq.n	80017ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001778:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800177c:	4a2a      	ldr	r2, [pc, #168]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff faaa 	bl	8000cdc <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff faa6 	bl	8000cdc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e21a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x45c>
 80017aa:	e018      	b.n	80017de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fa90 	bl	8000cdc <HAL_GetTick>
 80017bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fa8c 	bl	8000cdc <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e200      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d039      	beq.n	800185e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d01c      	beq.n	800182c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa6d 	bl	8000cdc <HAL_GetTick>
 8001802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001806:	f7ff fa69 	bl	8000cdc <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1dd      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001818:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x4d6>
 8001824:	e01b      	b.n	800185e <HAL_RCC_OscConfig+0x52e>
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800182c:	4b9b      	ldr	r3, [pc, #620]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a9a      	ldr	r2, [pc, #616]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001832:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001838:	f7ff fa50 	bl	8000cdc <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001840:	f7ff fa4c 	bl	8000cdc <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1c0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001852:	4b92      	ldr	r3, [pc, #584]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8081 	beq.w	800196e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800186c:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa0 <HAL_RCC_OscConfig+0x770>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a8b      	ldr	r2, [pc, #556]	@ (8001aa0 <HAL_RCC_OscConfig+0x770>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001878:	f7ff fa30 	bl	8000cdc <HAL_GetTick>
 800187c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7ff fa2c 	bl	8000cdc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1a0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001892:	4b83      	ldr	r3, [pc, #524]	@ (8001aa0 <HAL_RCC_OscConfig+0x770>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_OscConfig+0x584>
 80018a6:	4b7d      	ldr	r3, [pc, #500]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018aa:	4a7c      	ldr	r2, [pc, #496]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b2:	e02d      	b.n	8001910 <HAL_RCC_OscConfig+0x5e0>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5a6>
 80018bc:	4b77      	ldr	r3, [pc, #476]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c0:	4a76      	ldr	r2, [pc, #472]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c8:	4b74      	ldr	r3, [pc, #464]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a73      	ldr	r2, [pc, #460]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x5e0>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x5c8>
 80018de:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ea:	4b6c      	ldr	r3, [pc, #432]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ee:	4a6b      	ldr	r2, [pc, #428]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x5e0>
 80018f8:	4b68      	ldr	r3, [pc, #416]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a67      	ldr	r2, [pc, #412]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	4b65      	ldr	r3, [pc, #404]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001908:	4a64      	ldr	r2, [pc, #400]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f9e0 	bl	8000cdc <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff f9dc 	bl	8000cdc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e14e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001936:	4b59      	ldr	r3, [pc, #356]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ee      	beq.n	8001920 <HAL_RCC_OscConfig+0x5f0>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f9ca 	bl	8000cdc <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff f9c6 	bl	8000cdc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e138      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001962:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 812d 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001978:	4b48      	ldr	r3, [pc, #288]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001980:	2b18      	cmp	r3, #24
 8001982:	f000 80bd 	beq.w	8001b00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	2b02      	cmp	r3, #2
 800198c:	f040 809e 	bne.w	8001acc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a41      	ldr	r2, [pc, #260]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f99e 	bl	8000cdc <HAL_GetTick>
 80019a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f99a 	bl	8000cdc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e10e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019b6:	4b39      	ldr	r3, [pc, #228]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	4b36      	ldr	r3, [pc, #216]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80019c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019c6:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <HAL_RCC_OscConfig+0x774>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	430a      	orrs	r2, r1
 80019d6:	4931      	ldr	r1, [pc, #196]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	628b      	str	r3, [r1, #40]	@ 0x28
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	3b01      	subs	r3, #1
 80019ec:	025b      	lsls	r3, r3, #9
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f6:	3b01      	subs	r3, #1
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	3b01      	subs	r3, #1
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001a0c:	4923      	ldr	r1, [pc, #140]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a16:	4a21      	ldr	r2, [pc, #132]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_RCC_OscConfig+0x778>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a2a:	00d2      	lsls	r2, r2, #3
 8001a2c:	491b      	ldr	r1, [pc, #108]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a36:	f023 020c 	bic.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4917      	ldr	r1, [pc, #92]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a44:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a48:	f023 0202 	bic.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	4912      	ldr	r1, [pc, #72]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	4a10      	ldr	r2, [pc, #64]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a66:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a7a:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a04      	ldr	r2, [pc, #16]	@ (8001a9c <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff f923 	bl	8000cdc <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a98:	e011      	b.n	8001abe <HAL_RCC_OscConfig+0x78e>
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	58024800 	.word	0x58024800
 8001aa4:	fffffc0c 	.word	0xfffffc0c
 8001aa8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f916 	bl	8000cdc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e08a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001abe:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x77c>
 8001aca:	e082      	b.n	8001bd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b43      	ldr	r3, [pc, #268]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a42      	ldr	r2, [pc, #264]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f900 	bl	8000cdc <HAL_GetTick>
 8001adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f8fc 	bl	8000cdc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e070      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x7b0>
 8001afe:	e068      	b.n	8001bd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b00:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b06:	4b35      	ldr	r3, [pc, #212]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d031      	beq.n	8001b78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0203 	and.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d12a      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d122      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d11a      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0a5b      	lsrs	r3, r3, #9
 8001b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d111      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d108      	bne.n	8001b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	0e1b      	lsrs	r3, r3, #24
 8001b6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e02b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d01f      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b96:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b9e:	f7ff f89d 	bl	8000cdc <HAL_GetTick>
 8001ba2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ba4:	bf00      	nop
 8001ba6:	f7ff f899 	bl	8000cdc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d0f9      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_RCC_OscConfig+0x8b0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bbe:	00d2      	lsls	r2, r2, #3
 8001bc0:	4906      	ldr	r1, [pc, #24]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_RCC_OscConfig+0x8ac>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3730      	adds	r7, #48	@ 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	ffff0007 	.word	0xffff0007

08001be4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e19c      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b87      	ldr	r3, [pc, #540]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 020f 	bic.w	r2, r3, #15
 8001c0e:	4985      	ldr	r1, [pc, #532]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b83      	ldr	r3, [pc, #524]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e184      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	4b7b      	ldr	r3, [pc, #492]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d908      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c44:	4b78      	ldr	r3, [pc, #480]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	4975      	ldr	r1, [pc, #468]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	4b70      	ldr	r3, [pc, #448]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d908      	bls.n	8001c84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c72:	4b6d      	ldr	r3, [pc, #436]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	496a      	ldr	r1, [pc, #424]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	4b64      	ldr	r3, [pc, #400]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d908      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ca0:	4b61      	ldr	r3, [pc, #388]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	495e      	ldr	r1, [pc, #376]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d010      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	4b59      	ldr	r3, [pc, #356]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d908      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cce:	4b56      	ldr	r3, [pc, #344]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4953      	ldr	r1, [pc, #332]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d010      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d908      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f023 020f 	bic.w	r2, r3, #15
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4947      	ldr	r1, [pc, #284]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d055      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d1a:	4b43      	ldr	r3, [pc, #268]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4940      	ldr	r1, [pc, #256]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d34:	4b3c      	ldr	r3, [pc, #240]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d121      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0f6      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d4c:	4b36      	ldr	r3, [pc, #216]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d115      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0ea      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d64:	4b30      	ldr	r3, [pc, #192]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0de      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d74:	4b2c      	ldr	r3, [pc, #176]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0d6      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d84:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f023 0207 	bic.w	r2, r3, #7
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4925      	ldr	r1, [pc, #148]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d96:	f7fe ffa1 	bl	8000cdc <HAL_GetTick>
 8001d9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9e:	f7fe ff9d 	bl	8000cdc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0be      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d1eb      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d208      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f023 020f 	bic.w	r2, r3, #15
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	490e      	ldr	r1, [pc, #56]	@ (8001e28 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d214      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 020f 	bic.w	r2, r3, #15
 8001e0a:	4906      	ldr	r1, [pc, #24]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <HAL_RCC_ClockConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e086      	b.n	8001f32 <HAL_RCC_ClockConfig+0x34e>
 8001e24:	52002000 	.word	0x52002000
 8001e28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d208      	bcs.n	8001e5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e48:	4b3c      	ldr	r3, [pc, #240]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4939      	ldr	r1, [pc, #228]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d010      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	4b34      	ldr	r3, [pc, #208]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d208      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e76:	4b31      	ldr	r3, [pc, #196]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	492e      	ldr	r1, [pc, #184]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d010      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	4b28      	ldr	r3, [pc, #160]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d208      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ea4:	4b25      	ldr	r3, [pc, #148]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4922      	ldr	r1, [pc, #136]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d010      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d208      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4917      	ldr	r1, [pc, #92]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ee4:	f000 f834 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	4912      	ldr	r1, [pc, #72]	@ (8001f40 <HAL_RCC_ClockConfig+0x35c>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_RCC_ClockConfig+0x358>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <HAL_RCC_ClockConfig+0x35c>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <HAL_RCC_ClockConfig+0x360>)
 8001f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <HAL_RCC_ClockConfig+0x364>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_RCC_ClockConfig+0x368>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fe8e 	bl	8000c48 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	08005c04 	.word	0x08005c04
 8001f44:	24000004 	.word	0x24000004
 8001f48:	24000000 	.word	0x24000000
 8001f4c:	2400000c 	.word	0x2400000c

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f56:	4bb3      	ldr	r3, [pc, #716]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f5e:	2b18      	cmp	r3, #24
 8001f60:	f200 8155 	bhi.w	800220e <HAL_RCC_GetSysClockFreq+0x2be>
 8001f64:	a201      	add	r2, pc, #4	@ (adr r2, 8001f6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08001fd1 	.word	0x08001fd1
 8001f70:	0800220f 	.word	0x0800220f
 8001f74:	0800220f 	.word	0x0800220f
 8001f78:	0800220f 	.word	0x0800220f
 8001f7c:	0800220f 	.word	0x0800220f
 8001f80:	0800220f 	.word	0x0800220f
 8001f84:	0800220f 	.word	0x0800220f
 8001f88:	0800220f 	.word	0x0800220f
 8001f8c:	08001ff7 	.word	0x08001ff7
 8001f90:	0800220f 	.word	0x0800220f
 8001f94:	0800220f 	.word	0x0800220f
 8001f98:	0800220f 	.word	0x0800220f
 8001f9c:	0800220f 	.word	0x0800220f
 8001fa0:	0800220f 	.word	0x0800220f
 8001fa4:	0800220f 	.word	0x0800220f
 8001fa8:	0800220f 	.word	0x0800220f
 8001fac:	08001ffd 	.word	0x08001ffd
 8001fb0:	0800220f 	.word	0x0800220f
 8001fb4:	0800220f 	.word	0x0800220f
 8001fb8:	0800220f 	.word	0x0800220f
 8001fbc:	0800220f 	.word	0x0800220f
 8001fc0:	0800220f 	.word	0x0800220f
 8001fc4:	0800220f 	.word	0x0800220f
 8001fc8:	0800220f 	.word	0x0800220f
 8001fcc:	08002003 	.word	0x08002003
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fd0:	4b94      	ldr	r3, [pc, #592]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fdc:	4b91      	ldr	r3, [pc, #580]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	4a90      	ldr	r2, [pc, #576]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001fee:	e111      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ff0:	4b8d      	ldr	r3, [pc, #564]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff2:	61bb      	str	r3, [r7, #24]
      break;
 8001ff4:	e10e      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ff8:	61bb      	str	r3, [r7, #24]
      break;
 8001ffa:	e10b      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ffe:	61bb      	str	r3, [r7, #24]
      break;
 8002000:	e108      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002002:	4b88      	ldr	r3, [pc, #544]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800200c:	4b85      	ldr	r3, [pc, #532]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002016:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002018:	4b82      	ldr	r3, [pc, #520]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002022:	4b80      	ldr	r3, [pc, #512]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002026:	08db      	lsrs	r3, r3, #3
 8002028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80e1 	beq.w	8002208 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b02      	cmp	r3, #2
 800204a:	f000 8083 	beq.w	8002154 <HAL_RCC_GetSysClockFreq+0x204>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b02      	cmp	r3, #2
 8002052:	f200 80a1 	bhi.w	8002198 <HAL_RCC_GetSysClockFreq+0x248>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x114>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d056      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002062:	e099      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002064:	4b6f      	ldr	r3, [pc, #444]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02d      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002070:	4b6c      	ldr	r3, [pc, #432]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	4a6b      	ldr	r2, [pc, #428]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209a:	4b62      	ldr	r3, [pc, #392]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020ca:	e087      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002238 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020de:	4b51      	ldr	r3, [pc, #324]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800210e:	e065      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800223c <HAL_RCC_GetSysClockFreq+0x2ec>
 800211e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002122:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002132:	ed97 6a02 	vldr	s12, [r7, #8]
 8002136:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002234 <HAL_RCC_GetSysClockFreq+0x2e4>
 800213a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800213e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002152:	e043      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002240 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002166:	4b2f      	ldr	r3, [pc, #188]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002176:	ed97 6a02 	vldr	s12, [r7, #8]
 800217a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002234 <HAL_RCC_GetSysClockFreq+0x2e4>
 800217e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800218a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002196:	e021      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800223c <HAL_RCC_GetSysClockFreq+0x2ec>
 80021a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80021be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	0a5b      	lsrs	r3, r3, #9
 80021e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e6:	3301      	adds	r3, #1
 80021e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80021f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002200:	ee17 3a90 	vmov	r3, s15
 8002204:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002206:	e005      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
      break;
 800220c:	e002      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800220e:	4b07      	ldr	r3, [pc, #28]	@ (800222c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002210:	61bb      	str	r3, [r7, #24]
      break;
 8002212:	bf00      	nop
  }

  return sysclockfreq;
 8002214:	69bb      	ldr	r3, [r7, #24]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3724      	adds	r7, #36	@ 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	58024400 	.word	0x58024400
 8002228:	03d09000 	.word	0x03d09000
 800222c:	003d0900 	.word	0x003d0900
 8002230:	017d7840 	.word	0x017d7840
 8002234:	46000000 	.word	0x46000000
 8002238:	4c742400 	.word	0x4c742400
 800223c:	4a742400 	.word	0x4a742400
 8002240:	4bbebc20 	.word	0x4bbebc20

08002244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800224a:	f7ff fe81 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 800224e:	4602      	mov	r2, r0
 8002250:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCC_GetHCLKFreq+0x50>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	490f      	ldr	r1, [pc, #60]	@ (8002298 <HAL_RCC_GetHCLKFreq+0x54>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002268:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <HAL_RCC_GetHCLKFreq+0x50>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_RCC_GetHCLKFreq+0x54>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_RCC_GetHCLKFreq+0x58>)
 8002280:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002282:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <HAL_RCC_GetHCLKFreq+0x58>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	58024400 	.word	0x58024400
 8002298:	08005c04 	.word	0x08005c04
 800229c:	24000004 	.word	0x24000004
 80022a0:	24000000 	.word	0x24000000

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80022a8:	f7ff ffcc 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4904      	ldr	r1, [pc, #16]	@ (80022cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	58024400 	.word	0x58024400
 80022cc:	08005c04 	.word	0x08005c04

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80022d4:	f7ff ffb6 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	@ (80022f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	58024400 	.word	0x58024400
 80022f8:	08005c04 	.word	0x08005c04

080022fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002300:	b0cc      	sub	sp, #304	@ 0x130
 8002302:	af00      	add	r7, sp, #0
 8002304:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002308:	2300      	movs	r3, #0
 800230a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800230e:	2300      	movs	r3, #0
 8002310:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002320:	2500      	movs	r5, #0
 8002322:	ea54 0305 	orrs.w	r3, r4, r5
 8002326:	d049      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800232c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002332:	d02f      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002334:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002338:	d828      	bhi.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800233a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800233e:	d01a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002340:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002344:	d822      	bhi.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800234a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800234e:	d007      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002350:	e01c      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002352:	4bb8      	ldr	r3, [pc, #736]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	4ab7      	ldr	r2, [pc, #732]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800235e:	e01a      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002364:	3308      	adds	r3, #8
 8002366:	2102      	movs	r1, #2
 8002368:	4618      	mov	r0, r3
 800236a:	f001 fccf 	bl	8003d0c <RCCEx_PLL2_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002374:	e00f      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800237a:	3328      	adds	r3, #40	@ 0x28
 800237c:	2102      	movs	r1, #2
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fd76 	bl	8003e70 <RCCEx_PLL3_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800238a:	e004      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002392:	e000      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800239e:	4ba5      	ldr	r3, [pc, #660]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80023a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ac:	4aa1      	ldr	r2, [pc, #644]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023ae:	430b      	orrs	r3, r1
 80023b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80023b2:	e003      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80023c8:	f04f 0900 	mov.w	r9, #0
 80023cc:	ea58 0309 	orrs.w	r3, r8, r9
 80023d0:	d047      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80023d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d82a      	bhi.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80023dc:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f9 	.word	0x080023f9
 80023e8:	08002407 	.word	0x08002407
 80023ec:	0800241d 	.word	0x0800241d
 80023f0:	0800243b 	.word	0x0800243b
 80023f4:	0800243b 	.word	0x0800243b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	4a8d      	ldr	r2, [pc, #564]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002404:	e01a      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800240a:	3308      	adds	r3, #8
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fc7c 	bl	8003d0c <RCCEx_PLL2_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800241a:	e00f      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800241c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002420:	3328      	adds	r3, #40	@ 0x28
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fd23 	bl	8003e70 <RCCEx_PLL3_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002430:	e004      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002438:	e000      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800243a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800243c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002444:	4b7b      	ldr	r3, [pc, #492]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002448:	f023 0107 	bic.w	r1, r3, #7
 800244c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	4a78      	ldr	r2, [pc, #480]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002454:	430b      	orrs	r3, r1
 8002456:	6513      	str	r3, [r2, #80]	@ 0x50
 8002458:	e003      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800245e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800246e:	f04f 0b00 	mov.w	fp, #0
 8002472:	ea5a 030b 	orrs.w	r3, sl, fp
 8002476:	d04c      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800247c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002482:	d030      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002488:	d829      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800248a:	2bc0      	cmp	r3, #192	@ 0xc0
 800248c:	d02d      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800248e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002490:	d825      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002492:	2b80      	cmp	r3, #128	@ 0x80
 8002494:	d018      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002496:	2b80      	cmp	r3, #128	@ 0x80
 8002498:	d821      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800249e:	2b40      	cmp	r3, #64	@ 0x40
 80024a0:	d007      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80024a2:	e01c      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024a4:	4b63      	ldr	r3, [pc, #396]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	4a62      	ldr	r2, [pc, #392]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024b0:	e01c      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024b6:	3308      	adds	r3, #8
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 fc26 	bl	8003d0c <RCCEx_PLL2_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024c6:	e011      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024cc:	3328      	adds	r3, #40	@ 0x28
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 fccd 	bl	8003e70 <RCCEx_PLL3_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024dc:	e006      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80024e4:	e002      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80024ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80024fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002502:	4a4c      	ldr	r2, [pc, #304]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002504:	430b      	orrs	r3, r1
 8002506:	6513      	str	r3, [r2, #80]	@ 0x50
 8002508:	e003      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800250a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800250e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800251e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002528:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800252c:	460b      	mov	r3, r1
 800252e:	4313      	orrs	r3, r2
 8002530:	d053      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002532:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002536:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800253a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800253e:	d035      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002540:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002544:	d82e      	bhi.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002546:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800254a:	d031      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800254c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002550:	d828      	bhi.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002552:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002556:	d01a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800255c:	d822      	bhi.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002562:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002566:	d007      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002568:	e01c      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800256a:	4b32      	ldr	r3, [pc, #200]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	4a31      	ldr	r2, [pc, #196]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002576:	e01c      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800257c:	3308      	adds	r3, #8
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f001 fbc3 	bl	8003d0c <RCCEx_PLL2_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800258c:	e011      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800258e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002592:	3328      	adds	r3, #40	@ 0x28
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fc6a 	bl	8003e70 <RCCEx_PLL3_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025a2:	e006      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025ac:	bf00      	nop
 80025ae:	e000      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10b      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80025ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80025c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80025ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d0:	e003      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80025da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80025e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80025f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80025f4:	460b      	mov	r3, r1
 80025f6:	4313      	orrs	r3, r2
 80025f8:	d056      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80025fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002606:	d038      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800260c:	d831      	bhi.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800260e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002612:	d034      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002614:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002618:	d82b      	bhi.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800261a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800261e:	d01d      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002620:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002624:	d825      	bhi.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800262a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002630:	e01f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002632:	bf00      	nop
 8002634:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002638:	4ba2      	ldr	r3, [pc, #648]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	4aa1      	ldr	r2, [pc, #644]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800263e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002644:	e01c      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800264a:	3308      	adds	r3, #8
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f001 fb5c 	bl	8003d0c <RCCEx_PLL2_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800265a:	e011      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800265c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002660:	3328      	adds	r3, #40	@ 0x28
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fc03 	bl	8003e70 <RCCEx_PLL3_Config>
 800266a:	4603      	mov	r3, r0
 800266c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002670:	e006      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002678:	e002      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800267e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002680:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002688:	4b8e      	ldr	r3, [pc, #568]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002698:	4a8a      	ldr	r2, [pc, #552]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800269a:	430b      	orrs	r3, r1
 800269c:	6593      	str	r3, [r2, #88]	@ 0x58
 800269e:	e003      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80026b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80026be:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80026c2:	460b      	mov	r3, r1
 80026c4:	4313      	orrs	r3, r2
 80026c6:	d03a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80026c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	2b30      	cmp	r3, #48	@ 0x30
 80026d0:	d01f      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80026d2:	2b30      	cmp	r3, #48	@ 0x30
 80026d4:	d819      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d00c      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d815      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d019      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d111      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e6:	4b77      	ldr	r3, [pc, #476]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ea:	4a76      	ldr	r2, [pc, #472]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80026f2:	e011      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026f8:	3308      	adds	r3, #8
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 fb05 	bl	8003d0c <RCCEx_PLL2_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002708:	e006      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002710:	e002      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002720:	4b68      	ldr	r3, [pc, #416]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002724:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	4a65      	ldr	r2, [pc, #404]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002730:	430b      	orrs	r3, r1
 8002732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002736:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800273a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800273e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800274a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800274e:	2300      	movs	r3, #0
 8002750:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002754:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002758:	460b      	mov	r3, r1
 800275a:	4313      	orrs	r3, r2
 800275c:	d051      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800275e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002768:	d035      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800276a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800276e:	d82e      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002770:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002774:	d031      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002776:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800277a:	d828      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800277c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002780:	d01a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002786:	d822      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002790:	d007      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002792:	e01c      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002794:	4b4b      	ldr	r3, [pc, #300]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	4a4a      	ldr	r2, [pc, #296]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027a0:	e01c      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a6:	3308      	adds	r3, #8
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 faae 	bl	8003d0c <RCCEx_PLL2_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027b6:	e011      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027bc:	3328      	adds	r3, #40	@ 0x28
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fb55 	bl	8003e70 <RCCEx_PLL3_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027cc:	e006      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027e4:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80027ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027f2:	4a34      	ldr	r2, [pc, #208]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800280e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002818:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800281c:	460b      	mov	r3, r1
 800281e:	4313      	orrs	r3, r2
 8002820:	d056      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002826:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800282c:	d033      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800282e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002832:	d82c      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002838:	d02f      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800283a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800283e:	d826      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002840:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002844:	d02b      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002846:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800284a:	d820      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800284c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002850:	d012      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002856:	d81a      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d022      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800285c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002860:	d115      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002866:	3308      	adds	r3, #8
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fa4e 	bl	8003d0c <RCCEx_PLL2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002876:	e015      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800287c:	3328      	adds	r3, #40	@ 0x28
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f001 faf5 	bl	8003e70 <RCCEx_PLL3_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800288c:	e00a      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002894:	e006      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002896:	bf00      	nop
 8002898:	e004      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80028b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028ba:	4a02      	ldr	r2, [pc, #8]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028bc:	430b      	orrs	r3, r1
 80028be:	6513      	str	r3, [r2, #80]	@ 0x50
 80028c0:	e006      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80028c2:	bf00      	nop
 80028c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80028dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80028e6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80028ea:	460b      	mov	r3, r1
 80028ec:	4313      	orrs	r3, r2
 80028ee:	d055      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028fc:	d033      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80028fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002902:	d82c      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002908:	d02f      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290e:	d826      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002910:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002914:	d02b      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800291a:	d820      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800291c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002920:	d012      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002926:	d81a      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d022      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800292c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002930:	d115      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002936:	3308      	adds	r3, #8
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f001 f9e6 	bl	8003d0c <RCCEx_PLL2_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002946:	e015      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800294c:	3328      	adds	r3, #40	@ 0x28
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f001 fa8d 	bl	8003e70 <RCCEx_PLL3_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800295c:	e00a      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002964:	e006      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002974:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800297c:	4bb6      	ldr	r3, [pc, #728]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002980:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002988:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800298c:	4ab2      	ldr	r2, [pc, #712]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800298e:	430b      	orrs	r3, r1
 8002990:	6593      	str	r3, [r2, #88]	@ 0x58
 8002992:	e003      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002994:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002998:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800299c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4313      	orrs	r3, r2
 80029ba:	d02a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80029bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d011      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ca:	d10a      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d0:	3308      	adds	r3, #8
 80029d2:	2101      	movs	r1, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f999 	bl	8003d0c <RCCEx_PLL2_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80029e0:	e004      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80029e8:	e000      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80029ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80029f4:	4b98      	ldr	r3, [pc, #608]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80029fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a02:	4a95      	ldr	r2, [pc, #596]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a04:	430b      	orrs	r3, r1
 8002a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a08:	e003      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002a28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	d037      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a3c:	d00e      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a42:	d816      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d018      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a4c:	d111      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4e:	4b82      	ldr	r3, [pc, #520]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	4a81      	ldr	r2, [pc, #516]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a5a:	e00f      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a60:	3308      	adds	r3, #8
 8002a62:	2101      	movs	r1, #1
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f951 	bl	8003d0c <RCCEx_PLL2_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a70:	e004      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a78:	e000      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a84:	4b74      	ldr	r3, [pc, #464]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a92:	4a71      	ldr	r2, [pc, #452]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a98:	e003      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a9e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002aae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ab8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	d03a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d81d      	bhi.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002acc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002b11 	.word	0x08002b11
 8002ad8:	08002ae5 	.word	0x08002ae5
 8002adc:	08002af3 	.word	0x08002af3
 8002ae0:	08002b11 	.word	0x08002b11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002af0:	e00f      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002af6:	3308      	adds	r3, #8
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f001 f906 	bl	8003d0c <RCCEx_PLL2_Config>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b06:	e004      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b0e:	e000      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10a      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	f023 0103 	bic.w	r1, r3, #3
 8002b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b28:	4a4b      	ldr	r2, [pc, #300]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b2e:	e003      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b34:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002b44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002b52:	460b      	mov	r3, r1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f000 80a0 	beq.w	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5a:	4b40      	ldr	r3, [pc, #256]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b66:	f7fe f8b9 	bl	8000cdc <HAL_GetTick>
 8002b6a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe f8b4 	bl	8000cdc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	@ 0x64
 8002b7e:	d903      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b88:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ed      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002b94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d17a      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002ba8:	4053      	eors	r3, r2
 8002baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bbe:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	4a25      	ldr	r2, [pc, #148]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bca:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	4a22      	ldr	r2, [pc, #136]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bd6:	4a20      	ldr	r2, [pc, #128]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bea:	d118      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe f876 	bl	8000cdc <HAL_GetTick>
 8002bf0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf4:	e00d      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe f871 	bl	8000cdc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d903      	bls.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002c10:	e005      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c12:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0eb      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d130      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c36:	d115      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002c38:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c48:	091a      	lsrs	r2, r3, #4
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	4a02      	ldr	r2, [pc, #8]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6113      	str	r3, [r2, #16]
 8002c54:	e00c      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002c56:	bf00      	nop
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	58024800 	.word	0x58024800
 8002c60:	00ffffcf 	.word	0x00ffffcf
 8002c64:	4bd4      	ldr	r3, [pc, #848]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4ad3      	ldr	r2, [pc, #844]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c6a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c6e:	6113      	str	r3, [r2, #16]
 8002c70:	4bd1      	ldr	r3, [pc, #836]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c72:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002c74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	4acd      	ldr	r2, [pc, #820]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c86:	e008      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c8c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f002 0301 	and.w	r3, r2, #1
 8002ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f000 808b 	beq.w	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc4:	2b28      	cmp	r3, #40	@ 0x28
 8002cc6:	d86b      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002da9 	.word	0x08002da9
 8002cd4:	08002da1 	.word	0x08002da1
 8002cd8:	08002da1 	.word	0x08002da1
 8002cdc:	08002da1 	.word	0x08002da1
 8002ce0:	08002da1 	.word	0x08002da1
 8002ce4:	08002da1 	.word	0x08002da1
 8002ce8:	08002da1 	.word	0x08002da1
 8002cec:	08002da1 	.word	0x08002da1
 8002cf0:	08002d75 	.word	0x08002d75
 8002cf4:	08002da1 	.word	0x08002da1
 8002cf8:	08002da1 	.word	0x08002da1
 8002cfc:	08002da1 	.word	0x08002da1
 8002d00:	08002da1 	.word	0x08002da1
 8002d04:	08002da1 	.word	0x08002da1
 8002d08:	08002da1 	.word	0x08002da1
 8002d0c:	08002da1 	.word	0x08002da1
 8002d10:	08002d8b 	.word	0x08002d8b
 8002d14:	08002da1 	.word	0x08002da1
 8002d18:	08002da1 	.word	0x08002da1
 8002d1c:	08002da1 	.word	0x08002da1
 8002d20:	08002da1 	.word	0x08002da1
 8002d24:	08002da1 	.word	0x08002da1
 8002d28:	08002da1 	.word	0x08002da1
 8002d2c:	08002da1 	.word	0x08002da1
 8002d30:	08002da9 	.word	0x08002da9
 8002d34:	08002da1 	.word	0x08002da1
 8002d38:	08002da1 	.word	0x08002da1
 8002d3c:	08002da1 	.word	0x08002da1
 8002d40:	08002da1 	.word	0x08002da1
 8002d44:	08002da1 	.word	0x08002da1
 8002d48:	08002da1 	.word	0x08002da1
 8002d4c:	08002da1 	.word	0x08002da1
 8002d50:	08002da9 	.word	0x08002da9
 8002d54:	08002da1 	.word	0x08002da1
 8002d58:	08002da1 	.word	0x08002da1
 8002d5c:	08002da1 	.word	0x08002da1
 8002d60:	08002da1 	.word	0x08002da1
 8002d64:	08002da1 	.word	0x08002da1
 8002d68:	08002da1 	.word	0x08002da1
 8002d6c:	08002da1 	.word	0x08002da1
 8002d70:	08002da9 	.word	0x08002da9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d78:	3308      	adds	r3, #8
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 ffc5 	bl	8003d0c <RCCEx_PLL2_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d88:	e00f      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d8e:	3328      	adds	r3, #40	@ 0x28
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 f86c 	bl	8003e70 <RCCEx_PLL3_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d9e:	e004      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002da6:	e000      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002daa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10b      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002db2:	4b81      	ldr	r3, [pc, #516]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dc2:	4a7d      	ldr	r2, [pc, #500]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8002dc8:	e003      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f002 0302 	and.w	r3, r2, #2
 8002dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002de8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002dec:	460b      	mov	r3, r1
 8002dee:	4313      	orrs	r3, r2
 8002df0:	d042      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d825      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e51 	.word	0x08002e51
 8002e08:	08002e1d 	.word	0x08002e1d
 8002e0c:	08002e33 	.word	0x08002e33
 8002e10:	08002e51 	.word	0x08002e51
 8002e14:	08002e51 	.word	0x08002e51
 8002e18:	08002e51 	.word	0x08002e51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e20:	3308      	adds	r3, #8
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ff71 	bl	8003d0c <RCCEx_PLL2_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e30:	e00f      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e36:	3328      	adds	r3, #40	@ 0x28
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 f818 	bl	8003e70 <RCCEx_PLL3_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e46:	e004      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e4e:	e000      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10a      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e5a:	4b57      	ldr	r3, [pc, #348]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5e:	f023 0107 	bic.w	r1, r3, #7
 8002e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e68:	4a53      	ldr	r2, [pc, #332]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e74:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 0304 	and.w	r3, r2, #4
 8002e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d044      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d825      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ef9 	.word	0x08002ef9
 8002eb0:	08002ec5 	.word	0x08002ec5
 8002eb4:	08002edb 	.word	0x08002edb
 8002eb8:	08002ef9 	.word	0x08002ef9
 8002ebc:	08002ef9 	.word	0x08002ef9
 8002ec0:	08002ef9 	.word	0x08002ef9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ec4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ec8:	3308      	adds	r3, #8
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 ff1d 	bl	8003d0c <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ed8:	e00f      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ede:	3328      	adds	r3, #40	@ 0x28
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ffc4 	bl	8003e70 <RCCEx_PLL3_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002eee:	e004      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f02:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f06:	f023 0107 	bic.w	r1, r3, #7
 8002f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f12:	4a29      	ldr	r2, [pc, #164]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f002 0320 	and.w	r3, r2, #32
 8002f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	d057      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4e:	d035      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f54:	d82c      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5a:	d031      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f60:	d826      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002f62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f66:	d02d      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f6c:	d820      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f72:	d012      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8002f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f78:	d81a      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d024      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8002f7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f82:	d115      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f88:	3308      	adds	r3, #8
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 febd 	bl	8003d0c <RCCEx_PLL2_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f98:	e017      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f9e:	3328      	adds	r3, #40	@ 0x28
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 ff64 	bl	8003e70 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fae:	e00c      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002fb6:	e008      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8002fb8:	58024400 	.word	0x58024400
        break;
 8002fbc:	bf00      	nop
 8002fbe:	e004      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002fc0:	bf00      	nop
 8002fc2:	e002      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd2:	4bc2      	ldr	r3, [pc, #776]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe2:	4abe      	ldr	r2, [pc, #760]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003008:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800300c:	460b      	mov	r3, r1
 800300e:	4313      	orrs	r3, r2
 8003010:	d055      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800301a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800301e:	d033      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003020:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003024:	d82c      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302a:	d02f      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003030:	d826      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003032:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003036:	d02b      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003038:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800303c:	d820      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800303e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003042:	d012      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003048:	d81a      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d022      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003052:	d115      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003058:	3308      	adds	r3, #8
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fe55 	bl	8003d0c <RCCEx_PLL2_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003068:	e015      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800306a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306e:	3328      	adds	r3, #40	@ 0x28
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fefc 	bl	8003e70 <RCCEx_PLL3_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800307e:	e00a      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003086:	e006      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003088:	bf00      	nop
 800308a:	e004      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800308c:	bf00      	nop
 800308e:	e002      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003096:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800309e:	4b8f      	ldr	r3, [pc, #572]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80030a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80030ae:	4a8b      	ldr	r2, [pc, #556]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b4:	e003      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80030ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80030d8:	460b      	mov	r3, r1
 80030da:	4313      	orrs	r3, r2
 80030dc:	d055      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80030de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80030ea:	d033      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80030ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80030f0:	d82c      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f6:	d02f      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80030f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fc:	d826      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80030fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003102:	d02b      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003104:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003108:	d820      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800310a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800310e:	d012      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003114:	d81a      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003116:	2b00      	cmp	r3, #0
 8003118:	d022      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800311a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800311e:	d115      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003124:	3308      	adds	r3, #8
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fdef 	bl	8003d0c <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003134:	e015      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003136:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800313a:	3328      	adds	r3, #40	@ 0x28
 800313c:	2102      	movs	r1, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fe96 	bl	8003e70 <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800314a:	e00a      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003152:	e006      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003154:	bf00      	nop
 8003156:	e004      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003158:	bf00      	nop
 800315a:	e002      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800316a:	4b5c      	ldr	r3, [pc, #368]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003176:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800317a:	4a58      	ldr	r2, [pc, #352]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800317c:	430b      	orrs	r3, r1
 800317e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003180:	e003      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003182:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003186:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800318a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f002 0308 	and.w	r3, r2, #8
 8003196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031a0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80031a4:	460b      	mov	r3, r1
 80031a6:	4313      	orrs	r3, r2
 80031a8:	d01e      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80031aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031bc:	3328      	adds	r3, #40	@ 0x28
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fe55 	bl	8003e70 <RCCEx_PLL3_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031d2:	4b42      	ldr	r3, [pc, #264]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e2:	4a3e      	ldr	r2, [pc, #248]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f002 0310 	and.w	r3, r2, #16
 80031f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80031fe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003202:	460b      	mov	r3, r1
 8003204:	4313      	orrs	r3, r2
 8003206:	d01e      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800320c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321a:	3328      	adds	r3, #40	@ 0x28
 800321c:	2102      	movs	r1, #2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fe26 	bl	8003e70 <RCCEx_PLL3_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003230:	4b2a      	ldr	r3, [pc, #168]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800323c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003240:	4a26      	ldr	r2, [pc, #152]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003242:	430b      	orrs	r3, r1
 8003244:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003252:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800325c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003260:	460b      	mov	r3, r1
 8003262:	4313      	orrs	r3, r2
 8003264:	d040      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800326a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800326e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003272:	d022      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003278:	d81b      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003282:	d00b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003284:	e015      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800328a:	3308      	adds	r3, #8
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fd3c 	bl	8003d0c <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800329a:	e00f      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800329c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032a0:	3328      	adds	r3, #40	@ 0x28
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fde3 	bl	8003e70 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032b0:	e004      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032b8:	e000      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80032ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10d      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80032cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032d4:	4a01      	ldr	r2, [pc, #4]	@ (80032dc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032d6:	430b      	orrs	r3, r1
 80032d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032da:	e005      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80032dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80032f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032f6:	2300      	movs	r3, #0
 80032f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80032fe:	460b      	mov	r3, r1
 8003300:	4313      	orrs	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800330c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003310:	d01f      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003312:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003316:	d818      	bhi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800331c:	d003      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800331e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003322:	d007      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003324:	e011      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003326:	4b64      	ldr	r3, [pc, #400]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	4a63      	ldr	r2, [pc, #396]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800332c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003330:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003332:	e00f      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003338:	3328      	adds	r3, #40	@ 0x28
 800333a:	2101      	movs	r1, #1
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fd97 	bl	8003e70 <RCCEx_PLL3_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003348:	e004      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003354:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800335c:	4b56      	ldr	r3, [pc, #344]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800335e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003360:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800336c:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6553      	str	r3, [r2, #84]	@ 0x54
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003378:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800337c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003388:	673b      	str	r3, [r7, #112]	@ 0x70
 800338a:	2300      	movs	r3, #0
 800338c:	677b      	str	r3, [r7, #116]	@ 0x74
 800338e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003392:	460b      	mov	r3, r1
 8003394:	4313      	orrs	r3, r2
 8003396:	d031      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a6:	d007      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80033a8:	e011      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033aa:	4b43      	ldr	r3, [pc, #268]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	4a42      	ldr	r2, [pc, #264]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033b6:	e00e      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033bc:	3308      	adds	r3, #8
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fca3 	bl	8003d0c <RCCEx_PLL2_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033de:	4b36      	ldr	r3, [pc, #216]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	4a32      	ldr	r2, [pc, #200]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80033ee:	430b      	orrs	r3, r1
 80033f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f2:	e003      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800340a:	2300      	movs	r3, #0
 800340c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800340e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d00c      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800341c:	3328      	adds	r3, #40	@ 0x28
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd25 	bl	8003e70 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003432:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800343e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003440:	2300      	movs	r3, #0
 8003442:	667b      	str	r3, [r7, #100]	@ 0x64
 8003444:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d03a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800344e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800345a:	d018      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800345c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003460:	d811      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003466:	d014      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800346c:	d80b      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d011      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003476:	d106      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003478:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	4a0e      	ldr	r2, [pc, #56]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800347e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003484:	e008      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003498:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10d      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b0:	4a01      	ldr	r2, [pc, #4]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80034b6:	e005      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80034b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80034d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034d2:	2300      	movs	r3, #0
 80034d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80034da:	460b      	mov	r3, r1
 80034dc:	4313      	orrs	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034e0:	4baa      	ldr	r3, [pc, #680]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80034e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80034e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ee:	4aa7      	ldr	r2, [pc, #668]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80034f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003500:	653b      	str	r3, [r7, #80]	@ 0x50
 8003502:	2300      	movs	r3, #0
 8003504:	657b      	str	r3, [r7, #84]	@ 0x54
 8003506:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800350a:	460b      	mov	r3, r1
 800350c:	4313      	orrs	r3, r2
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003510:	4b9e      	ldr	r3, [pc, #632]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800351c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003520:	4a9a      	ldr	r2, [pc, #616]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003522:	430b      	orrs	r3, r1
 8003524:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003534:	2300      	movs	r3, #0
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003538:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800353c:	460b      	mov	r3, r1
 800353e:	4313      	orrs	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003542:	4b92      	ldr	r3, [pc, #584]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800354a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800354e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003550:	4a8e      	ldr	r2, [pc, #568]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003552:	430b      	orrs	r3, r1
 8003554:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003562:	643b      	str	r3, [r7, #64]	@ 0x40
 8003564:	2300      	movs	r3, #0
 8003566:	647b      	str	r3, [r7, #68]	@ 0x44
 8003568:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800356c:	460b      	mov	r3, r1
 800356e:	4313      	orrs	r3, r2
 8003570:	d00e      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003572:	4b86      	ldr	r3, [pc, #536]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4a85      	ldr	r2, [pc, #532]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003578:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800357c:	6113      	str	r3, [r2, #16]
 800357e:	4b83      	ldr	r3, [pc, #524]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003580:	6919      	ldr	r1, [r3, #16]
 8003582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003586:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800358a:	4a80      	ldr	r2, [pc, #512]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800359c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800359e:	2300      	movs	r3, #0
 80035a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80035a6:	460b      	mov	r3, r1
 80035a8:	4313      	orrs	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035ac:	4b77      	ldr	r3, [pc, #476]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80035b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	4a74      	ldr	r2, [pc, #464]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80035cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ce:	2300      	movs	r3, #0
 80035d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80035d6:	460b      	mov	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035dc:	4b6b      	ldr	r3, [pc, #428]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80035e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ec:	4a67      	ldr	r2, [pc, #412]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	2100      	movs	r1, #0
 80035fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003604:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003608:	460b      	mov	r3, r1
 800360a:	4313      	orrs	r3, r2
 800360c:	d011      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800360e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003612:	3308      	adds	r3, #8
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fb78 	bl	8003d0c <RCCEx_PLL2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003622:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800362e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	2100      	movs	r1, #0
 800363c:	6239      	str	r1, [r7, #32]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
 8003644:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003648:	460b      	mov	r3, r1
 800364a:	4313      	orrs	r3, r2
 800364c:	d011      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800364e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003652:	3308      	adds	r3, #8
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fb58 	bl	8003d0c <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003662:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800366e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	2100      	movs	r1, #0
 800367c:	61b9      	str	r1, [r7, #24]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003688:	460b      	mov	r3, r1
 800368a:	4313      	orrs	r3, r2
 800368c:	d011      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800368e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003692:	3308      	adds	r3, #8
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fb38 	bl	8003d0c <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80036a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80036b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	2100      	movs	r1, #0
 80036bc:	6139      	str	r1, [r7, #16]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d011      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d2:	3328      	adds	r3, #40	@ 0x28
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fbca 	bl	8003e70 <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80036e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	2100      	movs	r1, #0
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d011      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800370e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003712:	3328      	adds	r3, #40	@ 0x28
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fbaa 	bl	8003e70 <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800372e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	2100      	movs	r1, #0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d011      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800374e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003752:	3328      	adds	r3, #40	@ 0x28
 8003754:	2102      	movs	r1, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fb8a 	bl	8003e70 <RCCEx_PLL3_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003762:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800376e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003772:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003786:	46bd      	mov	sp, r7
 8003788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378c:	58024400 	.word	0x58024400

08003790 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003794:	f7fe fd56 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4904      	ldr	r1, [pc, #16]	@ (80037b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	58024400 	.word	0x58024400
 80037b8:	08005c04 	.word	0x08005c04

080037bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	@ 0x24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037c4:	4ba1      	ldr	r3, [pc, #644]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80037ce:	4b9f      	ldr	r3, [pc, #636]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d2:	0b1b      	lsrs	r3, r3, #12
 80037d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037da:	4b9c      	ldr	r3, [pc, #624]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80037e6:	4b99      	ldr	r3, [pc, #612]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	08db      	lsrs	r3, r3, #3
 80037ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8111 	beq.w	8003a2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b02      	cmp	r3, #2
 800380e:	f000 8083 	beq.w	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b02      	cmp	r3, #2
 8003816:	f200 80a1 	bhi.w	800395c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d056      	beq.n	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003826:	e099      	b.n	800395c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003828:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02d      	beq.n	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003834:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	4a84      	ldr	r2, [pc, #528]	@ (8003a50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
 8003844:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385e:	4b7b      	ldr	r3, [pc, #492]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003872:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800388e:	e087      	b.n	80039a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003a58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800389e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038d2:	e065      	b.n	80039a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e6:	4b59      	ldr	r3, [pc, #356]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003916:	e043      	b.n	80039a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b48      	ldr	r3, [pc, #288]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393a:	ed97 6a03 	vldr	s12, [r7, #12]
 800393e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800395a:	e021      	b.n	80039a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003982:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800399e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80039a0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a4:	0a5b      	lsrs	r3, r3, #9
 80039a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80039be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c6:	ee17 2a90 	vmov	r2, s15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80039ce:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f4:	ee17 2a90 	vmov	r2, s15
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80039fc:	4b13      	ldr	r3, [pc, #76]	@ (8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	0e1b      	lsrs	r3, r3, #24
 8003a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a22:	ee17 2a90 	vmov	r2, s15
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a2a:	e008      	b.n	8003a3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	3724      	adds	r7, #36	@ 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	03d09000 	.word	0x03d09000
 8003a54:	46000000 	.word	0x46000000
 8003a58:	4c742400 	.word	0x4c742400
 8003a5c:	4a742400 	.word	0x4a742400
 8003a60:	4bbebc20 	.word	0x4bbebc20

08003a64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	@ 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a6c:	4ba1      	ldr	r3, [pc, #644]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a76:	4b9f      	ldr	r3, [pc, #636]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7a:	0d1b      	lsrs	r3, r3, #20
 8003a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a82:	4b9c      	ldr	r3, [pc, #624]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a8e:	4b99      	ldr	r3, [pc, #612]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a92:	08db      	lsrs	r3, r3, #3
 8003a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8111 	beq.w	8003cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	f000 8083 	beq.w	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	f200 80a1 	bhi.w	8003c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d056      	beq.n	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ace:	e099      	b.n	8003c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad0:	4b88      	ldr	r3, [pc, #544]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02d      	beq.n	8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003adc:	4b85      	ldr	r3, [pc, #532]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	08db      	lsrs	r3, r3, #3
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	4a84      	ldr	r2, [pc, #528]	@ (8003cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b06:	4b7b      	ldr	r3, [pc, #492]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b36:	e087      	b.n	8003c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7a:	e065      	b.n	8003c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bbe:	e043      	b.n	8003c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd2:	4b48      	ldr	r3, [pc, #288]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003be6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c02:	e021      	b.n	8003c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c16:	4b37      	ldr	r3, [pc, #220]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c48:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	0a5b      	lsrs	r3, r3, #9
 8003c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6e:	ee17 2a90 	vmov	r2, s15
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c76:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	0c1b      	lsrs	r3, r3, #16
 8003c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c90:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c9c:	ee17 2a90 	vmov	r2, s15
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	0e1b      	lsrs	r3, r3, #24
 8003caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cca:	ee17 2a90 	vmov	r2, s15
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
}
 8003ce6:	bf00      	nop
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	03d09000 	.word	0x03d09000
 8003cfc:	46000000 	.word	0x46000000
 8003d00:	4c742400 	.word	0x4c742400
 8003d04:	4a742400 	.word	0x4a742400
 8003d08:	4bbebc20 	.word	0x4bbebc20

08003d0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d1a:	4b53      	ldr	r3, [pc, #332]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d101      	bne.n	8003d2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e099      	b.n	8003e5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003d30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d36:	f7fc ffd1 	bl	8000cdc <HAL_GetTick>
 8003d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d3e:	f7fc ffcd 	bl	8000cdc <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e086      	b.n	8003e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d50:	4b45      	ldr	r3, [pc, #276]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d5c:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	031b      	lsls	r3, r3, #12
 8003d6a:	493f      	ldr	r1, [pc, #252]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	025b      	lsls	r3, r3, #9
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003da0:	4931      	ldr	r1, [pc, #196]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003da6:	4b30      	ldr	r3, [pc, #192]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003daa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	492d      	ldr	r1, [pc, #180]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003db8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	f023 0220 	bic.w	r2, r3, #32
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4928      	ldr	r1, [pc, #160]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dca:	4b27      	ldr	r3, [pc, #156]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	4a26      	ldr	r2, [pc, #152]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003dd0:	f023 0310 	bic.w	r3, r3, #16
 8003dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dda:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <RCCEx_PLL2_Config+0x160>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	69d2      	ldr	r2, [r2, #28]
 8003de2:	00d2      	lsls	r2, r2, #3
 8003de4:	4920      	ldr	r1, [pc, #128]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dea:	4b1f      	ldr	r3, [pc, #124]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	4a1e      	ldr	r2, [pc, #120]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003df0:	f043 0310 	orr.w	r3, r3, #16
 8003df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	4a19      	ldr	r2, [pc, #100]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e08:	e00f      	b.n	8003e2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e10:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e14:	4a14      	ldr	r2, [pc, #80]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003e1c:	e005      	b.n	8003e2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e1e:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	4a11      	ldr	r2, [pc, #68]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e36:	f7fc ff51 	bl	8000cdc <HAL_GetTick>
 8003e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e3c:	e008      	b.n	8003e50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e3e:	f7fc ff4d 	bl	8000cdc <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e006      	b.n	8003e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e50:	4b05      	ldr	r3, [pc, #20]	@ (8003e68 <RCCEx_PLL2_Config+0x15c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	58024400 	.word	0x58024400
 8003e6c:	ffff0007 	.word	0xffff0007

08003e70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e7e:	4b53      	ldr	r3, [pc, #332]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d101      	bne.n	8003e8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e099      	b.n	8003fc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a4e      	ldr	r2, [pc, #312]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9a:	f7fc ff1f 	bl	8000cdc <HAL_GetTick>
 8003e9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ea0:	e008      	b.n	8003eb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003ea2:	f7fc ff1b 	bl	8000cdc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e086      	b.n	8003fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003eb4:	4b45      	ldr	r3, [pc, #276]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ec0:	4b42      	ldr	r3, [pc, #264]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	051b      	lsls	r3, r3, #20
 8003ece:	493f      	ldr	r1, [pc, #252]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	025b      	lsls	r3, r3, #9
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	041b      	lsls	r3, r3, #16
 8003ef2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	061b      	lsls	r3, r3, #24
 8003f00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f04:	4931      	ldr	r1, [pc, #196]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f0a:	4b30      	ldr	r3, [pc, #192]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	492d      	ldr	r1, [pc, #180]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	4928      	ldr	r1, [pc, #160]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f2e:	4b27      	ldr	r3, [pc, #156]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	4a26      	ldr	r2, [pc, #152]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f3a:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f3e:	4b24      	ldr	r3, [pc, #144]	@ (8003fd0 <RCCEx_PLL3_Config+0x160>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	69d2      	ldr	r2, [r2, #28]
 8003f46:	00d2      	lsls	r2, r2, #3
 8003f48:	4920      	ldr	r1, [pc, #128]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	4a1e      	ldr	r2, [pc, #120]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f60:	4b1a      	ldr	r3, [pc, #104]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	4a19      	ldr	r2, [pc, #100]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f6c:	e00f      	b.n	8003f8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f74:	4b15      	ldr	r3, [pc, #84]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	4a14      	ldr	r2, [pc, #80]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f80:	e005      	b.n	8003f8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f82:	4b12      	ldr	r3, [pc, #72]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	4a11      	ldr	r2, [pc, #68]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a0e      	ldr	r2, [pc, #56]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9a:	f7fc fe9f 	bl	8000cdc <HAL_GetTick>
 8003f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fa0:	e008      	b.n	8003fb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fa2:	f7fc fe9b 	bl	8000cdc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e006      	b.n	8003fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <RCCEx_PLL3_Config+0x15c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	ffff0007 	.word	0xffff0007

08003fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e042      	b.n	800406c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fc fcef 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2224      	movs	r2, #36	@ 0x24
 8004002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fe1e 	bl	8004c60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f8b3 	bl	8004190 <UART_SetConfig>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e01b      	b.n	800406c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fe9d 	bl	8004da4 <UART_CheckIdleState>
 800406a:	4603      	mov	r3, r0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408a:	2b20      	cmp	r3, #32
 800408c:	d17b      	bne.n	8004186 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_UART_Transmit+0x26>
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e074      	b.n	8004188 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2221      	movs	r2, #33	@ 0x21
 80040aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ae:	f7fc fe15 	bl	8000cdc <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040cc:	d108      	bne.n	80040e0 <HAL_UART_Transmit+0x6c>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	e003      	b.n	80040e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040e8:	e030      	b.n	800414c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2180      	movs	r1, #128	@ 0x80
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 feff 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e03d      	b.n	8004188 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004120:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	3302      	adds	r3, #2
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e007      	b.n	800413a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3301      	adds	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1c8      	bne.n	80040ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2200      	movs	r2, #0
 8004160:	2140      	movs	r1, #64	@ 0x40
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fec8 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e006      	b.n	8004188 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b092      	sub	sp, #72	@ 0x48
 8004196:	af00      	add	r7, sp, #0
 8004198:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4bbe      	ldr	r3, [pc, #760]	@ (80044b8 <UART_SetConfig+0x328>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4ab3      	ldr	r2, [pc, #716]	@ (80044bc <UART_SetConfig+0x32c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041f8:	4313      	orrs	r3, r2
 80041fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	4baf      	ldr	r3, [pc, #700]	@ (80044c0 <UART_SetConfig+0x330>)
 8004204:	4013      	ands	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800420c:	430b      	orrs	r3, r1
 800420e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004216:	f023 010f 	bic.w	r1, r3, #15
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4aa6      	ldr	r2, [pc, #664]	@ (80044c4 <UART_SetConfig+0x334>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d177      	bne.n	8004320 <UART_SetConfig+0x190>
 8004230:	4ba5      	ldr	r3, [pc, #660]	@ (80044c8 <UART_SetConfig+0x338>)
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004238:	2b28      	cmp	r3, #40	@ 0x28
 800423a:	d86d      	bhi.n	8004318 <UART_SetConfig+0x188>
 800423c:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <UART_SetConfig+0xb4>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	080042e9 	.word	0x080042e9
 8004248:	08004319 	.word	0x08004319
 800424c:	08004319 	.word	0x08004319
 8004250:	08004319 	.word	0x08004319
 8004254:	08004319 	.word	0x08004319
 8004258:	08004319 	.word	0x08004319
 800425c:	08004319 	.word	0x08004319
 8004260:	08004319 	.word	0x08004319
 8004264:	080042f1 	.word	0x080042f1
 8004268:	08004319 	.word	0x08004319
 800426c:	08004319 	.word	0x08004319
 8004270:	08004319 	.word	0x08004319
 8004274:	08004319 	.word	0x08004319
 8004278:	08004319 	.word	0x08004319
 800427c:	08004319 	.word	0x08004319
 8004280:	08004319 	.word	0x08004319
 8004284:	080042f9 	.word	0x080042f9
 8004288:	08004319 	.word	0x08004319
 800428c:	08004319 	.word	0x08004319
 8004290:	08004319 	.word	0x08004319
 8004294:	08004319 	.word	0x08004319
 8004298:	08004319 	.word	0x08004319
 800429c:	08004319 	.word	0x08004319
 80042a0:	08004319 	.word	0x08004319
 80042a4:	08004301 	.word	0x08004301
 80042a8:	08004319 	.word	0x08004319
 80042ac:	08004319 	.word	0x08004319
 80042b0:	08004319 	.word	0x08004319
 80042b4:	08004319 	.word	0x08004319
 80042b8:	08004319 	.word	0x08004319
 80042bc:	08004319 	.word	0x08004319
 80042c0:	08004319 	.word	0x08004319
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004319 	.word	0x08004319
 80042cc:	08004319 	.word	0x08004319
 80042d0:	08004319 	.word	0x08004319
 80042d4:	08004319 	.word	0x08004319
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004311 	.word	0x08004311
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042ee:	e222      	b.n	8004736 <UART_SetConfig+0x5a6>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042f6:	e21e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80042fe:	e21a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004306:	e216      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004308:	2320      	movs	r3, #32
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800430e:	e212      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004310:	2340      	movs	r3, #64	@ 0x40
 8004312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004316:	e20e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004318:	2380      	movs	r3, #128	@ 0x80
 800431a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800431e:	e20a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a69      	ldr	r2, [pc, #420]	@ (80044cc <UART_SetConfig+0x33c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d130      	bne.n	800438c <UART_SetConfig+0x1fc>
 800432a:	4b67      	ldr	r3, [pc, #412]	@ (80044c8 <UART_SetConfig+0x338>)
 800432c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b05      	cmp	r3, #5
 8004334:	d826      	bhi.n	8004384 <UART_SetConfig+0x1f4>
 8004336:	a201      	add	r2, pc, #4	@ (adr r2, 800433c <UART_SetConfig+0x1ac>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004355 	.word	0x08004355
 8004340:	0800435d 	.word	0x0800435d
 8004344:	08004365 	.word	0x08004365
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004375 	.word	0x08004375
 8004350:	0800437d 	.word	0x0800437d
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800435a:	e1ec      	b.n	8004736 <UART_SetConfig+0x5a6>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004362:	e1e8      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800436a:	e1e4      	b.n	8004736 <UART_SetConfig+0x5a6>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004372:	e1e0      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004374:	2320      	movs	r3, #32
 8004376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800437a:	e1dc      	b.n	8004736 <UART_SetConfig+0x5a6>
 800437c:	2340      	movs	r3, #64	@ 0x40
 800437e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004382:	e1d8      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800438a:	e1d4      	b.n	8004736 <UART_SetConfig+0x5a6>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4f      	ldr	r2, [pc, #316]	@ (80044d0 <UART_SetConfig+0x340>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d130      	bne.n	80043f8 <UART_SetConfig+0x268>
 8004396:	4b4c      	ldr	r3, [pc, #304]	@ (80044c8 <UART_SetConfig+0x338>)
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d826      	bhi.n	80043f0 <UART_SetConfig+0x260>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <UART_SetConfig+0x218>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043c1 	.word	0x080043c1
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	080043d1 	.word	0x080043d1
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c6:	e1b6      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043c8:	2304      	movs	r3, #4
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ce:	e1b2      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043d0:	2308      	movs	r3, #8
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d6:	e1ae      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043d8:	2310      	movs	r3, #16
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043de:	e1aa      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043e0:	2320      	movs	r3, #32
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043e6:	e1a6      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043e8:	2340      	movs	r3, #64	@ 0x40
 80043ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ee:	e1a2      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043f6:	e19e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a35      	ldr	r2, [pc, #212]	@ (80044d4 <UART_SetConfig+0x344>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d130      	bne.n	8004464 <UART_SetConfig+0x2d4>
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <UART_SetConfig+0x338>)
 8004404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b05      	cmp	r3, #5
 800440c:	d826      	bhi.n	800445c <UART_SetConfig+0x2cc>
 800440e:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <UART_SetConfig+0x284>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	0800442d 	.word	0x0800442d
 8004418:	08004435 	.word	0x08004435
 800441c:	0800443d 	.word	0x0800443d
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004432:	e180      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004434:	2304      	movs	r3, #4
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443a:	e17c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800443c:	2308      	movs	r3, #8
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004442:	e178      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800444a:	e174      	b.n	8004736 <UART_SetConfig+0x5a6>
 800444c:	2320      	movs	r3, #32
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004452:	e170      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004454:	2340      	movs	r3, #64	@ 0x40
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800445a:	e16c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004462:	e168      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <UART_SetConfig+0x348>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d142      	bne.n	80044f4 <UART_SetConfig+0x364>
 800446e:	4b16      	ldr	r3, [pc, #88]	@ (80044c8 <UART_SetConfig+0x338>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	2b05      	cmp	r3, #5
 8004478:	d838      	bhi.n	80044ec <UART_SetConfig+0x35c>
 800447a:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <UART_SetConfig+0x2f0>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	08004499 	.word	0x08004499
 8004484:	080044a1 	.word	0x080044a1
 8004488:	080044a9 	.word	0x080044a9
 800448c:	080044b1 	.word	0x080044b1
 8004490:	080044dd 	.word	0x080044dd
 8004494:	080044e5 	.word	0x080044e5
 8004498:	2300      	movs	r3, #0
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449e:	e14a      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a6:	e146      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044a8:	2308      	movs	r3, #8
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ae:	e142      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044b0:	2310      	movs	r3, #16
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044b6:	e13e      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044b8:	cfff69f3 	.word	0xcfff69f3
 80044bc:	58000c00 	.word	0x58000c00
 80044c0:	11fff4ff 	.word	0x11fff4ff
 80044c4:	40011000 	.word	0x40011000
 80044c8:	58024400 	.word	0x58024400
 80044cc:	40004400 	.word	0x40004400
 80044d0:	40004800 	.word	0x40004800
 80044d4:	40004c00 	.word	0x40004c00
 80044d8:	40005000 	.word	0x40005000
 80044dc:	2320      	movs	r3, #32
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e2:	e128      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044e4:	2340      	movs	r3, #64	@ 0x40
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ea:	e124      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044ec:	2380      	movs	r3, #128	@ 0x80
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f2:	e120      	b.n	8004736 <UART_SetConfig+0x5a6>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4acb      	ldr	r2, [pc, #812]	@ (8004828 <UART_SetConfig+0x698>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d176      	bne.n	80045ec <UART_SetConfig+0x45c>
 80044fe:	4bcb      	ldr	r3, [pc, #812]	@ (800482c <UART_SetConfig+0x69c>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004506:	2b28      	cmp	r3, #40	@ 0x28
 8004508:	d86c      	bhi.n	80045e4 <UART_SetConfig+0x454>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <UART_SetConfig+0x380>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	080045b5 	.word	0x080045b5
 8004514:	080045e5 	.word	0x080045e5
 8004518:	080045e5 	.word	0x080045e5
 800451c:	080045e5 	.word	0x080045e5
 8004520:	080045e5 	.word	0x080045e5
 8004524:	080045e5 	.word	0x080045e5
 8004528:	080045e5 	.word	0x080045e5
 800452c:	080045e5 	.word	0x080045e5
 8004530:	080045bd 	.word	0x080045bd
 8004534:	080045e5 	.word	0x080045e5
 8004538:	080045e5 	.word	0x080045e5
 800453c:	080045e5 	.word	0x080045e5
 8004540:	080045e5 	.word	0x080045e5
 8004544:	080045e5 	.word	0x080045e5
 8004548:	080045e5 	.word	0x080045e5
 800454c:	080045e5 	.word	0x080045e5
 8004550:	080045c5 	.word	0x080045c5
 8004554:	080045e5 	.word	0x080045e5
 8004558:	080045e5 	.word	0x080045e5
 800455c:	080045e5 	.word	0x080045e5
 8004560:	080045e5 	.word	0x080045e5
 8004564:	080045e5 	.word	0x080045e5
 8004568:	080045e5 	.word	0x080045e5
 800456c:	080045e5 	.word	0x080045e5
 8004570:	080045cd 	.word	0x080045cd
 8004574:	080045e5 	.word	0x080045e5
 8004578:	080045e5 	.word	0x080045e5
 800457c:	080045e5 	.word	0x080045e5
 8004580:	080045e5 	.word	0x080045e5
 8004584:	080045e5 	.word	0x080045e5
 8004588:	080045e5 	.word	0x080045e5
 800458c:	080045e5 	.word	0x080045e5
 8004590:	080045d5 	.word	0x080045d5
 8004594:	080045e5 	.word	0x080045e5
 8004598:	080045e5 	.word	0x080045e5
 800459c:	080045e5 	.word	0x080045e5
 80045a0:	080045e5 	.word	0x080045e5
 80045a4:	080045e5 	.word	0x080045e5
 80045a8:	080045e5 	.word	0x080045e5
 80045ac:	080045e5 	.word	0x080045e5
 80045b0:	080045dd 	.word	0x080045dd
 80045b4:	2301      	movs	r3, #1
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ba:	e0bc      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045bc:	2304      	movs	r3, #4
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c2:	e0b8      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045c4:	2308      	movs	r3, #8
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e0b4      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045cc:	2310      	movs	r3, #16
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e0b0      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045d4:	2320      	movs	r3, #32
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045da:	e0ac      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045dc:	2340      	movs	r3, #64	@ 0x40
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e2:	e0a8      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045e4:	2380      	movs	r3, #128	@ 0x80
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ea:	e0a4      	b.n	8004736 <UART_SetConfig+0x5a6>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a8f      	ldr	r2, [pc, #572]	@ (8004830 <UART_SetConfig+0x6a0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d130      	bne.n	8004658 <UART_SetConfig+0x4c8>
 80045f6:	4b8d      	ldr	r3, [pc, #564]	@ (800482c <UART_SetConfig+0x69c>)
 80045f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d826      	bhi.n	8004650 <UART_SetConfig+0x4c0>
 8004602:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0x478>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004621 	.word	0x08004621
 800460c:	08004629 	.word	0x08004629
 8004610:	08004631 	.word	0x08004631
 8004614:	08004639 	.word	0x08004639
 8004618:	08004641 	.word	0x08004641
 800461c:	08004649 	.word	0x08004649
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004626:	e086      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462e:	e082      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004636:	e07e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463e:	e07a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004640:	2320      	movs	r3, #32
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004646:	e076      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004648:	2340      	movs	r3, #64	@ 0x40
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464e:	e072      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004650:	2380      	movs	r3, #128	@ 0x80
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004656:	e06e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a75      	ldr	r2, [pc, #468]	@ (8004834 <UART_SetConfig+0x6a4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d130      	bne.n	80046c4 <UART_SetConfig+0x534>
 8004662:	4b72      	ldr	r3, [pc, #456]	@ (800482c <UART_SetConfig+0x69c>)
 8004664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b05      	cmp	r3, #5
 800466c:	d826      	bhi.n	80046bc <UART_SetConfig+0x52c>
 800466e:	a201      	add	r2, pc, #4	@ (adr r2, 8004674 <UART_SetConfig+0x4e4>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	0800468d 	.word	0x0800468d
 8004678:	08004695 	.word	0x08004695
 800467c:	0800469d 	.word	0x0800469d
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	2300      	movs	r3, #0
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e050      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469a:	e04c      	b.n	8004736 <UART_SetConfig+0x5a6>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a2:	e048      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046aa:	e044      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046ac:	2320      	movs	r3, #32
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b2:	e040      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046b4:	2340      	movs	r3, #64	@ 0x40
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ba:	e03c      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c2:	e038      	b.n	8004736 <UART_SetConfig+0x5a6>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a5b      	ldr	r2, [pc, #364]	@ (8004838 <UART_SetConfig+0x6a8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d130      	bne.n	8004730 <UART_SetConfig+0x5a0>
 80046ce:	4b57      	ldr	r3, [pc, #348]	@ (800482c <UART_SetConfig+0x69c>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d826      	bhi.n	8004728 <UART_SetConfig+0x598>
 80046da:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <UART_SetConfig+0x550>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	08004701 	.word	0x08004701
 80046e8:	08004709 	.word	0x08004709
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004721 	.word	0x08004721
 80046f8:	2302      	movs	r3, #2
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e01a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004700:	2304      	movs	r3, #4
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e016      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004708:	2308      	movs	r3, #8
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470e:	e012      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004710:	2310      	movs	r3, #16
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004716:	e00e      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004718:	2320      	movs	r3, #32
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471e:	e00a      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004720:	2340      	movs	r3, #64	@ 0x40
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004726:	e006      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472e:	e002      	b.n	8004736 <UART_SetConfig+0x5a6>
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3f      	ldr	r2, [pc, #252]	@ (8004838 <UART_SetConfig+0x6a8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 80f8 	bne.w	8004932 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004742:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004746:	2b20      	cmp	r3, #32
 8004748:	dc46      	bgt.n	80047d8 <UART_SetConfig+0x648>
 800474a:	2b02      	cmp	r3, #2
 800474c:	f2c0 8082 	blt.w	8004854 <UART_SetConfig+0x6c4>
 8004750:	3b02      	subs	r3, #2
 8004752:	2b1e      	cmp	r3, #30
 8004754:	d87e      	bhi.n	8004854 <UART_SetConfig+0x6c4>
 8004756:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <UART_SetConfig+0x5cc>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	080047df 	.word	0x080047df
 8004760:	08004855 	.word	0x08004855
 8004764:	080047e7 	.word	0x080047e7
 8004768:	08004855 	.word	0x08004855
 800476c:	08004855 	.word	0x08004855
 8004770:	08004855 	.word	0x08004855
 8004774:	080047f7 	.word	0x080047f7
 8004778:	08004855 	.word	0x08004855
 800477c:	08004855 	.word	0x08004855
 8004780:	08004855 	.word	0x08004855
 8004784:	08004855 	.word	0x08004855
 8004788:	08004855 	.word	0x08004855
 800478c:	08004855 	.word	0x08004855
 8004790:	08004855 	.word	0x08004855
 8004794:	08004807 	.word	0x08004807
 8004798:	08004855 	.word	0x08004855
 800479c:	08004855 	.word	0x08004855
 80047a0:	08004855 	.word	0x08004855
 80047a4:	08004855 	.word	0x08004855
 80047a8:	08004855 	.word	0x08004855
 80047ac:	08004855 	.word	0x08004855
 80047b0:	08004855 	.word	0x08004855
 80047b4:	08004855 	.word	0x08004855
 80047b8:	08004855 	.word	0x08004855
 80047bc:	08004855 	.word	0x08004855
 80047c0:	08004855 	.word	0x08004855
 80047c4:	08004855 	.word	0x08004855
 80047c8:	08004855 	.word	0x08004855
 80047cc:	08004855 	.word	0x08004855
 80047d0:	08004855 	.word	0x08004855
 80047d4:	08004847 	.word	0x08004847
 80047d8:	2b40      	cmp	r3, #64	@ 0x40
 80047da:	d037      	beq.n	800484c <UART_SetConfig+0x6bc>
 80047dc:	e03a      	b.n	8004854 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047de:	f7fe ffd7 	bl	8003790 <HAL_RCCEx_GetD3PCLK1Freq>
 80047e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80047e4:	e03c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe ffe6 	bl	80037bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047f4:	e034      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f6:	f107 0318 	add.w	r3, r7, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff f932 	bl	8003a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004804:	e02c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <UART_SetConfig+0x69c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004812:	4b06      	ldr	r3, [pc, #24]	@ (800482c <UART_SetConfig+0x69c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	4a07      	ldr	r2, [pc, #28]	@ (800483c <UART_SetConfig+0x6ac>)
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004824:	e01c      	b.n	8004860 <UART_SetConfig+0x6d0>
 8004826:	bf00      	nop
 8004828:	40011400 	.word	0x40011400
 800482c:	58024400 	.word	0x58024400
 8004830:	40007800 	.word	0x40007800
 8004834:	40007c00 	.word	0x40007c00
 8004838:	58000c00 	.word	0x58000c00
 800483c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004840:	4b9d      	ldr	r3, [pc, #628]	@ (8004ab8 <UART_SetConfig+0x928>)
 8004842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004844:	e00c      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004846:	4b9d      	ldr	r3, [pc, #628]	@ (8004abc <UART_SetConfig+0x92c>)
 8004848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800484a:	e009      	b.n	8004860 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004852:	e005      	b.n	8004860 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800485e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 81de 	beq.w	8004c24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	4a94      	ldr	r2, [pc, #592]	@ (8004ac0 <UART_SetConfig+0x930>)
 800486e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004872:	461a      	mov	r2, r3
 8004874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004876:	fbb3 f3f2 	udiv	r3, r3, r2
 800487a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	4413      	add	r3, r2
 8004886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004888:	429a      	cmp	r2, r3
 800488a:	d305      	bcc.n	8004898 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800489e:	e1c1      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a2:	2200      	movs	r2, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	60fa      	str	r2, [r7, #12]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	4a84      	ldr	r2, [pc, #528]	@ (8004ac0 <UART_SetConfig+0x930>)
 80048ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048c2:	f7fb fd65 	bl	8000390 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	020b      	lsls	r3, r1, #8
 80048d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048dc:	0202      	lsls	r2, r0, #8
 80048de:	6979      	ldr	r1, [r7, #20]
 80048e0:	6849      	ldr	r1, [r1, #4]
 80048e2:	0849      	lsrs	r1, r1, #1
 80048e4:	2000      	movs	r0, #0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4605      	mov	r5, r0
 80048ea:	eb12 0804 	adds.w	r8, r2, r4
 80048ee:	eb43 0905 	adc.w	r9, r3, r5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	469a      	mov	sl, r3
 80048fa:	4693      	mov	fp, r2
 80048fc:	4652      	mov	r2, sl
 80048fe:	465b      	mov	r3, fp
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fb fd44 	bl	8000390 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4613      	mov	r3, r2
 800490e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004916:	d308      	bcc.n	800492a <UART_SetConfig+0x79a>
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800491e:	d204      	bcs.n	800492a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e17c      	b.n	8004c24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004930:	e178      	b.n	8004c24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800493a:	f040 80c5 	bne.w	8004ac8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800493e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004942:	2b20      	cmp	r3, #32
 8004944:	dc48      	bgt.n	80049d8 <UART_SetConfig+0x848>
 8004946:	2b00      	cmp	r3, #0
 8004948:	db7b      	blt.n	8004a42 <UART_SetConfig+0x8b2>
 800494a:	2b20      	cmp	r3, #32
 800494c:	d879      	bhi.n	8004a42 <UART_SetConfig+0x8b2>
 800494e:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <UART_SetConfig+0x7c4>)
 8004950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004954:	080049df 	.word	0x080049df
 8004958:	080049e7 	.word	0x080049e7
 800495c:	08004a43 	.word	0x08004a43
 8004960:	08004a43 	.word	0x08004a43
 8004964:	080049ef 	.word	0x080049ef
 8004968:	08004a43 	.word	0x08004a43
 800496c:	08004a43 	.word	0x08004a43
 8004970:	08004a43 	.word	0x08004a43
 8004974:	080049ff 	.word	0x080049ff
 8004978:	08004a43 	.word	0x08004a43
 800497c:	08004a43 	.word	0x08004a43
 8004980:	08004a43 	.word	0x08004a43
 8004984:	08004a43 	.word	0x08004a43
 8004988:	08004a43 	.word	0x08004a43
 800498c:	08004a43 	.word	0x08004a43
 8004990:	08004a43 	.word	0x08004a43
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	08004a43 	.word	0x08004a43
 800499c:	08004a43 	.word	0x08004a43
 80049a0:	08004a43 	.word	0x08004a43
 80049a4:	08004a43 	.word	0x08004a43
 80049a8:	08004a43 	.word	0x08004a43
 80049ac:	08004a43 	.word	0x08004a43
 80049b0:	08004a43 	.word	0x08004a43
 80049b4:	08004a43 	.word	0x08004a43
 80049b8:	08004a43 	.word	0x08004a43
 80049bc:	08004a43 	.word	0x08004a43
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004a43 	.word	0x08004a43
 80049c8:	08004a43 	.word	0x08004a43
 80049cc:	08004a43 	.word	0x08004a43
 80049d0:	08004a43 	.word	0x08004a43
 80049d4:	08004a35 	.word	0x08004a35
 80049d8:	2b40      	cmp	r3, #64	@ 0x40
 80049da:	d02e      	beq.n	8004a3a <UART_SetConfig+0x8aa>
 80049dc:	e031      	b.n	8004a42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049de:	f7fd fc61 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 80049e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049e4:	e033      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e6:	f7fd fc73 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 80049ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049ec:	e02f      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe fee2 	bl	80037bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049fc:	e027      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049fe:	f107 0318 	add.w	r3, r7, #24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff f82e 	bl	8003a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a0c:	e01f      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac4 <UART_SetConfig+0x934>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac4 <UART_SetConfig+0x934>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	4a24      	ldr	r2, [pc, #144]	@ (8004ab8 <UART_SetConfig+0x928>)
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a2c:	e00f      	b.n	8004a4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a2e:	4b22      	ldr	r3, [pc, #136]	@ (8004ab8 <UART_SetConfig+0x928>)
 8004a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a32:	e00c      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a34:	4b21      	ldr	r3, [pc, #132]	@ (8004abc <UART_SetConfig+0x92c>)
 8004a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a38:	e009      	b.n	8004a4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a40:	e005      	b.n	8004a4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80e7 	beq.w	8004c24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	4a19      	ldr	r2, [pc, #100]	@ (8004ac0 <UART_SetConfig+0x930>)
 8004a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a60:	461a      	mov	r2, r3
 8004a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a68:	005a      	lsls	r2, r3, #1
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	441a      	add	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	2b0f      	cmp	r3, #15
 8004a80:	d916      	bls.n	8004ab0 <UART_SetConfig+0x920>
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a88:	d212      	bcs.n	8004ab0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	f023 030f 	bic.w	r3, r3, #15
 8004a92:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	e0b9      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ab6:	e0b5      	b.n	8004c24 <UART_SetConfig+0xa94>
 8004ab8:	03d09000 	.word	0x03d09000
 8004abc:	003d0900 	.word	0x003d0900
 8004ac0:	08005c14 	.word	0x08005c14
 8004ac4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	dc49      	bgt.n	8004b64 <UART_SetConfig+0x9d4>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	db7c      	blt.n	8004bce <UART_SetConfig+0xa3e>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d87a      	bhi.n	8004bce <UART_SetConfig+0xa3e>
 8004ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <UART_SetConfig+0x950>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b6b 	.word	0x08004b6b
 8004ae4:	08004b73 	.word	0x08004b73
 8004ae8:	08004bcf 	.word	0x08004bcf
 8004aec:	08004bcf 	.word	0x08004bcf
 8004af0:	08004b7b 	.word	0x08004b7b
 8004af4:	08004bcf 	.word	0x08004bcf
 8004af8:	08004bcf 	.word	0x08004bcf
 8004afc:	08004bcf 	.word	0x08004bcf
 8004b00:	08004b8b 	.word	0x08004b8b
 8004b04:	08004bcf 	.word	0x08004bcf
 8004b08:	08004bcf 	.word	0x08004bcf
 8004b0c:	08004bcf 	.word	0x08004bcf
 8004b10:	08004bcf 	.word	0x08004bcf
 8004b14:	08004bcf 	.word	0x08004bcf
 8004b18:	08004bcf 	.word	0x08004bcf
 8004b1c:	08004bcf 	.word	0x08004bcf
 8004b20:	08004b9b 	.word	0x08004b9b
 8004b24:	08004bcf 	.word	0x08004bcf
 8004b28:	08004bcf 	.word	0x08004bcf
 8004b2c:	08004bcf 	.word	0x08004bcf
 8004b30:	08004bcf 	.word	0x08004bcf
 8004b34:	08004bcf 	.word	0x08004bcf
 8004b38:	08004bcf 	.word	0x08004bcf
 8004b3c:	08004bcf 	.word	0x08004bcf
 8004b40:	08004bcf 	.word	0x08004bcf
 8004b44:	08004bcf 	.word	0x08004bcf
 8004b48:	08004bcf 	.word	0x08004bcf
 8004b4c:	08004bcf 	.word	0x08004bcf
 8004b50:	08004bcf 	.word	0x08004bcf
 8004b54:	08004bcf 	.word	0x08004bcf
 8004b58:	08004bcf 	.word	0x08004bcf
 8004b5c:	08004bcf 	.word	0x08004bcf
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d02e      	beq.n	8004bc6 <UART_SetConfig+0xa36>
 8004b68:	e031      	b.n	8004bce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6a:	f7fd fb9b 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8004b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b70:	e033      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b72:	f7fd fbad 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8004b76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b78:	e02f      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fe1c 	bl	80037bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b88:	e027      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b8a:	f107 0318 	add.w	r3, r7, #24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe ff68 	bl	8003a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b98:	e01f      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <UART_SetConfig+0xac0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c50 <UART_SetConfig+0xac0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	4a28      	ldr	r2, [pc, #160]	@ (8004c54 <UART_SetConfig+0xac4>)
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bb8:	e00f      	b.n	8004bda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004bba:	4b26      	ldr	r3, [pc, #152]	@ (8004c54 <UART_SetConfig+0xac4>)
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bbe:	e00c      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bc0:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <UART_SetConfig+0xac8>)
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bc4:	e009      	b.n	8004bda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bcc:	e005      	b.n	8004bda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004bd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d021      	beq.n	8004c24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <UART_SetConfig+0xacc>)
 8004be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c06:	2b0f      	cmp	r3, #15
 8004c08:	d909      	bls.n	8004c1e <UART_SetConfig+0xa8e>
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c10:	d205      	bcs.n	8004c1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e002      	b.n	8004c24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2200      	movs	r2, #0
 8004c38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c40:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3748      	adds	r7, #72	@ 0x48
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	03d09000 	.word	0x03d09000
 8004c58:	003d0900 	.word	0x003d0900
 8004c5c:	08005c14 	.word	0x08005c14

08004c60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01a      	beq.n	8004d76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5e:	d10a      	bne.n	8004d76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  }
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b098      	sub	sp, #96	@ 0x60
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db4:	f7fb ff92 	bl	8000cdc <HAL_GetTick>
 8004db8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d12f      	bne.n	8004e28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f88e 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d022      	beq.n	8004e28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e6      	bne.n	8004de2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e063      	b.n	8004ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d149      	bne.n	8004eca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f857 	bl	8004ef8 <UART_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d03c      	beq.n	8004eca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e6      	bne.n	8004e50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ea2:	61fa      	str	r2, [r7, #28]
 8004ea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	69b9      	ldr	r1, [r7, #24]
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e012      	b.n	8004ef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3758      	adds	r7, #88	@ 0x58
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	e04f      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d04b      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fb fee3 	bl	8000cdc <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e04e      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d037      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b80      	cmp	r3, #128	@ 0x80
 8004f3e:	d034      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2b40      	cmp	r3, #64	@ 0x40
 8004f44:	d031      	beq.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d110      	bne.n	8004f76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f839 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2208      	movs	r2, #8
 8004f66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e029      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f84:	d111      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f81f 	bl	8004fd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e00f      	b.n	8004fca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d0a0      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b095      	sub	sp, #84	@ 0x54
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ffc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005000:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e6      	bne.n	8004fdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	61fb      	str	r3, [r7, #28]
   return(result);
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <UART_EndRxTransfer+0xc8>)
 8005022:	4013      	ands	r3, r2
 8005024:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800502e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e5      	bne.n	800500e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d118      	bne.n	800507c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60bb      	str	r3, [r7, #8]
   return(result);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005090:	bf00      	nop
 8005092:	3754      	adds	r7, #84	@ 0x54
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	effffffe 	.word	0xeffffffe

080050a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e027      	b.n	8005106 <HAL_UARTEx_DisableFifoMode+0x66>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2224      	movs	r2, #36	@ 0x24
 80050c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005126:	2302      	movs	r3, #2
 8005128:	e02d      	b.n	8005186 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2224      	movs	r2, #36	@ 0x24
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f850 	bl	800520c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e02d      	b.n	8005202 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2224      	movs	r2, #36	@ 0x24
 80051b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f812 	bl	800520c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	2b00      	cmp	r3, #0
 800521a:	d108      	bne.n	800522e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800522c:	e031      	b.n	8005292 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800522e:	2310      	movs	r3, #16
 8005230:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005232:	2310      	movs	r3, #16
 8005234:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0e5b      	lsrs	r3, r3, #25
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	0f5b      	lsrs	r3, r3, #29
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	7b3a      	ldrb	r2, [r7, #12]
 800525a:	4911      	ldr	r1, [pc, #68]	@ (80052a0 <UARTEx_SetNbDataToProcess+0x94>)
 800525c:	5c8a      	ldrb	r2, [r1, r2]
 800525e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005262:	7b3a      	ldrb	r2, [r7, #12]
 8005264:	490f      	ldr	r1, [pc, #60]	@ (80052a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005266:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005268:	fb93 f3f2 	sdiv	r3, r3, r2
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	7b7a      	ldrb	r2, [r7, #13]
 8005278:	4909      	ldr	r1, [pc, #36]	@ (80052a0 <UARTEx_SetNbDataToProcess+0x94>)
 800527a:	5c8a      	ldrb	r2, [r1, r2]
 800527c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005280:	7b7a      	ldrb	r2, [r7, #13]
 8005282:	4908      	ldr	r1, [pc, #32]	@ (80052a4 <UARTEx_SetNbDataToProcess+0x98>)
 8005284:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005286:	fb93 f3f2 	sdiv	r3, r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	08005c2c 	.word	0x08005c2c
 80052a4:	08005c34 	.word	0x08005c34

080052a8 <siprintf>:
 80052a8:	b40e      	push	{r1, r2, r3}
 80052aa:	b500      	push	{lr}
 80052ac:	b09c      	sub	sp, #112	@ 0x70
 80052ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80052b0:	9002      	str	r0, [sp, #8]
 80052b2:	9006      	str	r0, [sp, #24]
 80052b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052b8:	4809      	ldr	r0, [pc, #36]	@ (80052e0 <siprintf+0x38>)
 80052ba:	9107      	str	r1, [sp, #28]
 80052bc:	9104      	str	r1, [sp, #16]
 80052be:	4909      	ldr	r1, [pc, #36]	@ (80052e4 <siprintf+0x3c>)
 80052c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052c4:	9105      	str	r1, [sp, #20]
 80052c6:	6800      	ldr	r0, [r0, #0]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	a902      	add	r1, sp, #8
 80052cc:	f000 f994 	bl	80055f8 <_svfiprintf_r>
 80052d0:	9b02      	ldr	r3, [sp, #8]
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	b01c      	add	sp, #112	@ 0x70
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	b003      	add	sp, #12
 80052de:	4770      	bx	lr
 80052e0:	24000014 	.word	0x24000014
 80052e4:	ffff0208 	.word	0xffff0208

080052e8 <memset>:
 80052e8:	4402      	add	r2, r0
 80052ea:	4603      	mov	r3, r0
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d100      	bne.n	80052f2 <memset+0xa>
 80052f0:	4770      	bx	lr
 80052f2:	f803 1b01 	strb.w	r1, [r3], #1
 80052f6:	e7f9      	b.n	80052ec <memset+0x4>

080052f8 <__errno>:
 80052f8:	4b01      	ldr	r3, [pc, #4]	@ (8005300 <__errno+0x8>)
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	24000014 	.word	0x24000014

08005304 <__libc_init_array>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	4d0d      	ldr	r5, [pc, #52]	@ (800533c <__libc_init_array+0x38>)
 8005308:	4c0d      	ldr	r4, [pc, #52]	@ (8005340 <__libc_init_array+0x3c>)
 800530a:	1b64      	subs	r4, r4, r5
 800530c:	10a4      	asrs	r4, r4, #2
 800530e:	2600      	movs	r6, #0
 8005310:	42a6      	cmp	r6, r4
 8005312:	d109      	bne.n	8005328 <__libc_init_array+0x24>
 8005314:	4d0b      	ldr	r5, [pc, #44]	@ (8005344 <__libc_init_array+0x40>)
 8005316:	4c0c      	ldr	r4, [pc, #48]	@ (8005348 <__libc_init_array+0x44>)
 8005318:	f000 fc66 	bl	8005be8 <_init>
 800531c:	1b64      	subs	r4, r4, r5
 800531e:	10a4      	asrs	r4, r4, #2
 8005320:	2600      	movs	r6, #0
 8005322:	42a6      	cmp	r6, r4
 8005324:	d105      	bne.n	8005332 <__libc_init_array+0x2e>
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	f855 3b04 	ldr.w	r3, [r5], #4
 800532c:	4798      	blx	r3
 800532e:	3601      	adds	r6, #1
 8005330:	e7ee      	b.n	8005310 <__libc_init_array+0xc>
 8005332:	f855 3b04 	ldr.w	r3, [r5], #4
 8005336:	4798      	blx	r3
 8005338:	3601      	adds	r6, #1
 800533a:	e7f2      	b.n	8005322 <__libc_init_array+0x1e>
 800533c:	08005c78 	.word	0x08005c78
 8005340:	08005c78 	.word	0x08005c78
 8005344:	08005c78 	.word	0x08005c78
 8005348:	08005c7c 	.word	0x08005c7c

0800534c <__retarget_lock_acquire_recursive>:
 800534c:	4770      	bx	lr

0800534e <__retarget_lock_release_recursive>:
 800534e:	4770      	bx	lr

08005350 <_free_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	4605      	mov	r5, r0
 8005354:	2900      	cmp	r1, #0
 8005356:	d041      	beq.n	80053dc <_free_r+0x8c>
 8005358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800535c:	1f0c      	subs	r4, r1, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	bfb8      	it	lt
 8005362:	18e4      	addlt	r4, r4, r3
 8005364:	f000 f8e0 	bl	8005528 <__malloc_lock>
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <_free_r+0x90>)
 800536a:	6813      	ldr	r3, [r2, #0]
 800536c:	b933      	cbnz	r3, 800537c <_free_r+0x2c>
 800536e:	6063      	str	r3, [r4, #4]
 8005370:	6014      	str	r4, [r2, #0]
 8005372:	4628      	mov	r0, r5
 8005374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005378:	f000 b8dc 	b.w	8005534 <__malloc_unlock>
 800537c:	42a3      	cmp	r3, r4
 800537e:	d908      	bls.n	8005392 <_free_r+0x42>
 8005380:	6820      	ldr	r0, [r4, #0]
 8005382:	1821      	adds	r1, r4, r0
 8005384:	428b      	cmp	r3, r1
 8005386:	bf01      	itttt	eq
 8005388:	6819      	ldreq	r1, [r3, #0]
 800538a:	685b      	ldreq	r3, [r3, #4]
 800538c:	1809      	addeq	r1, r1, r0
 800538e:	6021      	streq	r1, [r4, #0]
 8005390:	e7ed      	b.n	800536e <_free_r+0x1e>
 8005392:	461a      	mov	r2, r3
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	b10b      	cbz	r3, 800539c <_free_r+0x4c>
 8005398:	42a3      	cmp	r3, r4
 800539a:	d9fa      	bls.n	8005392 <_free_r+0x42>
 800539c:	6811      	ldr	r1, [r2, #0]
 800539e:	1850      	adds	r0, r2, r1
 80053a0:	42a0      	cmp	r0, r4
 80053a2:	d10b      	bne.n	80053bc <_free_r+0x6c>
 80053a4:	6820      	ldr	r0, [r4, #0]
 80053a6:	4401      	add	r1, r0
 80053a8:	1850      	adds	r0, r2, r1
 80053aa:	4283      	cmp	r3, r0
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	d1e0      	bne.n	8005372 <_free_r+0x22>
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	6053      	str	r3, [r2, #4]
 80053b6:	4408      	add	r0, r1
 80053b8:	6010      	str	r0, [r2, #0]
 80053ba:	e7da      	b.n	8005372 <_free_r+0x22>
 80053bc:	d902      	bls.n	80053c4 <_free_r+0x74>
 80053be:	230c      	movs	r3, #12
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	e7d6      	b.n	8005372 <_free_r+0x22>
 80053c4:	6820      	ldr	r0, [r4, #0]
 80053c6:	1821      	adds	r1, r4, r0
 80053c8:	428b      	cmp	r3, r1
 80053ca:	bf04      	itt	eq
 80053cc:	6819      	ldreq	r1, [r3, #0]
 80053ce:	685b      	ldreq	r3, [r3, #4]
 80053d0:	6063      	str	r3, [r4, #4]
 80053d2:	bf04      	itt	eq
 80053d4:	1809      	addeq	r1, r1, r0
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	6054      	str	r4, [r2, #4]
 80053da:	e7ca      	b.n	8005372 <_free_r+0x22>
 80053dc:	bd38      	pop	{r3, r4, r5, pc}
 80053de:	bf00      	nop
 80053e0:	24000268 	.word	0x24000268

080053e4 <sbrk_aligned>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005424 <sbrk_aligned+0x40>)
 80053e8:	460c      	mov	r4, r1
 80053ea:	6831      	ldr	r1, [r6, #0]
 80053ec:	4605      	mov	r5, r0
 80053ee:	b911      	cbnz	r1, 80053f6 <sbrk_aligned+0x12>
 80053f0:	f000 fba6 	bl	8005b40 <_sbrk_r>
 80053f4:	6030      	str	r0, [r6, #0]
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	f000 fba1 	bl	8005b40 <_sbrk_r>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	d103      	bne.n	800540a <sbrk_aligned+0x26>
 8005402:	f04f 34ff 	mov.w	r4, #4294967295
 8005406:	4620      	mov	r0, r4
 8005408:	bd70      	pop	{r4, r5, r6, pc}
 800540a:	1cc4      	adds	r4, r0, #3
 800540c:	f024 0403 	bic.w	r4, r4, #3
 8005410:	42a0      	cmp	r0, r4
 8005412:	d0f8      	beq.n	8005406 <sbrk_aligned+0x22>
 8005414:	1a21      	subs	r1, r4, r0
 8005416:	4628      	mov	r0, r5
 8005418:	f000 fb92 	bl	8005b40 <_sbrk_r>
 800541c:	3001      	adds	r0, #1
 800541e:	d1f2      	bne.n	8005406 <sbrk_aligned+0x22>
 8005420:	e7ef      	b.n	8005402 <sbrk_aligned+0x1e>
 8005422:	bf00      	nop
 8005424:	24000264 	.word	0x24000264

08005428 <_malloc_r>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	1ccd      	adds	r5, r1, #3
 800542e:	f025 0503 	bic.w	r5, r5, #3
 8005432:	3508      	adds	r5, #8
 8005434:	2d0c      	cmp	r5, #12
 8005436:	bf38      	it	cc
 8005438:	250c      	movcc	r5, #12
 800543a:	2d00      	cmp	r5, #0
 800543c:	4606      	mov	r6, r0
 800543e:	db01      	blt.n	8005444 <_malloc_r+0x1c>
 8005440:	42a9      	cmp	r1, r5
 8005442:	d904      	bls.n	800544e <_malloc_r+0x26>
 8005444:	230c      	movs	r3, #12
 8005446:	6033      	str	r3, [r6, #0]
 8005448:	2000      	movs	r0, #0
 800544a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005524 <_malloc_r+0xfc>
 8005452:	f000 f869 	bl	8005528 <__malloc_lock>
 8005456:	f8d8 3000 	ldr.w	r3, [r8]
 800545a:	461c      	mov	r4, r3
 800545c:	bb44      	cbnz	r4, 80054b0 <_malloc_r+0x88>
 800545e:	4629      	mov	r1, r5
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff ffbf 	bl	80053e4 <sbrk_aligned>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	4604      	mov	r4, r0
 800546a:	d158      	bne.n	800551e <_malloc_r+0xf6>
 800546c:	f8d8 4000 	ldr.w	r4, [r8]
 8005470:	4627      	mov	r7, r4
 8005472:	2f00      	cmp	r7, #0
 8005474:	d143      	bne.n	80054fe <_malloc_r+0xd6>
 8005476:	2c00      	cmp	r4, #0
 8005478:	d04b      	beq.n	8005512 <_malloc_r+0xea>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	4639      	mov	r1, r7
 800547e:	4630      	mov	r0, r6
 8005480:	eb04 0903 	add.w	r9, r4, r3
 8005484:	f000 fb5c 	bl	8005b40 <_sbrk_r>
 8005488:	4581      	cmp	r9, r0
 800548a:	d142      	bne.n	8005512 <_malloc_r+0xea>
 800548c:	6821      	ldr	r1, [r4, #0]
 800548e:	1a6d      	subs	r5, r5, r1
 8005490:	4629      	mov	r1, r5
 8005492:	4630      	mov	r0, r6
 8005494:	f7ff ffa6 	bl	80053e4 <sbrk_aligned>
 8005498:	3001      	adds	r0, #1
 800549a:	d03a      	beq.n	8005512 <_malloc_r+0xea>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	442b      	add	r3, r5
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	f8d8 3000 	ldr.w	r3, [r8]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	bb62      	cbnz	r2, 8005504 <_malloc_r+0xdc>
 80054aa:	f8c8 7000 	str.w	r7, [r8]
 80054ae:	e00f      	b.n	80054d0 <_malloc_r+0xa8>
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	1b52      	subs	r2, r2, r5
 80054b4:	d420      	bmi.n	80054f8 <_malloc_r+0xd0>
 80054b6:	2a0b      	cmp	r2, #11
 80054b8:	d917      	bls.n	80054ea <_malloc_r+0xc2>
 80054ba:	1961      	adds	r1, r4, r5
 80054bc:	42a3      	cmp	r3, r4
 80054be:	6025      	str	r5, [r4, #0]
 80054c0:	bf18      	it	ne
 80054c2:	6059      	strne	r1, [r3, #4]
 80054c4:	6863      	ldr	r3, [r4, #4]
 80054c6:	bf08      	it	eq
 80054c8:	f8c8 1000 	streq.w	r1, [r8]
 80054cc:	5162      	str	r2, [r4, r5]
 80054ce:	604b      	str	r3, [r1, #4]
 80054d0:	4630      	mov	r0, r6
 80054d2:	f000 f82f 	bl	8005534 <__malloc_unlock>
 80054d6:	f104 000b 	add.w	r0, r4, #11
 80054da:	1d23      	adds	r3, r4, #4
 80054dc:	f020 0007 	bic.w	r0, r0, #7
 80054e0:	1ac2      	subs	r2, r0, r3
 80054e2:	bf1c      	itt	ne
 80054e4:	1a1b      	subne	r3, r3, r0
 80054e6:	50a3      	strne	r3, [r4, r2]
 80054e8:	e7af      	b.n	800544a <_malloc_r+0x22>
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	bf0c      	ite	eq
 80054f0:	f8c8 2000 	streq.w	r2, [r8]
 80054f4:	605a      	strne	r2, [r3, #4]
 80054f6:	e7eb      	b.n	80054d0 <_malloc_r+0xa8>
 80054f8:	4623      	mov	r3, r4
 80054fa:	6864      	ldr	r4, [r4, #4]
 80054fc:	e7ae      	b.n	800545c <_malloc_r+0x34>
 80054fe:	463c      	mov	r4, r7
 8005500:	687f      	ldr	r7, [r7, #4]
 8005502:	e7b6      	b.n	8005472 <_malloc_r+0x4a>
 8005504:	461a      	mov	r2, r3
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	42a3      	cmp	r3, r4
 800550a:	d1fb      	bne.n	8005504 <_malloc_r+0xdc>
 800550c:	2300      	movs	r3, #0
 800550e:	6053      	str	r3, [r2, #4]
 8005510:	e7de      	b.n	80054d0 <_malloc_r+0xa8>
 8005512:	230c      	movs	r3, #12
 8005514:	6033      	str	r3, [r6, #0]
 8005516:	4630      	mov	r0, r6
 8005518:	f000 f80c 	bl	8005534 <__malloc_unlock>
 800551c:	e794      	b.n	8005448 <_malloc_r+0x20>
 800551e:	6005      	str	r5, [r0, #0]
 8005520:	e7d6      	b.n	80054d0 <_malloc_r+0xa8>
 8005522:	bf00      	nop
 8005524:	24000268 	.word	0x24000268

08005528 <__malloc_lock>:
 8005528:	4801      	ldr	r0, [pc, #4]	@ (8005530 <__malloc_lock+0x8>)
 800552a:	f7ff bf0f 	b.w	800534c <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	24000260 	.word	0x24000260

08005534 <__malloc_unlock>:
 8005534:	4801      	ldr	r0, [pc, #4]	@ (800553c <__malloc_unlock+0x8>)
 8005536:	f7ff bf0a 	b.w	800534e <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	24000260 	.word	0x24000260

08005540 <__ssputs_r>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	688e      	ldr	r6, [r1, #8]
 8005546:	461f      	mov	r7, r3
 8005548:	42be      	cmp	r6, r7
 800554a:	680b      	ldr	r3, [r1, #0]
 800554c:	4682      	mov	sl, r0
 800554e:	460c      	mov	r4, r1
 8005550:	4690      	mov	r8, r2
 8005552:	d82d      	bhi.n	80055b0 <__ssputs_r+0x70>
 8005554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005558:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800555c:	d026      	beq.n	80055ac <__ssputs_r+0x6c>
 800555e:	6965      	ldr	r5, [r4, #20]
 8005560:	6909      	ldr	r1, [r1, #16]
 8005562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005566:	eba3 0901 	sub.w	r9, r3, r1
 800556a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800556e:	1c7b      	adds	r3, r7, #1
 8005570:	444b      	add	r3, r9
 8005572:	106d      	asrs	r5, r5, #1
 8005574:	429d      	cmp	r5, r3
 8005576:	bf38      	it	cc
 8005578:	461d      	movcc	r5, r3
 800557a:	0553      	lsls	r3, r2, #21
 800557c:	d527      	bpl.n	80055ce <__ssputs_r+0x8e>
 800557e:	4629      	mov	r1, r5
 8005580:	f7ff ff52 	bl	8005428 <_malloc_r>
 8005584:	4606      	mov	r6, r0
 8005586:	b360      	cbz	r0, 80055e2 <__ssputs_r+0xa2>
 8005588:	6921      	ldr	r1, [r4, #16]
 800558a:	464a      	mov	r2, r9
 800558c:	f000 fae8 	bl	8005b60 <memcpy>
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	6126      	str	r6, [r4, #16]
 800559e:	6165      	str	r5, [r4, #20]
 80055a0:	444e      	add	r6, r9
 80055a2:	eba5 0509 	sub.w	r5, r5, r9
 80055a6:	6026      	str	r6, [r4, #0]
 80055a8:	60a5      	str	r5, [r4, #8]
 80055aa:	463e      	mov	r6, r7
 80055ac:	42be      	cmp	r6, r7
 80055ae:	d900      	bls.n	80055b2 <__ssputs_r+0x72>
 80055b0:	463e      	mov	r6, r7
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	4632      	mov	r2, r6
 80055b6:	4641      	mov	r1, r8
 80055b8:	f000 faa8 	bl	8005b0c <memmove>
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	1b9b      	subs	r3, r3, r6
 80055c0:	60a3      	str	r3, [r4, #8]
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	4433      	add	r3, r6
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	2000      	movs	r0, #0
 80055ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ce:	462a      	mov	r2, r5
 80055d0:	f000 fad4 	bl	8005b7c <_realloc_r>
 80055d4:	4606      	mov	r6, r0
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d1e0      	bne.n	800559c <__ssputs_r+0x5c>
 80055da:	6921      	ldr	r1, [r4, #16]
 80055dc:	4650      	mov	r0, sl
 80055de:	f7ff feb7 	bl	8005350 <_free_r>
 80055e2:	230c      	movs	r3, #12
 80055e4:	f8ca 3000 	str.w	r3, [sl]
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e7e9      	b.n	80055ca <__ssputs_r+0x8a>
	...

080055f8 <_svfiprintf_r>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	4698      	mov	r8, r3
 80055fe:	898b      	ldrh	r3, [r1, #12]
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	b09d      	sub	sp, #116	@ 0x74
 8005604:	4607      	mov	r7, r0
 8005606:	460d      	mov	r5, r1
 8005608:	4614      	mov	r4, r2
 800560a:	d510      	bpl.n	800562e <_svfiprintf_r+0x36>
 800560c:	690b      	ldr	r3, [r1, #16]
 800560e:	b973      	cbnz	r3, 800562e <_svfiprintf_r+0x36>
 8005610:	2140      	movs	r1, #64	@ 0x40
 8005612:	f7ff ff09 	bl	8005428 <_malloc_r>
 8005616:	6028      	str	r0, [r5, #0]
 8005618:	6128      	str	r0, [r5, #16]
 800561a:	b930      	cbnz	r0, 800562a <_svfiprintf_r+0x32>
 800561c:	230c      	movs	r3, #12
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	b01d      	add	sp, #116	@ 0x74
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562a:	2340      	movs	r3, #64	@ 0x40
 800562c:	616b      	str	r3, [r5, #20]
 800562e:	2300      	movs	r3, #0
 8005630:	9309      	str	r3, [sp, #36]	@ 0x24
 8005632:	2320      	movs	r3, #32
 8005634:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005638:	f8cd 800c 	str.w	r8, [sp, #12]
 800563c:	2330      	movs	r3, #48	@ 0x30
 800563e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057dc <_svfiprintf_r+0x1e4>
 8005642:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005646:	f04f 0901 	mov.w	r9, #1
 800564a:	4623      	mov	r3, r4
 800564c:	469a      	mov	sl, r3
 800564e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005652:	b10a      	cbz	r2, 8005658 <_svfiprintf_r+0x60>
 8005654:	2a25      	cmp	r2, #37	@ 0x25
 8005656:	d1f9      	bne.n	800564c <_svfiprintf_r+0x54>
 8005658:	ebba 0b04 	subs.w	fp, sl, r4
 800565c:	d00b      	beq.n	8005676 <_svfiprintf_r+0x7e>
 800565e:	465b      	mov	r3, fp
 8005660:	4622      	mov	r2, r4
 8005662:	4629      	mov	r1, r5
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff ff6b 	bl	8005540 <__ssputs_r>
 800566a:	3001      	adds	r0, #1
 800566c:	f000 80a7 	beq.w	80057be <_svfiprintf_r+0x1c6>
 8005670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005672:	445a      	add	r2, fp
 8005674:	9209      	str	r2, [sp, #36]	@ 0x24
 8005676:	f89a 3000 	ldrb.w	r3, [sl]
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 809f 	beq.w	80057be <_svfiprintf_r+0x1c6>
 8005680:	2300      	movs	r3, #0
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568a:	f10a 0a01 	add.w	sl, sl, #1
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	9307      	str	r3, [sp, #28]
 8005692:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005696:	931a      	str	r3, [sp, #104]	@ 0x68
 8005698:	4654      	mov	r4, sl
 800569a:	2205      	movs	r2, #5
 800569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a0:	484e      	ldr	r0, [pc, #312]	@ (80057dc <_svfiprintf_r+0x1e4>)
 80056a2:	f7fa fe25 	bl	80002f0 <memchr>
 80056a6:	9a04      	ldr	r2, [sp, #16]
 80056a8:	b9d8      	cbnz	r0, 80056e2 <_svfiprintf_r+0xea>
 80056aa:	06d0      	lsls	r0, r2, #27
 80056ac:	bf44      	itt	mi
 80056ae:	2320      	movmi	r3, #32
 80056b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056b4:	0711      	lsls	r1, r2, #28
 80056b6:	bf44      	itt	mi
 80056b8:	232b      	movmi	r3, #43	@ 0x2b
 80056ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056be:	f89a 3000 	ldrb.w	r3, [sl]
 80056c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c4:	d015      	beq.n	80056f2 <_svfiprintf_r+0xfa>
 80056c6:	9a07      	ldr	r2, [sp, #28]
 80056c8:	4654      	mov	r4, sl
 80056ca:	2000      	movs	r0, #0
 80056cc:	f04f 0c0a 	mov.w	ip, #10
 80056d0:	4621      	mov	r1, r4
 80056d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d6:	3b30      	subs	r3, #48	@ 0x30
 80056d8:	2b09      	cmp	r3, #9
 80056da:	d94b      	bls.n	8005774 <_svfiprintf_r+0x17c>
 80056dc:	b1b0      	cbz	r0, 800570c <_svfiprintf_r+0x114>
 80056de:	9207      	str	r2, [sp, #28]
 80056e0:	e014      	b.n	800570c <_svfiprintf_r+0x114>
 80056e2:	eba0 0308 	sub.w	r3, r0, r8
 80056e6:	fa09 f303 	lsl.w	r3, r9, r3
 80056ea:	4313      	orrs	r3, r2
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	46a2      	mov	sl, r4
 80056f0:	e7d2      	b.n	8005698 <_svfiprintf_r+0xa0>
 80056f2:	9b03      	ldr	r3, [sp, #12]
 80056f4:	1d19      	adds	r1, r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	9103      	str	r1, [sp, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfbb      	ittet	lt
 80056fe:	425b      	neglt	r3, r3
 8005700:	f042 0202 	orrlt.w	r2, r2, #2
 8005704:	9307      	strge	r3, [sp, #28]
 8005706:	9307      	strlt	r3, [sp, #28]
 8005708:	bfb8      	it	lt
 800570a:	9204      	strlt	r2, [sp, #16]
 800570c:	7823      	ldrb	r3, [r4, #0]
 800570e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005710:	d10a      	bne.n	8005728 <_svfiprintf_r+0x130>
 8005712:	7863      	ldrb	r3, [r4, #1]
 8005714:	2b2a      	cmp	r3, #42	@ 0x2a
 8005716:	d132      	bne.n	800577e <_svfiprintf_r+0x186>
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	9203      	str	r2, [sp, #12]
 8005720:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005724:	3402      	adds	r4, #2
 8005726:	9305      	str	r3, [sp, #20]
 8005728:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057ec <_svfiprintf_r+0x1f4>
 800572c:	7821      	ldrb	r1, [r4, #0]
 800572e:	2203      	movs	r2, #3
 8005730:	4650      	mov	r0, sl
 8005732:	f7fa fddd 	bl	80002f0 <memchr>
 8005736:	b138      	cbz	r0, 8005748 <_svfiprintf_r+0x150>
 8005738:	9b04      	ldr	r3, [sp, #16]
 800573a:	eba0 000a 	sub.w	r0, r0, sl
 800573e:	2240      	movs	r2, #64	@ 0x40
 8005740:	4082      	lsls	r2, r0
 8005742:	4313      	orrs	r3, r2
 8005744:	3401      	adds	r4, #1
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574c:	4824      	ldr	r0, [pc, #144]	@ (80057e0 <_svfiprintf_r+0x1e8>)
 800574e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005752:	2206      	movs	r2, #6
 8005754:	f7fa fdcc 	bl	80002f0 <memchr>
 8005758:	2800      	cmp	r0, #0
 800575a:	d036      	beq.n	80057ca <_svfiprintf_r+0x1d2>
 800575c:	4b21      	ldr	r3, [pc, #132]	@ (80057e4 <_svfiprintf_r+0x1ec>)
 800575e:	bb1b      	cbnz	r3, 80057a8 <_svfiprintf_r+0x1b0>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	3307      	adds	r3, #7
 8005764:	f023 0307 	bic.w	r3, r3, #7
 8005768:	3308      	adds	r3, #8
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800576e:	4433      	add	r3, r6
 8005770:	9309      	str	r3, [sp, #36]	@ 0x24
 8005772:	e76a      	b.n	800564a <_svfiprintf_r+0x52>
 8005774:	fb0c 3202 	mla	r2, ip, r2, r3
 8005778:	460c      	mov	r4, r1
 800577a:	2001      	movs	r0, #1
 800577c:	e7a8      	b.n	80056d0 <_svfiprintf_r+0xd8>
 800577e:	2300      	movs	r3, #0
 8005780:	3401      	adds	r4, #1
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	4619      	mov	r1, r3
 8005786:	f04f 0c0a 	mov.w	ip, #10
 800578a:	4620      	mov	r0, r4
 800578c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005790:	3a30      	subs	r2, #48	@ 0x30
 8005792:	2a09      	cmp	r2, #9
 8005794:	d903      	bls.n	800579e <_svfiprintf_r+0x1a6>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0c6      	beq.n	8005728 <_svfiprintf_r+0x130>
 800579a:	9105      	str	r1, [sp, #20]
 800579c:	e7c4      	b.n	8005728 <_svfiprintf_r+0x130>
 800579e:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a2:	4604      	mov	r4, r0
 80057a4:	2301      	movs	r3, #1
 80057a6:	e7f0      	b.n	800578a <_svfiprintf_r+0x192>
 80057a8:	ab03      	add	r3, sp, #12
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	462a      	mov	r2, r5
 80057ae:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <_svfiprintf_r+0x1f0>)
 80057b0:	a904      	add	r1, sp, #16
 80057b2:	4638      	mov	r0, r7
 80057b4:	f3af 8000 	nop.w
 80057b8:	1c42      	adds	r2, r0, #1
 80057ba:	4606      	mov	r6, r0
 80057bc:	d1d6      	bne.n	800576c <_svfiprintf_r+0x174>
 80057be:	89ab      	ldrh	r3, [r5, #12]
 80057c0:	065b      	lsls	r3, r3, #25
 80057c2:	f53f af2d 	bmi.w	8005620 <_svfiprintf_r+0x28>
 80057c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c8:	e72c      	b.n	8005624 <_svfiprintf_r+0x2c>
 80057ca:	ab03      	add	r3, sp, #12
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	462a      	mov	r2, r5
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <_svfiprintf_r+0x1f0>)
 80057d2:	a904      	add	r1, sp, #16
 80057d4:	4638      	mov	r0, r7
 80057d6:	f000 f879 	bl	80058cc <_printf_i>
 80057da:	e7ed      	b.n	80057b8 <_svfiprintf_r+0x1c0>
 80057dc:	08005c3c 	.word	0x08005c3c
 80057e0:	08005c46 	.word	0x08005c46
 80057e4:	00000000 	.word	0x00000000
 80057e8:	08005541 	.word	0x08005541
 80057ec:	08005c42 	.word	0x08005c42

080057f0 <_printf_common>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	4616      	mov	r6, r2
 80057f6:	4698      	mov	r8, r3
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	690b      	ldr	r3, [r1, #16]
 80057fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005800:	4293      	cmp	r3, r2
 8005802:	bfb8      	it	lt
 8005804:	4613      	movlt	r3, r2
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800580c:	4607      	mov	r7, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b10a      	cbz	r2, 8005816 <_printf_common+0x26>
 8005812:	3301      	adds	r3, #1
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	0699      	lsls	r1, r3, #26
 800581a:	bf42      	ittt	mi
 800581c:	6833      	ldrmi	r3, [r6, #0]
 800581e:	3302      	addmi	r3, #2
 8005820:	6033      	strmi	r3, [r6, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	f015 0506 	ands.w	r5, r5, #6
 8005828:	d106      	bne.n	8005838 <_printf_common+0x48>
 800582a:	f104 0a19 	add.w	sl, r4, #25
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	6832      	ldr	r2, [r6, #0]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	42ab      	cmp	r3, r5
 8005836:	dc26      	bgt.n	8005886 <_printf_common+0x96>
 8005838:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	3b00      	subs	r3, #0
 8005840:	bf18      	it	ne
 8005842:	2301      	movne	r3, #1
 8005844:	0692      	lsls	r2, r2, #26
 8005846:	d42b      	bmi.n	80058a0 <_printf_common+0xb0>
 8005848:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800584c:	4641      	mov	r1, r8
 800584e:	4638      	mov	r0, r7
 8005850:	47c8      	blx	r9
 8005852:	3001      	adds	r0, #1
 8005854:	d01e      	beq.n	8005894 <_printf_common+0xa4>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	2b04      	cmp	r3, #4
 8005860:	bf02      	ittt	eq
 8005862:	68e5      	ldreq	r5, [r4, #12]
 8005864:	6833      	ldreq	r3, [r6, #0]
 8005866:	1aed      	subeq	r5, r5, r3
 8005868:	68a3      	ldr	r3, [r4, #8]
 800586a:	bf0c      	ite	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	2500      	movne	r5, #0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfc4      	itt	gt
 8005876:	1a9b      	subgt	r3, r3, r2
 8005878:	18ed      	addgt	r5, r5, r3
 800587a:	2600      	movs	r6, #0
 800587c:	341a      	adds	r4, #26
 800587e:	42b5      	cmp	r5, r6
 8005880:	d11a      	bne.n	80058b8 <_printf_common+0xc8>
 8005882:	2000      	movs	r0, #0
 8005884:	e008      	b.n	8005898 <_printf_common+0xa8>
 8005886:	2301      	movs	r3, #1
 8005888:	4652      	mov	r2, sl
 800588a:	4641      	mov	r1, r8
 800588c:	4638      	mov	r0, r7
 800588e:	47c8      	blx	r9
 8005890:	3001      	adds	r0, #1
 8005892:	d103      	bne.n	800589c <_printf_common+0xac>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	3501      	adds	r5, #1
 800589e:	e7c6      	b.n	800582e <_printf_common+0x3e>
 80058a0:	18e1      	adds	r1, r4, r3
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	2030      	movs	r0, #48	@ 0x30
 80058a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058aa:	4422      	add	r2, r4
 80058ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058b4:	3302      	adds	r3, #2
 80058b6:	e7c7      	b.n	8005848 <_printf_common+0x58>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4622      	mov	r2, r4
 80058bc:	4641      	mov	r1, r8
 80058be:	4638      	mov	r0, r7
 80058c0:	47c8      	blx	r9
 80058c2:	3001      	adds	r0, #1
 80058c4:	d0e6      	beq.n	8005894 <_printf_common+0xa4>
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7d9      	b.n	800587e <_printf_common+0x8e>
	...

080058cc <_printf_i>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	7e0f      	ldrb	r7, [r1, #24]
 80058d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058d4:	2f78      	cmp	r7, #120	@ 0x78
 80058d6:	4691      	mov	r9, r2
 80058d8:	4680      	mov	r8, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	469a      	mov	sl, r3
 80058de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058e2:	d807      	bhi.n	80058f4 <_printf_i+0x28>
 80058e4:	2f62      	cmp	r7, #98	@ 0x62
 80058e6:	d80a      	bhi.n	80058fe <_printf_i+0x32>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f000 80d2 	beq.w	8005a92 <_printf_i+0x1c6>
 80058ee:	2f58      	cmp	r7, #88	@ 0x58
 80058f0:	f000 80b9 	beq.w	8005a66 <_printf_i+0x19a>
 80058f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058fc:	e03a      	b.n	8005974 <_printf_i+0xa8>
 80058fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005902:	2b15      	cmp	r3, #21
 8005904:	d8f6      	bhi.n	80058f4 <_printf_i+0x28>
 8005906:	a101      	add	r1, pc, #4	@ (adr r1, 800590c <_printf_i+0x40>)
 8005908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005979 	.word	0x08005979
 8005914:	080058f5 	.word	0x080058f5
 8005918:	080058f5 	.word	0x080058f5
 800591c:	080058f5 	.word	0x080058f5
 8005920:	080058f5 	.word	0x080058f5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058f5 	.word	0x080058f5
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005a79 	.word	0x08005a79
 800593c:	080059a3 	.word	0x080059a3
 8005940:	08005a33 	.word	0x08005a33
 8005944:	080058f5 	.word	0x080058f5
 8005948:	080058f5 	.word	0x080058f5
 800594c:	08005a9b 	.word	0x08005a9b
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080059a3 	.word	0x080059a3
 8005958:	080058f5 	.word	0x080058f5
 800595c:	080058f5 	.word	0x080058f5
 8005960:	08005a3b 	.word	0x08005a3b
 8005964:	6833      	ldr	r3, [r6, #0]
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6032      	str	r2, [r6, #0]
 800596c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e09d      	b.n	8005ab4 <_printf_i+0x1e8>
 8005978:	6833      	ldr	r3, [r6, #0]
 800597a:	6820      	ldr	r0, [r4, #0]
 800597c:	1d19      	adds	r1, r3, #4
 800597e:	6031      	str	r1, [r6, #0]
 8005980:	0606      	lsls	r6, r0, #24
 8005982:	d501      	bpl.n	8005988 <_printf_i+0xbc>
 8005984:	681d      	ldr	r5, [r3, #0]
 8005986:	e003      	b.n	8005990 <_printf_i+0xc4>
 8005988:	0645      	lsls	r5, r0, #25
 800598a:	d5fb      	bpl.n	8005984 <_printf_i+0xb8>
 800598c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005990:	2d00      	cmp	r5, #0
 8005992:	da03      	bge.n	800599c <_printf_i+0xd0>
 8005994:	232d      	movs	r3, #45	@ 0x2d
 8005996:	426d      	negs	r5, r5
 8005998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599c:	4859      	ldr	r0, [pc, #356]	@ (8005b04 <_printf_i+0x238>)
 800599e:	230a      	movs	r3, #10
 80059a0:	e011      	b.n	80059c6 <_printf_i+0xfa>
 80059a2:	6821      	ldr	r1, [r4, #0]
 80059a4:	6833      	ldr	r3, [r6, #0]
 80059a6:	0608      	lsls	r0, r1, #24
 80059a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059ac:	d402      	bmi.n	80059b4 <_printf_i+0xe8>
 80059ae:	0649      	lsls	r1, r1, #25
 80059b0:	bf48      	it	mi
 80059b2:	b2ad      	uxthmi	r5, r5
 80059b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80059b6:	4853      	ldr	r0, [pc, #332]	@ (8005b04 <_printf_i+0x238>)
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	bf14      	ite	ne
 80059bc:	230a      	movne	r3, #10
 80059be:	2308      	moveq	r3, #8
 80059c0:	2100      	movs	r1, #0
 80059c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059c6:	6866      	ldr	r6, [r4, #4]
 80059c8:	60a6      	str	r6, [r4, #8]
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	bfa2      	ittt	ge
 80059ce:	6821      	ldrge	r1, [r4, #0]
 80059d0:	f021 0104 	bicge.w	r1, r1, #4
 80059d4:	6021      	strge	r1, [r4, #0]
 80059d6:	b90d      	cbnz	r5, 80059dc <_printf_i+0x110>
 80059d8:	2e00      	cmp	r6, #0
 80059da:	d04b      	beq.n	8005a74 <_printf_i+0x1a8>
 80059dc:	4616      	mov	r6, r2
 80059de:	fbb5 f1f3 	udiv	r1, r5, r3
 80059e2:	fb03 5711 	mls	r7, r3, r1, r5
 80059e6:	5dc7      	ldrb	r7, [r0, r7]
 80059e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059ec:	462f      	mov	r7, r5
 80059ee:	42bb      	cmp	r3, r7
 80059f0:	460d      	mov	r5, r1
 80059f2:	d9f4      	bls.n	80059de <_printf_i+0x112>
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d10b      	bne.n	8005a10 <_printf_i+0x144>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	07df      	lsls	r7, r3, #31
 80059fc:	d508      	bpl.n	8005a10 <_printf_i+0x144>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	6861      	ldr	r1, [r4, #4]
 8005a02:	4299      	cmp	r1, r3
 8005a04:	bfde      	ittt	le
 8005a06:	2330      	movle	r3, #48	@ 0x30
 8005a08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a10:	1b92      	subs	r2, r2, r6
 8005a12:	6122      	str	r2, [r4, #16]
 8005a14:	f8cd a000 	str.w	sl, [sp]
 8005a18:	464b      	mov	r3, r9
 8005a1a:	aa03      	add	r2, sp, #12
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4640      	mov	r0, r8
 8005a20:	f7ff fee6 	bl	80057f0 <_printf_common>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d14a      	bne.n	8005abe <_printf_i+0x1f2>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b004      	add	sp, #16
 8005a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f043 0320 	orr.w	r3, r3, #32
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	4833      	ldr	r0, [pc, #204]	@ (8005b08 <_printf_i+0x23c>)
 8005a3c:	2778      	movs	r7, #120	@ 0x78
 8005a3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	6831      	ldr	r1, [r6, #0]
 8005a46:	061f      	lsls	r7, r3, #24
 8005a48:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a4c:	d402      	bmi.n	8005a54 <_printf_i+0x188>
 8005a4e:	065f      	lsls	r7, r3, #25
 8005a50:	bf48      	it	mi
 8005a52:	b2ad      	uxthmi	r5, r5
 8005a54:	6031      	str	r1, [r6, #0]
 8005a56:	07d9      	lsls	r1, r3, #31
 8005a58:	bf44      	itt	mi
 8005a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5e:	6023      	strmi	r3, [r4, #0]
 8005a60:	b11d      	cbz	r5, 8005a6a <_printf_i+0x19e>
 8005a62:	2310      	movs	r3, #16
 8005a64:	e7ac      	b.n	80059c0 <_printf_i+0xf4>
 8005a66:	4827      	ldr	r0, [pc, #156]	@ (8005b04 <_printf_i+0x238>)
 8005a68:	e7e9      	b.n	8005a3e <_printf_i+0x172>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f023 0320 	bic.w	r3, r3, #32
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	e7f6      	b.n	8005a62 <_printf_i+0x196>
 8005a74:	4616      	mov	r6, r2
 8005a76:	e7bd      	b.n	80059f4 <_printf_i+0x128>
 8005a78:	6833      	ldr	r3, [r6, #0]
 8005a7a:	6825      	ldr	r5, [r4, #0]
 8005a7c:	6961      	ldr	r1, [r4, #20]
 8005a7e:	1d18      	adds	r0, r3, #4
 8005a80:	6030      	str	r0, [r6, #0]
 8005a82:	062e      	lsls	r6, r5, #24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	d501      	bpl.n	8005a8c <_printf_i+0x1c0>
 8005a88:	6019      	str	r1, [r3, #0]
 8005a8a:	e002      	b.n	8005a92 <_printf_i+0x1c6>
 8005a8c:	0668      	lsls	r0, r5, #25
 8005a8e:	d5fb      	bpl.n	8005a88 <_printf_i+0x1bc>
 8005a90:	8019      	strh	r1, [r3, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	4616      	mov	r6, r2
 8005a98:	e7bc      	b.n	8005a14 <_printf_i+0x148>
 8005a9a:	6833      	ldr	r3, [r6, #0]
 8005a9c:	1d1a      	adds	r2, r3, #4
 8005a9e:	6032      	str	r2, [r6, #0]
 8005aa0:	681e      	ldr	r6, [r3, #0]
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f7fa fc22 	bl	80002f0 <memchr>
 8005aac:	b108      	cbz	r0, 8005ab2 <_printf_i+0x1e6>
 8005aae:	1b80      	subs	r0, r0, r6
 8005ab0:	6060      	str	r0, [r4, #4]
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005abc:	e7aa      	b.n	8005a14 <_printf_i+0x148>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	47d0      	blx	sl
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0ad      	beq.n	8005a28 <_printf_i+0x15c>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	079b      	lsls	r3, r3, #30
 8005ad0:	d413      	bmi.n	8005afa <_printf_i+0x22e>
 8005ad2:	68e0      	ldr	r0, [r4, #12]
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	4298      	cmp	r0, r3
 8005ad8:	bfb8      	it	lt
 8005ada:	4618      	movlt	r0, r3
 8005adc:	e7a6      	b.n	8005a2c <_printf_i+0x160>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	47d0      	blx	sl
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d09d      	beq.n	8005a28 <_printf_i+0x15c>
 8005aec:	3501      	adds	r5, #1
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	9903      	ldr	r1, [sp, #12]
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dcf2      	bgt.n	8005ade <_printf_i+0x212>
 8005af8:	e7eb      	b.n	8005ad2 <_printf_i+0x206>
 8005afa:	2500      	movs	r5, #0
 8005afc:	f104 0619 	add.w	r6, r4, #25
 8005b00:	e7f5      	b.n	8005aee <_printf_i+0x222>
 8005b02:	bf00      	nop
 8005b04:	08005c4d 	.word	0x08005c4d
 8005b08:	08005c5e 	.word	0x08005c5e

08005b0c <memmove>:
 8005b0c:	4288      	cmp	r0, r1
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	eb01 0402 	add.w	r4, r1, r2
 8005b14:	d902      	bls.n	8005b1c <memmove+0x10>
 8005b16:	4284      	cmp	r4, r0
 8005b18:	4623      	mov	r3, r4
 8005b1a:	d807      	bhi.n	8005b2c <memmove+0x20>
 8005b1c:	1e43      	subs	r3, r0, #1
 8005b1e:	42a1      	cmp	r1, r4
 8005b20:	d008      	beq.n	8005b34 <memmove+0x28>
 8005b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b2a:	e7f8      	b.n	8005b1e <memmove+0x12>
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4601      	mov	r1, r0
 8005b30:	428a      	cmp	r2, r1
 8005b32:	d100      	bne.n	8005b36 <memmove+0x2a>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b3e:	e7f7      	b.n	8005b30 <memmove+0x24>

08005b40 <_sbrk_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d06      	ldr	r5, [pc, #24]	@ (8005b5c <_sbrk_r+0x1c>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f7fa ffe0 	bl	8000b10 <_sbrk>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_sbrk_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_sbrk_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	2400025c 	.word	0x2400025c

08005b60 <memcpy>:
 8005b60:	440a      	add	r2, r1
 8005b62:	4291      	cmp	r1, r2
 8005b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b68:	d100      	bne.n	8005b6c <memcpy+0xc>
 8005b6a:	4770      	bx	lr
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b76:	4291      	cmp	r1, r2
 8005b78:	d1f9      	bne.n	8005b6e <memcpy+0xe>
 8005b7a:	bd10      	pop	{r4, pc}

08005b7c <_realloc_r>:
 8005b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b80:	4680      	mov	r8, r0
 8005b82:	4615      	mov	r5, r2
 8005b84:	460c      	mov	r4, r1
 8005b86:	b921      	cbnz	r1, 8005b92 <_realloc_r+0x16>
 8005b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	f7ff bc4b 	b.w	8005428 <_malloc_r>
 8005b92:	b92a      	cbnz	r2, 8005ba0 <_realloc_r+0x24>
 8005b94:	f7ff fbdc 	bl	8005350 <_free_r>
 8005b98:	2400      	movs	r4, #0
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	f000 f81a 	bl	8005bd8 <_malloc_usable_size_r>
 8005ba4:	4285      	cmp	r5, r0
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	d802      	bhi.n	8005bb0 <_realloc_r+0x34>
 8005baa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005bae:	d8f4      	bhi.n	8005b9a <_realloc_r+0x1e>
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f7ff fc38 	bl	8005428 <_malloc_r>
 8005bb8:	4607      	mov	r7, r0
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d0ec      	beq.n	8005b98 <_realloc_r+0x1c>
 8005bbe:	42b5      	cmp	r5, r6
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	bf28      	it	cs
 8005bc6:	4632      	movcs	r2, r6
 8005bc8:	f7ff ffca 	bl	8005b60 <memcpy>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4640      	mov	r0, r8
 8005bd0:	f7ff fbbe 	bl	8005350 <_free_r>
 8005bd4:	463c      	mov	r4, r7
 8005bd6:	e7e0      	b.n	8005b9a <_realloc_r+0x1e>

08005bd8 <_malloc_usable_size_r>:
 8005bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bdc:	1f18      	subs	r0, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfbc      	itt	lt
 8005be2:	580b      	ldrlt	r3, [r1, r0]
 8005be4:	18c0      	addlt	r0, r0, r3
 8005be6:	4770      	bx	lr

08005be8 <_init>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr

08005bf4 <_fini>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	bf00      	nop
 8005bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfa:	bc08      	pop	{r3}
 8005bfc:	469e      	mov	lr, r3
 8005bfe:	4770      	bx	lr
