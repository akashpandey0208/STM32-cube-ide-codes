
SPI_MASTER_H747I_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066e4  080066e4  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080066e4  080066e4  000076e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066ec  080066ec  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066ec  080066ec  000076ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080066f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  24000010  08006704  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400014c  08006704  0000814c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e6a  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002498  00000000  00000000  0001aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a56  00000000  00000000  0001e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003eef0  00000000  00000000  0001eafe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f15  00000000  00000000  0005d9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198740  00000000  00000000  00071903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020a043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e4  00000000  00000000  0020a088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0020d86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006684 	.word	0x08006684

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08006684 	.word	0x08006684

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b32      	ldr	r3, [pc, #200]	@ (80007cc <main+0xd8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	60fa      	str	r2, [r7, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 f9c5 	bl	8000aac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fb49 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f85b 	bl	80007e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <main+0xd8>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a26      	ldr	r2, [pc, #152]	@ (80007cc <main+0xd8>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <main+0xd8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 f915 	bl	8001978 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 f92b 	bl	80019ac <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <main+0xd8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	60fa      	str	r2, [r7, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f997 	bl	8000aac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f939 	bl	80009f4 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000782:	f000 f895 	bl	80008b0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000786:	f000 f8e9 	bl	800095c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_to_send = 0x01;
 800078a:	2301      	movs	r3, #1
 800078c:	72fb      	strb	r3, [r7, #11]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) { // Button pressed
 800078e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000792:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <main+0xdc>)
 8000794:	f001 f8d8 	bl	8001948 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d1f7      	bne.n	800078e <main+0x9a>

	              if(HAL_SPI_Transmit(&hspi5, &data_to_send, 1, HAL_MAX_DELAY)== HAL_OK)// Transmit SPI data
 800079e:	f107 010b 	add.w	r1, r7, #11
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2201      	movs	r2, #1
 80007a8:	480a      	ldr	r0, [pc, #40]	@ (80007d4 <main+0xe0>)
 80007aa:	f004 f8e3 	bl	8004974 <HAL_SPI_Transmit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d106      	bne.n	80007c2 <main+0xce>
	              {
	              HAL_UART_Transmit(&huart1, (uint8_t *)"Tx_Success\r\n", 10, HAL_MAX_DELAY);
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	220a      	movs	r2, #10
 80007ba:	4907      	ldr	r1, [pc, #28]	@ (80007d8 <main+0xe4>)
 80007bc:	4807      	ldr	r0, [pc, #28]	@ (80007dc <main+0xe8>)
 80007be:	f004 fe1a 	bl	80053f6 <HAL_UART_Transmit>
	              }
	              HAL_Delay(500); // Debounce delay
 80007c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c6:	f000 fb89 	bl	8000edc <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) { // Button pressed
 80007ca:	e7e0      	b.n	800078e <main+0x9a>
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020800 	.word	0x58020800
 80007d4:	2400002c 	.word	0x2400002c
 80007d8:	0800669c 	.word	0x0800669c
 80007dc:	240000b4 	.word	0x240000b4

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	@ 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ea:	224c      	movs	r2, #76	@ 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 ff1c 	bl	800662c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 ff16 	bl	800662c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000800:	2004      	movs	r0, #4
 8000802:	f001 f8e7 	bl	80019d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <SystemClock_Config+0xc8>)
 800080c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800080e:	4a26      	ldr	r2, [pc, #152]	@ (80008a8 <SystemClock_Config+0xc8>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000816:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <SystemClock_Config+0xc8>)
 8000818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <SystemClock_Config+0xcc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <SystemClock_Config+0xcc>)
 8000826:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <SystemClock_Config+0xcc>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000838:	bf00      	nop
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <SystemClock_Config+0xcc>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000846:	d1f8      	bne.n	800083a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800084c:	2301      	movs	r3, #1
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000850:	2340      	movs	r3, #64	@ 0x40
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000854:	2300      	movs	r3, #0
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f913 	bl	8001a88 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000868:	f000 f920 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	233f      	movs	r3, #63	@ 0x3f
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000878:	2309      	movs	r3, #9
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fd53 	bl	800233c <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800089c:	f000 f906 	bl	8000aac <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3770      	adds	r7, #112	@ 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58000400 	.word	0x58000400
 80008ac:	58024800 	.word	0x58024800

080008b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008b6:	4a28      	ldr	r2, [pc, #160]	@ (8000958 <MX_SPI5_Init+0xa8>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80008fa:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <MX_SPI5_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_SPI5_Init+0xa4>)
 8000902:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000906:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_SPI5_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_SPI5_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_SPI5_Init+0xa4>)
 8000916:	2200      	movs	r2, #0
 8000918:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_SPI5_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_SPI5_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_SPI5_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_SPI5_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_SPI5_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_SPI5_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_SPI5_Init+0xa4>)
 8000940:	f003 fef4 	bl	800472c <HAL_SPI_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 800094a:	f000 f8af 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2400002c 	.word	0x2400002c
 8000958:	40015000 	.word	0x40015000

0800095c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 8000962:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <MX_USART1_UART_Init+0x94>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a4:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 80009a6:	f004 fcd6 	bl	8005356 <HAL_UART_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 f87c 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	480d      	ldr	r0, [pc, #52]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 80009b8:	f005 fd6d 	bl	8006496 <HAL_UARTEx_SetTxFifoThreshold>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 f873 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4808      	ldr	r0, [pc, #32]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 80009ca:	f005 fda2 	bl	8006512 <HAL_UARTEx_SetRxFifoThreshold>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009d4:	f000 f86a 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_USART1_UART_Init+0x90>)
 80009da:	f005 fd23 	bl	8006424 <HAL_UARTEx_DisableFifoMode>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009e4:	f000 f862 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	240000b4 	.word	0x240000b4
 80009f0:	40011000 	.word	0x40011000

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	4a24      	ldr	r2, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1a:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a56:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_GPIO_Init+0xb0>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0xb4>)
 8000a98:	f000 fda6 	bl	80015e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	58020800 	.word	0x58020800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <HAL_MspInit+0x30>)
 8000ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ac4:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x30>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_MspInit+0x30>)
 8000ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	58024400 	.word	0x58024400

08000aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0be      	sub	sp, #248	@ 0xf8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	22c8      	movs	r2, #200	@ 0xc8
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f005 fd8d 	bl	800662c <memset>
  if(hspi->Instance==SPI5)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3d      	ldr	r2, [pc, #244]	@ (8000c0c <HAL_SPI_MspInit+0x120>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d172      	bne.n	8000c02 <HAL_SPI_MspInit+0x116>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8000b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 ff8e 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000b3e:	f7ff ffb5 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000b42:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b48:	4a31      	ldr	r2, [pc, #196]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b52:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b60:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	4a2a      	ldr	r2, [pc, #168]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b70:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b7e:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	4a22      	ldr	r2, [pc, #136]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_SPI_MspInit+0x124>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <HAL_SPI_MspInit+0x128>)
 8000bc2:	f000 fd11 	bl	80015e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000bc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000be0:	2305      	movs	r3, #5
 8000be2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000be6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bea:	4619      	mov	r1, r3
 8000bec:	480a      	ldr	r0, [pc, #40]	@ (8000c18 <HAL_SPI_MspInit+0x12c>)
 8000bee:	f000 fcfb 	bl	80015e8 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2055      	movs	r0, #85	@ 0x55
 8000bf8:	f000 fa7b 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8000bfc:	2055      	movs	r0, #85	@ 0x55
 8000bfe:	f000 fa92 	bl	8001126 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000c02:	bf00      	nop
 8000c04:	37f8      	adds	r7, #248	@ 0xf8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40015000 	.word	0x40015000
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58022800 	.word	0x58022800
 8000c18:	58022400 	.word	0x58022400

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0bc      	sub	sp, #240	@ 0xf0
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	22c8      	movs	r2, #200	@ 0xc8
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f005 fcf5 	bl	800662c <memset>
  if(huart->Instance==USART1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a27      	ldr	r2, [pc, #156]	@ (8000ce4 <HAL_UART_MspInit+0xc8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d146      	bne.n	8000cda <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c4c:	f04f 0201 	mov.w	r2, #1
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fef6 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c6e:	f7ff ff1d 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_UART_MspInit+0xcc>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000cae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <HAL_UART_MspInit+0xd0>)
 8000cd6:	f000 fc87 	bl	80015e8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cda:	bf00      	nop
 8000cdc:	37f0      	adds	r7, #240	@ 0xf0
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40011000 	.word	0x40011000
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020000 	.word	0x58020000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f8a9 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <SPI5_IRQHandler+0x10>)
 8000d56:	f003 fffb 	bl	8004d50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2400002c 	.word	0x2400002c

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d68:	f7ff fc2e 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f005 fc53 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fcad 	bl	80006f4 <main>
  bx  lr
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000da0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000da4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000da8:	080066f4 	.word	0x080066f4
  ldr r2, =_sbss
 8000dac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000db0:	2400014c 	.word	0x2400014c

08000db4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC3_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f000 f98c 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dc4:	f001 fc70 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <HAL_Init+0x68>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	f003 030f 	and.w	r3, r3, #15
 8000dd4:	4913      	ldr	r1, [pc, #76]	@ (8000e24 <HAL_Init+0x6c>)
 8000dd6:	5ccb      	ldrb	r3, [r1, r3]
 8000dd8:	f003 031f 	and.w	r3, r3, #31
 8000ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8000de0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_Init+0x68>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	4a0e      	ldr	r2, [pc, #56]	@ (8000e24 <HAL_Init+0x6c>)
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	fa22 f303 	lsr.w	r3, r2, r3
 8000df8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <HAL_Init+0x70>)
 8000dfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <HAL_Init+0x74>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f814 	bl	8000e30 <HAL_InitTick>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e002      	b.n	8000e18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e12:	f7ff fe51 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58024400 	.word	0x58024400
 8000e24:	080066ac 	.word	0x080066ac
 8000e28:	24000004 	.word	0x24000004
 8000e2c:	24000000 	.word	0x24000000

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_InitTick+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e021      	b.n	8000e88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_InitTick+0x64>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f971 	bl	8001142 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f93b 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_InitTick+0x68>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2400000c 	.word	0x2400000c
 8000e94:	24000000 	.word	0x24000000
 8000e98:	24000008 	.word	0x24000008

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2400000c 	.word	0x2400000c
 8000ec0:	24000148 	.word	0x24000148

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	24000148 	.word	0x24000148

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2400000c 	.word	0x2400000c

08000f24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetREVID+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	5c001000 	.word	0x5c001000

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	05fa0000 	.word	0x05fa0000

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff40 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff90 	bl	8001030 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff33 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa4 	bl	8001098 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e237      	b.n	80015de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d004      	beq.n	8001184 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2280      	movs	r2, #128	@ 0x80
 800117e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e22c      	b.n	80015de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a5c      	ldr	r2, [pc, #368]	@ (80012fc <HAL_DMA_Abort_IT+0x1a0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d04a      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a5b      	ldr	r2, [pc, #364]	@ (8001300 <HAL_DMA_Abort_IT+0x1a4>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d045      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a59      	ldr	r2, [pc, #356]	@ (8001304 <HAL_DMA_Abort_IT+0x1a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d040      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a58      	ldr	r2, [pc, #352]	@ (8001308 <HAL_DMA_Abort_IT+0x1ac>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d03b      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a56      	ldr	r2, [pc, #344]	@ (800130c <HAL_DMA_Abort_IT+0x1b0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d036      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a55      	ldr	r2, [pc, #340]	@ (8001310 <HAL_DMA_Abort_IT+0x1b4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d031      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a53      	ldr	r2, [pc, #332]	@ (8001314 <HAL_DMA_Abort_IT+0x1b8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02c      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a52      	ldr	r2, [pc, #328]	@ (8001318 <HAL_DMA_Abort_IT+0x1bc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d027      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a50      	ldr	r2, [pc, #320]	@ (800131c <HAL_DMA_Abort_IT+0x1c0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d022      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001320 <HAL_DMA_Abort_IT+0x1c4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d01d      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_DMA_Abort_IT+0x1c8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d018      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_DMA_Abort_IT+0x1cc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d013      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a4a      	ldr	r2, [pc, #296]	@ (800132c <HAL_DMA_Abort_IT+0x1d0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00e      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a49      	ldr	r2, [pc, #292]	@ (8001330 <HAL_DMA_Abort_IT+0x1d4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d009      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a47      	ldr	r2, [pc, #284]	@ (8001334 <HAL_DMA_Abort_IT+0x1d8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d004      	beq.n	8001224 <HAL_DMA_Abort_IT+0xc8>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a46      	ldr	r2, [pc, #280]	@ (8001338 <HAL_DMA_Abort_IT+0x1dc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_DMA_Abort_IT+0xcc>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_DMA_Abort_IT+0xce>
 8001228:	2300      	movs	r3, #0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8086 	beq.w	800133c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2204      	movs	r2, #4
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a2f      	ldr	r2, [pc, #188]	@ (80012fc <HAL_DMA_Abort_IT+0x1a0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d04a      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a2e      	ldr	r2, [pc, #184]	@ (8001300 <HAL_DMA_Abort_IT+0x1a4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d045      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2c      	ldr	r2, [pc, #176]	@ (8001304 <HAL_DMA_Abort_IT+0x1a8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d040      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a2b      	ldr	r2, [pc, #172]	@ (8001308 <HAL_DMA_Abort_IT+0x1ac>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d03b      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a29      	ldr	r2, [pc, #164]	@ (800130c <HAL_DMA_Abort_IT+0x1b0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d036      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a28      	ldr	r2, [pc, #160]	@ (8001310 <HAL_DMA_Abort_IT+0x1b4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d031      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a26      	ldr	r2, [pc, #152]	@ (8001314 <HAL_DMA_Abort_IT+0x1b8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d02c      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <HAL_DMA_Abort_IT+0x1bc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d027      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a23      	ldr	r2, [pc, #140]	@ (800131c <HAL_DMA_Abort_IT+0x1c0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d022      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a22      	ldr	r2, [pc, #136]	@ (8001320 <HAL_DMA_Abort_IT+0x1c4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d01d      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a20      	ldr	r2, [pc, #128]	@ (8001324 <HAL_DMA_Abort_IT+0x1c8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d018      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001328 <HAL_DMA_Abort_IT+0x1cc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d013      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <HAL_DMA_Abort_IT+0x1d0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00e      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1c      	ldr	r2, [pc, #112]	@ (8001330 <HAL_DMA_Abort_IT+0x1d4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d009      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001334 <HAL_DMA_Abort_IT+0x1d8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d004      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x17c>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a19      	ldr	r2, [pc, #100]	@ (8001338 <HAL_DMA_Abort_IT+0x1dc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d108      	bne.n	80012ea <HAL_DMA_Abort_IT+0x18e>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e178      	b.n	80015dc <HAL_DMA_Abort_IT+0x480>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0201 	bic.w	r2, r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e16f      	b.n	80015dc <HAL_DMA_Abort_IT+0x480>
 80012fc:	40020010 	.word	0x40020010
 8001300:	40020028 	.word	0x40020028
 8001304:	40020040 	.word	0x40020040
 8001308:	40020058 	.word	0x40020058
 800130c:	40020070 	.word	0x40020070
 8001310:	40020088 	.word	0x40020088
 8001314:	400200a0 	.word	0x400200a0
 8001318:	400200b8 	.word	0x400200b8
 800131c:	40020410 	.word	0x40020410
 8001320:	40020428 	.word	0x40020428
 8001324:	40020440 	.word	0x40020440
 8001328:	40020458 	.word	0x40020458
 800132c:	40020470 	.word	0x40020470
 8001330:	40020488 	.word	0x40020488
 8001334:	400204a0 	.word	0x400204a0
 8001338:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 020e 	bic.w	r2, r2, #14
 800134a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a6c      	ldr	r2, [pc, #432]	@ (8001504 <HAL_DMA_Abort_IT+0x3a8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d04a      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6b      	ldr	r2, [pc, #428]	@ (8001508 <HAL_DMA_Abort_IT+0x3ac>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d045      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a69      	ldr	r2, [pc, #420]	@ (800150c <HAL_DMA_Abort_IT+0x3b0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d040      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a68      	ldr	r2, [pc, #416]	@ (8001510 <HAL_DMA_Abort_IT+0x3b4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03b      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a66      	ldr	r2, [pc, #408]	@ (8001514 <HAL_DMA_Abort_IT+0x3b8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d036      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a65      	ldr	r2, [pc, #404]	@ (8001518 <HAL_DMA_Abort_IT+0x3bc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d031      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a63      	ldr	r2, [pc, #396]	@ (800151c <HAL_DMA_Abort_IT+0x3c0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d02c      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a62      	ldr	r2, [pc, #392]	@ (8001520 <HAL_DMA_Abort_IT+0x3c4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d027      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a60      	ldr	r2, [pc, #384]	@ (8001524 <HAL_DMA_Abort_IT+0x3c8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d022      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001528 <HAL_DMA_Abort_IT+0x3cc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d01d      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a5d      	ldr	r2, [pc, #372]	@ (800152c <HAL_DMA_Abort_IT+0x3d0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d018      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a5c      	ldr	r2, [pc, #368]	@ (8001530 <HAL_DMA_Abort_IT+0x3d4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001534 <HAL_DMA_Abort_IT+0x3d8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00e      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a59      	ldr	r2, [pc, #356]	@ (8001538 <HAL_DMA_Abort_IT+0x3dc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d009      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a57      	ldr	r2, [pc, #348]	@ (800153c <HAL_DMA_Abort_IT+0x3e0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d004      	beq.n	80013ec <HAL_DMA_Abort_IT+0x290>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a56      	ldr	r2, [pc, #344]	@ (8001540 <HAL_DMA_Abort_IT+0x3e4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d108      	bne.n	80013fe <HAL_DMA_Abort_IT+0x2a2>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_DMA_Abort_IT+0x2b2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a3c      	ldr	r2, [pc, #240]	@ (8001504 <HAL_DMA_Abort_IT+0x3a8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d072      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a3a      	ldr	r2, [pc, #232]	@ (8001508 <HAL_DMA_Abort_IT+0x3ac>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d06d      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a39      	ldr	r2, [pc, #228]	@ (800150c <HAL_DMA_Abort_IT+0x3b0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d068      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a37      	ldr	r2, [pc, #220]	@ (8001510 <HAL_DMA_Abort_IT+0x3b4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d063      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a36      	ldr	r2, [pc, #216]	@ (8001514 <HAL_DMA_Abort_IT+0x3b8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d05e      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a34      	ldr	r2, [pc, #208]	@ (8001518 <HAL_DMA_Abort_IT+0x3bc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d059      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a33      	ldr	r2, [pc, #204]	@ (800151c <HAL_DMA_Abort_IT+0x3c0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d054      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a31      	ldr	r2, [pc, #196]	@ (8001520 <HAL_DMA_Abort_IT+0x3c4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d04f      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <HAL_DMA_Abort_IT+0x3c8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04a      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2e      	ldr	r2, [pc, #184]	@ (8001528 <HAL_DMA_Abort_IT+0x3cc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d045      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2d      	ldr	r2, [pc, #180]	@ (800152c <HAL_DMA_Abort_IT+0x3d0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d040      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2b      	ldr	r2, [pc, #172]	@ (8001530 <HAL_DMA_Abort_IT+0x3d4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d03b      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a2a      	ldr	r2, [pc, #168]	@ (8001534 <HAL_DMA_Abort_IT+0x3d8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d036      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <HAL_DMA_Abort_IT+0x3dc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a27      	ldr	r2, [pc, #156]	@ (800153c <HAL_DMA_Abort_IT+0x3e0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d02c      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_DMA_Abort_IT+0x3e4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d027      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a24      	ldr	r2, [pc, #144]	@ (8001544 <HAL_DMA_Abort_IT+0x3e8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d022      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a22      	ldr	r2, [pc, #136]	@ (8001548 <HAL_DMA_Abort_IT+0x3ec>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01d      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <HAL_DMA_Abort_IT+0x3f0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001550 <HAL_DMA_Abort_IT+0x3f4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1e      	ldr	r2, [pc, #120]	@ (8001554 <HAL_DMA_Abort_IT+0x3f8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d00e      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_DMA_Abort_IT+0x3fc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d009      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_DMA_Abort_IT+0x400>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d004      	beq.n	80014fe <HAL_DMA_Abort_IT+0x3a2>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_DMA_Abort_IT+0x404>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d132      	bne.n	8001564 <HAL_DMA_Abort_IT+0x408>
 80014fe:	2301      	movs	r3, #1
 8001500:	e031      	b.n	8001566 <HAL_DMA_Abort_IT+0x40a>
 8001502:	bf00      	nop
 8001504:	40020010 	.word	0x40020010
 8001508:	40020028 	.word	0x40020028
 800150c:	40020040 	.word	0x40020040
 8001510:	40020058 	.word	0x40020058
 8001514:	40020070 	.word	0x40020070
 8001518:	40020088 	.word	0x40020088
 800151c:	400200a0 	.word	0x400200a0
 8001520:	400200b8 	.word	0x400200b8
 8001524:	40020410 	.word	0x40020410
 8001528:	40020428 	.word	0x40020428
 800152c:	40020440 	.word	0x40020440
 8001530:	40020458 	.word	0x40020458
 8001534:	40020470 	.word	0x40020470
 8001538:	40020488 	.word	0x40020488
 800153c:	400204a0 	.word	0x400204a0
 8001540:	400204b8 	.word	0x400204b8
 8001544:	58025408 	.word	0x58025408
 8001548:	5802541c 	.word	0x5802541c
 800154c:	58025430 	.word	0x58025430
 8001550:	58025444 	.word	0x58025444
 8001554:	58025458 	.word	0x58025458
 8001558:	5802546c 	.word	0x5802546c
 800155c:	58025480 	.word	0x58025480
 8001560:	58025494 	.word	0x58025494
 8001564:	2300      	movs	r3, #0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d028      	beq.n	80015bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001578:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2201      	movs	r2, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001598:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80015ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	@ 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015f6:	4b89      	ldr	r3, [pc, #548]	@ (800181c <HAL_GPIO_Init+0x234>)
 80015f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015fa:	e194      	b.n	8001926 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8186 	beq.w	8001920 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d005      	beq.n	800162c <HAL_GPIO_Init+0x44>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d130      	bne.n	800168e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001662:	2201      	movs	r2, #1
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 0201 	and.w	r2, r3, #1
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b03      	cmp	r3, #3
 8001698:	d017      	beq.n	80016ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d123      	bne.n	800171e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	69b9      	ldr	r1, [r7, #24]
 800171a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0203 	and.w	r2, r3, #3
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80e0 	beq.w	8001920 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001760:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <HAL_GPIO_Init+0x238>)
 8001762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001766:	4a2e      	ldr	r2, [pc, #184]	@ (8001820 <HAL_GPIO_Init+0x238>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001770:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <HAL_GPIO_Init+0x238>)
 8001772:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177e:	4a29      	ldr	r2, [pc, #164]	@ (8001824 <HAL_GPIO_Init+0x23c>)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a20      	ldr	r2, [pc, #128]	@ (8001828 <HAL_GPIO_Init+0x240>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d052      	beq.n	8001850 <HAL_GPIO_Init+0x268>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1f      	ldr	r2, [pc, #124]	@ (800182c <HAL_GPIO_Init+0x244>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_GPIO_Init+0x22e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <HAL_GPIO_Init+0x248>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02b      	beq.n	8001812 <HAL_GPIO_Init+0x22a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001834 <HAL_GPIO_Init+0x24c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d025      	beq.n	800180e <HAL_GPIO_Init+0x226>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <HAL_GPIO_Init+0x250>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01f      	beq.n	800180a <HAL_GPIO_Init+0x222>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a1b      	ldr	r2, [pc, #108]	@ (800183c <HAL_GPIO_Init+0x254>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d019      	beq.n	8001806 <HAL_GPIO_Init+0x21e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001840 <HAL_GPIO_Init+0x258>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x21a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <HAL_GPIO_Init+0x25c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x216>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <HAL_GPIO_Init+0x260>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x212>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a17      	ldr	r2, [pc, #92]	@ (800184c <HAL_GPIO_Init+0x264>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x20e>
 80017f2:	2309      	movs	r3, #9
 80017f4:	e02d      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 80017f6:	230a      	movs	r3, #10
 80017f8:	e02b      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 80017fa:	2308      	movs	r3, #8
 80017fc:	e029      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 80017fe:	2307      	movs	r3, #7
 8001800:	e027      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 8001802:	2306      	movs	r3, #6
 8001804:	e025      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 8001806:	2305      	movs	r3, #5
 8001808:	e023      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 800180a:	2304      	movs	r3, #4
 800180c:	e021      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 800180e:	2303      	movs	r3, #3
 8001810:	e01f      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 8001812:	2302      	movs	r3, #2
 8001814:	e01d      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 8001816:	2301      	movs	r3, #1
 8001818:	e01b      	b.n	8001852 <HAL_GPIO_Init+0x26a>
 800181a:	bf00      	nop
 800181c:	58000080 	.word	0x58000080
 8001820:	58024400 	.word	0x58024400
 8001824:	58000400 	.word	0x58000400
 8001828:	58020000 	.word	0x58020000
 800182c:	58020400 	.word	0x58020400
 8001830:	58020800 	.word	0x58020800
 8001834:	58020c00 	.word	0x58020c00
 8001838:	58021000 	.word	0x58021000
 800183c:	58021400 	.word	0x58021400
 8001840:	58021800 	.word	0x58021800
 8001844:	58021c00 	.word	0x58021c00
 8001848:	58022000 	.word	0x58022000
 800184c:	58022400 	.word	0x58022400
 8001850:	2300      	movs	r3, #0
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001862:	4938      	ldr	r1, [pc, #224]	@ (8001944 <HAL_GPIO_Init+0x35c>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	f47f ae63 	bne.w	80015fc <HAL_GPIO_Init+0x14>
  }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3724      	adds	r7, #36	@ 0x24
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	58000400 	.word	0x58000400

08001948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e001      	b.n	800196a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001980:	4a08      	ldr	r2, [pc, #32]	@ (80019a4 <HAL_HSEM_FastTake+0x2c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3320      	adds	r3, #32
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <HAL_HSEM_FastTake+0x30>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e000      	b.n	8001996 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	58026400 	.word	0x58026400
 80019a8:	80000300 	.word	0x80000300

080019ac <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80019b6:	4906      	ldr	r1, [pc, #24]	@ (80019d0 <HAL_HSEM_Release+0x24>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	58026400 	.word	0x58026400

080019d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <HAL_PWREx_ConfigSupply+0xb0>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	2b06      	cmp	r3, #6
 80019e6:	d00a      	beq.n	80019fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019e8:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <HAL_PWREx_ConfigSupply+0xb0>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e040      	b.n	8001a7c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e03e      	b.n	8001a7c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019fe:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001a06:	491f      	ldr	r1, [pc, #124]	@ (8001a84 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a0e:	f7ff fa59 	bl	8000ec4 <HAL_GetTick>
 8001a12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a14:	e009      	b.n	8001a2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a16:	f7ff fa55 	bl	8000ec4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a24:	d901      	bls.n	8001a2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e028      	b.n	8001a7c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a36:	d1ee      	bne.n	8001a16 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b1e      	cmp	r3, #30
 8001a3c:	d008      	beq.n	8001a50 <HAL_PWREx_ConfigSupply+0x7c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a42:	d005      	beq.n	8001a50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b1d      	cmp	r3, #29
 8001a48:	d002      	beq.n	8001a50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001a4e:	d114      	bne.n	8001a7a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a50:	f7ff fa38 	bl	8000ec4 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a56:	e009      	b.n	8001a6c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a58:	f7ff fa34 	bl	8000ec4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a66:	d901      	bls.n	8001a6c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e007      	b.n	8001a7c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a78:	d1ee      	bne.n	8001a58 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	58024800 	.word	0x58024800

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	@ 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 bc48 	b.w	800232c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8088 	beq.w	8001bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aaa:	4b99      	ldr	r3, [pc, #612]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ab4:	4b96      	ldr	r3, [pc, #600]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001abc:	2b10      	cmp	r3, #16
 8001abe:	d007      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x48>
 8001ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac2:	2b18      	cmp	r3, #24
 8001ac4:	d111      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
 8001ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	4b8f      	ldr	r3, [pc, #572]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d06d      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x130>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d169      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f000 bc21 	b.w	800232c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x7a>
 8001af4:	4b86      	ldr	r3, [pc, #536]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a85      	ldr	r2, [pc, #532]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e02e      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x9c>
 8001b0a:	4b81      	ldr	r3, [pc, #516]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a80      	ldr	r2, [pc, #512]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b7e      	ldr	r3, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e01d      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0xc0>
 8001b2e:	4b78      	ldr	r3, [pc, #480]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a77      	ldr	r2, [pc, #476]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a74      	ldr	r2, [pc, #464]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0xd8>
 8001b48:	4b71      	ldr	r3, [pc, #452]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a70      	ldr	r2, [pc, #448]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b6e      	ldr	r3, [pc, #440]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6d      	ldr	r2, [pc, #436]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f9ac 	bl	8000ec4 <HAL_GetTick>
 8001b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f9a8 	bl	8000ec4 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e3d4      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b82:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0xe8>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f998 	bl	8000ec4 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff f994 	bl	8000ec4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	@ 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e3c0      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001baa:	4b59      	ldr	r3, [pc, #356]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x110>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80ca 	beq.w	8001d5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc8:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_RCC_OscConfig+0x166>
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2b18      	cmp	r3, #24
 8001be2:	d156      	bne.n	8001c92 <HAL_RCC_OscConfig+0x20a>
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d151      	bne.n	8001c92 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bee:	4b48      	ldr	r3, [pc, #288]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x17e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e392      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c06:	4b42      	ldr	r3, [pc, #264]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0219 	bic.w	r2, r3, #25
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	493f      	ldr	r1, [pc, #252]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f954 	bl	8000ec4 <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c20:	f7ff f950 	bl	8000ec4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e37c      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c32:	4b37      	ldr	r3, [pc, #220]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	f7ff f971 	bl	8000f24 <HAL_GetREVID>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d817      	bhi.n	8001c7c <HAL_RCC_OscConfig+0x1f4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	2b40      	cmp	r3, #64	@ 0x40
 8001c52:	d108      	bne.n	8001c66 <HAL_RCC_OscConfig+0x1de>
 8001c54:	4b2e      	ldr	r3, [pc, #184]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c62:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c64:	e07a      	b.n	8001d5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	4926      	ldr	r1, [pc, #152]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7a:	e06f      	b.n	8001d5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	4921      	ldr	r1, [pc, #132]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	e064      	b.n	8001d5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d047      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0219 	bic.w	r2, r3, #25
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	491a      	ldr	r1, [pc, #104]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff f90a 	bl	8000ec4 <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff f906 	bl	8000ec4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e332      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	f7ff f927 	bl	8000f24 <HAL_GetREVID>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d819      	bhi.n	8001d14 <HAL_RCC_OscConfig+0x28c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b40      	cmp	r3, #64	@ 0x40
 8001ce6:	d108      	bne.n	8001cfa <HAL_RCC_OscConfig+0x272>
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001cf0:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf6:	6053      	str	r3, [r2, #4]
 8001cf8:	e030      	b.n	8001d5c <HAL_RCC_OscConfig+0x2d4>
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	031b      	lsls	r3, r3, #12
 8001d08:	4901      	ldr	r1, [pc, #4]	@ (8001d10 <HAL_RCC_OscConfig+0x288>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
 8001d0e:	e025      	b.n	8001d5c <HAL_RCC_OscConfig+0x2d4>
 8001d10:	58024400 	.word	0x58024400
 8001d14:	4b9a      	ldr	r3, [pc, #616]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	4997      	ldr	r1, [pc, #604]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e018      	b.n	8001d5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b95      	ldr	r3, [pc, #596]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a94      	ldr	r2, [pc, #592]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f8c5 	bl	8000ec4 <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f8c1 	bl	8000ec4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e2ed      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d50:	4b8b      	ldr	r3, [pc, #556]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a9 	beq.w	8001ebc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6a:	4b85      	ldr	r3, [pc, #532]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d74:	4b82      	ldr	r3, [pc, #520]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d007      	beq.n	8001d90 <HAL_RCC_OscConfig+0x308>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b18      	cmp	r3, #24
 8001d84:	d13a      	bne.n	8001dfc <HAL_RCC_OscConfig+0x374>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d135      	bne.n	8001dfc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d90:	4b7b      	ldr	r3, [pc, #492]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_OscConfig+0x320>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b80      	cmp	r3, #128	@ 0x80
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e2c1      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001da8:	f7ff f8bc 	bl	8000f24 <HAL_GetREVID>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d817      	bhi.n	8001de6 <HAL_RCC_OscConfig+0x35e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x348>
 8001dbe:	4b70      	ldr	r3, [pc, #448]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001dc6:	4a6e      	ldr	r2, [pc, #440]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dcc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dce:	e075      	b.n	8001ebc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	069b      	lsls	r3, r3, #26
 8001dde:	4968      	ldr	r1, [pc, #416]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001de4:	e06a      	b.n	8001ebc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de6:	4b66      	ldr	r3, [pc, #408]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	061b      	lsls	r3, r3, #24
 8001df4:	4962      	ldr	r1, [pc, #392]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dfa:	e05f      	b.n	8001ebc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d042      	beq.n	8001e8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e04:	4b5e      	ldr	r3, [pc, #376]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5d      	ldr	r2, [pc, #372]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f858 	bl	8000ec4 <HAL_GetTick>
 8001e14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e18:	f7ff f854 	bl	8000ec4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e280      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e2a:	4b55      	ldr	r3, [pc, #340]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e36:	f7ff f875 	bl	8000f24 <HAL_GetREVID>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d817      	bhi.n	8001e74 <HAL_RCC_OscConfig+0x3ec>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	2b20      	cmp	r3, #32
 8001e4a:	d108      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3d6>
 8001e4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e54:	4a4a      	ldr	r2, [pc, #296]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e5a:	6053      	str	r3, [r2, #4]
 8001e5c:	e02e      	b.n	8001ebc <HAL_RCC_OscConfig+0x434>
 8001e5e:	4b48      	ldr	r3, [pc, #288]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	069b      	lsls	r3, r3, #26
 8001e6c:	4944      	ldr	r1, [pc, #272]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
 8001e72:	e023      	b.n	8001ebc <HAL_RCC_OscConfig+0x434>
 8001e74:	4b42      	ldr	r3, [pc, #264]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	493f      	ldr	r1, [pc, #252]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
 8001e88:	e018      	b.n	8001ebc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f815 	bl	8000ec4 <HAL_GetTick>
 8001e9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f811 	bl	8000ec4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e23d      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001eb0:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d036      	beq.n	8001f36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d019      	beq.n	8001f04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7fe fff2 	bl	8000ec4 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7fe ffee 	bl	8000ec4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e21a      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ef6:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x45c>
 8001f02:	e018      	b.n	8001f36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f04:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f08:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7fe ffd8 	bl	8000ec4 <HAL_GetTick>
 8001f14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe ffd4 	bl	8000ec4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e200      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d039      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f56:	f7fe ffb5 	bl	8000ec4 <HAL_GetTick>
 8001f5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f5e:	f7fe ffb1 	bl	8000ec4 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1dd      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_RCC_OscConfig+0x4f8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4d6>
 8001f7c:	e01b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x52e>
 8001f7e:	bf00      	nop
 8001f80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f84:	4b9b      	ldr	r3, [pc, #620]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a9a      	ldr	r2, [pc, #616]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8001f8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f90:	f7fe ff98 	bl	8000ec4 <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f98:	f7fe ff94 	bl	8000ec4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1c0      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001faa:	4b92      	ldr	r3, [pc, #584]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8081 	beq.w	80020c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80021f8 <HAL_RCC_OscConfig+0x770>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a8b      	ldr	r2, [pc, #556]	@ (80021f8 <HAL_RCC_OscConfig+0x770>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd0:	f7fe ff78 	bl	8000ec4 <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd8:	f7fe ff74 	bl	8000ec4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1a0      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fea:	4b83      	ldr	r3, [pc, #524]	@ (80021f8 <HAL_RCC_OscConfig+0x770>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x584>
 8001ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	4a7c      	ldr	r2, [pc, #496]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	@ 0x70
 800200a:	e02d      	b.n	8002068 <HAL_RCC_OscConfig+0x5e0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10c      	bne.n	800202e <HAL_RCC_OscConfig+0x5a6>
 8002014:	4b77      	ldr	r3, [pc, #476]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002018:	4a76      	ldr	r2, [pc, #472]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002020:	4b74      	ldr	r3, [pc, #464]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a73      	ldr	r2, [pc, #460]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x5e0>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x5c8>
 8002036:	4b6f      	ldr	r3, [pc, #444]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	4a6e      	ldr	r2, [pc, #440]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6713      	str	r3, [r2, #112]	@ 0x70
 8002042:	4b6c      	ldr	r3, [pc, #432]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	4a6b      	ldr	r2, [pc, #428]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0x5e0>
 8002050:	4b68      	ldr	r3, [pc, #416]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a67      	ldr	r2, [pc, #412]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
 800205c:	4b65      	ldr	r3, [pc, #404]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002060:	4a64      	ldr	r2, [pc, #400]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe ff28 	bl	8000ec4 <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7fe ff24 	bl	8000ec4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e14e      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800208e:	4b59      	ldr	r3, [pc, #356]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ee      	beq.n	8002078 <HAL_RCC_OscConfig+0x5f0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe ff12 	bl	8000ec4 <HAL_GetTick>
 80020a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe ff0e 	bl	8000ec4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e138      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ba:	4b4e      	ldr	r3, [pc, #312]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ee      	bne.n	80020a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 812d 	beq.w	800232a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020d0:	4b48      	ldr	r3, [pc, #288]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020d8:	2b18      	cmp	r3, #24
 80020da:	f000 80bd 	beq.w	8002258 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	f040 809e 	bne.w	8002224 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e8:	4b42      	ldr	r3, [pc, #264]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a41      	ldr	r2, [pc, #260]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80020ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe fee6 	bl	8000ec4 <HAL_GetTick>
 80020f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe fee2 	bl	8000ec4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e10e      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800210e:	4b39      	ldr	r3, [pc, #228]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211a:	4b36      	ldr	r3, [pc, #216]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 800211c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800211e:	4b37      	ldr	r3, [pc, #220]	@ (80021fc <HAL_RCC_OscConfig+0x774>)
 8002120:	4013      	ands	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	430a      	orrs	r2, r1
 800212e:	4931      	ldr	r1, [pc, #196]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	628b      	str	r3, [r1, #40]	@ 0x28
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	3b01      	subs	r3, #1
 800213a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002142:	3b01      	subs	r3, #1
 8002144:	025b      	lsls	r3, r3, #9
 8002146:	b29b      	uxth	r3, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800215c:	3b01      	subs	r3, #1
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002164:	4923      	ldr	r1, [pc, #140]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002166:	4313      	orrs	r3, r2
 8002168:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 800216c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216e:	4a21      	ldr	r2, [pc, #132]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800217a:	4b21      	ldr	r3, [pc, #132]	@ (8002200 <HAL_RCC_OscConfig+0x778>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002182:	00d2      	lsls	r2, r2, #3
 8002184:	491b      	ldr	r1, [pc, #108]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002186:	4313      	orrs	r3, r2
 8002188:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800218a:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218e:	f023 020c 	bic.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	4917      	ldr	r1, [pc, #92]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	f023 0202 	bic.w	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	4912      	ldr	r1, [pc, #72]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	4a07      	ldr	r2, [pc, #28]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021de:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_RCC_OscConfig+0x76c>)
 80021e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7fe fe6b 	bl	8000ec4 <HAL_GetTick>
 80021ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021f0:	e011      	b.n	8002216 <HAL_RCC_OscConfig+0x78e>
 80021f2:	bf00      	nop
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58024800 	.word	0x58024800
 80021fc:	fffffc0c 	.word	0xfffffc0c
 8002200:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fe5e 	bl	8000ec4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e08a      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x77c>
 8002222:	e082      	b.n	800232a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b43      	ldr	r3, [pc, #268]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 800222a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fe48 	bl	8000ec4 <HAL_GetTick>
 8002234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fe44 	bl	8000ec4 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e070      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800224a:	4b3a      	ldr	r3, [pc, #232]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x7b0>
 8002256:	e068      	b.n	800232a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002258:	4b36      	ldr	r3, [pc, #216]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800225e:	4b35      	ldr	r3, [pc, #212]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	2b01      	cmp	r3, #1
 800226a:	d031      	beq.n	80022d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0203 	and.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d12a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d122      	bne.n	80022d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d11a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	0a5b      	lsrs	r3, r3, #9
 800229e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d111      	bne.n	80022d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	0c1b      	lsrs	r3, r3, #16
 80022b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d108      	bne.n	80022d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0e1b      	lsrs	r3, r3, #24
 80022c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e02b      	b.n	800232c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022d4:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 80022d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d01f      	beq.n	800232a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	4a11      	ldr	r2, [pc, #68]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f6:	f7fe fde5 	bl	8000ec4 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80022fc:	bf00      	nop
 80022fe:	f7fe fde1 	bl	8000ec4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	4293      	cmp	r3, r2
 8002308:	d0f9      	beq.n	80022fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 800230c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_RCC_OscConfig+0x8b0>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002316:	00d2      	lsls	r2, r2, #3
 8002318:	4906      	ldr	r1, [pc, #24]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 800231a:	4313      	orrs	r3, r2
 800231c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800231e:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <HAL_RCC_OscConfig+0x8ac>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3730      	adds	r7, #48	@ 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	58024400 	.word	0x58024400
 8002338:	ffff0007 	.word	0xffff0007

0800233c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e19c      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b8a      	ldr	r3, [pc, #552]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b87      	ldr	r3, [pc, #540]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 020f 	bic.w	r2, r3, #15
 8002366:	4985      	ldr	r1, [pc, #532]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b83      	ldr	r3, [pc, #524]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e184      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	4b7b      	ldr	r3, [pc, #492]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002398:	429a      	cmp	r2, r3
 800239a:	d908      	bls.n	80023ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800239c:	4b78      	ldr	r3, [pc, #480]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	4975      	ldr	r1, [pc, #468]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	4b70      	ldr	r3, [pc, #448]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d908      	bls.n	80023dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	496a      	ldr	r1, [pc, #424]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	4b64      	ldr	r3, [pc, #400]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d908      	bls.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023f8:	4b61      	ldr	r3, [pc, #388]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	495e      	ldr	r1, [pc, #376]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002406:	4313      	orrs	r3, r2
 8002408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002422:	429a      	cmp	r2, r3
 8002424:	d908      	bls.n	8002438 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002426:	4b56      	ldr	r3, [pc, #344]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4953      	ldr	r1, [pc, #332]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002434:	4313      	orrs	r3, r2
 8002436:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	4b4d      	ldr	r3, [pc, #308]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	429a      	cmp	r2, r3
 8002452:	d908      	bls.n	8002466 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f023 020f 	bic.w	r2, r3, #15
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4947      	ldr	r1, [pc, #284]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002462:	4313      	orrs	r3, r2
 8002464:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d055      	beq.n	800251e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002472:	4b43      	ldr	r3, [pc, #268]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4940      	ldr	r1, [pc, #256]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002480:	4313      	orrs	r3, r2
 8002482:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d107      	bne.n	800249c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800248c:	4b3c      	ldr	r3, [pc, #240]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d121      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0f6      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024a4:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d115      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0ea      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024bc:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0de      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0d6      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024dc:	4b28      	ldr	r3, [pc, #160]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f023 0207 	bic.w	r2, r3, #7
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4925      	ldr	r1, [pc, #148]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ee:	f7fe fce9 	bl	8000ec4 <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f4:	e00a      	b.n	800250c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f7fe fce5 	bl	8000ec4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0be      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250c:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	429a      	cmp	r2, r3
 800251c:	d1eb      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	429a      	cmp	r2, r3
 8002538:	d208      	bcs.n	800254c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f023 020f 	bic.w	r2, r3, #15
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	490e      	ldr	r1, [pc, #56]	@ (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002548:	4313      	orrs	r3, r2
 800254a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d214      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 020f 	bic.w	r2, r3, #15
 8002562:	4906      	ldr	r1, [pc, #24]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b04      	ldr	r3, [pc, #16]	@ (800257c <HAL_RCC_ClockConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e086      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
 800257c:	52002000 	.word	0x52002000
 8002580:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	4b3f      	ldr	r3, [pc, #252]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800259c:	429a      	cmp	r2, r3
 800259e:	d208      	bcs.n	80025b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4939      	ldr	r1, [pc, #228]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d010      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d208      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025ce:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	492e      	ldr	r1, [pc, #184]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d208      	bcs.n	800260e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025fc:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4922      	ldr	r1, [pc, #136]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 800260a:	4313      	orrs	r3, r2
 800260c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002626:	429a      	cmp	r2, r3
 8002628:	d208      	bcs.n	800263c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800262a:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4917      	ldr	r1, [pc, #92]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002638:	4313      	orrs	r3, r2
 800263a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800263c:	f000 f834 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	4912      	ldr	r1, [pc, #72]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800265a:	4b0e      	ldr	r3, [pc, #56]	@ (8002694 <HAL_RCC_ClockConfig+0x358>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	4a0d      	ldr	r2, [pc, #52]	@ (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
 8002670:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <HAL_RCC_ClockConfig+0x360>)
 8002672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002674:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <HAL_RCC_ClockConfig+0x364>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <HAL_RCC_ClockConfig+0x368>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fbd6 	bl	8000e30 <HAL_InitTick>
 8002684:	4603      	mov	r3, r0
 8002686:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	58024400 	.word	0x58024400
 8002698:	080066ac 	.word	0x080066ac
 800269c:	24000004 	.word	0x24000004
 80026a0:	24000000 	.word	0x24000000
 80026a4:	24000008 	.word	0x24000008

080026a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ae:	4bb3      	ldr	r3, [pc, #716]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026b6:	2b18      	cmp	r3, #24
 80026b8:	f200 8155 	bhi.w	8002966 <HAL_RCC_GetSysClockFreq+0x2be>
 80026bc:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	08002729 	.word	0x08002729
 80026c8:	08002967 	.word	0x08002967
 80026cc:	08002967 	.word	0x08002967
 80026d0:	08002967 	.word	0x08002967
 80026d4:	08002967 	.word	0x08002967
 80026d8:	08002967 	.word	0x08002967
 80026dc:	08002967 	.word	0x08002967
 80026e0:	08002967 	.word	0x08002967
 80026e4:	0800274f 	.word	0x0800274f
 80026e8:	08002967 	.word	0x08002967
 80026ec:	08002967 	.word	0x08002967
 80026f0:	08002967 	.word	0x08002967
 80026f4:	08002967 	.word	0x08002967
 80026f8:	08002967 	.word	0x08002967
 80026fc:	08002967 	.word	0x08002967
 8002700:	08002967 	.word	0x08002967
 8002704:	08002755 	.word	0x08002755
 8002708:	08002967 	.word	0x08002967
 800270c:	08002967 	.word	0x08002967
 8002710:	08002967 	.word	0x08002967
 8002714:	08002967 	.word	0x08002967
 8002718:	08002967 	.word	0x08002967
 800271c:	08002967 	.word	0x08002967
 8002720:	08002967 	.word	0x08002967
 8002724:	0800275b 	.word	0x0800275b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002728:	4b94      	ldr	r3, [pc, #592]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002734:	4b91      	ldr	r3, [pc, #580]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	4a90      	ldr	r2, [pc, #576]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002746:	e111      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002748:	4b8d      	ldr	r3, [pc, #564]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800274a:	61bb      	str	r3, [r7, #24]
      break;
 800274c:	e10e      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800274e:	4b8d      	ldr	r3, [pc, #564]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002750:	61bb      	str	r3, [r7, #24]
      break;
 8002752:	e10b      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002754:	4b8c      	ldr	r3, [pc, #560]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002756:	61bb      	str	r3, [r7, #24]
      break;
 8002758:	e108      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800275a:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002764:	4b85      	ldr	r3, [pc, #532]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800276e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002770:	4b82      	ldr	r3, [pc, #520]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800277a:	4b80      	ldr	r3, [pc, #512]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277e:	08db      	lsrs	r3, r3, #3
 8002780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80e1 	beq.w	8002960 <HAL_RCC_GetSysClockFreq+0x2b8>
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	f000 8083 	beq.w	80028ac <HAL_RCC_GetSysClockFreq+0x204>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f200 80a1 	bhi.w	80028f0 <HAL_RCC_GetSysClockFreq+0x248>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x114>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d056      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027ba:	e099      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027bc:	4b6f      	ldr	r3, [pc, #444]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02d      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027c8:	4b6c      	ldr	r3, [pc, #432]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	4a6b      	ldr	r2, [pc, #428]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f2:	4b62      	ldr	r3, [pc, #392]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002802:	ed97 6a02 	vldr	s12, [r7, #8]
 8002806:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 800280a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800280e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002822:	e087      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002990 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002836:	4b51      	ldr	r3, [pc, #324]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002846:	ed97 6a02 	vldr	s12, [r7, #8]
 800284a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 800284e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800285a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002866:	e065      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002872:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002994 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287a:	4b40      	ldr	r3, [pc, #256]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288a:	ed97 6a02 	vldr	s12, [r7, #8]
 800288e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800289e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028aa:	e043      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002998 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028be:	4b2f      	ldr	r3, [pc, #188]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80028d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028ee:	e021      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002994 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002902:	4b1e      	ldr	r3, [pc, #120]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002912:	ed97 6a02 	vldr	s12, [r7, #8]
 8002916:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 800291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002932:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	0a5b      	lsrs	r3, r3, #9
 800293a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800293e:	3301      	adds	r3, #1
 8002940:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800294c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002958:	ee17 3a90 	vmov	r3, s15
 800295c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800295e:	e005      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
      break;
 8002964:	e002      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002968:	61bb      	str	r3, [r7, #24]
      break;
 800296a:	bf00      	nop
  }

  return sysclockfreq;
 800296c:	69bb      	ldr	r3, [r7, #24]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	@ 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	58024400 	.word	0x58024400
 8002980:	03d09000 	.word	0x03d09000
 8002984:	003d0900 	.word	0x003d0900
 8002988:	017d7840 	.word	0x017d7840
 800298c:	46000000 	.word	0x46000000
 8002990:	4c742400 	.word	0x4c742400
 8002994:	4a742400 	.word	0x4a742400
 8002998:	4bbebc20 	.word	0x4bbebc20

0800299c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029a2:	f7ff fe81 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <HAL_RCC_GetHCLKFreq+0x50>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490f      	ldr	r1, [pc, #60]	@ (80029f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029c0:	4b0a      	ldr	r3, [pc, #40]	@ (80029ec <HAL_RCC_GetHCLKFreq+0x50>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	4a07      	ldr	r2, [pc, #28]	@ (80029f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80029d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029da:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80029e0:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	58024400 	.word	0x58024400
 80029f0:	080066ac 	.word	0x080066ac
 80029f4:	24000004 	.word	0x24000004
 80029f8:	24000000 	.word	0x24000000

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a00:	f7ff ffcc 	bl	800299c <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4904      	ldr	r1, [pc, #16]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	58024400 	.word	0x58024400
 8002a24:	080066ac 	.word	0x080066ac

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a2c:	f7ff ffb6 	bl	800299c <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4904      	ldr	r1, [pc, #16]	@ (8002a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	080066ac 	.word	0x080066ac

08002a54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b0cc      	sub	sp, #304	@ 0x130
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002a78:	2500      	movs	r5, #0
 8002a7a:	ea54 0305 	orrs.w	r3, r4, r5
 8002a7e:	d049      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a8a:	d02f      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a90:	d828      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a96:	d01a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a9c:	d822      	bhi.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aa6:	d007      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aaa:	4bb8      	ldr	r3, [pc, #736]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	4ab7      	ldr	r2, [pc, #732]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ab6:	e01a      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002abc:	3308      	adds	r3, #8
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fccf 	bl	8004464 <RCCEx_PLL2_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002acc:	e00f      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ad2:	3328      	adds	r3, #40	@ 0x28
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 fd76 	bl	80045c8 <RCCEx_PLL3_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002aea:	e000      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002af6:	4ba5      	ldr	r3, [pc, #660]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b04:	4aa1      	ldr	r2, [pc, #644]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b06:	430b      	orrs	r3, r1
 8002b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b0a:	e003      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002b20:	f04f 0900 	mov.w	r9, #0
 8002b24:	ea58 0309 	orrs.w	r3, r8, r9
 8002b28:	d047      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d82a      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002b34:	a201      	add	r2, pc, #4	@ (adr r2, 8002b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b51 	.word	0x08002b51
 8002b40:	08002b5f 	.word	0x08002b5f
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002b93 	.word	0x08002b93
 8002b4c:	08002b93 	.word	0x08002b93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b50:	4b8e      	ldr	r3, [pc, #568]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	4a8d      	ldr	r2, [pc, #564]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b5c:	e01a      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b62:	3308      	adds	r3, #8
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fc7c 	bl	8004464 <RCCEx_PLL2_Config>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b72:	e00f      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b78:	3328      	adds	r3, #40	@ 0x28
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 fd23 	bl	80045c8 <RCCEx_PLL3_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b88:	e004      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba0:	f023 0107 	bic.w	r1, r3, #7
 8002ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	4a78      	ldr	r2, [pc, #480]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bb0:	e003      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002bc6:	f04f 0b00 	mov.w	fp, #0
 8002bca:	ea5a 030b 	orrs.w	r3, sl, fp
 8002bce:	d04c      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bda:	d030      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be0:	d829      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002be2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002be4:	d02d      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002be6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002be8:	d825      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002bea:	2b80      	cmp	r3, #128	@ 0x80
 8002bec:	d018      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002bee:	2b80      	cmp	r3, #128	@ 0x80
 8002bf0:	d821      	bhi.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002bf6:	2b40      	cmp	r3, #64	@ 0x40
 8002bf8:	d007      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002bfa:	e01c      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfc:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	4a62      	ldr	r2, [pc, #392]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c08:	e01c      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c0e:	3308      	adds	r3, #8
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 fc26 	bl	8004464 <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c1e:	e011      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c24:	3328      	adds	r3, #40	@ 0x28
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fccd 	bl	80045c8 <RCCEx_PLL3_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c34:	e006      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c60:	e003      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002c76:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c80:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002c84:	460b      	mov	r3, r1
 8002c86:	4313      	orrs	r3, r2
 8002c88:	d053      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c96:	d035      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c9c:	d82e      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ca2:	d031      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ca4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ca8:	d828      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cae:	d01a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb4:	d822      	bhi.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002cba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cbe:	d007      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002cc0:	e01c      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc2:	4b32      	ldr	r3, [pc, #200]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	4a31      	ldr	r2, [pc, #196]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cce:	e01c      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fbc3 	bl	8004464 <RCCEx_PLL2_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ce4:	e011      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cea:	3328      	adds	r3, #40	@ 0x28
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fc6a 	bl	80045c8 <RCCEx_PLL3_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cfa:	e006      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d04:	bf00      	nop
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d12:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d16:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d22:	4a1a      	ldr	r2, [pc, #104]	@ (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002d3e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d48:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	d056      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d5e:	d038      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002d60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d64:	d831      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d6a:	d034      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002d6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002d70:	d82b      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d76:	d01d      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d7c:	d825      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d88:	e01f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d8a:	bf00      	nop
 8002d8c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d90:	4ba2      	ldr	r3, [pc, #648]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	4aa1      	ldr	r2, [pc, #644]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da2:	3308      	adds	r3, #8
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 fb5c 	bl	8004464 <RCCEx_PLL2_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002db2:	e011      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002db8:	3328      	adds	r3, #40	@ 0x28
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fc03 	bl	80045c8 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dc8:	e006      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002de0:	4b8e      	ldr	r3, [pc, #568]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002df0:	4a8a      	ldr	r2, [pc, #552]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dfc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002e0c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e16:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	d03a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	2b30      	cmp	r3, #48	@ 0x30
 8002e28:	d01f      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002e2a:	2b30      	cmp	r3, #48	@ 0x30
 8002e2c:	d819      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d00c      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d815      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d019      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d111      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3e:	4b77      	ldr	r3, [pc, #476]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	4a76      	ldr	r2, [pc, #472]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e4a:	e011      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e50:	3308      	adds	r3, #8
 8002e52:	2102      	movs	r1, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fb05 	bl	8004464 <RCCEx_PLL2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e60:	e006      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e68:	e002      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e78:	4b68      	ldr	r3, [pc, #416]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	4a65      	ldr	r2, [pc, #404]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002ea2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002eac:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	d051      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ebc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec0:	d035      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec6:	d82e      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ec8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ecc:	d031      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002ece:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ed2:	d828      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed8:	d01a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ede:	d822      	bhi.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee8:	d007      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002eea:	e01c      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eec:	4b4b      	ldr	r3, [pc, #300]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002efe:	3308      	adds	r3, #8
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 faae 	bl	8004464 <RCCEx_PLL2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f0e:	e011      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f14:	3328      	adds	r3, #40	@ 0x28
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 fb55 	bl	80045c8 <RCCEx_PLL3_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f24:	e006      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f2c:	e002      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f3c:	4b37      	ldr	r3, [pc, #220]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f4a:	4a34      	ldr	r2, [pc, #208]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f56:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002f66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	d056      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f84:	d033      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f8a:	d82c      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f90:	d02f      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002f92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f96:	d826      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f9c:	d02b      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f9e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002fa2:	d820      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fa8:	d012      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002faa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fae:	d81a      	bhi.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d022      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb8:	d115      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 fa4e 	bl	8004464 <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002fce:	e015      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fd4:	3328      	adds	r3, #40	@ 0x28
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 faf5 	bl	80045c8 <RCCEx_PLL3_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002fec:	e006      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003008:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800300c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003012:	4a02      	ldr	r2, [pc, #8]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003014:	430b      	orrs	r3, r1
 8003016:	6513      	str	r3, [r2, #80]	@ 0x50
 8003018:	e006      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800301a:	bf00      	nop
 800301c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003024:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003034:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800303e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003042:	460b      	mov	r3, r1
 8003044:	4313      	orrs	r3, r2
 8003046:	d055      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800304c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003050:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003054:	d033      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800305a:	d82c      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003060:	d02f      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003066:	d826      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003068:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800306c:	d02b      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800306e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003072:	d820      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003078:	d012      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800307a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800307e:	d81a      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003088:	d115      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800308a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800308e:	3308      	adds	r3, #8
 8003090:	2101      	movs	r1, #1
 8003092:	4618      	mov	r0, r3
 8003094:	f001 f9e6 	bl	8004464 <RCCEx_PLL2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800309e:	e015      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a4:	3328      	adds	r3, #40	@ 0x28
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 fa8d 	bl	80045c8 <RCCEx_PLL3_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80030b4:	e00a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030bc:	e006      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030be:	bf00      	nop
 80030c0:	e004      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030c2:	bf00      	nop
 80030c4:	e002      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030c6:	bf00      	nop
 80030c8:	e000      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80030d4:	4bb6      	ldr	r3, [pc, #728]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80030dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80030e4:	4ab2      	ldr	r2, [pc, #712]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030e6:	430b      	orrs	r3, r1
 80030e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ea:	e003      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80030f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800310a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800310e:	460b      	mov	r3, r1
 8003110:	4313      	orrs	r3, r2
 8003112:	d02a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800311e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003122:	d10a      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003128:	3308      	adds	r3, #8
 800312a:	2101      	movs	r1, #1
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f999 	bl	8004464 <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800314c:	4b98      	ldr	r3, [pc, #608]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800314e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003150:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	4a95      	ldr	r2, [pc, #596]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800315c:	430b      	orrs	r3, r1
 800315e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003166:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800316a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003180:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003184:	460b      	mov	r3, r1
 8003186:	4313      	orrs	r3, r2
 8003188:	d037      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800318a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003194:	d00e      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319a:	d816      	bhi.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x776>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d018      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80031a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031a4:	d111      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031a6:	4b82      	ldr	r3, [pc, #520]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	4a81      	ldr	r2, [pc, #516]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031b2:	e00f      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031b8:	3308      	adds	r3, #8
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f951 	bl	8004464 <RCCEx_PLL2_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031c8:	e004      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031d0:	e000      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80031d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031dc:	4b74      	ldr	r3, [pc, #464]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80031e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	4a71      	ldr	r2, [pc, #452]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80031f0:	e003      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003210:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003214:	460b      	mov	r3, r1
 8003216:	4313      	orrs	r3, r2
 8003218:	d03a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800321a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003220:	2b03      	cmp	r3, #3
 8003222:	d81d      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003224:	a201      	add	r2, pc, #4	@ (adr r2, 800322c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003269 	.word	0x08003269
 8003230:	0800323d 	.word	0x0800323d
 8003234:	0800324b 	.word	0x0800324b
 8003238:	08003269 	.word	0x08003269
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4b5c      	ldr	r3, [pc, #368]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	4a5b      	ldr	r2, [pc, #364]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003248:	e00f      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800324a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800324e:	3308      	adds	r3, #8
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f001 f906 	bl	8004464 <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800325e:	e004      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003272:	4b4f      	ldr	r3, [pc, #316]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	f023 0103 	bic.w	r1, r3, #3
 800327a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800327e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003280:	4a4b      	ldr	r2, [pc, #300]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003282:	430b      	orrs	r3, r1
 8003284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800328c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800329c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032a0:	2300      	movs	r3, #0
 80032a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032aa:	460b      	mov	r3, r1
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f000 80a0 	beq.w	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b2:	4b40      	ldr	r3, [pc, #256]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3f      	ldr	r2, [pc, #252]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032be:	f7fd fe01 	bl	8000ec4 <HAL_GetTick>
 80032c2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032c6:	e00b      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fdfc 	bl	8000ec4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	@ 0x64
 80032d6:	d903      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032de:	e005      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e0:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ed      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80032ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d17a      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032f4:	4b2e      	ldr	r3, [pc, #184]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003300:	4053      	eors	r3, r2
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d015      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800330a:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003312:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003316:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a25      	ldr	r2, [pc, #148]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003322:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	4a22      	ldr	r2, [pc, #136]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800332e:	4a20      	ldr	r2, [pc, #128]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003330:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003334:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800333a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800333e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003342:	d118      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd fdbe 	bl	8000ec4 <HAL_GetTick>
 8003348:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800334c:	e00d      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fd fdb9 	bl	8000ec4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003358:	1ad2      	subs	r2, r2, r3
 800335a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800335e:	429a      	cmp	r2, r3
 8003360:	d903      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003368:	e005      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800336a:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0eb      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800337a:	2b00      	cmp	r3, #0
 800337c:	d130      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800337e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003382:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800338e:	d115      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003390:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80033a0:	091a      	lsrs	r2, r3, #4
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	4a02      	ldr	r2, [pc, #8]	@ (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6113      	str	r3, [r2, #16]
 80033ac:	e00c      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80033ae:	bf00      	nop
 80033b0:	58024400 	.word	0x58024400
 80033b4:	58024800 	.word	0x58024800
 80033b8:	00ffffcf 	.word	0x00ffffcf
 80033bc:	4bd4      	ldr	r3, [pc, #848]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4ad3      	ldr	r2, [pc, #844]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033c6:	6113      	str	r3, [r2, #16]
 80033c8:	4bd1      	ldr	r3, [pc, #836]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033ca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	4acd      	ldr	r2, [pc, #820]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	e008      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80033e8:	e003      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f002 0301 	and.w	r3, r2, #1
 80033fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800340c:	460b      	mov	r3, r1
 800340e:	4313      	orrs	r3, r2
 8003410:	f000 808b 	beq.w	800352a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341c:	2b28      	cmp	r3, #40	@ 0x28
 800341e:	d86b      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003420:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	08003501 	.word	0x08003501
 800342c:	080034f9 	.word	0x080034f9
 8003430:	080034f9 	.word	0x080034f9
 8003434:	080034f9 	.word	0x080034f9
 8003438:	080034f9 	.word	0x080034f9
 800343c:	080034f9 	.word	0x080034f9
 8003440:	080034f9 	.word	0x080034f9
 8003444:	080034f9 	.word	0x080034f9
 8003448:	080034cd 	.word	0x080034cd
 800344c:	080034f9 	.word	0x080034f9
 8003450:	080034f9 	.word	0x080034f9
 8003454:	080034f9 	.word	0x080034f9
 8003458:	080034f9 	.word	0x080034f9
 800345c:	080034f9 	.word	0x080034f9
 8003460:	080034f9 	.word	0x080034f9
 8003464:	080034f9 	.word	0x080034f9
 8003468:	080034e3 	.word	0x080034e3
 800346c:	080034f9 	.word	0x080034f9
 8003470:	080034f9 	.word	0x080034f9
 8003474:	080034f9 	.word	0x080034f9
 8003478:	080034f9 	.word	0x080034f9
 800347c:	080034f9 	.word	0x080034f9
 8003480:	080034f9 	.word	0x080034f9
 8003484:	080034f9 	.word	0x080034f9
 8003488:	08003501 	.word	0x08003501
 800348c:	080034f9 	.word	0x080034f9
 8003490:	080034f9 	.word	0x080034f9
 8003494:	080034f9 	.word	0x080034f9
 8003498:	080034f9 	.word	0x080034f9
 800349c:	080034f9 	.word	0x080034f9
 80034a0:	080034f9 	.word	0x080034f9
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	08003501 	.word	0x08003501
 80034ac:	080034f9 	.word	0x080034f9
 80034b0:	080034f9 	.word	0x080034f9
 80034b4:	080034f9 	.word	0x080034f9
 80034b8:	080034f9 	.word	0x080034f9
 80034bc:	080034f9 	.word	0x080034f9
 80034c0:	080034f9 	.word	0x080034f9
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003501 	.word	0x08003501
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d0:	3308      	adds	r3, #8
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 ffc5 	bl	8004464 <RCCEx_PLL2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034e0:	e00f      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e6:	3328      	adds	r3, #40	@ 0x28
 80034e8:	2101      	movs	r1, #1
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 f86c 	bl	80045c8 <RCCEx_PLL3_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034f6:	e004      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800350a:	4b81      	ldr	r3, [pc, #516]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800351a:	4a7d      	ldr	r2, [pc, #500]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003526:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800352a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f002 0302 	and.w	r3, r2, #2
 8003536:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003540:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d042      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800354a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800354e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003550:	2b05      	cmp	r3, #5
 8003552:	d825      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	080035a9 	.word	0x080035a9
 8003560:	08003575 	.word	0x08003575
 8003564:	0800358b 	.word	0x0800358b
 8003568:	080035a9 	.word	0x080035a9
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003574:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003578:	3308      	adds	r3, #8
 800357a:	2101      	movs	r1, #1
 800357c:	4618      	mov	r0, r3
 800357e:	f000 ff71 	bl	8004464 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003588:	e00f      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800358a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800358e:	3328      	adds	r3, #40	@ 0x28
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f818 	bl	80045c8 <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800359e:	e004      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80035a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035b2:	4b57      	ldr	r3, [pc, #348]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	f023 0107 	bic.w	r1, r3, #7
 80035ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c0:	4a53      	ldr	r2, [pc, #332]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80035c2:	430b      	orrs	r3, r1
 80035c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f002 0304 	and.w	r3, r2, #4
 80035dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	d044      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d825      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80035fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003651 	.word	0x08003651
 8003608:	0800361d 	.word	0x0800361d
 800360c:	08003633 	.word	0x08003633
 8003610:	08003651 	.word	0x08003651
 8003614:	08003651 	.word	0x08003651
 8003618:	08003651 	.word	0x08003651
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800361c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003620:	3308      	adds	r3, #8
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 ff1d 	bl	8004464 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003630:	e00f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f000 ffc4 	bl	80045c8 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800365a:	4b2d      	ldr	r3, [pc, #180]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365e:	f023 0107 	bic.w	r1, r3, #7
 8003662:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003666:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800366a:	4a29      	ldr	r2, [pc, #164]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003676:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800367a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f002 0320 	and.w	r3, r2, #32
 8003686:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d057      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800369a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a6:	d035      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80036a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ac:	d82c      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b2:	d031      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d826      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036be:	d02d      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80036c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036c4:	d820      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ca:	d012      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80036cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d0:	d81a      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d024      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80036d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036da:	d115      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e0:	3308      	adds	r3, #8
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 febd 	bl	8004464 <RCCEx_PLL2_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036f0:	e017      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036f6:	3328      	adds	r3, #40	@ 0x28
 80036f8:	2102      	movs	r1, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 ff64 	bl	80045c8 <RCCEx_PLL3_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003710:	58024400 	.word	0x58024400
        break;
 8003714:	bf00      	nop
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003718:	bf00      	nop
 800371a:	e002      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800371c:	bf00      	nop
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10b      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372a:	4bc2      	ldr	r3, [pc, #776]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	4abe      	ldr	r2, [pc, #760]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800373c:	430b      	orrs	r3, r1
 800373e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003740:	e003      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003746:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800375a:	2300      	movs	r3, #0
 800375c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003760:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003764:	460b      	mov	r3, r1
 8003766:	4313      	orrs	r3, r2
 8003768:	d055      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003772:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003776:	d033      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003778:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800377c:	d82c      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003782:	d02f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003788:	d826      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800378a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800378e:	d02b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003794:	d820      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800379a:	d012      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a0:	d81a      	bhi.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d022      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d115      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037b0:	3308      	adds	r3, #8
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fe55 	bl	8004464 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037c0:	e015      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037c6:	3328      	adds	r3, #40	@ 0x28
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fefc 	bl	80045c8 <RCCEx_PLL3_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037d6:	e00a      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037de:	e006      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037e0:	bf00      	nop
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80037fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003806:	4a8b      	ldr	r2, [pc, #556]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003808:	430b      	orrs	r3, r1
 800380a:	6593      	str	r3, [r2, #88]	@ 0x58
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003812:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003822:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800382c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d055      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800383a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800383e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003842:	d033      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003844:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003848:	d82c      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800384a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800384e:	d02f      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003854:	d826      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003856:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800385a:	d02b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800385c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003860:	d820      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003866:	d012      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800386c:	d81a      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d022      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003876:	d115      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800387c:	3308      	adds	r3, #8
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fdef 	bl	8004464 <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800388c:	e015      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800388e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003892:	3328      	adds	r3, #40	@ 0x28
 8003894:	2102      	movs	r1, #2
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fe96 	bl	80045c8 <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038a2:	e00a      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038aa:	e006      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80038ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038d2:	4a58      	ldr	r2, [pc, #352]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f002 0308 	and.w	r3, r2, #8
 80038ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d01e      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800390a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800390e:	d10c      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003914:	3328      	adds	r3, #40	@ 0x28
 8003916:	2102      	movs	r1, #2
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fe55 	bl	80045c8 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800392a:	4b42      	ldr	r3, [pc, #264]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 0310 	and.w	r3, r2, #16
 800394c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003956:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	d01e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396c:	d10c      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800396e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003972:	3328      	adds	r3, #40	@ 0x28
 8003974:	2102      	movs	r1, #2
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fe26 	bl	80045c8 <RCCEx_PLL3_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003988:	4b2a      	ldr	r3, [pc, #168]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003994:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003998:	4a26      	ldr	r2, [pc, #152]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800399a:	430b      	orrs	r3, r1
 800399c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800399e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039ae:	2300      	movs	r3, #0
 80039b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039b8:	460b      	mov	r3, r1
 80039ba:	4313      	orrs	r3, r2
 80039bc:	d040      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039ca:	d022      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80039cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039d0:	d81b      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039da:	d00b      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039e2:	3308      	adds	r3, #8
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fd3c 	bl	8004464 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039f2:	e00f      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f8:	3328      	adds	r3, #40	@ 0x28
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fde3 	bl	80045c8 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a08:	e004      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a2c:	4a01      	ldr	r2, [pc, #4]	@ (8003a34 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a4e:	2300      	movs	r3, #0
 8003a50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a52:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a56:	460b      	mov	r3, r1
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	d03b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a68:	d01f      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003a6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a6e:	d818      	bhi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003a70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a74:	d003      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003a7c:	e011      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4b64      	ldr	r3, [pc, #400]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	4a63      	ldr	r2, [pc, #396]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a8a:	e00f      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fd97 	bl	80045c8 <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aa0:	e004      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab4:	4b56      	ldr	r3, [pc, #344]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ac4:	4a52      	ldr	r2, [pc, #328]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003aca:	e003      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ad0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ae6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d031      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afe:	d007      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003b00:	e011      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b02:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b06:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b0e:	e00e      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b14:	3308      	adds	r3, #8
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fca3 	bl	8004464 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	4a32      	ldr	r2, [pc, #200]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b46:	430b      	orrs	r3, r1
 8003b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4a:	e003      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b62:	2300      	movs	r3, #0
 8003b64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b66:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d00c      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b74:	3328      	adds	r3, #40	@ 0x28
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fd25 	bl	80045c8 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b98:	2300      	movs	r3, #0
 8003b9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d03a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb2:	d018      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb8:	d811      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bbe:	d014      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc4:	d80b      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bce:	d106      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003be4:	e004      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10d      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf8:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c08:	4a01      	ldr	r2, [pc, #4]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c0e:	e005      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003c10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c38:	4baa      	ldr	r3, [pc, #680]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c46:	4aa7      	ldr	r2, [pc, #668]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c62:	460b      	mov	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c68:	4b9e      	ldr	r3, [pc, #632]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003c78:	4a9a      	ldr	r2, [pc, #616]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c90:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c9a:	4b92      	ldr	r3, [pc, #584]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003caa:	430b      	orrs	r3, r1
 8003cac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cba:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cca:	4b86      	ldr	r3, [pc, #536]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	4a85      	ldr	r2, [pc, #532]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003cd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cd4:	6113      	str	r3, [r2, #16]
 8003cd6:	4b83      	ldr	r3, [pc, #524]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003cd8:	6919      	ldr	r1, [r3, #16]
 8003cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ce2:	4a80      	ldr	r2, [pc, #512]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d04:	4b77      	ldr	r3, [pc, #476]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d08:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	4a74      	ldr	r2, [pc, #464]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d14:	430b      	orrs	r3, r1
 8003d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d26:	2300      	movs	r3, #0
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d34:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	4a67      	ldr	r2, [pc, #412]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d46:	430b      	orrs	r3, r1
 8003d48:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	2100      	movs	r1, #0
 8003d54:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d011      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fb78 	bl	8004464 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003d7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	2100      	movs	r1, #0
 8003d94:	6239      	str	r1, [r7, #32]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d011      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003daa:	3308      	adds	r3, #8
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb58 	bl	8004464 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003dba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	61b9      	str	r1, [r7, #24]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	61fb      	str	r3, [r7, #28]
 8003ddc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003de6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dea:	3308      	adds	r3, #8
 8003dec:	2102      	movs	r1, #2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fb38 	bl	8004464 <RCCEx_PLL2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	2100      	movs	r1, #0
 8003e14:	6139      	str	r1, [r7, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e20:	460b      	mov	r3, r1
 8003e22:	4313      	orrs	r3, r2
 8003e24:	d011      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e2a:	3328      	adds	r3, #40	@ 0x28
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fbca 	bl	80045c8 <RCCEx_PLL3_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	2100      	movs	r1, #0
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e60:	460b      	mov	r3, r1
 8003e62:	4313      	orrs	r3, r2
 8003e64:	d011      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e6a:	3328      	adds	r3, #40	@ 0x28
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fbaa 	bl	80045c8 <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	2100      	movs	r1, #0
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	d011      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eaa:	3328      	adds	r3, #40	@ 0x28
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fb8a 	bl	80045c8 <RCCEx_PLL3_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003eba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ec6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003eca:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee4:	58024400 	.word	0x58024400

08003ee8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003eec:	f7fe fd56 	bl	800299c <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	@ (8003f10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	080066ac 	.word	0x080066ac

08003f14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	@ 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f1c:	4ba1      	ldr	r3, [pc, #644]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f26:	4b9f      	ldr	r3, [pc, #636]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	0b1b      	lsrs	r3, r3, #12
 8003f2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f32:	4b9c      	ldr	r3, [pc, #624]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f3e:	4b99      	ldr	r3, [pc, #612]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	08db      	lsrs	r3, r3, #3
 8003f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8111 	beq.w	8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f000 8083 	beq.w	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	f200 80a1 	bhi.w	80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d056      	beq.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f7e:	e099      	b.n	80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f80:	4b88      	ldr	r3, [pc, #544]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02d      	beq.n	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f8c:	4b85      	ldr	r3, [pc, #532]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	08db      	lsrs	r3, r3, #3
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	4a84      	ldr	r2, [pc, #528]	@ (80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b7b      	ldr	r3, [pc, #492]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fe6:	e087      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a03 	vldr	s12, [r7, #12]
 800400e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402a:	e065      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b59      	ldr	r3, [pc, #356]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004052:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800406e:	e043      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800407e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004082:	4b48      	ldr	r3, [pc, #288]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004092:	ed97 6a03 	vldr	s12, [r7, #12]
 8004096:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800409a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b2:	e021      	b.n	80040f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c6:	4b37      	ldr	r3, [pc, #220]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80040f8:	4b2a      	ldr	r3, [pc, #168]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	0a5b      	lsrs	r3, r3, #9
 80040fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800410e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004112:	edd7 6a07 	vldr	s13, [r7, #28]
 8004116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800411a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411e:	ee17 2a90 	vmov	r2, s15
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004126:	4b1f      	ldr	r3, [pc, #124]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800413c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004140:	edd7 6a07 	vldr	s13, [r7, #28]
 8004144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414c:	ee17 2a90 	vmov	r2, s15
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	0e1b      	lsrs	r3, r3, #24
 800415a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800416a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800416e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417a:	ee17 2a90 	vmov	r2, s15
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004182:	e008      	b.n	8004196 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	bf00      	nop
 8004198:	3724      	adds	r7, #36	@ 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	03d09000 	.word	0x03d09000
 80041ac:	46000000 	.word	0x46000000
 80041b0:	4c742400 	.word	0x4c742400
 80041b4:	4a742400 	.word	0x4a742400
 80041b8:	4bbebc20 	.word	0x4bbebc20

080041bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	@ 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041c4:	4ba1      	ldr	r3, [pc, #644]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80041ce:	4b9f      	ldr	r3, [pc, #636]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	0d1b      	lsrs	r3, r3, #20
 80041d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041da:	4b9c      	ldr	r3, [pc, #624]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041e6:	4b99      	ldr	r3, [pc, #612]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	08db      	lsrs	r3, r3, #3
 80041ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8111 	beq.w	800442c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b02      	cmp	r3, #2
 800420e:	f000 8083 	beq.w	8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b02      	cmp	r3, #2
 8004216:	f200 80a1 	bhi.w	800435c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d056      	beq.n	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004226:	e099      	b.n	800435c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004228:	4b88      	ldr	r3, [pc, #544]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02d      	beq.n	8004290 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004234:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	08db      	lsrs	r3, r3, #3
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	4a84      	ldr	r2, [pc, #528]	@ (8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425e:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004272:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800428e:	e087      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a2:	4b6a      	ldr	r3, [pc, #424]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042d2:	e065      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800445c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e6:	4b59      	ldr	r3, [pc, #356]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800430a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004316:	e043      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432a:	4b48      	ldr	r3, [pc, #288]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433a:	ed97 6a03 	vldr	s12, [r7, #12]
 800433e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800434e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800435a:	e021      	b.n	80043a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800445c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800436a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004382:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004454 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800438a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800439e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80043a0:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	0a5b      	lsrs	r3, r3, #9
 80043a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80043be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c6:	ee17 2a90 	vmov	r2, s15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80043ce:	4b1f      	ldr	r3, [pc, #124]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d8:	ee07 3a90 	vmov	s15, r3
 80043dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f4:	ee17 2a90 	vmov	r2, s15
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80043fc:	4b13      	ldr	r3, [pc, #76]	@ (800444c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	0e1b      	lsrs	r3, r3, #24
 8004402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004416:	edd7 6a07 	vldr	s13, [r7, #28]
 800441a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004422:	ee17 2a90 	vmov	r2, s15
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800442a:	e008      	b.n	800443e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
}
 800443e:	bf00      	nop
 8004440:	3724      	adds	r7, #36	@ 0x24
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	58024400 	.word	0x58024400
 8004450:	03d09000 	.word	0x03d09000
 8004454:	46000000 	.word	0x46000000
 8004458:	4c742400 	.word	0x4c742400
 800445c:	4a742400 	.word	0x4a742400
 8004460:	4bbebc20 	.word	0x4bbebc20

08004464 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004472:	4b53      	ldr	r3, [pc, #332]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d101      	bne.n	8004482 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e099      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004482:	4b4f      	ldr	r3, [pc, #316]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4e      	ldr	r2, [pc, #312]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004488:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800448c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448e:	f7fc fd19 	bl	8000ec4 <HAL_GetTick>
 8004492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004494:	e008      	b.n	80044a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004496:	f7fc fd15 	bl	8000ec4 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e086      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044a8:	4b45      	ldr	r3, [pc, #276]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044b4:	4b42      	ldr	r3, [pc, #264]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	031b      	lsls	r3, r3, #12
 80044c2:	493f      	ldr	r1, [pc, #252]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	025b      	lsls	r3, r3, #9
 80044da:	b29b      	uxth	r3, r3
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80044f8:	4931      	ldr	r1, [pc, #196]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044fe:	4b30      	ldr	r3, [pc, #192]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004502:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	492d      	ldr	r1, [pc, #180]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004510:	4b2b      	ldr	r3, [pc, #172]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	f023 0220 	bic.w	r2, r3, #32
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4928      	ldr	r1, [pc, #160]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004522:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	4a26      	ldr	r2, [pc, #152]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004528:	f023 0310 	bic.w	r3, r3, #16
 800452c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800452e:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004532:	4b24      	ldr	r3, [pc, #144]	@ (80045c4 <RCCEx_PLL2_Config+0x160>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	69d2      	ldr	r2, [r2, #28]
 800453a:	00d2      	lsls	r2, r2, #3
 800453c:	4920      	ldr	r1, [pc, #128]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004542:	4b1f      	ldr	r3, [pc, #124]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004546:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004548:	f043 0310 	orr.w	r3, r3, #16
 800454c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004554:	4b1a      	ldr	r3, [pc, #104]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4a19      	ldr	r2, [pc, #100]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800455a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800455e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004560:	e00f      	b.n	8004582 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004568:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	4a14      	ldr	r2, [pc, #80]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004574:	e005      	b.n	8004582 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004576:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 800457c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004580:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004582:	4b0f      	ldr	r3, [pc, #60]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a0e      	ldr	r2, [pc, #56]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 8004588:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800458c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458e:	f7fc fc99 	bl	8000ec4 <HAL_GetTick>
 8004592:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004594:	e008      	b.n	80045a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004596:	f7fc fc95 	bl	8000ec4 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e006      	b.n	80045b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <RCCEx_PLL2_Config+0x15c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	58024400 	.word	0x58024400
 80045c4:	ffff0007 	.word	0xffff0007

080045c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045d6:	4b53      	ldr	r3, [pc, #332]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d101      	bne.n	80045e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e099      	b.n	800471a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4e      	ldr	r2, [pc, #312]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f2:	f7fc fc67 	bl	8000ec4 <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045f8:	e008      	b.n	800460c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045fa:	f7fc fc63 	bl	8000ec4 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e086      	b.n	800471a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800460c:	4b45      	ldr	r3, [pc, #276]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004618:	4b42      	ldr	r3, [pc, #264]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	051b      	lsls	r3, r3, #20
 8004626:	493f      	ldr	r1, [pc, #252]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	628b      	str	r3, [r1, #40]	@ 0x28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	3b01      	subs	r3, #1
 8004632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	3b01      	subs	r3, #1
 800463c:	025b      	lsls	r3, r3, #9
 800463e:	b29b      	uxth	r3, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	3b01      	subs	r3, #1
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800465c:	4931      	ldr	r1, [pc, #196]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004662:	4b30      	ldr	r3, [pc, #192]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004666:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	492d      	ldr	r1, [pc, #180]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004674:	4b2b      	ldr	r3, [pc, #172]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4928      	ldr	r1, [pc, #160]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004686:	4b27      	ldr	r3, [pc, #156]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800468c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004692:	4b24      	ldr	r3, [pc, #144]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 8004694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <RCCEx_PLL3_Config+0x160>)
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	69d2      	ldr	r2, [r2, #28]
 800469e:	00d2      	lsls	r2, r2, #3
 80046a0:	4920      	ldr	r1, [pc, #128]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046c4:	e00f      	b.n	80046e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80046cc:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	4a14      	ldr	r2, [pc, #80]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046d8:	e005      	b.n	80046e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80046da:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f2:	f7fc fbe7 	bl	8000ec4 <HAL_GetTick>
 80046f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046f8:	e008      	b.n	800470c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046fa:	f7fc fbe3 	bl	8000ec4 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <RCCEx_PLL3_Config+0x15c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	ffff0007 	.word	0xffff0007

0800472c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e10f      	b.n	800495e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a87      	ldr	r2, [pc, #540]	@ (8004968 <HAL_SPI_Init+0x23c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <HAL_SPI_Init+0x42>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a86      	ldr	r2, [pc, #536]	@ (800496c <HAL_SPI_Init+0x240>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00a      	beq.n	800476e <HAL_SPI_Init+0x42>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a84      	ldr	r2, [pc, #528]	@ (8004970 <HAL_SPI_Init+0x244>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d005      	beq.n	800476e <HAL_SPI_Init+0x42>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b0f      	cmp	r3, #15
 8004768:	d901      	bls.n	800476e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0f7      	b.n	800495e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fdd6 	bl	8005320 <SPI_GetPacketSize>
 8004774:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7b      	ldr	r2, [pc, #492]	@ (8004968 <HAL_SPI_Init+0x23c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00c      	beq.n	800479a <HAL_SPI_Init+0x6e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a79      	ldr	r2, [pc, #484]	@ (800496c <HAL_SPI_Init+0x240>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <HAL_SPI_Init+0x6e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a78      	ldr	r2, [pc, #480]	@ (8004970 <HAL_SPI_Init+0x244>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d002      	beq.n	800479a <HAL_SPI_Init+0x6e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b08      	cmp	r3, #8
 8004798:	d811      	bhi.n	80047be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800479e:	4a72      	ldr	r2, [pc, #456]	@ (8004968 <HAL_SPI_Init+0x23c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a70      	ldr	r2, [pc, #448]	@ (800496c <HAL_SPI_Init+0x240>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_SPI_Init+0x8c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a6f      	ldr	r2, [pc, #444]	@ (8004970 <HAL_SPI_Init+0x244>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d104      	bne.n	80047c2 <HAL_SPI_Init+0x96>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d901      	bls.n	80047c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0cd      	b.n	800495e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc f988 	bl	8000aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80047fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004808:	d119      	bne.n	800483e <HAL_SPI_Init+0x112>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004812:	d103      	bne.n	800481c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10c      	bne.n	800483e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800482c:	d107      	bne.n	800483e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00f      	beq.n	800486a <HAL_SPI_Init+0x13e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b06      	cmp	r3, #6
 8004850:	d90b      	bls.n	800486a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e007      	b.n	800487a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	431a      	orrs	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	ea42 0103 	orr.w	r1, r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048da:	ea42 0103 	orr.w	r1, r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d113      	bne.n	800491a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004904:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004918:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40013000 	.word	0x40013000
 800496c:	40003800 	.word	0x40003800
 8004970:	40003c00 	.word	0x40003c00

08004974 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3320      	adds	r3, #32
 800498a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800498c:	f7fc fa9a 	bl	8000ec4 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
 80049a0:	e1d1      	b.n	8004d46 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Transmit+0x3a>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e1c9      	b.n	8004d46 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_SPI_Transmit+0x4c>
 80049bc:	2302      	movs	r3, #2
 80049be:	e1c2      	b.n	8004d46 <HAL_SPI_Transmit+0x3d2>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2203      	movs	r2, #3
 80049cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004a18:	d108      	bne.n	8004a2c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e009      	b.n	8004a40 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004a3e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	4b96      	ldr	r3, [pc, #600]	@ (8004ca0 <HAL_SPI_Transmit+0x32c>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	88f9      	ldrh	r1, [r7, #6]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a6c:	d107      	bne.n	8004a7e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	d947      	bls.n	8004b16 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004a86:	e03f      	b.n	8004b08 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d114      	bne.n	8004ac0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	1d1a      	adds	r2, r3, #4
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004abe:	e023      	b.n	8004b08 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac0:	f7fc fa00 	bl	8000ec4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d803      	bhi.n	8004ad8 <HAL_SPI_Transmit+0x164>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d102      	bne.n	8004ade <HAL_SPI_Transmit+0x16a>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d114      	bne.n	8004b08 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fb50 	bl	8005184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e11e      	b.n	8004d46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1b9      	bne.n	8004a88 <HAL_SPI_Transmit+0x114>
 8004b14:	e0f1      	b.n	8004cfa <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b07      	cmp	r3, #7
 8004b1c:	f240 80e6 	bls.w	8004cec <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004b20:	e05d      	b.n	8004bde <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d132      	bne.n	8004b96 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d918      	bls.n	8004b6e <HAL_SPI_Transmit+0x1fa>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d014      	beq.n	8004b6e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b54:	1d1a      	adds	r2, r3, #4
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b02      	subs	r3, #2
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b6c:	e037      	b.n	8004bde <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004b94:	e023      	b.n	8004bde <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b96:	f7fc f995 	bl	8000ec4 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d803      	bhi.n	8004bae <HAL_SPI_Transmit+0x23a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d102      	bne.n	8004bb4 <HAL_SPI_Transmit+0x240>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d114      	bne.n	8004bde <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fae5 	bl	8005184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0b3      	b.n	8004d46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d19b      	bne.n	8004b22 <HAL_SPI_Transmit+0x1ae>
 8004bea:	e086      	b.n	8004cfa <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d154      	bne.n	8004ca4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d918      	bls.n	8004c38 <HAL_SPI_Transmit+0x2c4>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	2b40      	cmp	r3, #64	@ 0x40
 8004c0c:	d914      	bls.n	8004c38 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b04      	subs	r3, #4
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c36:	e059      	b.n	8004cec <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d917      	bls.n	8004c74 <HAL_SPI_Transmit+0x300>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b02      	subs	r3, #2
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c72:	e03b      	b.n	8004cec <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3320      	adds	r3, #32
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c9e:	e025      	b.n	8004cec <HAL_SPI_Transmit+0x378>
 8004ca0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca4:	f7fc f90e 	bl	8000ec4 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d803      	bhi.n	8004cbc <HAL_SPI_Transmit+0x348>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cba:	d102      	bne.n	8004cc2 <HAL_SPI_Transmit+0x34e>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d114      	bne.n	8004cec <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fa5e 	bl	8005184 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e02c      	b.n	8004d46 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f47f af79 	bne.w	8004bec <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2200      	movs	r2, #0
 8004d02:	2108      	movs	r1, #8
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fadd 	bl	80052c4 <SPI_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fa2f 	bl	8005184 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop

08004d50 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	@ 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004d82:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3330      	adds	r3, #48	@ 0x30
 8004d8a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d010      	beq.n	8004db8 <HAL_SPI_IRQHandler+0x68>
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dae:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f9c3 	bl	800513c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8004db6:	e192      	b.n	80050de <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d113      	bne.n	8004dea <HAL_SPI_IRQHandler+0x9a>
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10e      	bne.n	8004dea <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
    handled = 1UL;
 8004de6:	2301      	movs	r3, #1
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10f      	bne.n	8004e14 <HAL_SPI_IRQHandler+0xc4>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
    handled = 1UL;
 8004e10:	2301      	movs	r3, #1
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <HAL_SPI_IRQHandler+0xee>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d105      	bne.n	8004e3e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
    handled = 1UL;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 8147 	bne.w	80050d4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 808b 	beq.w	8004f68 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0208 	orr.w	r2, r2, #8
 8004e60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699a      	ldr	r2, [r3, #24]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0210 	orr.w	r2, r2, #16
 8004e70:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e80:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0208 	bic.w	r2, r2, #8
 8004e90:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d13d      	bne.n	8004f1c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8004ea0:	e036      	b.n	8004f10 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b0f      	cmp	r3, #15
 8004ea8:	d90b      	bls.n	8004ec2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004eb4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	665a      	str	r2, [r3, #100]	@ 0x64
 8004ec0:	e01d      	b.n	8004efe <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d90b      	bls.n	8004ee2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	8812      	ldrh	r2, [r2, #0]
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eda:	1c9a      	adds	r2, r3, #2
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	665a      	str	r2, [r3, #100]	@ 0x64
 8004ee0:	e00d      	b.n	8004efe <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eee:	7812      	ldrb	r2, [r2, #0]
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1c2      	bne.n	8004ea2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f931 	bl	8005184 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f8f7 	bl	8005128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004f3a:	e0d0      	b.n	80050de <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	d103      	bne.n	8004f4a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8e6 	bl	8005114 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8004f48:	e0c6      	b.n	80050d8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d103      	bne.n	8004f58 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8d5 	bl	8005100 <HAL_SPI_RxCpltCallback>
    return;
 8004f56:	e0bf      	b.n	80050d8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	f040 80bc 	bne.w	80050d8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8c3 	bl	80050ec <HAL_SPI_TxCpltCallback>
    return;
 8004f66:	e0b7      	b.n	80050d8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80b5 	beq.w	80050de <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00f      	beq.n	8004f9e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f84:	f043 0204 	orr.w	r2, r3, #4
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00f      	beq.n	8004fc8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00f      	beq.n	8004ff2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd8:	f043 0208 	orr.w	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ff0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00f      	beq.n	800501c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005002:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0220 	orr.w	r2, r2, #32
 800501a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005022:	2b00      	cmp	r3, #0
 8005024:	d05a      	beq.n	80050dc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6919      	ldr	r1, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b28      	ldr	r3, [pc, #160]	@ (80050e4 <HAL_SPI_IRQHandler+0x394>)
 8005042:	400b      	ands	r3, r1
 8005044:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800504c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005050:	d138      	bne.n	80050c4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005060:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d013      	beq.n	8005092 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <HAL_SPI_IRQHandler+0x398>)
 8005070:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005076:	4618      	mov	r0, r3
 8005078:	f7fc f870 	bl	800115c <HAL_DMA_Abort_IT>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d007      	beq.n	8005092 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005088:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800509e:	4a12      	ldr	r2, [pc, #72]	@ (80050e8 <HAL_SPI_IRQHandler+0x398>)
 80050a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc f858 	bl	800115c <HAL_DMA_Abort_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d014      	beq.n	80050dc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050c2:	e00b      	b.n	80050dc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f82b 	bl	8005128 <HAL_SPI_ErrorCallback>
    return;
 80050d2:	e003      	b.n	80050dc <HAL_SPI_IRQHandler+0x38c>
    return;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <HAL_SPI_IRQHandler+0x38e>
    return;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <HAL_SPI_IRQHandler+0x38e>
    return;
 80050dc:	bf00      	nop
  }
}
 80050de:	3728      	adds	r7, #40	@ 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	fffffc94 	.word	0xfffffc94
 80050e8:	08005151 	.word	0x08005151

080050ec <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff ffd6 	bl	8005128 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0208 	orr.w	r2, r2, #8
 80051a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0210 	orr.w	r2, r2, #16
 80051b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6919      	ldr	r1, [r3, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b3c      	ldr	r3, [pc, #240]	@ (80052c0 <SPI_CloseTransfer+0x13c>)
 80051d0:	400b      	ands	r3, r1
 80051d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80051e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d014      	beq.n	800521a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00f      	beq.n	800521a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005200:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0220 	orr.w	r2, r2, #32
 8005218:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b03      	cmp	r3, #3
 8005224:	d014      	beq.n	8005250 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00f      	beq.n	8005250 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800524e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00f      	beq.n	800527a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005278:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00f      	beq.n	80052a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800528a:	f043 0208 	orr.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	fffffc90 	.word	0xfffffc90

080052c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80052d4:	e010      	b.n	80052f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052d6:	f7fb fdf5 	bl	8000ec4 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d803      	bhi.n	80052ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d102      	bne.n	80052f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e00f      	b.n	8005318 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	d0df      	beq.n	80052d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	3301      	adds	r3, #1
 8005338:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	3307      	adds	r3, #7
 800533e:	08db      	lsrs	r3, r3, #3
 8005340:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e042      	b.n	80053ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fb fc4e 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	@ 0x24
 8005384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fe1f 	bl	8005fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8b4 	bl	8005514 <UART_SetConfig>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e01b      	b.n	80053ee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fe9e 	bl	8006128 <UART_CheckIdleState>
 80053ec:	4603      	mov	r3, r0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b08a      	sub	sp, #40	@ 0x28
 80053fa:	af02      	add	r7, sp, #8
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540c:	2b20      	cmp	r3, #32
 800540e:	d17b      	bne.n	8005508 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_Transmit+0x26>
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e074      	b.n	800550a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2221      	movs	r2, #33	@ 0x21
 800542c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005430:	f7fb fd48 	bl	8000ec4 <HAL_GetTick>
 8005434:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	88fa      	ldrh	r2, [r7, #6]
 800543a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544e:	d108      	bne.n	8005462 <HAL_UART_Transmit+0x6c>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	e003      	b.n	800546a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800546a:	e030      	b.n	80054ce <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	2180      	movs	r1, #128	@ 0x80
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 ff00 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e03d      	b.n	800550a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	3302      	adds	r3, #2
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e007      	b.n	80054bc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3301      	adds	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1c8      	bne.n	800546c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2140      	movs	r1, #64	@ 0x40
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fec9 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e006      	b.n	800550a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b092      	sub	sp, #72	@ 0x48
 800551a:	af00      	add	r7, sp, #0
 800551c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	431a      	orrs	r2, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	431a      	orrs	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	4313      	orrs	r3, r2
 800553a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4bbe      	ldr	r3, [pc, #760]	@ (800583c <UART_SetConfig+0x328>)
 8005544:	4013      	ands	r3, r2
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800554c:	430b      	orrs	r3, r1
 800554e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4ab3      	ldr	r2, [pc, #716]	@ (8005840 <UART_SetConfig+0x32c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557c:	4313      	orrs	r3, r2
 800557e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	4baf      	ldr	r3, [pc, #700]	@ (8005844 <UART_SetConfig+0x330>)
 8005588:	4013      	ands	r3, r2
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005590:	430b      	orrs	r3, r1
 8005592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	f023 010f 	bic.w	r1, r3, #15
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4aa6      	ldr	r2, [pc, #664]	@ (8005848 <UART_SetConfig+0x334>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d177      	bne.n	80056a4 <UART_SetConfig+0x190>
 80055b4:	4ba5      	ldr	r3, [pc, #660]	@ (800584c <UART_SetConfig+0x338>)
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055bc:	2b28      	cmp	r3, #40	@ 0x28
 80055be:	d86d      	bhi.n	800569c <UART_SetConfig+0x188>
 80055c0:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <UART_SetConfig+0xb4>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	0800566d 	.word	0x0800566d
 80055cc:	0800569d 	.word	0x0800569d
 80055d0:	0800569d 	.word	0x0800569d
 80055d4:	0800569d 	.word	0x0800569d
 80055d8:	0800569d 	.word	0x0800569d
 80055dc:	0800569d 	.word	0x0800569d
 80055e0:	0800569d 	.word	0x0800569d
 80055e4:	0800569d 	.word	0x0800569d
 80055e8:	08005675 	.word	0x08005675
 80055ec:	0800569d 	.word	0x0800569d
 80055f0:	0800569d 	.word	0x0800569d
 80055f4:	0800569d 	.word	0x0800569d
 80055f8:	0800569d 	.word	0x0800569d
 80055fc:	0800569d 	.word	0x0800569d
 8005600:	0800569d 	.word	0x0800569d
 8005604:	0800569d 	.word	0x0800569d
 8005608:	0800567d 	.word	0x0800567d
 800560c:	0800569d 	.word	0x0800569d
 8005610:	0800569d 	.word	0x0800569d
 8005614:	0800569d 	.word	0x0800569d
 8005618:	0800569d 	.word	0x0800569d
 800561c:	0800569d 	.word	0x0800569d
 8005620:	0800569d 	.word	0x0800569d
 8005624:	0800569d 	.word	0x0800569d
 8005628:	08005685 	.word	0x08005685
 800562c:	0800569d 	.word	0x0800569d
 8005630:	0800569d 	.word	0x0800569d
 8005634:	0800569d 	.word	0x0800569d
 8005638:	0800569d 	.word	0x0800569d
 800563c:	0800569d 	.word	0x0800569d
 8005640:	0800569d 	.word	0x0800569d
 8005644:	0800569d 	.word	0x0800569d
 8005648:	0800568d 	.word	0x0800568d
 800564c:	0800569d 	.word	0x0800569d
 8005650:	0800569d 	.word	0x0800569d
 8005654:	0800569d 	.word	0x0800569d
 8005658:	0800569d 	.word	0x0800569d
 800565c:	0800569d 	.word	0x0800569d
 8005660:	0800569d 	.word	0x0800569d
 8005664:	0800569d 	.word	0x0800569d
 8005668:	08005695 	.word	0x08005695
 800566c:	2301      	movs	r3, #1
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e222      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005674:	2304      	movs	r3, #4
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e21e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800567c:	2308      	movs	r3, #8
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e21a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005684:	2310      	movs	r3, #16
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e216      	b.n	8005aba <UART_SetConfig+0x5a6>
 800568c:	2320      	movs	r3, #32
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e212      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005694:	2340      	movs	r3, #64	@ 0x40
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e20e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e20a      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a69      	ldr	r2, [pc, #420]	@ (8005850 <UART_SetConfig+0x33c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d130      	bne.n	8005710 <UART_SetConfig+0x1fc>
 80056ae:	4b67      	ldr	r3, [pc, #412]	@ (800584c <UART_SetConfig+0x338>)
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d826      	bhi.n	8005708 <UART_SetConfig+0x1f4>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x1ac>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056e9 	.word	0x080056e9
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	08005701 	.word	0x08005701
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e1ec      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e1e8      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e1e4      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e1e0      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056f8:	2320      	movs	r3, #32
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e1dc      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005700:	2340      	movs	r3, #64	@ 0x40
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e1d8      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005708:	2380      	movs	r3, #128	@ 0x80
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e1d4      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a4f      	ldr	r2, [pc, #316]	@ (8005854 <UART_SetConfig+0x340>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d130      	bne.n	800577c <UART_SetConfig+0x268>
 800571a:	4b4c      	ldr	r3, [pc, #304]	@ (800584c <UART_SetConfig+0x338>)
 800571c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b05      	cmp	r3, #5
 8005724:	d826      	bhi.n	8005774 <UART_SetConfig+0x260>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <UART_SetConfig+0x218>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005745 	.word	0x08005745
 8005730:	0800574d 	.word	0x0800574d
 8005734:	08005755 	.word	0x08005755
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	2300      	movs	r3, #0
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e1b6      	b.n	8005aba <UART_SetConfig+0x5a6>
 800574c:	2304      	movs	r3, #4
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e1b2      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005754:	2308      	movs	r3, #8
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575a:	e1ae      	b.n	8005aba <UART_SetConfig+0x5a6>
 800575c:	2310      	movs	r3, #16
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005762:	e1aa      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005764:	2320      	movs	r3, #32
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e1a6      	b.n	8005aba <UART_SetConfig+0x5a6>
 800576c:	2340      	movs	r3, #64	@ 0x40
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e1a2      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e19e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a35      	ldr	r2, [pc, #212]	@ (8005858 <UART_SetConfig+0x344>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d130      	bne.n	80057e8 <UART_SetConfig+0x2d4>
 8005786:	4b31      	ldr	r3, [pc, #196]	@ (800584c <UART_SetConfig+0x338>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2b05      	cmp	r3, #5
 8005790:	d826      	bhi.n	80057e0 <UART_SetConfig+0x2cc>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <UART_SetConfig+0x284>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057b1 	.word	0x080057b1
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	080057c1 	.word	0x080057c1
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d9 	.word	0x080057d9
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e180      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057b8:	2304      	movs	r3, #4
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057be:	e17c      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057c0:	2308      	movs	r3, #8
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c6:	e178      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057c8:	2310      	movs	r3, #16
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ce:	e174      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057d0:	2320      	movs	r3, #32
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d6:	e170      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057d8:	2340      	movs	r3, #64	@ 0x40
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057de:	e16c      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057e0:	2380      	movs	r3, #128	@ 0x80
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e168      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <UART_SetConfig+0x348>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d142      	bne.n	8005878 <UART_SetConfig+0x364>
 80057f2:	4b16      	ldr	r3, [pc, #88]	@ (800584c <UART_SetConfig+0x338>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d838      	bhi.n	8005870 <UART_SetConfig+0x35c>
 80057fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <UART_SetConfig+0x2f0>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	0800581d 	.word	0x0800581d
 8005808:	08005825 	.word	0x08005825
 800580c:	0800582d 	.word	0x0800582d
 8005810:	08005835 	.word	0x08005835
 8005814:	08005861 	.word	0x08005861
 8005818:	08005869 	.word	0x08005869
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e14a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005824:	2304      	movs	r3, #4
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582a:	e146      	b.n	8005aba <UART_SetConfig+0x5a6>
 800582c:	2308      	movs	r3, #8
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005832:	e142      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583a:	e13e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800583c:	cfff69f3 	.word	0xcfff69f3
 8005840:	58000c00 	.word	0x58000c00
 8005844:	11fff4ff 	.word	0x11fff4ff
 8005848:	40011000 	.word	0x40011000
 800584c:	58024400 	.word	0x58024400
 8005850:	40004400 	.word	0x40004400
 8005854:	40004800 	.word	0x40004800
 8005858:	40004c00 	.word	0x40004c00
 800585c:	40005000 	.word	0x40005000
 8005860:	2320      	movs	r3, #32
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e128      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005868:	2340      	movs	r3, #64	@ 0x40
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e124      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e120      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4acb      	ldr	r2, [pc, #812]	@ (8005bac <UART_SetConfig+0x698>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d176      	bne.n	8005970 <UART_SetConfig+0x45c>
 8005882:	4bcb      	ldr	r3, [pc, #812]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588a:	2b28      	cmp	r3, #40	@ 0x28
 800588c:	d86c      	bhi.n	8005968 <UART_SetConfig+0x454>
 800588e:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <UART_SetConfig+0x380>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	08005939 	.word	0x08005939
 8005898:	08005969 	.word	0x08005969
 800589c:	08005969 	.word	0x08005969
 80058a0:	08005969 	.word	0x08005969
 80058a4:	08005969 	.word	0x08005969
 80058a8:	08005969 	.word	0x08005969
 80058ac:	08005969 	.word	0x08005969
 80058b0:	08005969 	.word	0x08005969
 80058b4:	08005941 	.word	0x08005941
 80058b8:	08005969 	.word	0x08005969
 80058bc:	08005969 	.word	0x08005969
 80058c0:	08005969 	.word	0x08005969
 80058c4:	08005969 	.word	0x08005969
 80058c8:	08005969 	.word	0x08005969
 80058cc:	08005969 	.word	0x08005969
 80058d0:	08005969 	.word	0x08005969
 80058d4:	08005949 	.word	0x08005949
 80058d8:	08005969 	.word	0x08005969
 80058dc:	08005969 	.word	0x08005969
 80058e0:	08005969 	.word	0x08005969
 80058e4:	08005969 	.word	0x08005969
 80058e8:	08005969 	.word	0x08005969
 80058ec:	08005969 	.word	0x08005969
 80058f0:	08005969 	.word	0x08005969
 80058f4:	08005951 	.word	0x08005951
 80058f8:	08005969 	.word	0x08005969
 80058fc:	08005969 	.word	0x08005969
 8005900:	08005969 	.word	0x08005969
 8005904:	08005969 	.word	0x08005969
 8005908:	08005969 	.word	0x08005969
 800590c:	08005969 	.word	0x08005969
 8005910:	08005969 	.word	0x08005969
 8005914:	08005959 	.word	0x08005959
 8005918:	08005969 	.word	0x08005969
 800591c:	08005969 	.word	0x08005969
 8005920:	08005969 	.word	0x08005969
 8005924:	08005969 	.word	0x08005969
 8005928:	08005969 	.word	0x08005969
 800592c:	08005969 	.word	0x08005969
 8005930:	08005969 	.word	0x08005969
 8005934:	08005961 	.word	0x08005961
 8005938:	2301      	movs	r3, #1
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e0bc      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e0b8      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e0b4      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e0b0      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005958:	2320      	movs	r3, #32
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595e:	e0ac      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005960:	2340      	movs	r3, #64	@ 0x40
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e0a8      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e0a4      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a8f      	ldr	r2, [pc, #572]	@ (8005bb4 <UART_SetConfig+0x6a0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d130      	bne.n	80059dc <UART_SetConfig+0x4c8>
 800597a:	4b8d      	ldr	r3, [pc, #564]	@ (8005bb0 <UART_SetConfig+0x69c>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b05      	cmp	r3, #5
 8005984:	d826      	bhi.n	80059d4 <UART_SetConfig+0x4c0>
 8005986:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x478>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059a5 	.word	0x080059a5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059b5 	.word	0x080059b5
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059cd 	.word	0x080059cd
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e086      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e082      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e07e      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e07a      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059c4:	2320      	movs	r3, #32
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ca:	e076      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059cc:	2340      	movs	r3, #64	@ 0x40
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e072      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059d4:	2380      	movs	r3, #128	@ 0x80
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e06e      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a75      	ldr	r2, [pc, #468]	@ (8005bb8 <UART_SetConfig+0x6a4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d130      	bne.n	8005a48 <UART_SetConfig+0x534>
 80059e6:	4b72      	ldr	r3, [pc, #456]	@ (8005bb0 <UART_SetConfig+0x69c>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d826      	bhi.n	8005a40 <UART_SetConfig+0x52c>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <UART_SetConfig+0x4e4>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a11 	.word	0x08005a11
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a21 	.word	0x08005a21
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e050      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e04c      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e048      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2e:	e044      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a30:	2320      	movs	r3, #32
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a36:	e040      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a38:	2340      	movs	r3, #64	@ 0x40
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e03c      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a40:	2380      	movs	r3, #128	@ 0x80
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e038      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8005bbc <UART_SetConfig+0x6a8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d130      	bne.n	8005ab4 <UART_SetConfig+0x5a0>
 8005a52:	4b57      	ldr	r3, [pc, #348]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d826      	bhi.n	8005aac <UART_SetConfig+0x598>
 8005a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <UART_SetConfig+0x550>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a7d 	.word	0x08005a7d
 8005a68:	08005a85 	.word	0x08005a85
 8005a6c:	08005a8d 	.word	0x08005a8d
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e01a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8a:	e016      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e012      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e00e      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e00a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005aa4:	2340      	movs	r3, #64	@ 0x40
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e006      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005aac:	2380      	movs	r3, #128	@ 0x80
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e002      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005ab4:	2380      	movs	r3, #128	@ 0x80
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a3f      	ldr	r2, [pc, #252]	@ (8005bbc <UART_SetConfig+0x6a8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f040 80f8 	bne.w	8005cb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	dc46      	bgt.n	8005b5c <UART_SetConfig+0x648>
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	f2c0 8082 	blt.w	8005bd8 <UART_SetConfig+0x6c4>
 8005ad4:	3b02      	subs	r3, #2
 8005ad6:	2b1e      	cmp	r3, #30
 8005ad8:	d87e      	bhi.n	8005bd8 <UART_SetConfig+0x6c4>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <UART_SetConfig+0x5cc>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b63 	.word	0x08005b63
 8005ae4:	08005bd9 	.word	0x08005bd9
 8005ae8:	08005b6b 	.word	0x08005b6b
 8005aec:	08005bd9 	.word	0x08005bd9
 8005af0:	08005bd9 	.word	0x08005bd9
 8005af4:	08005bd9 	.word	0x08005bd9
 8005af8:	08005b7b 	.word	0x08005b7b
 8005afc:	08005bd9 	.word	0x08005bd9
 8005b00:	08005bd9 	.word	0x08005bd9
 8005b04:	08005bd9 	.word	0x08005bd9
 8005b08:	08005bd9 	.word	0x08005bd9
 8005b0c:	08005bd9 	.word	0x08005bd9
 8005b10:	08005bd9 	.word	0x08005bd9
 8005b14:	08005bd9 	.word	0x08005bd9
 8005b18:	08005b8b 	.word	0x08005b8b
 8005b1c:	08005bd9 	.word	0x08005bd9
 8005b20:	08005bd9 	.word	0x08005bd9
 8005b24:	08005bd9 	.word	0x08005bd9
 8005b28:	08005bd9 	.word	0x08005bd9
 8005b2c:	08005bd9 	.word	0x08005bd9
 8005b30:	08005bd9 	.word	0x08005bd9
 8005b34:	08005bd9 	.word	0x08005bd9
 8005b38:	08005bd9 	.word	0x08005bd9
 8005b3c:	08005bd9 	.word	0x08005bd9
 8005b40:	08005bd9 	.word	0x08005bd9
 8005b44:	08005bd9 	.word	0x08005bd9
 8005b48:	08005bd9 	.word	0x08005bd9
 8005b4c:	08005bd9 	.word	0x08005bd9
 8005b50:	08005bd9 	.word	0x08005bd9
 8005b54:	08005bd9 	.word	0x08005bd9
 8005b58:	08005bcb 	.word	0x08005bcb
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d037      	beq.n	8005bd0 <UART_SetConfig+0x6bc>
 8005b60:	e03a      	b.n	8005bd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b62:	f7fe f9c1 	bl	8003ee8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b68:	e03c      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe f9d0 	bl	8003f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b78:	e034      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b7a:	f107 0318 	add.w	r3, r7, #24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fb1c 	bl	80041bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b88:	e02c      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b8a:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	4a07      	ldr	r2, [pc, #28]	@ (8005bc0 <UART_SetConfig+0x6ac>)
 8005ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ba8:	e01c      	b.n	8005be4 <UART_SetConfig+0x6d0>
 8005baa:	bf00      	nop
 8005bac:	40011400 	.word	0x40011400
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	40007800 	.word	0x40007800
 8005bb8:	40007c00 	.word	0x40007c00
 8005bbc:	58000c00 	.word	0x58000c00
 8005bc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b9d      	ldr	r3, [pc, #628]	@ (8005e3c <UART_SetConfig+0x928>)
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc8:	e00c      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bca:	4b9d      	ldr	r3, [pc, #628]	@ (8005e40 <UART_SetConfig+0x92c>)
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bce:	e009      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd6:	e005      	b.n	8005be4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 81de 	beq.w	8005fa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	4a94      	ldr	r2, [pc, #592]	@ (8005e44 <UART_SetConfig+0x930>)
 8005bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d305      	bcc.n	8005c1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d903      	bls.n	8005c24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c22:	e1c1      	b.n	8005fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c26:	2200      	movs	r2, #0
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	60fa      	str	r2, [r7, #12]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	4a84      	ldr	r2, [pc, #528]	@ (8005e44 <UART_SetConfig+0x930>)
 8005c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2200      	movs	r2, #0
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c46:	f7fa fb47 	bl	80002d8 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	020b      	lsls	r3, r1, #8
 8005c5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c60:	0202      	lsls	r2, r0, #8
 8005c62:	6979      	ldr	r1, [r7, #20]
 8005c64:	6849      	ldr	r1, [r1, #4]
 8005c66:	0849      	lsrs	r1, r1, #1
 8005c68:	2000      	movs	r0, #0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	eb12 0804 	adds.w	r8, r2, r4
 8005c72:	eb43 0905 	adc.w	r9, r3, r5
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	469a      	mov	sl, r3
 8005c7e:	4693      	mov	fp, r2
 8005c80:	4652      	mov	r2, sl
 8005c82:	465b      	mov	r3, fp
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa fb26 	bl	80002d8 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4613      	mov	r3, r2
 8005c92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c9a:	d308      	bcc.n	8005cae <UART_SetConfig+0x79a>
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca2:	d204      	bcs.n	8005cae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	e17c      	b.n	8005fa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005cb4:	e178      	b.n	8005fa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cbe:	f040 80c5 	bne.w	8005e4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005cc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	dc48      	bgt.n	8005d5c <UART_SetConfig+0x848>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db7b      	blt.n	8005dc6 <UART_SetConfig+0x8b2>
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d879      	bhi.n	8005dc6 <UART_SetConfig+0x8b2>
 8005cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <UART_SetConfig+0x7c4>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d63 	.word	0x08005d63
 8005cdc:	08005d6b 	.word	0x08005d6b
 8005ce0:	08005dc7 	.word	0x08005dc7
 8005ce4:	08005dc7 	.word	0x08005dc7
 8005ce8:	08005d73 	.word	0x08005d73
 8005cec:	08005dc7 	.word	0x08005dc7
 8005cf0:	08005dc7 	.word	0x08005dc7
 8005cf4:	08005dc7 	.word	0x08005dc7
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005dc7 	.word	0x08005dc7
 8005d00:	08005dc7 	.word	0x08005dc7
 8005d04:	08005dc7 	.word	0x08005dc7
 8005d08:	08005dc7 	.word	0x08005dc7
 8005d0c:	08005dc7 	.word	0x08005dc7
 8005d10:	08005dc7 	.word	0x08005dc7
 8005d14:	08005dc7 	.word	0x08005dc7
 8005d18:	08005d93 	.word	0x08005d93
 8005d1c:	08005dc7 	.word	0x08005dc7
 8005d20:	08005dc7 	.word	0x08005dc7
 8005d24:	08005dc7 	.word	0x08005dc7
 8005d28:	08005dc7 	.word	0x08005dc7
 8005d2c:	08005dc7 	.word	0x08005dc7
 8005d30:	08005dc7 	.word	0x08005dc7
 8005d34:	08005dc7 	.word	0x08005dc7
 8005d38:	08005dc7 	.word	0x08005dc7
 8005d3c:	08005dc7 	.word	0x08005dc7
 8005d40:	08005dc7 	.word	0x08005dc7
 8005d44:	08005dc7 	.word	0x08005dc7
 8005d48:	08005dc7 	.word	0x08005dc7
 8005d4c:	08005dc7 	.word	0x08005dc7
 8005d50:	08005dc7 	.word	0x08005dc7
 8005d54:	08005dc7 	.word	0x08005dc7
 8005d58:	08005db9 	.word	0x08005db9
 8005d5c:	2b40      	cmp	r3, #64	@ 0x40
 8005d5e:	d02e      	beq.n	8005dbe <UART_SetConfig+0x8aa>
 8005d60:	e031      	b.n	8005dc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7fc fe4b 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8005d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d68:	e033      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6a:	f7fc fe5d 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8005d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d70:	e02f      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe f8cc 	bl	8003f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d80:	e027      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d82:	f107 0318 	add.w	r3, r7, #24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fa18 	bl	80041bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d90:	e01f      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d92:	4b2d      	ldr	r3, [pc, #180]	@ (8005e48 <UART_SetConfig+0x934>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8005e48 <UART_SetConfig+0x934>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	4a24      	ldr	r2, [pc, #144]	@ (8005e3c <UART_SetConfig+0x928>)
 8005daa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005db0:	e00f      	b.n	8005dd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005db2:	4b22      	ldr	r3, [pc, #136]	@ (8005e3c <UART_SetConfig+0x928>)
 8005db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db6:	e00c      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005db8:	4b21      	ldr	r3, [pc, #132]	@ (8005e40 <UART_SetConfig+0x92c>)
 8005dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dbc:	e009      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc4:	e005      	b.n	8005dd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80e7 	beq.w	8005fa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	4a19      	ldr	r2, [pc, #100]	@ (8005e44 <UART_SetConfig+0x930>)
 8005de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005de4:	461a      	mov	r2, r3
 8005de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dec:	005a      	lsls	r2, r3, #1
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	441a      	add	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d916      	bls.n	8005e34 <UART_SetConfig+0x920>
 8005e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e0c:	d212      	bcs.n	8005e34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f023 030f 	bic.w	r3, r3, #15
 8005e16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e26:	4313      	orrs	r3, r2
 8005e28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	e0b9      	b.n	8005fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e3a:	e0b5      	b.n	8005fa8 <UART_SetConfig+0xa94>
 8005e3c:	03d09000 	.word	0x03d09000
 8005e40:	003d0900 	.word	0x003d0900
 8005e44:	080066bc 	.word	0x080066bc
 8005e48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	dc49      	bgt.n	8005ee8 <UART_SetConfig+0x9d4>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	db7c      	blt.n	8005f52 <UART_SetConfig+0xa3e>
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d87a      	bhi.n	8005f52 <UART_SetConfig+0xa3e>
 8005e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <UART_SetConfig+0x950>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005eef 	.word	0x08005eef
 8005e68:	08005ef7 	.word	0x08005ef7
 8005e6c:	08005f53 	.word	0x08005f53
 8005e70:	08005f53 	.word	0x08005f53
 8005e74:	08005eff 	.word	0x08005eff
 8005e78:	08005f53 	.word	0x08005f53
 8005e7c:	08005f53 	.word	0x08005f53
 8005e80:	08005f53 	.word	0x08005f53
 8005e84:	08005f0f 	.word	0x08005f0f
 8005e88:	08005f53 	.word	0x08005f53
 8005e8c:	08005f53 	.word	0x08005f53
 8005e90:	08005f53 	.word	0x08005f53
 8005e94:	08005f53 	.word	0x08005f53
 8005e98:	08005f53 	.word	0x08005f53
 8005e9c:	08005f53 	.word	0x08005f53
 8005ea0:	08005f53 	.word	0x08005f53
 8005ea4:	08005f1f 	.word	0x08005f1f
 8005ea8:	08005f53 	.word	0x08005f53
 8005eac:	08005f53 	.word	0x08005f53
 8005eb0:	08005f53 	.word	0x08005f53
 8005eb4:	08005f53 	.word	0x08005f53
 8005eb8:	08005f53 	.word	0x08005f53
 8005ebc:	08005f53 	.word	0x08005f53
 8005ec0:	08005f53 	.word	0x08005f53
 8005ec4:	08005f53 	.word	0x08005f53
 8005ec8:	08005f53 	.word	0x08005f53
 8005ecc:	08005f53 	.word	0x08005f53
 8005ed0:	08005f53 	.word	0x08005f53
 8005ed4:	08005f53 	.word	0x08005f53
 8005ed8:	08005f53 	.word	0x08005f53
 8005edc:	08005f53 	.word	0x08005f53
 8005ee0:	08005f53 	.word	0x08005f53
 8005ee4:	08005f45 	.word	0x08005f45
 8005ee8:	2b40      	cmp	r3, #64	@ 0x40
 8005eea:	d02e      	beq.n	8005f4a <UART_SetConfig+0xa36>
 8005eec:	e031      	b.n	8005f52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eee:	f7fc fd85 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8005ef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ef4:	e033      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef6:	f7fc fd97 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8005efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005efc:	e02f      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe f806 	bl	8003f14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f0c:	e027      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0e:	f107 0318 	add.w	r3, r7, #24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe f952 	bl	80041bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f1c:	e01f      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd4 <UART_SetConfig+0xac0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd4 <UART_SetConfig+0xac0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	08db      	lsrs	r3, r3, #3
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	4a28      	ldr	r2, [pc, #160]	@ (8005fd8 <UART_SetConfig+0xac4>)
 8005f36:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f3c:	e00f      	b.n	8005f5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005f3e:	4b26      	ldr	r3, [pc, #152]	@ (8005fd8 <UART_SetConfig+0xac4>)
 8005f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f42:	e00c      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f44:	4b25      	ldr	r3, [pc, #148]	@ (8005fdc <UART_SetConfig+0xac8>)
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f48:	e009      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f50:	e005      	b.n	8005f5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d021      	beq.n	8005fa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe0 <UART_SetConfig+0xacc>)
 8005f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	441a      	add	r2, r3
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d909      	bls.n	8005fa2 <UART_SetConfig+0xa8e>
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d205      	bcs.n	8005fa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	e002      	b.n	8005fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005fc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3748      	adds	r7, #72	@ 0x48
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd2:	bf00      	nop
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	03d09000 	.word	0x03d09000
 8005fdc:	003d0900 	.word	0x003d0900
 8005fe0:	080066bc 	.word	0x080066bc

08005fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01a      	beq.n	80060fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e2:	d10a      	bne.n	80060fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b098      	sub	sp, #96	@ 0x60
 800612c:	af02      	add	r7, sp, #8
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006138:	f7fa fec4 	bl	8000ec4 <HAL_GetTick>
 800613c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b08      	cmp	r3, #8
 800614a:	d12f      	bne.n	80061ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800614c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006154:	2200      	movs	r2, #0
 8006156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f88e 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d022      	beq.n	80061ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800617a:	653b      	str	r3, [r7, #80]	@ 0x50
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006184:	647b      	str	r3, [r7, #68]	@ 0x44
 8006186:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800618a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e063      	b.n	8006274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d149      	bne.n	800624e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c2:	2200      	movs	r2, #0
 80061c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f857 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d03c      	beq.n	800624e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	623b      	str	r3, [r7, #32]
   return(result);
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e6      	bne.n	80061d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	60fb      	str	r3, [r7, #12]
   return(result);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006226:	61fa      	str	r2, [r7, #28]
 8006228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	69b9      	ldr	r1, [r7, #24]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	617b      	str	r3, [r7, #20]
   return(result);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e5      	bne.n	8006206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e012      	b.n	8006274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3758      	adds	r7, #88	@ 0x58
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628c:	e04f      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d04b      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fa fe15 	bl	8000ec4 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <UART_WaitOnFlagUntilTimeout+0x30>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e04e      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d037      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b80      	cmp	r3, #128	@ 0x80
 80062c2:	d034      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b40      	cmp	r3, #64	@ 0x40
 80062c8:	d031      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d110      	bne.n	80062fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2208      	movs	r2, #8
 80062de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f839 	bl	8006358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2208      	movs	r2, #8
 80062ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e029      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006308:	d111      	bne.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f81f 	bl	8006358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e00f      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	429a      	cmp	r2, r3
 800634a:	d0a0      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b095      	sub	sp, #84	@ 0x54
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800637e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006420 <UART_EndRxTransfer+0xc8>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e5      	bne.n	8006392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d118      	bne.n	8006400 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	60bb      	str	r3, [r7, #8]
   return(result);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f023 0310 	bic.w	r3, r3, #16
 80063e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	613b      	str	r3, [r7, #16]
   return(result);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e6      	bne.n	80063ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006414:	bf00      	nop
 8006416:	3754      	adds	r7, #84	@ 0x54
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	effffffe 	.word	0xeffffffe

08006424 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UARTEx_DisableFifoMode+0x16>
 8006436:	2302      	movs	r3, #2
 8006438:	e027      	b.n	800648a <HAL_UARTEx_DisableFifoMode+0x66>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	@ 0x24
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006468:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e02d      	b.n	800650a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2224      	movs	r2, #36	@ 0x24
 80064ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f850 	bl	8006590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006526:	2302      	movs	r3, #2
 8006528:	e02d      	b.n	8006586 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2224      	movs	r2, #36	@ 0x24
 8006536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0201 	bic.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f812 	bl	8006590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800659c:	2b00      	cmp	r3, #0
 800659e:	d108      	bne.n	80065b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065b0:	e031      	b.n	8006616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065b2:	2310      	movs	r3, #16
 80065b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065b6:	2310      	movs	r3, #16
 80065b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	0e5b      	lsrs	r3, r3, #25
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	0f5b      	lsrs	r3, r3, #29
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	7b3a      	ldrb	r2, [r7, #12]
 80065de:	4911      	ldr	r1, [pc, #68]	@ (8006624 <UARTEx_SetNbDataToProcess+0x94>)
 80065e0:	5c8a      	ldrb	r2, [r1, r2]
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065e6:	7b3a      	ldrb	r2, [r7, #12]
 80065e8:	490f      	ldr	r1, [pc, #60]	@ (8006628 <UARTEx_SetNbDataToProcess+0x98>)
 80065ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	7b7a      	ldrb	r2, [r7, #13]
 80065fc:	4909      	ldr	r1, [pc, #36]	@ (8006624 <UARTEx_SetNbDataToProcess+0x94>)
 80065fe:	5c8a      	ldrb	r2, [r1, r2]
 8006600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006604:	7b7a      	ldrb	r2, [r7, #13]
 8006606:	4908      	ldr	r1, [pc, #32]	@ (8006628 <UARTEx_SetNbDataToProcess+0x98>)
 8006608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800660a:	fb93 f3f2 	sdiv	r3, r3, r2
 800660e:	b29a      	uxth	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	080066d4 	.word	0x080066d4
 8006628:	080066dc 	.word	0x080066dc

0800662c <memset>:
 800662c:	4402      	add	r2, r0
 800662e:	4603      	mov	r3, r0
 8006630:	4293      	cmp	r3, r2
 8006632:	d100      	bne.n	8006636 <memset+0xa>
 8006634:	4770      	bx	lr
 8006636:	f803 1b01 	strb.w	r1, [r3], #1
 800663a:	e7f9      	b.n	8006630 <memset+0x4>

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	@ (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	@ (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	@ (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	@ (8006680 <__libc_init_array+0x44>)
 8006650:	f000 f818 	bl	8006684 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	080066ec 	.word	0x080066ec
 8006678:	080066ec 	.word	0x080066ec
 800667c:	080066ec 	.word	0x080066ec
 8006680:	080066f0 	.word	0x080066f0

08006684 <_init>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

08006690 <_fini>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr
