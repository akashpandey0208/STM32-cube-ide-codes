
SPI_002_Array_Receive_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b54  08004b54  00006074  2**0
                  CONTENTS
  4 .ARM          00000008  08004b54  08004b54  00005b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b5c  08004b5c  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b5c  08004b5c  00005b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b60  08004b60  00005b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004b64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000074  08004bd8  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004bd8  000062f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f10b  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002291  00000000  00000000  000151af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00017440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cd  00000000  00000000  00018100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efb6  00000000  00000000  00018acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcfc  00000000  00000000  00037a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1347  00000000  00000000  0004777f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108ac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc0  00000000  00000000  00108b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0010c6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004ab4 	.word	0x08004ab4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08004ab4 	.word	0x08004ab4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_SPI_TxRxCpltCallback>:
uint8_t spi_tx_buffer[] = {11, 12, 13, 14, 15, 16, 17, 18, 19, 20};  // Array to send from 11 to 20
uint8_t spi_rx_buffer[20]= {0};                 // Buffer to receive SPI data
volatile uint8_t spi_done = 0;             // Flag for SPI completion

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    spi_done = 1; // SPI communication done
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <HAL_SPI_TxRxCpltCallback+0x1c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	2000019c 	.word	0x2000019c

080005d0 <__io_putchar>:

/* Function to redirect printf to UART */
int __io_putchar(int ch)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); // Send one character
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	2201      	movs	r2, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <__io_putchar+0x20>)
 80005e2:	f002 fc2d 	bl	8002e40 <HAL_UART_Transmit>
    return ch;
 80005e6:	687b      	ldr	r3, [r7, #4]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000f4 	.word	0x200000f4

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fb04 	bl	8000c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f83f 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f903 	bl	800080c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000606:	f000 f87b 	bl	8000700 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f8b3 	bl	8000774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  /* SPI Communication */
	          spi_done = 0;
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <main+0x70>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	          HAL_SPI_TransmitReceive_IT(&hspi1, spi_tx_buffer, spi_rx_buffer, sizeof(spi_tx_buffer));
 8000614:	230a      	movs	r3, #10
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <main+0x74>)
 8000618:	4914      	ldr	r1, [pc, #80]	@ (800066c <main+0x78>)
 800061a:	4815      	ldr	r0, [pc, #84]	@ (8000670 <main+0x7c>)
 800061c:	f001 ff48 	bl	80024b0 <HAL_SPI_TransmitReceive_IT>
	          while (!spi_done); // Wait for SPI to complete
 8000620:	bf00      	nop
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <main+0x70>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0fa      	beq.n	8000622 <main+0x2e>

	          /* Print SPI received data using printf */
	          printf("SPI RX: ");
 800062c:	4811      	ldr	r0, [pc, #68]	@ (8000674 <main+0x80>)
 800062e:	f003 fb75 	bl	8003d1c <iprintf>
	          for (int i = 0; i < sizeof(spi_rx_buffer); i++)
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e00a      	b.n	800064e <main+0x5a>
	          {
	              printf("%d ", spi_rx_buffer[i]);
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <main+0x74>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	480d      	ldr	r0, [pc, #52]	@ (8000678 <main+0x84>)
 8000644:	f003 fb6a 	bl	8003d1c <iprintf>
	          for (int i = 0; i < sizeof(spi_rx_buffer); i++)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3301      	adds	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b13      	cmp	r3, #19
 8000652:	d9f1      	bls.n	8000638 <main+0x44>
	          }
	          printf("\r\n");
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <main+0x88>)
 8000656:	f003 fbc9 	bl	8003dec <puts>
//	          {
//	              printf("%d ", spi_tx_buffer[i]);
//	          }
//	          printf("\r\n");

	          HAL_Delay(1000); // Delay for stability
 800065a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800065e:	f000 fb43 	bl	8000ce8 <HAL_Delay>
	          spi_done = 0;
 8000662:	e7d4      	b.n	800060e <main+0x1a>
 8000664:	2000019c 	.word	0x2000019c
 8000668:	20000188 	.word	0x20000188
 800066c:	20000000 	.word	0x20000000
 8000670:	20000090 	.word	0x20000090
 8000674:	08004acc 	.word	0x08004acc
 8000678:	08004ad8 	.word	0x08004ad8
 800067c:	08004adc 	.word	0x08004adc

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	@ 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2238      	movs	r2, #56	@ 0x38
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fc8c 	bl	8003fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a6:	f000 fe39 	bl	800131c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	@ 0x40
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fedf 	bl	8001484 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006cc:	f000 f8b6 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f9dd 	bl	8001aa8 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006f4:	f000 f8a2 	bl	800083c <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	@ 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000706:	4a1a      	ldr	r2, [pc, #104]	@ (8000770 <MX_SPI1_Init+0x70>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_SPI1_Init+0x6c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000718:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800071c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_SPI1_Init+0x6c>)
 800072c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_SPI1_Init+0x6c>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000746:	2207      	movs	r2, #7
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_SPI1_Init+0x6c>)
 800074c:	2200      	movs	r2, #0
 800074e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000752:	2200      	movs	r2, #0
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_SPI1_Init+0x6c>)
 8000758:	f001 fdfe 	bl	8002358 <HAL_SPI_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000762:	f000 f86b 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000090 	.word	0x20000090
 8000770:	40013000 	.word	0x40013000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 800077a:	4a23      	ldr	r2, [pc, #140]	@ (8000808 <MX_USART2_UART_Init+0x94>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007bc:	4811      	ldr	r0, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007be:	f002 faef 	bl	8002da0 <HAL_UART_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c8:	f000 f838 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	480d      	ldr	r0, [pc, #52]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007d0:	f003 f918 	bl	8003a04 <HAL_UARTEx_SetTxFifoThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 f82f 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4808      	ldr	r0, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007e2:	f003 f94d 	bl	8003a80 <HAL_UARTEx_SetRxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 f826 	bl	800083c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_USART2_UART_Init+0x90>)
 80007f2:	f003 f8ce 	bl	8003992 <HAL_UARTEx_DisableFifoMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 f81e 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000f4 	.word	0x200000f4
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_GPIO_Init+0x2c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <MX_GPIO_Init+0x2c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x2c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <Error_Handler+0x8>

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000852:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	@ 0x60
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	@ 0x58
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800087e:	f000 fdf1 	bl	8001464 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	@ 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <HAL_SPI_MspInit+0x8c>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d130      	bne.n	8000914 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <HAL_SPI_MspInit+0x90>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <HAL_SPI_MspInit+0x90>)
 80008b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <HAL_SPI_MspInit+0x90>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_SPI_MspInit+0x90>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <HAL_SPI_MspInit+0x90>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_SPI_MspInit+0x90>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e2:	23e0      	movs	r3, #224	@ 0xe0
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f2:	2305      	movs	r3, #5
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f000 fb8a 	bl	8001018 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2023      	movs	r0, #35	@ 0x23
 800090a:	f000 faea 	bl	8000ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800090e:	2023      	movs	r0, #35	@ 0x23
 8000910:	f000 fb01 	bl	8000f16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	@ 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40013000 	.word	0x40013000
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09e      	sub	sp, #120	@ 0x78
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2250      	movs	r2, #80	@ 0x50
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fb31 	bl	8003fac <memset>
  if(huart->Instance==USART2)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <HAL_UART_MspInit+0xa8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d136      	bne.n	80009c2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000954:	2302      	movs	r3, #2
 8000956:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fabd 	bl	8001ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800096c:	f7ff ff66 	bl	800083c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000974:	4a16      	ldr	r2, [pc, #88]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097a:	6593      	str	r3, [r2, #88]	@ 0x58
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 800097e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_UART_MspInit+0xac>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a0:	230c      	movs	r3, #12
 80009a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b0:	2307      	movs	r3, #7
 80009b2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009be:	f000 fb2b 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3778      	adds	r7, #120	@ 0x78
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40021000 	.word	0x40021000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 f93f 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <SPI1_IRQHandler+0x10>)
 8000a3a:	f001 fde3 	bl	8002604 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000090 	.word	0x20000090

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd97 	bl	80005d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f003 fa78 	bl	8004048 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2001c000 	.word	0x2001c000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	200001a0 	.word	0x200001a0
 8000b8c:	200002f8 	.word	0x200002f8

08000b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	@ (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	@ (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb8:	f7ff ffea 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f003 fa37 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be6:	f7ff fd05 	bl	80005f4 <main>

08000bea <LoopForever>:

LoopForever:
    b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bf8:	08004b64 	.word	0x08004b64
  ldr r2, =_sbss
 8000bfc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c00:	200002f4 	.word	0x200002f4

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>

08000c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f95b 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f80e 	bl	8000c38 <HAL_InitTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	e001      	b.n	8000c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c28:	f7ff fe0e 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_InitTick+0x68>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d022      	beq.n	8000c92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_InitTick+0x6c>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <HAL_InitTick+0x68>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f966 	bl	8000f32 <HAL_SYSTICK_Config>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10f      	bne.n	8000c8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	d809      	bhi.n	8000c86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c72:	2200      	movs	r2, #0
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7a:	f000 f932 	bl	8000ee2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_InitTick+0x70>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e007      	b.n	8000c96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e004      	b.n	8000c96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e001      	b.n	8000c96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000014 	.word	0x20000014
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	20000010 	.word	0x20000010

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a03      	ldr	r2, [pc, #12]	@ (8000cc8 <HAL_IncTick+0x1c>)
 8000cbc:	6013      	str	r3, [r2, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	200001a4 	.word	0x200001a4
 8000ccc:	20000014 	.word	0x20000014

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200001a4 	.word	0x200001a4

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d004      	beq.n	8000d0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_Delay+0x40>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0c:	bf00      	nop
 8000d0e:	f7ff ffdf 	bl	8000cd0 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d8f7      	bhi.n	8000d0e <HAL_Delay+0x26>
  {
  }
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000014 	.word	0x20000014

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	@ (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	@ (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	@ (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	@ 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff29 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff40 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff90 	bl	8000e20 <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5f 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff33 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffa4 	bl	8000e88 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d00d      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2204      	movs	r2, #4
 8000f66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e047      	b.n	800100e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 020e 	bic.w	r2, r2, #14
 8000f8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0201 	bic.w	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f003 021f 	and.w	r2, r3, #31
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	2101      	movs	r1, #1
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000fca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00c      	beq.n	8000fee <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
    }
  }
  return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001026:	e15a      	b.n	80012de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 814c 	beq.w	80012d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a6 	beq.w	80012d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b5b      	ldr	r3, [pc, #364]	@ (80012fc <HAL_GPIO_Init+0x2e4>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001190:	4a5a      	ldr	r2, [pc, #360]	@ (80012fc <HAL_GPIO_Init+0x2e4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	@ 0x60
 8001198:	4b58      	ldr	r3, [pc, #352]	@ (80012fc <HAL_GPIO_Init+0x2e4>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a4:	4a56      	ldr	r2, [pc, #344]	@ (8001300 <HAL_GPIO_Init+0x2e8>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ce:	d01f      	beq.n	8001210 <HAL_GPIO_Init+0x1f8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001304 <HAL_GPIO_Init+0x2ec>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d019      	beq.n	800120c <HAL_GPIO_Init+0x1f4>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4b      	ldr	r2, [pc, #300]	@ (8001308 <HAL_GPIO_Init+0x2f0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d013      	beq.n	8001208 <HAL_GPIO_Init+0x1f0>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4a      	ldr	r2, [pc, #296]	@ (800130c <HAL_GPIO_Init+0x2f4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d00d      	beq.n	8001204 <HAL_GPIO_Init+0x1ec>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a49      	ldr	r2, [pc, #292]	@ (8001310 <HAL_GPIO_Init+0x2f8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_Init+0x1e8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a48      	ldr	r2, [pc, #288]	@ (8001314 <HAL_GPIO_Init+0x2fc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d101      	bne.n	80011fc <HAL_GPIO_Init+0x1e4>
 80011f8:	2305      	movs	r3, #5
 80011fa:	e00a      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 80011fc:	2306      	movs	r3, #6
 80011fe:	e008      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001200:	2304      	movs	r3, #4
 8001202:	e006      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001204:	2303      	movs	r3, #3
 8001206:	e004      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001208:	2302      	movs	r3, #2
 800120a:	e002      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 800120c:	2301      	movs	r3, #1
 800120e:	e000      	b.n	8001212 <HAL_GPIO_Init+0x1fa>
 8001210:	2300      	movs	r3, #0
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	f002 0203 	and.w	r2, r2, #3
 8001218:	0092      	lsls	r2, r2, #2
 800121a:	4093      	lsls	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001222:	4937      	ldr	r1, [pc, #220]	@ (8001300 <HAL_GPIO_Init+0x2e8>)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001230:	4b39      	ldr	r3, [pc, #228]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001254:	4a30      	ldr	r2, [pc, #192]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800125a:	4b2f      	ldr	r3, [pc, #188]	@ (8001318 <HAL_GPIO_Init+0x300>)
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800127e:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_GPIO_Init+0x300>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d2:	4a11      	ldr	r2, [pc, #68]	@ (8001318 <HAL_GPIO_Init+0x300>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f47f ae9d 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	48000400 	.word	0x48000400
 8001308:	48000800 	.word	0x48000800
 800130c:	48000c00 	.word	0x48000c00
 8001310:	48001000 	.word	0x48001000
 8001314:	48001400 	.word	0x48001400
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d141      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800132a:	4b4b      	ldr	r3, [pc, #300]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001336:	d131      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001338:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800133e:	4a46      	ldr	r2, [pc, #280]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001348:	4b43      	ldr	r3, [pc, #268]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001350:	4a41      	ldr	r2, [pc, #260]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001356:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001358:	4b40      	ldr	r3, [pc, #256]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2232      	movs	r2, #50	@ 0x32
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	4a3f      	ldr	r2, [pc, #252]	@ (8001460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	0c9b      	lsrs	r3, r3, #18
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800136e:	e002      	b.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b01      	subs	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001376:	4b38      	ldr	r3, [pc, #224]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001382:	d102      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f2      	bne.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800138a:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001396:	d158      	bne.n	800144a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e057      	b.n	800144c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800139c:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013ac:	e04d      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013b4:	d141      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013b6:	4b28      	ldr	r3, [pc, #160]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c2:	d131      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ca:	4a23      	ldr	r2, [pc, #140]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d4:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2232      	movs	r2, #50	@ 0x32
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013fa:	e002      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3b01      	subs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140e:	d102      	bne.n	8001416 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f2      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001422:	d112      	bne.n	800144a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e011      	b.n	800144c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001438:	e007      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001444:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001448:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40007000 	.word	0x40007000
 800145c:	2000000c 	.word	0x2000000c
 8001460:	431bde83 	.word	0x431bde83

08001464 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001472:	6093      	str	r3, [r2, #8]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40007000 	.word	0x40007000

08001484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e2fe      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d075      	beq.n	800158e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a2:	4b97      	ldr	r3, [pc, #604]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ac:	4b94      	ldr	r3, [pc, #592]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d102      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3e>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d002      	beq.n	80014c8 <HAL_RCC_OscConfig+0x44>
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d10b      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4b8d      	ldr	r3, [pc, #564]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d05b      	beq.n	800158c <HAL_RCC_OscConfig+0x108>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d157      	bne.n	800158c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e2d9      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x74>
 80014ea:	4b85      	ldr	r3, [pc, #532]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a84      	ldr	r2, [pc, #528]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x98>
 8001502:	4b7f      	ldr	r3, [pc, #508]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a7e      	ldr	r2, [pc, #504]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b7c      	ldr	r3, [pc, #496]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7b      	ldr	r2, [pc, #492]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 800151c:	4b78      	ldr	r3, [pc, #480]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a77      	ldr	r2, [pc, #476]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b75      	ldr	r3, [pc, #468]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a74      	ldr	r2, [pc, #464]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbc8 	bl	8000cd0 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fbc4 	bl	8000cd0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e29e      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001556:	4b6a      	ldr	r3, [pc, #424]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xc0>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbb4 	bl	8000cd0 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fbb0 	bl	8000cd0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e28a      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157e:	4b60      	ldr	r3, [pc, #384]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0xe8>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d075      	beq.n	8001686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159a:	4b59      	ldr	r3, [pc, #356]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a4:	4b56      	ldr	r3, [pc, #344]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_OscConfig+0x136>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d002      	beq.n	80015c0 <HAL_RCC_OscConfig+0x13c>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d11f      	bne.n	8001600 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_OscConfig+0x154>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e25d      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	4946      	ldr	r1, [pc, #280]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015ec:	4b45      	ldr	r3, [pc, #276]	@ (8001704 <HAL_RCC_OscConfig+0x280>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fb21 	bl	8000c38 <HAL_InitTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d043      	beq.n	8001684 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e249      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d023      	beq.n	8001650 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001608:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a3c      	ldr	r2, [pc, #240]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fb5c 	bl	8000cd0 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fb58 	bl	8000cd0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e232      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162e:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	061b      	lsls	r3, r3, #24
 8001648:	492d      	ldr	r1, [pc, #180]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
 800164e:	e01a      	b.n	8001686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a2a      	ldr	r2, [pc, #168]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001656:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb38 	bl	8000cd0 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fb34 	bl	8000cd0 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e20e      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001676:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x1e0>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d041      	beq.n	8001716 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169a:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a0:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb11 	bl	8000cd0 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fb0d 	bl	8000cd0 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e1e7      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ef      	beq.n	80016b2 <HAL_RCC_OscConfig+0x22e>
 80016d2:	e020      	b.n	8001716 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016da:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff faf4 	bl	8000cd0 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ea:	e00d      	b.n	8001708 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff faf0 	bl	8000cd0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d906      	bls.n	8001708 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1ca      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	4b8c      	ldr	r3, [pc, #560]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ea      	bne.n	80016ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80a6 	beq.w	8001870 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001728:	4b84      	ldr	r3, [pc, #528]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x2b4>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x2b6>
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00d      	beq.n	800175a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b7f      	ldr	r3, [pc, #508]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	4a7e      	ldr	r2, [pc, #504]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001748:	6593      	str	r3, [r2, #88]	@ 0x58
 800174a:	4b7c      	ldr	r3, [pc, #496]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175a:	4b79      	ldr	r3, [pc, #484]	@ (8001940 <HAL_RCC_OscConfig+0x4bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001766:	4b76      	ldr	r3, [pc, #472]	@ (8001940 <HAL_RCC_OscConfig+0x4bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a75      	ldr	r2, [pc, #468]	@ (8001940 <HAL_RCC_OscConfig+0x4bc>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff faad 	bl	8000cd0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff faa9 	bl	8000cd0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e183      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178c:	4b6c      	ldr	r3, [pc, #432]	@ (8001940 <HAL_RCC_OscConfig+0x4bc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d108      	bne.n	80017b2 <HAL_RCC_OscConfig+0x32e>
 80017a0:	4b66      	ldr	r3, [pc, #408]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a6:	4a65      	ldr	r2, [pc, #404]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b0:	e024      	b.n	80017fc <HAL_RCC_OscConfig+0x378>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d110      	bne.n	80017dc <HAL_RCC_OscConfig+0x358>
 80017ba:	4b60      	ldr	r3, [pc, #384]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c0:	4a5e      	ldr	r2, [pc, #376]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ca:	4b5c      	ldr	r3, [pc, #368]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d0:	4a5a      	ldr	r2, [pc, #360]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017da:	e00f      	b.n	80017fc <HAL_RCC_OscConfig+0x378>
 80017dc:	4b57      	ldr	r3, [pc, #348]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e2:	4a56      	ldr	r2, [pc, #344]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f2:	4a52      	ldr	r2, [pc, #328]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d016      	beq.n	8001832 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fa64 	bl	8000cd0 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fa60 	bl	8000cd0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e138      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	4b46      	ldr	r3, [pc, #280]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ed      	beq.n	800180c <HAL_RCC_OscConfig+0x388>
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fa4d 	bl	8000cd0 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fa49 	bl	8000cd0 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e121      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001850:	4b3a      	ldr	r3, [pc, #232]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ed      	bne.n	800183a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800185e:	7ffb      	ldrb	r3, [r7, #31]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b35      	ldr	r3, [pc, #212]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	4a34      	ldr	r2, [pc, #208]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d03c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01c      	beq.n	80018be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800188a:	4a2c      	ldr	r2, [pc, #176]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fa1c 	bl	8000cd0 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189c:	f7ff fa18 	bl	8000cd0 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0f2      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ae:	4b23      	ldr	r3, [pc, #140]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0ef      	beq.n	800189c <HAL_RCC_OscConfig+0x418>
 80018bc:	e01b      	b.n	80018f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018be:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80018c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018c4:	4a1d      	ldr	r2, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff f9ff 	bl	8000cd0 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d6:	f7ff f9fb 	bl	8000cd0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0d5      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 80018ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ef      	bne.n	80018d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80c9 	beq.w	8001a92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b0c      	cmp	r3, #12
 800190a:	f000 8083 	beq.w	8001a14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d15e      	bne.n	80019d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_RCC_OscConfig+0x4b8>)
 800191c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f9d5 	bl	8000cd0 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001928:	e00c      	b.n	8001944 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f9d1 	bl	8000cd0 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d905      	bls.n	8001944 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0ab      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
 800193c:	40021000 	.word	0x40021000
 8001940:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	4b55      	ldr	r3, [pc, #340]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ec      	bne.n	800192a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001950:	4b52      	ldr	r3, [pc, #328]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4b52      	ldr	r3, [pc, #328]	@ (8001aa0 <HAL_RCC_OscConfig+0x61c>)
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6a11      	ldr	r1, [r2, #32]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001960:	3a01      	subs	r2, #1
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800196a:	0212      	lsls	r2, r2, #8
 800196c:	4311      	orrs	r1, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001972:	0852      	lsrs	r2, r2, #1
 8001974:	3a01      	subs	r2, #1
 8001976:	0552      	lsls	r2, r2, #21
 8001978:	4311      	orrs	r1, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800197e:	0852      	lsrs	r2, r2, #1
 8001980:	3a01      	subs	r2, #1
 8001982:	0652      	lsls	r2, r2, #25
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800198a:	06d2      	lsls	r2, r2, #27
 800198c:	430a      	orrs	r2, r1
 800198e:	4943      	ldr	r1, [pc, #268]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001994:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a40      	ldr	r2, [pc, #256]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 800199a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a0:	4b3e      	ldr	r3, [pc, #248]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a3d      	ldr	r2, [pc, #244]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f990 	bl	8000cd0 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f98c 	bl	8000cd0 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e066      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x530>
 80019d2:	e05e      	b.n	8001a92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a30      	ldr	r2, [pc, #192]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 80019da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff f976 	bl	8000cd0 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f972 	bl	8000cd0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e04c      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fa:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a06:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	4924      	ldr	r1, [pc, #144]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 8001a0c:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60cb      	str	r3, [r1, #12]
 8001a12:	e03e      	b.n	8001a92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e039      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <HAL_RCC_OscConfig+0x618>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d12c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d123      	bne.n	8001a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11b      	bne.n	8001a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d113      	bne.n	8001a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	019f800c 	.word	0x019f800c
 8001aa4:	feeefffc 	.word	0xfeeefffc

08001aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e11e      	b.n	8001cfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b91      	ldr	r3, [pc, #580]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b8e      	ldr	r3, [pc, #568]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 020f 	bic.w	r2, r3, #15
 8001ad6:	498c      	ldr	r1, [pc, #560]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b8a      	ldr	r3, [pc, #552]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e106      	b.n	8001cfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d073      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d129      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b04:	4b81      	ldr	r3, [pc, #516]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0f4      	b.n	8001cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b14:	f000 f99e 	bl	8001e54 <RCC_GetSysClockFreqFromPLLSource>
 8001b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d10 <HAL_RCC_ClockConfig+0x268>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d93f      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b22:	4b7a      	ldr	r3, [pc, #488]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d033      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d12f      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b42:	4b72      	ldr	r3, [pc, #456]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b4a:	4a70      	ldr	r2, [pc, #448]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e024      	b.n	8001ba2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b60:	4b6a      	ldr	r3, [pc, #424]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0c6      	b.n	8001cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b70:	4b66      	ldr	r3, [pc, #408]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0be      	b.n	8001cfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b80:	f000 f8ce 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4a61      	ldr	r2, [pc, #388]	@ (8001d10 <HAL_RCC_ClockConfig+0x268>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d909      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b96:	4a5d      	ldr	r2, [pc, #372]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4957      	ldr	r1, [pc, #348]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb4:	f7ff f88c 	bl	8000cd0 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff f888 	bl	8000cd0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e095      	b.n	8001cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d023      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfc:	4b43      	ldr	r3, [pc, #268]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a42      	ldr	r2, [pc, #264]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001c02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c14:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4936      	ldr	r1, [pc, #216]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b80      	cmp	r3, #128	@ 0x80
 8001c3c:	d105      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c3e:	4b33      	ldr	r3, [pc, #204]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4a32      	ldr	r2, [pc, #200]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001c44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d21d      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 020f 	bic.w	r2, r3, #15
 8001c60:	4929      	ldr	r1, [pc, #164]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c68:	f7ff f832 	bl	8000cd0 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7ff f82e 	bl	8000cd0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e03b      	b.n	8001cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_RCC_ClockConfig+0x260>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1ed      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4917      	ldr	r1, [pc, #92]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cbe:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	490f      	ldr	r1, [pc, #60]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cd2:	f000 f825 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <HAL_RCC_ClockConfig+0x264>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	490c      	ldr	r1, [pc, #48]	@ (8001d14 <HAL_RCC_ClockConfig+0x26c>)
 8001ce4:	5ccb      	ldrb	r3, [r1, r3]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <HAL_RCC_ClockConfig+0x270>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_RCC_ClockConfig+0x274>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ff9e 	bl	8000c38 <HAL_InitTick>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	04c4b400 	.word	0x04c4b400
 8001d14:	08004ae0 	.word	0x08004ae0
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000010 	.word	0x20000010

08001d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d26:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	e047      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d38:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d44:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	e03e      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d136      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d74:	4a1a      	ldr	r2, [pc, #104]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d7e:	68d2      	ldr	r2, [r2, #12]
 8001d80:	0a12      	lsrs	r2, r2, #8
 8001d82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
      break;
 8001d8c:	e00c      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d8e:	4a13      	ldr	r2, [pc, #76]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d98:	68d2      	ldr	r2, [r2, #12]
 8001d9a:	0a12      	lsrs	r2, r2, #8
 8001d9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
      break;
 8001da6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0e5b      	lsrs	r3, r3, #25
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	e001      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001dc8:	693b      	ldr	r3, [r7, #16]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	016e3600 	.word	0x016e3600

08001de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de8:	4b03      	ldr	r3, [pc, #12]	@ (8001df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e00:	f7ff fff0 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4904      	ldr	r1, [pc, #16]	@ (8001e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08004af0 	.word	0x08004af0

08001e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e2c:	f7ff ffda 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0adb      	lsrs	r3, r3, #11
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4904      	ldr	r1, [pc, #16]	@ (8001e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08004af0 	.word	0x08004af0

08001e54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d10c      	bne.n	8001e92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	4a14      	ldr	r2, [pc, #80]	@ (8001ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e82:	68d2      	ldr	r2, [r2, #12]
 8001e84:	0a12      	lsrs	r2, r2, #8
 8001e86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
    break;
 8001e90:	e00c      	b.n	8001eac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e92:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	0a12      	lsrs	r2, r2, #8
 8001ea0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    break;
 8001eaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eac:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0e5b      	lsrs	r3, r3, #25
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	016e3600 	.word	0x016e3600
 8001edc:	00f42400 	.word	0x00f42400

08001ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ee8:	2300      	movs	r3, #0
 8001eea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eec:	2300      	movs	r3, #0
 8001eee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8098 	beq.w	800202e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b43      	ldr	r3, [pc, #268]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b40      	ldr	r3, [pc, #256]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f12:	4a3f      	ldr	r2, [pc, #252]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a39      	ldr	r2, [pc, #228]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f36:	f7fe fecb 	bl	8000cd0 <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f3c:	e009      	b.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7fe fec7 	bl	8000cd0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d902      	bls.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	74fb      	strb	r3, [r7, #19]
        break;
 8001f50:	e005      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f52:	4b30      	ldr	r3, [pc, #192]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ef      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f5e:	7cfb      	ldrb	r3, [r7, #19]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d159      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f64:	4b2a      	ldr	r3, [pc, #168]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01e      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d019      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f80:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f8c:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fac:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbe:	f7fe fe87 	bl	8000cd0 <HAL_GetTick>
 8001fc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc4:	e00b      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fe83 	bl	8000cd0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d902      	bls.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	74fb      	strb	r3, [r7, #19]
            break;
 8001fdc:	e006      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ec      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	4903      	ldr	r1, [pc, #12]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002008:	e008      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800200a:	7cfb      	ldrb	r3, [r7, #19]
 800200c:	74bb      	strb	r3, [r7, #18]
 800200e:	e005      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201c:	7c7b      	ldrb	r3, [r7, #17]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4ba7      	ldr	r3, [pc, #668]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002026:	4aa6      	ldr	r2, [pc, #664]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203a:	4ba1      	ldr	r3, [pc, #644]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002040:	f023 0203 	bic.w	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	499d      	ldr	r1, [pc, #628]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800205c:	4b98      	ldr	r3, [pc, #608]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 020c 	bic.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4995      	ldr	r1, [pc, #596]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800207e:	4b90      	ldr	r3, [pc, #576]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002084:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	498c      	ldr	r1, [pc, #560]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020a0:	4b87      	ldr	r3, [pc, #540]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	4984      	ldr	r1, [pc, #528]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020c2:	4b7f      	ldr	r3, [pc, #508]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	497b      	ldr	r1, [pc, #492]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020e4:	4b76      	ldr	r3, [pc, #472]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4973      	ldr	r1, [pc, #460]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002106:	4b6e      	ldr	r3, [pc, #440]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	496a      	ldr	r1, [pc, #424]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002128:	4b65      	ldr	r3, [pc, #404]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4962      	ldr	r1, [pc, #392]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800214a:	4b5d      	ldr	r3, [pc, #372]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002150:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	4959      	ldr	r1, [pc, #356]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216c:	4b54      	ldr	r3, [pc, #336]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	4951      	ldr	r1, [pc, #324]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d015      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800218e:	4b4c      	ldr	r3, [pc, #304]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	4948      	ldr	r1, [pc, #288]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021ac:	d105      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ae:	4b44      	ldr	r3, [pc, #272]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a43      	ldr	r2, [pc, #268]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021b8:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021c6:	4b3e      	ldr	r3, [pc, #248]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	493a      	ldr	r1, [pc, #232]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021e4:	d105      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e6:	4b36      	ldr	r3, [pc, #216]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a35      	ldr	r2, [pc, #212]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d015      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021fe:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220c:	492c      	ldr	r1, [pc, #176]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800221c:	d105      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800221e:	4b28      	ldr	r3, [pc, #160]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	4a27      	ldr	r2, [pc, #156]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002228:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002236:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	491e      	ldr	r1, [pc, #120]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002254:	d105      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002256:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a19      	ldr	r2, [pc, #100]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002260:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800226e:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002274:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	4910      	ldr	r1, [pc, #64]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800228c:	d105      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a0b      	ldr	r2, [pc, #44]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002294:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002298:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d018      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ac:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	4902      	ldr	r1, [pc, #8]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	e001      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ca:	d105      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022cc:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a20      	ldr	r2, [pc, #128]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80022e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	4918      	ldr	r1, [pc, #96]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002302:	d105      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a12      	ldr	r2, [pc, #72]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800231e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232a:	490a      	ldr	r1, [pc, #40]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002348:	7cbb      	ldrb	r3, [r7, #18]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000

08002358 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e09d      	b.n	80024a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d108      	bne.n	8002384 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800237a:	d009      	beq.n	8002390 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
 8002382:	e005      	b.n	8002390 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fa70 	bl	8000890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023d0:	d902      	bls.n	80023d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e002      	b.n	80023de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80023e6:	d007      	beq.n	80023f8 <HAL_SPI_Init+0xa0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243a:	ea42 0103 	orr.w	r1, r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	0c1b      	lsrs	r3, r3, #16
 8002454:	f003 0204 	and.w	r2, r3, #4
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002474:	ea42 0103 	orr.w	r1, r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69da      	ldr	r2, [r3, #28]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002494:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024c4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d00c      	beq.n	80024ec <HAL_SPI_TransmitReceive_IT+0x3c>
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024d8:	d106      	bne.n	80024e8 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <HAL_SPI_TransmitReceive_IT+0x38>
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d001      	beq.n	80024ec <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
 80024ea:	e07d      	b.n	80025e8 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_SPI_TransmitReceive_IT+0x4e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_TransmitReceive_IT+0x4e>
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e072      	b.n	80025e8 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_SPI_TransmitReceive_IT+0x60>
 800250c:	2302      	movs	r3, #2
 800250e:	e06b      	b.n	80025e8 <HAL_SPI_TransmitReceive_IT+0x138>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b04      	cmp	r3, #4
 8002522:	d003      	beq.n	800252c <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2205      	movs	r2, #5
 8002528:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	887a      	ldrh	r2, [r7, #2]
 8002556:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002562:	d906      	bls.n	8002572 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a23      	ldr	r2, [pc, #140]	@ (80025f4 <HAL_SPI_TransmitReceive_IT+0x144>)
 8002568:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a22      	ldr	r2, [pc, #136]	@ (80025f8 <HAL_SPI_TransmitReceive_IT+0x148>)
 800256e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002570:	e005      	b.n	800257e <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a21      	ldr	r2, [pc, #132]	@ (80025fc <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002576:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_SPI_TransmitReceive_IT+0x150>)
 800257c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002586:	d802      	bhi.n	800258e <HAL_SPI_TransmitReceive_IT+0xde>
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d908      	bls.n	80025a0 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025ae:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ba:	2b40      	cmp	r3, #64	@ 0x40
 80025bc:	d007      	beq.n	80025ce <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80025e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	0800298f 	.word	0x0800298f
 80025f8:	080029f5 	.word	0x080029f5
 80025fc:	0800283f 	.word	0x0800283f
 8002600:	080028fd 	.word	0x080028fd

08002604 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10e      	bne.n	8002644 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
    return;
 8002642:	e0ce      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <HAL_SPI_IRQHandler+0x5e>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
    return;
 8002660:	e0bf      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_SPI_IRQHandler+0x7e>
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80b0 	beq.w	80027e2 <HAL_SPI_IRQHandler+0x1de>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80aa 	beq.w	80027e2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d011      	beq.n	80026c8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	e00b      	b.n	80026e0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
        return;
 80026de:	e080      	b.n	80027e2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d014      	beq.n	8002714 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002722:	f043 0208 	orr.w	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273c:	2b00      	cmp	r3, #0
 800273e:	d04f      	beq.n	80027e0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800274e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <HAL_SPI_IRQHandler+0x168>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d034      	beq.n	80027d6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0203 	bic.w	r2, r2, #3
 800277a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	2b00      	cmp	r3, #0
 8002782:	d011      	beq.n	80027a8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	4a17      	ldr	r2, [pc, #92]	@ (80027e8 <HAL_SPI_IRQHandler+0x1e4>)
 800278a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fbda 	bl	8000f4a <HAL_DMA_Abort_IT>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d016      	beq.n	80027de <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	4a0c      	ldr	r2, [pc, #48]	@ (80027e8 <HAL_SPI_IRQHandler+0x1e4>)
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fbc4 	bl	8000f4a <HAL_DMA_Abort_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80027d4:	e003      	b.n	80027de <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f812 	bl	8002800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027dc:	e000      	b.n	80027e0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80027de:	bf00      	nop
    return;
 80027e0:	bf00      	nop
  }
}
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	08002815 	.word	0x08002815

080027ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff ffe5 	bl	8002800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d923      	bls.n	800289a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	b292      	uxth	r2, r2
 800285e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b02      	subs	r3, #2
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d11f      	bne.n	80028c8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	e016      	b.n	80028c8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f103 020c 	add.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa14 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d912      	bls.n	8002934 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291e:	1c9a      	adds	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b02      	subs	r3, #2
 800292c:	b29a      	uxth	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002932:	e012      	b.n	800295a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	330c      	adds	r3, #12
 800293e:	7812      	ldrb	r2, [r2, #0]
 8002940:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d110      	bne.n	8002986 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002972:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9cb 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	b292      	uxth	r2, r2
 80029a2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f998 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0c:	1c9a      	adds	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d110      	bne.n	8002a4c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a38:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f968 	bl	8002d1c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a64:	f7fe f934 	bl	8000cd0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a74:	f7fe f92c 	bl	8000cd0 <HAL_GetTick>
 8002a78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	0d1b      	lsrs	r3, r3, #20
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a8a:	e054      	b.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d050      	beq.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a94:	f7fe f91c 	bl	8000cd0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d902      	bls.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d13d      	bne.n	8002b26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ac2:	d111      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002acc:	d004      	beq.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ad6:	d107      	bne.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002af0:	d10f      	bne.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e017      	b.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d19b      	bne.n	8002a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2000000c 	.word	0x2000000c

08002b64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	@ 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b76:	f7fe f8ab 	bl	8000cd0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002b86:	f7fe f8a3 	bl	8000cd0 <HAL_GetTick>
 8002b8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b94:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00da      	lsls	r2, r3, #3
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	0d1b      	lsrs	r3, r3, #20
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bac:	e060      	b.n	8002c70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002bb4:	d107      	bne.n	8002bc6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d050      	beq.n	8002c70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bce:	f7fe f87f 	bl	8000cd0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d902      	bls.n	8002be4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d13d      	bne.n	8002c60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bfc:	d111      	bne.n	8002c22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c06:	d004      	beq.n	8002c12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c10:	d107      	bne.n	8002c22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2a:	d10f      	bne.n	8002c4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e010      	b.n	8002c82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d196      	bne.n	8002bae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3728      	adds	r7, #40	@ 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000000c 	.word	0x2000000c

08002c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ff5b 	bl	8002b64 <SPI_WaitFifoStateUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb8:	f043 0220 	orr.w	r2, r3, #32
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e027      	b.n	8002d14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fec0 	bl	8002a54 <SPI_WaitFlagStateUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e014      	b.n	8002d14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ff34 	bl	8002b64 <SPI_WaitFifoStateUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e000      	b.n	8002d14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d24:	f7fd ffd4 	bl	8000cd0 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0220 	bic.w	r2, r2, #32
 8002d38:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	2164      	movs	r1, #100	@ 0x64
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa6 	bl	8002c90 <SPI_EndRxTxTransaction>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	f043 0220 	orr.w	r2, r3, #32
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d115      	bne.n	8002d8a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d107      	bne.n	8002d7a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fd3a 	bl	80027ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002d78:	e00e      	b.n	8002d98 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fc14 	bl	80005b0 <HAL_SPI_TxRxCpltCallback>
}
 8002d88:	e006      	b.n	8002d98 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fd34 	bl	8002800 <HAL_SPI_ErrorCallback>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e042      	b.n	8002e38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fd fdad 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2224      	movs	r2, #36	@ 0x24
 8002dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fbb2 	bl	8003554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8b3 	bl	8002f5c <UART_SetConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01b      	b.n	8002e38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fc31 	bl	8003698 <UART_CheckIdleState>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d17b      	bne.n	8002f52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_UART_Transmit+0x26>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e074      	b.n	8002f54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2221      	movs	r2, #33	@ 0x21
 8002e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e7a:	f7fd ff29 	bl	8000cd0 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e98:	d108      	bne.n	8002eac <HAL_UART_Transmit+0x6c>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d104      	bne.n	8002eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	e003      	b.n	8002eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eb4:	e030      	b.n	8002f18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2180      	movs	r1, #128	@ 0x80
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fc93 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e03d      	b.n	8002f54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10b      	bne.n	8002ef6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	e007      	b.n	8002f06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	781a      	ldrb	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	3301      	adds	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1c8      	bne.n	8002eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2140      	movs	r1, #64	@ 0x40
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fc5c 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e006      	b.n	8002f54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f60:	b08c      	sub	sp, #48	@ 0x30
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4baa      	ldr	r3, [pc, #680]	@ (8003234 <UART_SetConfig+0x2d8>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a9f      	ldr	r2, [pc, #636]	@ (8003238 <UART_SetConfig+0x2dc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002fd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe6:	f023 010f 	bic.w	r1, r3, #15
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a90      	ldr	r2, [pc, #576]	@ (800323c <UART_SetConfig+0x2e0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d125      	bne.n	800304c <UART_SetConfig+0xf0>
 8003000:	4b8f      	ldr	r3, [pc, #572]	@ (8003240 <UART_SetConfig+0x2e4>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b03      	cmp	r3, #3
 800300c:	d81a      	bhi.n	8003044 <UART_SetConfig+0xe8>
 800300e:	a201      	add	r2, pc, #4	@ (adr r2, 8003014 <UART_SetConfig+0xb8>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003025 	.word	0x08003025
 8003018:	08003035 	.word	0x08003035
 800301c:	0800302d 	.word	0x0800302d
 8003020:	0800303d 	.word	0x0800303d
 8003024:	2301      	movs	r3, #1
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302a:	e116      	b.n	800325a <UART_SetConfig+0x2fe>
 800302c:	2302      	movs	r3, #2
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003032:	e112      	b.n	800325a <UART_SetConfig+0x2fe>
 8003034:	2304      	movs	r3, #4
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303a:	e10e      	b.n	800325a <UART_SetConfig+0x2fe>
 800303c:	2308      	movs	r3, #8
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003042:	e10a      	b.n	800325a <UART_SetConfig+0x2fe>
 8003044:	2310      	movs	r3, #16
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304a:	e106      	b.n	800325a <UART_SetConfig+0x2fe>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a7c      	ldr	r2, [pc, #496]	@ (8003244 <UART_SetConfig+0x2e8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d138      	bne.n	80030c8 <UART_SetConfig+0x16c>
 8003056:	4b7a      	ldr	r3, [pc, #488]	@ (8003240 <UART_SetConfig+0x2e4>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d82d      	bhi.n	80030c0 <UART_SetConfig+0x164>
 8003064:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0x110>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030c1 	.word	0x080030c1
 8003074:	080030c1 	.word	0x080030c1
 8003078:	080030c1 	.word	0x080030c1
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030c1 	.word	0x080030c1
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030a9 	.word	0x080030a9
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030c1 	.word	0x080030c1
 8003098:	080030c1 	.word	0x080030c1
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a6:	e0d8      	b.n	800325a <UART_SetConfig+0x2fe>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ae:	e0d4      	b.n	800325a <UART_SetConfig+0x2fe>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b6:	e0d0      	b.n	800325a <UART_SetConfig+0x2fe>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030be:	e0cc      	b.n	800325a <UART_SetConfig+0x2fe>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c6:	e0c8      	b.n	800325a <UART_SetConfig+0x2fe>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003248 <UART_SetConfig+0x2ec>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d125      	bne.n	800311e <UART_SetConfig+0x1c2>
 80030d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003240 <UART_SetConfig+0x2e4>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030dc:	2b30      	cmp	r3, #48	@ 0x30
 80030de:	d016      	beq.n	800310e <UART_SetConfig+0x1b2>
 80030e0:	2b30      	cmp	r3, #48	@ 0x30
 80030e2:	d818      	bhi.n	8003116 <UART_SetConfig+0x1ba>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d00a      	beq.n	80030fe <UART_SetConfig+0x1a2>
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d814      	bhi.n	8003116 <UART_SetConfig+0x1ba>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <UART_SetConfig+0x19a>
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d008      	beq.n	8003106 <UART_SetConfig+0x1aa>
 80030f4:	e00f      	b.n	8003116 <UART_SetConfig+0x1ba>
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fc:	e0ad      	b.n	800325a <UART_SetConfig+0x2fe>
 80030fe:	2302      	movs	r3, #2
 8003100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003104:	e0a9      	b.n	800325a <UART_SetConfig+0x2fe>
 8003106:	2304      	movs	r3, #4
 8003108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310c:	e0a5      	b.n	800325a <UART_SetConfig+0x2fe>
 800310e:	2308      	movs	r3, #8
 8003110:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003114:	e0a1      	b.n	800325a <UART_SetConfig+0x2fe>
 8003116:	2310      	movs	r3, #16
 8003118:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800311c:	e09d      	b.n	800325a <UART_SetConfig+0x2fe>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a4a      	ldr	r2, [pc, #296]	@ (800324c <UART_SetConfig+0x2f0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d125      	bne.n	8003174 <UART_SetConfig+0x218>
 8003128:	4b45      	ldr	r3, [pc, #276]	@ (8003240 <UART_SetConfig+0x2e4>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003132:	2bc0      	cmp	r3, #192	@ 0xc0
 8003134:	d016      	beq.n	8003164 <UART_SetConfig+0x208>
 8003136:	2bc0      	cmp	r3, #192	@ 0xc0
 8003138:	d818      	bhi.n	800316c <UART_SetConfig+0x210>
 800313a:	2b80      	cmp	r3, #128	@ 0x80
 800313c:	d00a      	beq.n	8003154 <UART_SetConfig+0x1f8>
 800313e:	2b80      	cmp	r3, #128	@ 0x80
 8003140:	d814      	bhi.n	800316c <UART_SetConfig+0x210>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <UART_SetConfig+0x1f0>
 8003146:	2b40      	cmp	r3, #64	@ 0x40
 8003148:	d008      	beq.n	800315c <UART_SetConfig+0x200>
 800314a:	e00f      	b.n	800316c <UART_SetConfig+0x210>
 800314c:	2300      	movs	r3, #0
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003152:	e082      	b.n	800325a <UART_SetConfig+0x2fe>
 8003154:	2302      	movs	r3, #2
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800315a:	e07e      	b.n	800325a <UART_SetConfig+0x2fe>
 800315c:	2304      	movs	r3, #4
 800315e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003162:	e07a      	b.n	800325a <UART_SetConfig+0x2fe>
 8003164:	2308      	movs	r3, #8
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316a:	e076      	b.n	800325a <UART_SetConfig+0x2fe>
 800316c:	2310      	movs	r3, #16
 800316e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003172:	e072      	b.n	800325a <UART_SetConfig+0x2fe>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a35      	ldr	r2, [pc, #212]	@ (8003250 <UART_SetConfig+0x2f4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d12a      	bne.n	80031d4 <UART_SetConfig+0x278>
 800317e:	4b30      	ldr	r3, [pc, #192]	@ (8003240 <UART_SetConfig+0x2e4>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003184:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003188:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800318c:	d01a      	beq.n	80031c4 <UART_SetConfig+0x268>
 800318e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003192:	d81b      	bhi.n	80031cc <UART_SetConfig+0x270>
 8003194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003198:	d00c      	beq.n	80031b4 <UART_SetConfig+0x258>
 800319a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800319e:	d815      	bhi.n	80031cc <UART_SetConfig+0x270>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <UART_SetConfig+0x250>
 80031a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031a8:	d008      	beq.n	80031bc <UART_SetConfig+0x260>
 80031aa:	e00f      	b.n	80031cc <UART_SetConfig+0x270>
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b2:	e052      	b.n	800325a <UART_SetConfig+0x2fe>
 80031b4:	2302      	movs	r3, #2
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ba:	e04e      	b.n	800325a <UART_SetConfig+0x2fe>
 80031bc:	2304      	movs	r3, #4
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c2:	e04a      	b.n	800325a <UART_SetConfig+0x2fe>
 80031c4:	2308      	movs	r3, #8
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ca:	e046      	b.n	800325a <UART_SetConfig+0x2fe>
 80031cc:	2310      	movs	r3, #16
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d2:	e042      	b.n	800325a <UART_SetConfig+0x2fe>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <UART_SetConfig+0x2dc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d13a      	bne.n	8003254 <UART_SetConfig+0x2f8>
 80031de:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <UART_SetConfig+0x2e4>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031ec:	d01a      	beq.n	8003224 <UART_SetConfig+0x2c8>
 80031ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031f2:	d81b      	bhi.n	800322c <UART_SetConfig+0x2d0>
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031f8:	d00c      	beq.n	8003214 <UART_SetConfig+0x2b8>
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031fe:	d815      	bhi.n	800322c <UART_SetConfig+0x2d0>
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <UART_SetConfig+0x2b0>
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003208:	d008      	beq.n	800321c <UART_SetConfig+0x2c0>
 800320a:	e00f      	b.n	800322c <UART_SetConfig+0x2d0>
 800320c:	2300      	movs	r3, #0
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003212:	e022      	b.n	800325a <UART_SetConfig+0x2fe>
 8003214:	2302      	movs	r3, #2
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800321a:	e01e      	b.n	800325a <UART_SetConfig+0x2fe>
 800321c:	2304      	movs	r3, #4
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003222:	e01a      	b.n	800325a <UART_SetConfig+0x2fe>
 8003224:	2308      	movs	r3, #8
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322a:	e016      	b.n	800325a <UART_SetConfig+0x2fe>
 800322c:	2310      	movs	r3, #16
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003232:	e012      	b.n	800325a <UART_SetConfig+0x2fe>
 8003234:	cfff69f3 	.word	0xcfff69f3
 8003238:	40008000 	.word	0x40008000
 800323c:	40013800 	.word	0x40013800
 8003240:	40021000 	.word	0x40021000
 8003244:	40004400 	.word	0x40004400
 8003248:	40004800 	.word	0x40004800
 800324c:	40004c00 	.word	0x40004c00
 8003250:	40005000 	.word	0x40005000
 8003254:	2310      	movs	r3, #16
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4aae      	ldr	r2, [pc, #696]	@ (8003518 <UART_SetConfig+0x5bc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	f040 8097 	bne.w	8003394 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800326a:	2b08      	cmp	r3, #8
 800326c:	d823      	bhi.n	80032b6 <UART_SetConfig+0x35a>
 800326e:	a201      	add	r2, pc, #4	@ (adr r2, 8003274 <UART_SetConfig+0x318>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003299 	.word	0x08003299
 8003278:	080032b7 	.word	0x080032b7
 800327c:	080032a1 	.word	0x080032a1
 8003280:	080032b7 	.word	0x080032b7
 8003284:	080032a7 	.word	0x080032a7
 8003288:	080032b7 	.word	0x080032b7
 800328c:	080032b7 	.word	0x080032b7
 8003290:	080032b7 	.word	0x080032b7
 8003294:	080032af 	.word	0x080032af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003298:	f7fe fdb0 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800329e:	e010      	b.n	80032c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a0:	4b9e      	ldr	r3, [pc, #632]	@ (800351c <UART_SetConfig+0x5c0>)
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032a4:	e00d      	b.n	80032c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a6:	f7fe fd3b 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 80032aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032ac:	e009      	b.n	80032c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032b4:	e005      	b.n	80032c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8130 	beq.w	800352a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	4a94      	ldr	r2, [pc, #592]	@ (8003520 <UART_SetConfig+0x5c4>)
 80032d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d4:	461a      	mov	r2, r3
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d305      	bcc.n	80032fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d903      	bls.n	8003302 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003300:	e113      	b.n	800352a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	2200      	movs	r2, #0
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	60fa      	str	r2, [r7, #12]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	4a84      	ldr	r2, [pc, #528]	@ (8003520 <UART_SetConfig+0x5c4>)
 8003310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003314:	b29b      	uxth	r3, r3
 8003316:	2200      	movs	r2, #0
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003324:	f7fc ffcc 	bl	80002c0 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	020b      	lsls	r3, r1, #8
 800333a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800333e:	0202      	lsls	r2, r0, #8
 8003340:	6979      	ldr	r1, [r7, #20]
 8003342:	6849      	ldr	r1, [r1, #4]
 8003344:	0849      	lsrs	r1, r1, #1
 8003346:	2000      	movs	r0, #0
 8003348:	460c      	mov	r4, r1
 800334a:	4605      	mov	r5, r0
 800334c:	eb12 0804 	adds.w	r8, r2, r4
 8003350:	eb43 0905 	adc.w	r9, r3, r5
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	469a      	mov	sl, r3
 800335c:	4693      	mov	fp, r2
 800335e:	4652      	mov	r2, sl
 8003360:	465b      	mov	r3, fp
 8003362:	4640      	mov	r0, r8
 8003364:	4649      	mov	r1, r9
 8003366:	f7fc ffab 	bl	80002c0 <__aeabi_uldivmod>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4613      	mov	r3, r2
 8003370:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003378:	d308      	bcc.n	800338c <UART_SetConfig+0x430>
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003380:	d204      	bcs.n	800338c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	e0ce      	b.n	800352a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003392:	e0ca      	b.n	800352a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800339c:	d166      	bne.n	800346c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800339e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d827      	bhi.n	80033f6 <UART_SetConfig+0x49a>
 80033a6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <UART_SetConfig+0x450>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
 80033cc:	080033ef 	.word	0x080033ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe fd14 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80033d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033d6:	e014      	b.n	8003402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe fd26 	bl	8001e28 <HAL_RCC_GetPCLK2Freq>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033de:	e010      	b.n	8003402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b4e      	ldr	r3, [pc, #312]	@ (800351c <UART_SetConfig+0x5c0>)
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033e4:	e00d      	b.n	8003402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7fe fc9b 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 80033ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ec:	e009      	b.n	8003402 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033f4:	e005      	b.n	8003402 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8090 	beq.w	800352a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	4a44      	ldr	r2, [pc, #272]	@ (8003520 <UART_SetConfig+0x5c4>)
 8003410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003414:	461a      	mov	r2, r3
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	fbb3 f3f2 	udiv	r3, r3, r2
 800341c:	005a      	lsls	r2, r3, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	441a      	add	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	d916      	bls.n	8003464 <UART_SetConfig+0x508>
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800343c:	d212      	bcs.n	8003464 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f023 030f 	bic.w	r3, r3, #15
 8003446:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	b29b      	uxth	r3, r3
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	b29a      	uxth	r2, r3
 8003454:	8bfb      	ldrh	r3, [r7, #30]
 8003456:	4313      	orrs	r3, r2
 8003458:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	8bfa      	ldrh	r2, [r7, #30]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	e062      	b.n	800352a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800346a:	e05e      	b.n	800352a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800346c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003470:	2b08      	cmp	r3, #8
 8003472:	d828      	bhi.n	80034c6 <UART_SetConfig+0x56a>
 8003474:	a201      	add	r2, pc, #4	@ (adr r2, 800347c <UART_SetConfig+0x520>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034b1 	.word	0x080034b1
 8003488:	080034c7 	.word	0x080034c7
 800348c:	080034b7 	.word	0x080034b7
 8003490:	080034c7 	.word	0x080034c7
 8003494:	080034c7 	.word	0x080034c7
 8003498:	080034c7 	.word	0x080034c7
 800349c:	080034bf 	.word	0x080034bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a0:	f7fe fcac 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 80034a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034a6:	e014      	b.n	80034d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034a8:	f7fe fcbe 	bl	8001e28 <HAL_RCC_GetPCLK2Freq>
 80034ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ae:	e010      	b.n	80034d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b0:	4b1a      	ldr	r3, [pc, #104]	@ (800351c <UART_SetConfig+0x5c0>)
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034b4:	e00d      	b.n	80034d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b6:	f7fe fc33 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 80034ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034bc:	e009      	b.n	80034d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034c4:	e005      	b.n	80034d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034d0:	bf00      	nop
    }

    if (pclk != 0U)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d028      	beq.n	800352a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	4a10      	ldr	r2, [pc, #64]	@ (8003520 <UART_SetConfig+0x5c4>)
 80034de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e2:	461a      	mov	r2, r3
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	441a      	add	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	d910      	bls.n	8003524 <UART_SetConfig+0x5c8>
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003508:	d20c      	bcs.n	8003524 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	b29a      	uxth	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	e009      	b.n	800352a <UART_SetConfig+0x5ce>
 8003516:	bf00      	nop
 8003518:	40008000 	.word	0x40008000
 800351c:	00f42400 	.word	0x00f42400
 8003520:	08004af8 	.word	0x08004af8
      }
      else
      {
        ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2201      	movs	r2, #1
 800352e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2201      	movs	r2, #1
 8003536:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003546:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800354a:	4618      	mov	r0, r3
 800354c:	3730      	adds	r7, #48	@ 0x30
 800354e:	46bd      	mov	sp, r7
 8003550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01a      	beq.n	800366a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003652:	d10a      	bne.n	800366a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b098      	sub	sp, #96	@ 0x60
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036a8:	f7fd fb12 	bl	8000cd0 <HAL_GetTick>
 80036ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d12f      	bne.n	800371c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	2200      	movs	r2, #0
 80036c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f88e 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d022      	beq.n	800371c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e6      	bne.n	80036d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e063      	b.n	80037e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d149      	bne.n	80037be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003732:	2200      	movs	r2, #0
 8003734:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f857 	bl	80037ec <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03c      	beq.n	80037be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	e853 3f00 	ldrex	r3, [r3]
 8003750:	623b      	str	r3, [r7, #32]
   return(result);
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003758:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003762:	633b      	str	r3, [r7, #48]	@ 0x30
 8003764:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e6      	bne.n	8003744 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3308      	adds	r3, #8
 800377c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	60fb      	str	r3, [r7, #12]
   return(result);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003796:	61fa      	str	r2, [r7, #28]
 8003798:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	69b9      	ldr	r1, [r7, #24]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	617b      	str	r3, [r7, #20]
   return(result);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e012      	b.n	80037e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3758      	adds	r7, #88	@ 0x58
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fc:	e04f      	b.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d04b      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003806:	f7fd fa63 	bl	8000cd0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	429a      	cmp	r2, r3
 8003814:	d302      	bcc.n	800381c <UART_WaitOnFlagUntilTimeout+0x30>
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e04e      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d037      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b80      	cmp	r3, #128	@ 0x80
 8003832:	d034      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d031      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d110      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2208      	movs	r2, #8
 800384e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f838 	bl	80038c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2208      	movs	r2, #8
 800385a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e029      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003878:	d111      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f81e 	bl	80038c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e00f      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4013      	ands	r3, r2
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	bf0c      	ite	eq
 80038ae:	2301      	moveq	r3, #1
 80038b0:	2300      	movne	r3, #0
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d0a0      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b095      	sub	sp, #84	@ 0x54
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	461a      	mov	r2, r3
 80038ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80038ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e6      	bne.n	80038ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3308      	adds	r3, #8
 8003906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800392a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e3      	bne.n	8003900 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d118      	bne.n	8003972 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	60bb      	str	r3, [r7, #8]
   return(result);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f023 0310 	bic.w	r3, r3, #16
 8003954:	647b      	str	r3, [r7, #68]	@ 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e6      	bne.n	8003940 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003986:	bf00      	nop
 8003988:	3754      	adds	r7, #84	@ 0x54
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e027      	b.n	80039f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2224      	movs	r2, #36	@ 0x24
 80039b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80039d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e02d      	b.n	8003a78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2224      	movs	r2, #36	@ 0x24
 8003a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f84f 	bl	8003afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e02d      	b.n	8003af4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2224      	movs	r2, #36	@ 0x24
 8003aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f811 	bl	8003afc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d108      	bne.n	8003b1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b1c:	e031      	b.n	8003b82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b1e:	2308      	movs	r3, #8
 8003b20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b22:	2308      	movs	r3, #8
 8003b24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	0e5b      	lsrs	r3, r3, #25
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	0f5b      	lsrs	r3, r3, #29
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b46:	7bbb      	ldrb	r3, [r7, #14]
 8003b48:	7b3a      	ldrb	r2, [r7, #12]
 8003b4a:	4911      	ldr	r1, [pc, #68]	@ (8003b90 <UARTEx_SetNbDataToProcess+0x94>)
 8003b4c:	5c8a      	ldrb	r2, [r1, r2]
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b52:	7b3a      	ldrb	r2, [r7, #12]
 8003b54:	490f      	ldr	r1, [pc, #60]	@ (8003b94 <UARTEx_SetNbDataToProcess+0x98>)
 8003b56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b58:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	7b7a      	ldrb	r2, [r7, #13]
 8003b68:	4909      	ldr	r1, [pc, #36]	@ (8003b90 <UARTEx_SetNbDataToProcess+0x94>)
 8003b6a:	5c8a      	ldrb	r2, [r1, r2]
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b70:	7b7a      	ldrb	r2, [r7, #13]
 8003b72:	4908      	ldr	r1, [pc, #32]	@ (8003b94 <UARTEx_SetNbDataToProcess+0x98>)
 8003b74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b76:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	08004b10 	.word	0x08004b10
 8003b94:	08004b18 	.word	0x08004b18

08003b98 <std>:
 8003b98:	2300      	movs	r3, #0
 8003b9a:	b510      	push	{r4, lr}
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ba6:	6083      	str	r3, [r0, #8]
 8003ba8:	8181      	strh	r1, [r0, #12]
 8003baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bac:	81c2      	strh	r2, [r0, #14]
 8003bae:	6183      	str	r3, [r0, #24]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	305c      	adds	r0, #92	@ 0x5c
 8003bb6:	f000 f9f9 	bl	8003fac <memset>
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <std+0x58>)
 8003bbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <std+0x5c>)
 8003bc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <std+0x60>)
 8003bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <std+0x64>)
 8003bc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <std+0x68>)
 8003bcc:	6224      	str	r4, [r4, #32]
 8003bce:	429c      	cmp	r4, r3
 8003bd0:	d006      	beq.n	8003be0 <std+0x48>
 8003bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bd6:	4294      	cmp	r4, r2
 8003bd8:	d002      	beq.n	8003be0 <std+0x48>
 8003bda:	33d0      	adds	r3, #208	@ 0xd0
 8003bdc:	429c      	cmp	r4, r3
 8003bde:	d105      	bne.n	8003bec <std+0x54>
 8003be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003be8:	f000 ba58 	b.w	800409c <__retarget_lock_init_recursive>
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	bf00      	nop
 8003bf0:	08003dfd 	.word	0x08003dfd
 8003bf4:	08003e1f 	.word	0x08003e1f
 8003bf8:	08003e57 	.word	0x08003e57
 8003bfc:	08003e7b 	.word	0x08003e7b
 8003c00:	200001a8 	.word	0x200001a8

08003c04 <stdio_exit_handler>:
 8003c04:	4a02      	ldr	r2, [pc, #8]	@ (8003c10 <stdio_exit_handler+0xc>)
 8003c06:	4903      	ldr	r1, [pc, #12]	@ (8003c14 <stdio_exit_handler+0x10>)
 8003c08:	4803      	ldr	r0, [pc, #12]	@ (8003c18 <stdio_exit_handler+0x14>)
 8003c0a:	f000 b869 	b.w	8003ce0 <_fwalk_sglue>
 8003c0e:	bf00      	nop
 8003c10:	20000018 	.word	0x20000018
 8003c14:	0800493d 	.word	0x0800493d
 8003c18:	20000028 	.word	0x20000028

08003c1c <cleanup_stdio>:
 8003c1c:	6841      	ldr	r1, [r0, #4]
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <cleanup_stdio+0x34>)
 8003c20:	4299      	cmp	r1, r3
 8003c22:	b510      	push	{r4, lr}
 8003c24:	4604      	mov	r4, r0
 8003c26:	d001      	beq.n	8003c2c <cleanup_stdio+0x10>
 8003c28:	f000 fe88 	bl	800493c <_fflush_r>
 8003c2c:	68a1      	ldr	r1, [r4, #8]
 8003c2e:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <cleanup_stdio+0x38>)
 8003c30:	4299      	cmp	r1, r3
 8003c32:	d002      	beq.n	8003c3a <cleanup_stdio+0x1e>
 8003c34:	4620      	mov	r0, r4
 8003c36:	f000 fe81 	bl	800493c <_fflush_r>
 8003c3a:	68e1      	ldr	r1, [r4, #12]
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <cleanup_stdio+0x3c>)
 8003c3e:	4299      	cmp	r1, r3
 8003c40:	d004      	beq.n	8003c4c <cleanup_stdio+0x30>
 8003c42:	4620      	mov	r0, r4
 8003c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c48:	f000 be78 	b.w	800493c <_fflush_r>
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	bf00      	nop
 8003c50:	200001a8 	.word	0x200001a8
 8003c54:	20000210 	.word	0x20000210
 8003c58:	20000278 	.word	0x20000278

08003c5c <global_stdio_init.part.0>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <global_stdio_init.part.0+0x30>)
 8003c60:	4c0b      	ldr	r4, [pc, #44]	@ (8003c90 <global_stdio_init.part.0+0x34>)
 8003c62:	4a0c      	ldr	r2, [pc, #48]	@ (8003c94 <global_stdio_init.part.0+0x38>)
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	4620      	mov	r0, r4
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	f7ff ff94 	bl	8003b98 <std>
 8003c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c74:	2201      	movs	r2, #1
 8003c76:	2109      	movs	r1, #9
 8003c78:	f7ff ff8e 	bl	8003b98 <std>
 8003c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c80:	2202      	movs	r2, #2
 8003c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c86:	2112      	movs	r1, #18
 8003c88:	f7ff bf86 	b.w	8003b98 <std>
 8003c8c:	200002e0 	.word	0x200002e0
 8003c90:	200001a8 	.word	0x200001a8
 8003c94:	08003c05 	.word	0x08003c05

08003c98 <__sfp_lock_acquire>:
 8003c98:	4801      	ldr	r0, [pc, #4]	@ (8003ca0 <__sfp_lock_acquire+0x8>)
 8003c9a:	f000 ba00 	b.w	800409e <__retarget_lock_acquire_recursive>
 8003c9e:	bf00      	nop
 8003ca0:	200002e9 	.word	0x200002e9

08003ca4 <__sfp_lock_release>:
 8003ca4:	4801      	ldr	r0, [pc, #4]	@ (8003cac <__sfp_lock_release+0x8>)
 8003ca6:	f000 b9fb 	b.w	80040a0 <__retarget_lock_release_recursive>
 8003caa:	bf00      	nop
 8003cac:	200002e9 	.word	0x200002e9

08003cb0 <__sinit>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	f7ff fff0 	bl	8003c98 <__sfp_lock_acquire>
 8003cb8:	6a23      	ldr	r3, [r4, #32]
 8003cba:	b11b      	cbz	r3, 8003cc4 <__sinit+0x14>
 8003cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc0:	f7ff bff0 	b.w	8003ca4 <__sfp_lock_release>
 8003cc4:	4b04      	ldr	r3, [pc, #16]	@ (8003cd8 <__sinit+0x28>)
 8003cc6:	6223      	str	r3, [r4, #32]
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <__sinit+0x2c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f5      	bne.n	8003cbc <__sinit+0xc>
 8003cd0:	f7ff ffc4 	bl	8003c5c <global_stdio_init.part.0>
 8003cd4:	e7f2      	b.n	8003cbc <__sinit+0xc>
 8003cd6:	bf00      	nop
 8003cd8:	08003c1d 	.word	0x08003c1d
 8003cdc:	200002e0 	.word	0x200002e0

08003ce0 <_fwalk_sglue>:
 8003ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	4607      	mov	r7, r0
 8003ce6:	4688      	mov	r8, r1
 8003ce8:	4614      	mov	r4, r2
 8003cea:	2600      	movs	r6, #0
 8003cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8003cf4:	d505      	bpl.n	8003d02 <_fwalk_sglue+0x22>
 8003cf6:	6824      	ldr	r4, [r4, #0]
 8003cf8:	2c00      	cmp	r4, #0
 8003cfa:	d1f7      	bne.n	8003cec <_fwalk_sglue+0xc>
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d02:	89ab      	ldrh	r3, [r5, #12]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d907      	bls.n	8003d18 <_fwalk_sglue+0x38>
 8003d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	d003      	beq.n	8003d18 <_fwalk_sglue+0x38>
 8003d10:	4629      	mov	r1, r5
 8003d12:	4638      	mov	r0, r7
 8003d14:	47c0      	blx	r8
 8003d16:	4306      	orrs	r6, r0
 8003d18:	3568      	adds	r5, #104	@ 0x68
 8003d1a:	e7e9      	b.n	8003cf0 <_fwalk_sglue+0x10>

08003d1c <iprintf>:
 8003d1c:	b40f      	push	{r0, r1, r2, r3}
 8003d1e:	b507      	push	{r0, r1, r2, lr}
 8003d20:	4906      	ldr	r1, [pc, #24]	@ (8003d3c <iprintf+0x20>)
 8003d22:	ab04      	add	r3, sp, #16
 8003d24:	6808      	ldr	r0, [r1, #0]
 8003d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d2a:	6881      	ldr	r1, [r0, #8]
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	f000 fadb 	bl	80042e8 <_vfiprintf_r>
 8003d32:	b003      	add	sp, #12
 8003d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d38:	b004      	add	sp, #16
 8003d3a:	4770      	bx	lr
 8003d3c:	20000024 	.word	0x20000024

08003d40 <_puts_r>:
 8003d40:	6a03      	ldr	r3, [r0, #32]
 8003d42:	b570      	push	{r4, r5, r6, lr}
 8003d44:	6884      	ldr	r4, [r0, #8]
 8003d46:	4605      	mov	r5, r0
 8003d48:	460e      	mov	r6, r1
 8003d4a:	b90b      	cbnz	r3, 8003d50 <_puts_r+0x10>
 8003d4c:	f7ff ffb0 	bl	8003cb0 <__sinit>
 8003d50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d52:	07db      	lsls	r3, r3, #31
 8003d54:	d405      	bmi.n	8003d62 <_puts_r+0x22>
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	0598      	lsls	r0, r3, #22
 8003d5a:	d402      	bmi.n	8003d62 <_puts_r+0x22>
 8003d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d5e:	f000 f99e 	bl	800409e <__retarget_lock_acquire_recursive>
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	0719      	lsls	r1, r3, #28
 8003d66:	d502      	bpl.n	8003d6e <_puts_r+0x2e>
 8003d68:	6923      	ldr	r3, [r4, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d135      	bne.n	8003dda <_puts_r+0x9a>
 8003d6e:	4621      	mov	r1, r4
 8003d70:	4628      	mov	r0, r5
 8003d72:	f000 f8c5 	bl	8003f00 <__swsetup_r>
 8003d76:	b380      	cbz	r0, 8003dda <_puts_r+0x9a>
 8003d78:	f04f 35ff 	mov.w	r5, #4294967295
 8003d7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d7e:	07da      	lsls	r2, r3, #31
 8003d80:	d405      	bmi.n	8003d8e <_puts_r+0x4e>
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	059b      	lsls	r3, r3, #22
 8003d86:	d402      	bmi.n	8003d8e <_puts_r+0x4e>
 8003d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d8a:	f000 f989 	bl	80040a0 <__retarget_lock_release_recursive>
 8003d8e:	4628      	mov	r0, r5
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da04      	bge.n	8003da0 <_puts_r+0x60>
 8003d96:	69a2      	ldr	r2, [r4, #24]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	dc17      	bgt.n	8003dcc <_puts_r+0x8c>
 8003d9c:	290a      	cmp	r1, #10
 8003d9e:	d015      	beq.n	8003dcc <_puts_r+0x8c>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	6022      	str	r2, [r4, #0]
 8003da6:	7019      	strb	r1, [r3, #0]
 8003da8:	68a3      	ldr	r3, [r4, #8]
 8003daa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dae:	3b01      	subs	r3, #1
 8003db0:	60a3      	str	r3, [r4, #8]
 8003db2:	2900      	cmp	r1, #0
 8003db4:	d1ed      	bne.n	8003d92 <_puts_r+0x52>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	da11      	bge.n	8003dde <_puts_r+0x9e>
 8003dba:	4622      	mov	r2, r4
 8003dbc:	210a      	movs	r1, #10
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 f85f 	bl	8003e82 <__swbuf_r>
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d0d7      	beq.n	8003d78 <_puts_r+0x38>
 8003dc8:	250a      	movs	r5, #10
 8003dca:	e7d7      	b.n	8003d7c <_puts_r+0x3c>
 8003dcc:	4622      	mov	r2, r4
 8003dce:	4628      	mov	r0, r5
 8003dd0:	f000 f857 	bl	8003e82 <__swbuf_r>
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d1e7      	bne.n	8003da8 <_puts_r+0x68>
 8003dd8:	e7ce      	b.n	8003d78 <_puts_r+0x38>
 8003dda:	3e01      	subs	r6, #1
 8003ddc:	e7e4      	b.n	8003da8 <_puts_r+0x68>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	6022      	str	r2, [r4, #0]
 8003de4:	220a      	movs	r2, #10
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e7ee      	b.n	8003dc8 <_puts_r+0x88>
	...

08003dec <puts>:
 8003dec:	4b02      	ldr	r3, [pc, #8]	@ (8003df8 <puts+0xc>)
 8003dee:	4601      	mov	r1, r0
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	f7ff bfa5 	b.w	8003d40 <_puts_r>
 8003df6:	bf00      	nop
 8003df8:	20000024 	.word	0x20000024

08003dfc <__sread>:
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	460c      	mov	r4, r1
 8003e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e04:	f000 f8fc 	bl	8004000 <_read_r>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	bfab      	itete	ge
 8003e0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e10:	181b      	addge	r3, r3, r0
 8003e12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e16:	bfac      	ite	ge
 8003e18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e1a:	81a3      	strhlt	r3, [r4, #12]
 8003e1c:	bd10      	pop	{r4, pc}

08003e1e <__swrite>:
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e22:	461f      	mov	r7, r3
 8003e24:	898b      	ldrh	r3, [r1, #12]
 8003e26:	05db      	lsls	r3, r3, #23
 8003e28:	4605      	mov	r5, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	4616      	mov	r6, r2
 8003e2e:	d505      	bpl.n	8003e3c <__swrite+0x1e>
 8003e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e34:	2302      	movs	r3, #2
 8003e36:	2200      	movs	r2, #0
 8003e38:	f000 f8d0 	bl	8003fdc <_lseek_r>
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e46:	81a3      	strh	r3, [r4, #12]
 8003e48:	4632      	mov	r2, r6
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e52:	f000 b8e7 	b.w	8004024 <_write_r>

08003e56 <__sseek>:
 8003e56:	b510      	push	{r4, lr}
 8003e58:	460c      	mov	r4, r1
 8003e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5e:	f000 f8bd 	bl	8003fdc <_lseek_r>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	bf15      	itete	ne
 8003e68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e72:	81a3      	strheq	r3, [r4, #12]
 8003e74:	bf18      	it	ne
 8003e76:	81a3      	strhne	r3, [r4, #12]
 8003e78:	bd10      	pop	{r4, pc}

08003e7a <__sclose>:
 8003e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7e:	f000 b89d 	b.w	8003fbc <_close_r>

08003e82 <__swbuf_r>:
 8003e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e84:	460e      	mov	r6, r1
 8003e86:	4614      	mov	r4, r2
 8003e88:	4605      	mov	r5, r0
 8003e8a:	b118      	cbz	r0, 8003e94 <__swbuf_r+0x12>
 8003e8c:	6a03      	ldr	r3, [r0, #32]
 8003e8e:	b90b      	cbnz	r3, 8003e94 <__swbuf_r+0x12>
 8003e90:	f7ff ff0e 	bl	8003cb0 <__sinit>
 8003e94:	69a3      	ldr	r3, [r4, #24]
 8003e96:	60a3      	str	r3, [r4, #8]
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	071a      	lsls	r2, r3, #28
 8003e9c:	d501      	bpl.n	8003ea2 <__swbuf_r+0x20>
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	b943      	cbnz	r3, 8003eb4 <__swbuf_r+0x32>
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 f82b 	bl	8003f00 <__swsetup_r>
 8003eaa:	b118      	cbz	r0, 8003eb4 <__swbuf_r+0x32>
 8003eac:	f04f 37ff 	mov.w	r7, #4294967295
 8003eb0:	4638      	mov	r0, r7
 8003eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	6922      	ldr	r2, [r4, #16]
 8003eb8:	1a98      	subs	r0, r3, r2
 8003eba:	6963      	ldr	r3, [r4, #20]
 8003ebc:	b2f6      	uxtb	r6, r6
 8003ebe:	4283      	cmp	r3, r0
 8003ec0:	4637      	mov	r7, r6
 8003ec2:	dc05      	bgt.n	8003ed0 <__swbuf_r+0x4e>
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 fd38 	bl	800493c <_fflush_r>
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d1ed      	bne.n	8003eac <__swbuf_r+0x2a>
 8003ed0:	68a3      	ldr	r3, [r4, #8]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	60a3      	str	r3, [r4, #8]
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	6022      	str	r2, [r4, #0]
 8003edc:	701e      	strb	r6, [r3, #0]
 8003ede:	6962      	ldr	r2, [r4, #20]
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d004      	beq.n	8003ef0 <__swbuf_r+0x6e>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	07db      	lsls	r3, r3, #31
 8003eea:	d5e1      	bpl.n	8003eb0 <__swbuf_r+0x2e>
 8003eec:	2e0a      	cmp	r6, #10
 8003eee:	d1df      	bne.n	8003eb0 <__swbuf_r+0x2e>
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 fd22 	bl	800493c <_fflush_r>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d0d9      	beq.n	8003eb0 <__swbuf_r+0x2e>
 8003efc:	e7d6      	b.n	8003eac <__swbuf_r+0x2a>
	...

08003f00 <__swsetup_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4b29      	ldr	r3, [pc, #164]	@ (8003fa8 <__swsetup_r+0xa8>)
 8003f04:	4605      	mov	r5, r0
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	460c      	mov	r4, r1
 8003f0a:	b118      	cbz	r0, 8003f14 <__swsetup_r+0x14>
 8003f0c:	6a03      	ldr	r3, [r0, #32]
 8003f0e:	b90b      	cbnz	r3, 8003f14 <__swsetup_r+0x14>
 8003f10:	f7ff fece 	bl	8003cb0 <__sinit>
 8003f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f18:	0719      	lsls	r1, r3, #28
 8003f1a:	d422      	bmi.n	8003f62 <__swsetup_r+0x62>
 8003f1c:	06da      	lsls	r2, r3, #27
 8003f1e:	d407      	bmi.n	8003f30 <__swsetup_r+0x30>
 8003f20:	2209      	movs	r2, #9
 8003f22:	602a      	str	r2, [r5, #0]
 8003f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2e:	e033      	b.n	8003f98 <__swsetup_r+0x98>
 8003f30:	0758      	lsls	r0, r3, #29
 8003f32:	d512      	bpl.n	8003f5a <__swsetup_r+0x5a>
 8003f34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f36:	b141      	cbz	r1, 8003f4a <__swsetup_r+0x4a>
 8003f38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	d002      	beq.n	8003f46 <__swsetup_r+0x46>
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f8af 	bl	80040a4 <_free_r>
 8003f46:	2300      	movs	r3, #0
 8003f48:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	2300      	movs	r3, #0
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	f043 0308 	orr.w	r3, r3, #8
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	b94b      	cbnz	r3, 8003f7a <__swsetup_r+0x7a>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f70:	d003      	beq.n	8003f7a <__swsetup_r+0x7a>
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 fd2f 	bl	80049d8 <__smakebuf_r>
 8003f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f7e:	f013 0201 	ands.w	r2, r3, #1
 8003f82:	d00a      	beq.n	8003f9a <__swsetup_r+0x9a>
 8003f84:	2200      	movs	r2, #0
 8003f86:	60a2      	str	r2, [r4, #8]
 8003f88:	6962      	ldr	r2, [r4, #20]
 8003f8a:	4252      	negs	r2, r2
 8003f8c:	61a2      	str	r2, [r4, #24]
 8003f8e:	6922      	ldr	r2, [r4, #16]
 8003f90:	b942      	cbnz	r2, 8003fa4 <__swsetup_r+0xa4>
 8003f92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f96:	d1c5      	bne.n	8003f24 <__swsetup_r+0x24>
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	0799      	lsls	r1, r3, #30
 8003f9c:	bf58      	it	pl
 8003f9e:	6962      	ldrpl	r2, [r4, #20]
 8003fa0:	60a2      	str	r2, [r4, #8]
 8003fa2:	e7f4      	b.n	8003f8e <__swsetup_r+0x8e>
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	e7f7      	b.n	8003f98 <__swsetup_r+0x98>
 8003fa8:	20000024 	.word	0x20000024

08003fac <memset>:
 8003fac:	4402      	add	r2, r0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <_close_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d06      	ldr	r5, [pc, #24]	@ (8003fd8 <_close_r+0x1c>)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fc fd77 	bl	8000aba <_close>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_close_r+0x1a>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_close_r+0x1a>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	200002e4 	.word	0x200002e4

08003fdc <_lseek_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4d07      	ldr	r5, [pc, #28]	@ (8003ffc <_lseek_r+0x20>)
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	4608      	mov	r0, r1
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	602a      	str	r2, [r5, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7fc fd8c 	bl	8000b08 <_lseek>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_lseek_r+0x1e>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_lseek_r+0x1e>
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	200002e4 	.word	0x200002e4

08004000 <_read_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4d07      	ldr	r5, [pc, #28]	@ (8004020 <_read_r+0x20>)
 8004004:	4604      	mov	r4, r0
 8004006:	4608      	mov	r0, r1
 8004008:	4611      	mov	r1, r2
 800400a:	2200      	movs	r2, #0
 800400c:	602a      	str	r2, [r5, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	f7fc fd1a 	bl	8000a48 <_read>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_read_r+0x1e>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_read_r+0x1e>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	200002e4 	.word	0x200002e4

08004024 <_write_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d07      	ldr	r5, [pc, #28]	@ (8004044 <_write_r+0x20>)
 8004028:	4604      	mov	r4, r0
 800402a:	4608      	mov	r0, r1
 800402c:	4611      	mov	r1, r2
 800402e:	2200      	movs	r2, #0
 8004030:	602a      	str	r2, [r5, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f7fc fd25 	bl	8000a82 <_write>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_write_r+0x1e>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_write_r+0x1e>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	200002e4 	.word	0x200002e4

08004048 <__errno>:
 8004048:	4b01      	ldr	r3, [pc, #4]	@ (8004050 <__errno+0x8>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000024 	.word	0x20000024

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4d0d      	ldr	r5, [pc, #52]	@ (800408c <__libc_init_array+0x38>)
 8004058:	4c0d      	ldr	r4, [pc, #52]	@ (8004090 <__libc_init_array+0x3c>)
 800405a:	1b64      	subs	r4, r4, r5
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	2600      	movs	r6, #0
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	4d0b      	ldr	r5, [pc, #44]	@ (8004094 <__libc_init_array+0x40>)
 8004066:	4c0c      	ldr	r4, [pc, #48]	@ (8004098 <__libc_init_array+0x44>)
 8004068:	f000 fd24 	bl	8004ab4 <_init>
 800406c:	1b64      	subs	r4, r4, r5
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	2600      	movs	r6, #0
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f855 3b04 	ldr.w	r3, [r5], #4
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f855 3b04 	ldr.w	r3, [r5], #4
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	08004b5c 	.word	0x08004b5c
 8004090:	08004b5c 	.word	0x08004b5c
 8004094:	08004b5c 	.word	0x08004b5c
 8004098:	08004b60 	.word	0x08004b60

0800409c <__retarget_lock_init_recursive>:
 800409c:	4770      	bx	lr

0800409e <__retarget_lock_acquire_recursive>:
 800409e:	4770      	bx	lr

080040a0 <__retarget_lock_release_recursive>:
 80040a0:	4770      	bx	lr
	...

080040a4 <_free_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d041      	beq.n	8004130 <_free_r+0x8c>
 80040ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b0:	1f0c      	subs	r4, r1, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfb8      	it	lt
 80040b6:	18e4      	addlt	r4, r4, r3
 80040b8:	f000 f8e0 	bl	800427c <__malloc_lock>
 80040bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004134 <_free_r+0x90>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	b933      	cbnz	r3, 80040d0 <_free_r+0x2c>
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	6014      	str	r4, [r2, #0]
 80040c6:	4628      	mov	r0, r5
 80040c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040cc:	f000 b8dc 	b.w	8004288 <__malloc_unlock>
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	d908      	bls.n	80040e6 <_free_r+0x42>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	1821      	adds	r1, r4, r0
 80040d8:	428b      	cmp	r3, r1
 80040da:	bf01      	itttt	eq
 80040dc:	6819      	ldreq	r1, [r3, #0]
 80040de:	685b      	ldreq	r3, [r3, #4]
 80040e0:	1809      	addeq	r1, r1, r0
 80040e2:	6021      	streq	r1, [r4, #0]
 80040e4:	e7ed      	b.n	80040c2 <_free_r+0x1e>
 80040e6:	461a      	mov	r2, r3
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b10b      	cbz	r3, 80040f0 <_free_r+0x4c>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d9fa      	bls.n	80040e6 <_free_r+0x42>
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	1850      	adds	r0, r2, r1
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d10b      	bne.n	8004110 <_free_r+0x6c>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	4401      	add	r1, r0
 80040fc:	1850      	adds	r0, r2, r1
 80040fe:	4283      	cmp	r3, r0
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	d1e0      	bne.n	80040c6 <_free_r+0x22>
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	6053      	str	r3, [r2, #4]
 800410a:	4408      	add	r0, r1
 800410c:	6010      	str	r0, [r2, #0]
 800410e:	e7da      	b.n	80040c6 <_free_r+0x22>
 8004110:	d902      	bls.n	8004118 <_free_r+0x74>
 8004112:	230c      	movs	r3, #12
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	e7d6      	b.n	80040c6 <_free_r+0x22>
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	1821      	adds	r1, r4, r0
 800411c:	428b      	cmp	r3, r1
 800411e:	bf04      	itt	eq
 8004120:	6819      	ldreq	r1, [r3, #0]
 8004122:	685b      	ldreq	r3, [r3, #4]
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	bf04      	itt	eq
 8004128:	1809      	addeq	r1, r1, r0
 800412a:	6021      	streq	r1, [r4, #0]
 800412c:	6054      	str	r4, [r2, #4]
 800412e:	e7ca      	b.n	80040c6 <_free_r+0x22>
 8004130:	bd38      	pop	{r3, r4, r5, pc}
 8004132:	bf00      	nop
 8004134:	200002f0 	.word	0x200002f0

08004138 <sbrk_aligned>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4e0f      	ldr	r6, [pc, #60]	@ (8004178 <sbrk_aligned+0x40>)
 800413c:	460c      	mov	r4, r1
 800413e:	6831      	ldr	r1, [r6, #0]
 8004140:	4605      	mov	r5, r0
 8004142:	b911      	cbnz	r1, 800414a <sbrk_aligned+0x12>
 8004144:	f000 fca6 	bl	8004a94 <_sbrk_r>
 8004148:	6030      	str	r0, [r6, #0]
 800414a:	4621      	mov	r1, r4
 800414c:	4628      	mov	r0, r5
 800414e:	f000 fca1 	bl	8004a94 <_sbrk_r>
 8004152:	1c43      	adds	r3, r0, #1
 8004154:	d103      	bne.n	800415e <sbrk_aligned+0x26>
 8004156:	f04f 34ff 	mov.w	r4, #4294967295
 800415a:	4620      	mov	r0, r4
 800415c:	bd70      	pop	{r4, r5, r6, pc}
 800415e:	1cc4      	adds	r4, r0, #3
 8004160:	f024 0403 	bic.w	r4, r4, #3
 8004164:	42a0      	cmp	r0, r4
 8004166:	d0f8      	beq.n	800415a <sbrk_aligned+0x22>
 8004168:	1a21      	subs	r1, r4, r0
 800416a:	4628      	mov	r0, r5
 800416c:	f000 fc92 	bl	8004a94 <_sbrk_r>
 8004170:	3001      	adds	r0, #1
 8004172:	d1f2      	bne.n	800415a <sbrk_aligned+0x22>
 8004174:	e7ef      	b.n	8004156 <sbrk_aligned+0x1e>
 8004176:	bf00      	nop
 8004178:	200002ec 	.word	0x200002ec

0800417c <_malloc_r>:
 800417c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004180:	1ccd      	adds	r5, r1, #3
 8004182:	f025 0503 	bic.w	r5, r5, #3
 8004186:	3508      	adds	r5, #8
 8004188:	2d0c      	cmp	r5, #12
 800418a:	bf38      	it	cc
 800418c:	250c      	movcc	r5, #12
 800418e:	2d00      	cmp	r5, #0
 8004190:	4606      	mov	r6, r0
 8004192:	db01      	blt.n	8004198 <_malloc_r+0x1c>
 8004194:	42a9      	cmp	r1, r5
 8004196:	d904      	bls.n	80041a2 <_malloc_r+0x26>
 8004198:	230c      	movs	r3, #12
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	2000      	movs	r0, #0
 800419e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004278 <_malloc_r+0xfc>
 80041a6:	f000 f869 	bl	800427c <__malloc_lock>
 80041aa:	f8d8 3000 	ldr.w	r3, [r8]
 80041ae:	461c      	mov	r4, r3
 80041b0:	bb44      	cbnz	r4, 8004204 <_malloc_r+0x88>
 80041b2:	4629      	mov	r1, r5
 80041b4:	4630      	mov	r0, r6
 80041b6:	f7ff ffbf 	bl	8004138 <sbrk_aligned>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	4604      	mov	r4, r0
 80041be:	d158      	bne.n	8004272 <_malloc_r+0xf6>
 80041c0:	f8d8 4000 	ldr.w	r4, [r8]
 80041c4:	4627      	mov	r7, r4
 80041c6:	2f00      	cmp	r7, #0
 80041c8:	d143      	bne.n	8004252 <_malloc_r+0xd6>
 80041ca:	2c00      	cmp	r4, #0
 80041cc:	d04b      	beq.n	8004266 <_malloc_r+0xea>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	4639      	mov	r1, r7
 80041d2:	4630      	mov	r0, r6
 80041d4:	eb04 0903 	add.w	r9, r4, r3
 80041d8:	f000 fc5c 	bl	8004a94 <_sbrk_r>
 80041dc:	4581      	cmp	r9, r0
 80041de:	d142      	bne.n	8004266 <_malloc_r+0xea>
 80041e0:	6821      	ldr	r1, [r4, #0]
 80041e2:	1a6d      	subs	r5, r5, r1
 80041e4:	4629      	mov	r1, r5
 80041e6:	4630      	mov	r0, r6
 80041e8:	f7ff ffa6 	bl	8004138 <sbrk_aligned>
 80041ec:	3001      	adds	r0, #1
 80041ee:	d03a      	beq.n	8004266 <_malloc_r+0xea>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	442b      	add	r3, r5
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	f8d8 3000 	ldr.w	r3, [r8]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	bb62      	cbnz	r2, 8004258 <_malloc_r+0xdc>
 80041fe:	f8c8 7000 	str.w	r7, [r8]
 8004202:	e00f      	b.n	8004224 <_malloc_r+0xa8>
 8004204:	6822      	ldr	r2, [r4, #0]
 8004206:	1b52      	subs	r2, r2, r5
 8004208:	d420      	bmi.n	800424c <_malloc_r+0xd0>
 800420a:	2a0b      	cmp	r2, #11
 800420c:	d917      	bls.n	800423e <_malloc_r+0xc2>
 800420e:	1961      	adds	r1, r4, r5
 8004210:	42a3      	cmp	r3, r4
 8004212:	6025      	str	r5, [r4, #0]
 8004214:	bf18      	it	ne
 8004216:	6059      	strne	r1, [r3, #4]
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	bf08      	it	eq
 800421c:	f8c8 1000 	streq.w	r1, [r8]
 8004220:	5162      	str	r2, [r4, r5]
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	4630      	mov	r0, r6
 8004226:	f000 f82f 	bl	8004288 <__malloc_unlock>
 800422a:	f104 000b 	add.w	r0, r4, #11
 800422e:	1d23      	adds	r3, r4, #4
 8004230:	f020 0007 	bic.w	r0, r0, #7
 8004234:	1ac2      	subs	r2, r0, r3
 8004236:	bf1c      	itt	ne
 8004238:	1a1b      	subne	r3, r3, r0
 800423a:	50a3      	strne	r3, [r4, r2]
 800423c:	e7af      	b.n	800419e <_malloc_r+0x22>
 800423e:	6862      	ldr	r2, [r4, #4]
 8004240:	42a3      	cmp	r3, r4
 8004242:	bf0c      	ite	eq
 8004244:	f8c8 2000 	streq.w	r2, [r8]
 8004248:	605a      	strne	r2, [r3, #4]
 800424a:	e7eb      	b.n	8004224 <_malloc_r+0xa8>
 800424c:	4623      	mov	r3, r4
 800424e:	6864      	ldr	r4, [r4, #4]
 8004250:	e7ae      	b.n	80041b0 <_malloc_r+0x34>
 8004252:	463c      	mov	r4, r7
 8004254:	687f      	ldr	r7, [r7, #4]
 8004256:	e7b6      	b.n	80041c6 <_malloc_r+0x4a>
 8004258:	461a      	mov	r2, r3
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	42a3      	cmp	r3, r4
 800425e:	d1fb      	bne.n	8004258 <_malloc_r+0xdc>
 8004260:	2300      	movs	r3, #0
 8004262:	6053      	str	r3, [r2, #4]
 8004264:	e7de      	b.n	8004224 <_malloc_r+0xa8>
 8004266:	230c      	movs	r3, #12
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	4630      	mov	r0, r6
 800426c:	f000 f80c 	bl	8004288 <__malloc_unlock>
 8004270:	e794      	b.n	800419c <_malloc_r+0x20>
 8004272:	6005      	str	r5, [r0, #0]
 8004274:	e7d6      	b.n	8004224 <_malloc_r+0xa8>
 8004276:	bf00      	nop
 8004278:	200002f0 	.word	0x200002f0

0800427c <__malloc_lock>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__malloc_lock+0x8>)
 800427e:	f7ff bf0e 	b.w	800409e <__retarget_lock_acquire_recursive>
 8004282:	bf00      	nop
 8004284:	200002e8 	.word	0x200002e8

08004288 <__malloc_unlock>:
 8004288:	4801      	ldr	r0, [pc, #4]	@ (8004290 <__malloc_unlock+0x8>)
 800428a:	f7ff bf09 	b.w	80040a0 <__retarget_lock_release_recursive>
 800428e:	bf00      	nop
 8004290:	200002e8 	.word	0x200002e8

08004294 <__sfputc_r>:
 8004294:	6893      	ldr	r3, [r2, #8]
 8004296:	3b01      	subs	r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	b410      	push	{r4}
 800429c:	6093      	str	r3, [r2, #8]
 800429e:	da08      	bge.n	80042b2 <__sfputc_r+0x1e>
 80042a0:	6994      	ldr	r4, [r2, #24]
 80042a2:	42a3      	cmp	r3, r4
 80042a4:	db01      	blt.n	80042aa <__sfputc_r+0x16>
 80042a6:	290a      	cmp	r1, #10
 80042a8:	d103      	bne.n	80042b2 <__sfputc_r+0x1e>
 80042aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ae:	f7ff bde8 	b.w	8003e82 <__swbuf_r>
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	1c58      	adds	r0, r3, #1
 80042b6:	6010      	str	r0, [r2, #0]
 80042b8:	7019      	strb	r1, [r3, #0]
 80042ba:	4608      	mov	r0, r1
 80042bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <__sfputs_r>:
 80042c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c4:	4606      	mov	r6, r0
 80042c6:	460f      	mov	r7, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	18d5      	adds	r5, r2, r3
 80042cc:	42ac      	cmp	r4, r5
 80042ce:	d101      	bne.n	80042d4 <__sfputs_r+0x12>
 80042d0:	2000      	movs	r0, #0
 80042d2:	e007      	b.n	80042e4 <__sfputs_r+0x22>
 80042d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d8:	463a      	mov	r2, r7
 80042da:	4630      	mov	r0, r6
 80042dc:	f7ff ffda 	bl	8004294 <__sfputc_r>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d1f3      	bne.n	80042cc <__sfputs_r+0xa>
 80042e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042e8 <_vfiprintf_r>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	460d      	mov	r5, r1
 80042ee:	b09d      	sub	sp, #116	@ 0x74
 80042f0:	4614      	mov	r4, r2
 80042f2:	4698      	mov	r8, r3
 80042f4:	4606      	mov	r6, r0
 80042f6:	b118      	cbz	r0, 8004300 <_vfiprintf_r+0x18>
 80042f8:	6a03      	ldr	r3, [r0, #32]
 80042fa:	b90b      	cbnz	r3, 8004300 <_vfiprintf_r+0x18>
 80042fc:	f7ff fcd8 	bl	8003cb0 <__sinit>
 8004300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004302:	07d9      	lsls	r1, r3, #31
 8004304:	d405      	bmi.n	8004312 <_vfiprintf_r+0x2a>
 8004306:	89ab      	ldrh	r3, [r5, #12]
 8004308:	059a      	lsls	r2, r3, #22
 800430a:	d402      	bmi.n	8004312 <_vfiprintf_r+0x2a>
 800430c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800430e:	f7ff fec6 	bl	800409e <__retarget_lock_acquire_recursive>
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	071b      	lsls	r3, r3, #28
 8004316:	d501      	bpl.n	800431c <_vfiprintf_r+0x34>
 8004318:	692b      	ldr	r3, [r5, #16]
 800431a:	b99b      	cbnz	r3, 8004344 <_vfiprintf_r+0x5c>
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f7ff fdee 	bl	8003f00 <__swsetup_r>
 8004324:	b170      	cbz	r0, 8004344 <_vfiprintf_r+0x5c>
 8004326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004328:	07dc      	lsls	r4, r3, #31
 800432a:	d504      	bpl.n	8004336 <_vfiprintf_r+0x4e>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	b01d      	add	sp, #116	@ 0x74
 8004332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004336:	89ab      	ldrh	r3, [r5, #12]
 8004338:	0598      	lsls	r0, r3, #22
 800433a:	d4f7      	bmi.n	800432c <_vfiprintf_r+0x44>
 800433c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800433e:	f7ff feaf 	bl	80040a0 <__retarget_lock_release_recursive>
 8004342:	e7f3      	b.n	800432c <_vfiprintf_r+0x44>
 8004344:	2300      	movs	r3, #0
 8004346:	9309      	str	r3, [sp, #36]	@ 0x24
 8004348:	2320      	movs	r3, #32
 800434a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800434e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004352:	2330      	movs	r3, #48	@ 0x30
 8004354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004504 <_vfiprintf_r+0x21c>
 8004358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800435c:	f04f 0901 	mov.w	r9, #1
 8004360:	4623      	mov	r3, r4
 8004362:	469a      	mov	sl, r3
 8004364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004368:	b10a      	cbz	r2, 800436e <_vfiprintf_r+0x86>
 800436a:	2a25      	cmp	r2, #37	@ 0x25
 800436c:	d1f9      	bne.n	8004362 <_vfiprintf_r+0x7a>
 800436e:	ebba 0b04 	subs.w	fp, sl, r4
 8004372:	d00b      	beq.n	800438c <_vfiprintf_r+0xa4>
 8004374:	465b      	mov	r3, fp
 8004376:	4622      	mov	r2, r4
 8004378:	4629      	mov	r1, r5
 800437a:	4630      	mov	r0, r6
 800437c:	f7ff ffa1 	bl	80042c2 <__sfputs_r>
 8004380:	3001      	adds	r0, #1
 8004382:	f000 80a7 	beq.w	80044d4 <_vfiprintf_r+0x1ec>
 8004386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004388:	445a      	add	r2, fp
 800438a:	9209      	str	r2, [sp, #36]	@ 0x24
 800438c:	f89a 3000 	ldrb.w	r3, [sl]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 809f 	beq.w	80044d4 <_vfiprintf_r+0x1ec>
 8004396:	2300      	movs	r3, #0
 8004398:	f04f 32ff 	mov.w	r2, #4294967295
 800439c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043a0:	f10a 0a01 	add.w	sl, sl, #1
 80043a4:	9304      	str	r3, [sp, #16]
 80043a6:	9307      	str	r3, [sp, #28]
 80043a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80043ae:	4654      	mov	r4, sl
 80043b0:	2205      	movs	r2, #5
 80043b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b6:	4853      	ldr	r0, [pc, #332]	@ (8004504 <_vfiprintf_r+0x21c>)
 80043b8:	f7fb ff32 	bl	8000220 <memchr>
 80043bc:	9a04      	ldr	r2, [sp, #16]
 80043be:	b9d8      	cbnz	r0, 80043f8 <_vfiprintf_r+0x110>
 80043c0:	06d1      	lsls	r1, r2, #27
 80043c2:	bf44      	itt	mi
 80043c4:	2320      	movmi	r3, #32
 80043c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043ca:	0713      	lsls	r3, r2, #28
 80043cc:	bf44      	itt	mi
 80043ce:	232b      	movmi	r3, #43	@ 0x2b
 80043d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043d4:	f89a 3000 	ldrb.w	r3, [sl]
 80043d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043da:	d015      	beq.n	8004408 <_vfiprintf_r+0x120>
 80043dc:	9a07      	ldr	r2, [sp, #28]
 80043de:	4654      	mov	r4, sl
 80043e0:	2000      	movs	r0, #0
 80043e2:	f04f 0c0a 	mov.w	ip, #10
 80043e6:	4621      	mov	r1, r4
 80043e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043ec:	3b30      	subs	r3, #48	@ 0x30
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d94b      	bls.n	800448a <_vfiprintf_r+0x1a2>
 80043f2:	b1b0      	cbz	r0, 8004422 <_vfiprintf_r+0x13a>
 80043f4:	9207      	str	r2, [sp, #28]
 80043f6:	e014      	b.n	8004422 <_vfiprintf_r+0x13a>
 80043f8:	eba0 0308 	sub.w	r3, r0, r8
 80043fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004400:	4313      	orrs	r3, r2
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	46a2      	mov	sl, r4
 8004406:	e7d2      	b.n	80043ae <_vfiprintf_r+0xc6>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	1d19      	adds	r1, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	9103      	str	r1, [sp, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	bfbb      	ittet	lt
 8004414:	425b      	neglt	r3, r3
 8004416:	f042 0202 	orrlt.w	r2, r2, #2
 800441a:	9307      	strge	r3, [sp, #28]
 800441c:	9307      	strlt	r3, [sp, #28]
 800441e:	bfb8      	it	lt
 8004420:	9204      	strlt	r2, [sp, #16]
 8004422:	7823      	ldrb	r3, [r4, #0]
 8004424:	2b2e      	cmp	r3, #46	@ 0x2e
 8004426:	d10a      	bne.n	800443e <_vfiprintf_r+0x156>
 8004428:	7863      	ldrb	r3, [r4, #1]
 800442a:	2b2a      	cmp	r3, #42	@ 0x2a
 800442c:	d132      	bne.n	8004494 <_vfiprintf_r+0x1ac>
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	9203      	str	r2, [sp, #12]
 8004436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800443a:	3402      	adds	r4, #2
 800443c:	9305      	str	r3, [sp, #20]
 800443e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004514 <_vfiprintf_r+0x22c>
 8004442:	7821      	ldrb	r1, [r4, #0]
 8004444:	2203      	movs	r2, #3
 8004446:	4650      	mov	r0, sl
 8004448:	f7fb feea 	bl	8000220 <memchr>
 800444c:	b138      	cbz	r0, 800445e <_vfiprintf_r+0x176>
 800444e:	9b04      	ldr	r3, [sp, #16]
 8004450:	eba0 000a 	sub.w	r0, r0, sl
 8004454:	2240      	movs	r2, #64	@ 0x40
 8004456:	4082      	lsls	r2, r0
 8004458:	4313      	orrs	r3, r2
 800445a:	3401      	adds	r4, #1
 800445c:	9304      	str	r3, [sp, #16]
 800445e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004462:	4829      	ldr	r0, [pc, #164]	@ (8004508 <_vfiprintf_r+0x220>)
 8004464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004468:	2206      	movs	r2, #6
 800446a:	f7fb fed9 	bl	8000220 <memchr>
 800446e:	2800      	cmp	r0, #0
 8004470:	d03f      	beq.n	80044f2 <_vfiprintf_r+0x20a>
 8004472:	4b26      	ldr	r3, [pc, #152]	@ (800450c <_vfiprintf_r+0x224>)
 8004474:	bb1b      	cbnz	r3, 80044be <_vfiprintf_r+0x1d6>
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	3307      	adds	r3, #7
 800447a:	f023 0307 	bic.w	r3, r3, #7
 800447e:	3308      	adds	r3, #8
 8004480:	9303      	str	r3, [sp, #12]
 8004482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004484:	443b      	add	r3, r7
 8004486:	9309      	str	r3, [sp, #36]	@ 0x24
 8004488:	e76a      	b.n	8004360 <_vfiprintf_r+0x78>
 800448a:	fb0c 3202 	mla	r2, ip, r2, r3
 800448e:	460c      	mov	r4, r1
 8004490:	2001      	movs	r0, #1
 8004492:	e7a8      	b.n	80043e6 <_vfiprintf_r+0xfe>
 8004494:	2300      	movs	r3, #0
 8004496:	3401      	adds	r4, #1
 8004498:	9305      	str	r3, [sp, #20]
 800449a:	4619      	mov	r1, r3
 800449c:	f04f 0c0a 	mov.w	ip, #10
 80044a0:	4620      	mov	r0, r4
 80044a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044a6:	3a30      	subs	r2, #48	@ 0x30
 80044a8:	2a09      	cmp	r2, #9
 80044aa:	d903      	bls.n	80044b4 <_vfiprintf_r+0x1cc>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0c6      	beq.n	800443e <_vfiprintf_r+0x156>
 80044b0:	9105      	str	r1, [sp, #20]
 80044b2:	e7c4      	b.n	800443e <_vfiprintf_r+0x156>
 80044b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044b8:	4604      	mov	r4, r0
 80044ba:	2301      	movs	r3, #1
 80044bc:	e7f0      	b.n	80044a0 <_vfiprintf_r+0x1b8>
 80044be:	ab03      	add	r3, sp, #12
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	462a      	mov	r2, r5
 80044c4:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <_vfiprintf_r+0x228>)
 80044c6:	a904      	add	r1, sp, #16
 80044c8:	4630      	mov	r0, r6
 80044ca:	f3af 8000 	nop.w
 80044ce:	4607      	mov	r7, r0
 80044d0:	1c78      	adds	r0, r7, #1
 80044d2:	d1d6      	bne.n	8004482 <_vfiprintf_r+0x19a>
 80044d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044d6:	07d9      	lsls	r1, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_vfiprintf_r+0x1fe>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	059a      	lsls	r2, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_vfiprintf_r+0x1fe>
 80044e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044e2:	f7ff fddd 	bl	80040a0 <__retarget_lock_release_recursive>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	065b      	lsls	r3, r3, #25
 80044ea:	f53f af1f 	bmi.w	800432c <_vfiprintf_r+0x44>
 80044ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044f0:	e71e      	b.n	8004330 <_vfiprintf_r+0x48>
 80044f2:	ab03      	add	r3, sp, #12
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	462a      	mov	r2, r5
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <_vfiprintf_r+0x228>)
 80044fa:	a904      	add	r1, sp, #16
 80044fc:	4630      	mov	r0, r6
 80044fe:	f000 f879 	bl	80045f4 <_printf_i>
 8004502:	e7e4      	b.n	80044ce <_vfiprintf_r+0x1e6>
 8004504:	08004b20 	.word	0x08004b20
 8004508:	08004b2a 	.word	0x08004b2a
 800450c:	00000000 	.word	0x00000000
 8004510:	080042c3 	.word	0x080042c3
 8004514:	08004b26 	.word	0x08004b26

08004518 <_printf_common>:
 8004518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	4616      	mov	r6, r2
 800451e:	4698      	mov	r8, r3
 8004520:	688a      	ldr	r2, [r1, #8]
 8004522:	690b      	ldr	r3, [r1, #16]
 8004524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004528:	4293      	cmp	r3, r2
 800452a:	bfb8      	it	lt
 800452c:	4613      	movlt	r3, r2
 800452e:	6033      	str	r3, [r6, #0]
 8004530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004534:	4607      	mov	r7, r0
 8004536:	460c      	mov	r4, r1
 8004538:	b10a      	cbz	r2, 800453e <_printf_common+0x26>
 800453a:	3301      	adds	r3, #1
 800453c:	6033      	str	r3, [r6, #0]
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	0699      	lsls	r1, r3, #26
 8004542:	bf42      	ittt	mi
 8004544:	6833      	ldrmi	r3, [r6, #0]
 8004546:	3302      	addmi	r3, #2
 8004548:	6033      	strmi	r3, [r6, #0]
 800454a:	6825      	ldr	r5, [r4, #0]
 800454c:	f015 0506 	ands.w	r5, r5, #6
 8004550:	d106      	bne.n	8004560 <_printf_common+0x48>
 8004552:	f104 0a19 	add.w	sl, r4, #25
 8004556:	68e3      	ldr	r3, [r4, #12]
 8004558:	6832      	ldr	r2, [r6, #0]
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	42ab      	cmp	r3, r5
 800455e:	dc26      	bgt.n	80045ae <_printf_common+0x96>
 8004560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	3b00      	subs	r3, #0
 8004568:	bf18      	it	ne
 800456a:	2301      	movne	r3, #1
 800456c:	0692      	lsls	r2, r2, #26
 800456e:	d42b      	bmi.n	80045c8 <_printf_common+0xb0>
 8004570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004574:	4641      	mov	r1, r8
 8004576:	4638      	mov	r0, r7
 8004578:	47c8      	blx	r9
 800457a:	3001      	adds	r0, #1
 800457c:	d01e      	beq.n	80045bc <_printf_common+0xa4>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	6922      	ldr	r2, [r4, #16]
 8004582:	f003 0306 	and.w	r3, r3, #6
 8004586:	2b04      	cmp	r3, #4
 8004588:	bf02      	ittt	eq
 800458a:	68e5      	ldreq	r5, [r4, #12]
 800458c:	6833      	ldreq	r3, [r6, #0]
 800458e:	1aed      	subeq	r5, r5, r3
 8004590:	68a3      	ldr	r3, [r4, #8]
 8004592:	bf0c      	ite	eq
 8004594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004598:	2500      	movne	r5, #0
 800459a:	4293      	cmp	r3, r2
 800459c:	bfc4      	itt	gt
 800459e:	1a9b      	subgt	r3, r3, r2
 80045a0:	18ed      	addgt	r5, r5, r3
 80045a2:	2600      	movs	r6, #0
 80045a4:	341a      	adds	r4, #26
 80045a6:	42b5      	cmp	r5, r6
 80045a8:	d11a      	bne.n	80045e0 <_printf_common+0xc8>
 80045aa:	2000      	movs	r0, #0
 80045ac:	e008      	b.n	80045c0 <_printf_common+0xa8>
 80045ae:	2301      	movs	r3, #1
 80045b0:	4652      	mov	r2, sl
 80045b2:	4641      	mov	r1, r8
 80045b4:	4638      	mov	r0, r7
 80045b6:	47c8      	blx	r9
 80045b8:	3001      	adds	r0, #1
 80045ba:	d103      	bne.n	80045c4 <_printf_common+0xac>
 80045bc:	f04f 30ff 	mov.w	r0, #4294967295
 80045c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c4:	3501      	adds	r5, #1
 80045c6:	e7c6      	b.n	8004556 <_printf_common+0x3e>
 80045c8:	18e1      	adds	r1, r4, r3
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	2030      	movs	r0, #48	@ 0x30
 80045ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045d2:	4422      	add	r2, r4
 80045d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045dc:	3302      	adds	r3, #2
 80045de:	e7c7      	b.n	8004570 <_printf_common+0x58>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4622      	mov	r2, r4
 80045e4:	4641      	mov	r1, r8
 80045e6:	4638      	mov	r0, r7
 80045e8:	47c8      	blx	r9
 80045ea:	3001      	adds	r0, #1
 80045ec:	d0e6      	beq.n	80045bc <_printf_common+0xa4>
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7d9      	b.n	80045a6 <_printf_common+0x8e>
	...

080045f4 <_printf_i>:
 80045f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f8:	7e0f      	ldrb	r7, [r1, #24]
 80045fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045fc:	2f78      	cmp	r7, #120	@ 0x78
 80045fe:	4691      	mov	r9, r2
 8004600:	4680      	mov	r8, r0
 8004602:	460c      	mov	r4, r1
 8004604:	469a      	mov	sl, r3
 8004606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800460a:	d807      	bhi.n	800461c <_printf_i+0x28>
 800460c:	2f62      	cmp	r7, #98	@ 0x62
 800460e:	d80a      	bhi.n	8004626 <_printf_i+0x32>
 8004610:	2f00      	cmp	r7, #0
 8004612:	f000 80d2 	beq.w	80047ba <_printf_i+0x1c6>
 8004616:	2f58      	cmp	r7, #88	@ 0x58
 8004618:	f000 80b9 	beq.w	800478e <_printf_i+0x19a>
 800461c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004624:	e03a      	b.n	800469c <_printf_i+0xa8>
 8004626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800462a:	2b15      	cmp	r3, #21
 800462c:	d8f6      	bhi.n	800461c <_printf_i+0x28>
 800462e:	a101      	add	r1, pc, #4	@ (adr r1, 8004634 <_printf_i+0x40>)
 8004630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004634:	0800468d 	.word	0x0800468d
 8004638:	080046a1 	.word	0x080046a1
 800463c:	0800461d 	.word	0x0800461d
 8004640:	0800461d 	.word	0x0800461d
 8004644:	0800461d 	.word	0x0800461d
 8004648:	0800461d 	.word	0x0800461d
 800464c:	080046a1 	.word	0x080046a1
 8004650:	0800461d 	.word	0x0800461d
 8004654:	0800461d 	.word	0x0800461d
 8004658:	0800461d 	.word	0x0800461d
 800465c:	0800461d 	.word	0x0800461d
 8004660:	080047a1 	.word	0x080047a1
 8004664:	080046cb 	.word	0x080046cb
 8004668:	0800475b 	.word	0x0800475b
 800466c:	0800461d 	.word	0x0800461d
 8004670:	0800461d 	.word	0x0800461d
 8004674:	080047c3 	.word	0x080047c3
 8004678:	0800461d 	.word	0x0800461d
 800467c:	080046cb 	.word	0x080046cb
 8004680:	0800461d 	.word	0x0800461d
 8004684:	0800461d 	.word	0x0800461d
 8004688:	08004763 	.word	0x08004763
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	1d1a      	adds	r2, r3, #4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6032      	str	r2, [r6, #0]
 8004694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800469c:	2301      	movs	r3, #1
 800469e:	e09d      	b.n	80047dc <_printf_i+0x1e8>
 80046a0:	6833      	ldr	r3, [r6, #0]
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	1d19      	adds	r1, r3, #4
 80046a6:	6031      	str	r1, [r6, #0]
 80046a8:	0606      	lsls	r6, r0, #24
 80046aa:	d501      	bpl.n	80046b0 <_printf_i+0xbc>
 80046ac:	681d      	ldr	r5, [r3, #0]
 80046ae:	e003      	b.n	80046b8 <_printf_i+0xc4>
 80046b0:	0645      	lsls	r5, r0, #25
 80046b2:	d5fb      	bpl.n	80046ac <_printf_i+0xb8>
 80046b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046b8:	2d00      	cmp	r5, #0
 80046ba:	da03      	bge.n	80046c4 <_printf_i+0xd0>
 80046bc:	232d      	movs	r3, #45	@ 0x2d
 80046be:	426d      	negs	r5, r5
 80046c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c4:	4859      	ldr	r0, [pc, #356]	@ (800482c <_printf_i+0x238>)
 80046c6:	230a      	movs	r3, #10
 80046c8:	e011      	b.n	80046ee <_printf_i+0xfa>
 80046ca:	6821      	ldr	r1, [r4, #0]
 80046cc:	6833      	ldr	r3, [r6, #0]
 80046ce:	0608      	lsls	r0, r1, #24
 80046d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046d4:	d402      	bmi.n	80046dc <_printf_i+0xe8>
 80046d6:	0649      	lsls	r1, r1, #25
 80046d8:	bf48      	it	mi
 80046da:	b2ad      	uxthmi	r5, r5
 80046dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80046de:	4853      	ldr	r0, [pc, #332]	@ (800482c <_printf_i+0x238>)
 80046e0:	6033      	str	r3, [r6, #0]
 80046e2:	bf14      	ite	ne
 80046e4:	230a      	movne	r3, #10
 80046e6:	2308      	moveq	r3, #8
 80046e8:	2100      	movs	r1, #0
 80046ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046ee:	6866      	ldr	r6, [r4, #4]
 80046f0:	60a6      	str	r6, [r4, #8]
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	bfa2      	ittt	ge
 80046f6:	6821      	ldrge	r1, [r4, #0]
 80046f8:	f021 0104 	bicge.w	r1, r1, #4
 80046fc:	6021      	strge	r1, [r4, #0]
 80046fe:	b90d      	cbnz	r5, 8004704 <_printf_i+0x110>
 8004700:	2e00      	cmp	r6, #0
 8004702:	d04b      	beq.n	800479c <_printf_i+0x1a8>
 8004704:	4616      	mov	r6, r2
 8004706:	fbb5 f1f3 	udiv	r1, r5, r3
 800470a:	fb03 5711 	mls	r7, r3, r1, r5
 800470e:	5dc7      	ldrb	r7, [r0, r7]
 8004710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004714:	462f      	mov	r7, r5
 8004716:	42bb      	cmp	r3, r7
 8004718:	460d      	mov	r5, r1
 800471a:	d9f4      	bls.n	8004706 <_printf_i+0x112>
 800471c:	2b08      	cmp	r3, #8
 800471e:	d10b      	bne.n	8004738 <_printf_i+0x144>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	07df      	lsls	r7, r3, #31
 8004724:	d508      	bpl.n	8004738 <_printf_i+0x144>
 8004726:	6923      	ldr	r3, [r4, #16]
 8004728:	6861      	ldr	r1, [r4, #4]
 800472a:	4299      	cmp	r1, r3
 800472c:	bfde      	ittt	le
 800472e:	2330      	movle	r3, #48	@ 0x30
 8004730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004738:	1b92      	subs	r2, r2, r6
 800473a:	6122      	str	r2, [r4, #16]
 800473c:	f8cd a000 	str.w	sl, [sp]
 8004740:	464b      	mov	r3, r9
 8004742:	aa03      	add	r2, sp, #12
 8004744:	4621      	mov	r1, r4
 8004746:	4640      	mov	r0, r8
 8004748:	f7ff fee6 	bl	8004518 <_printf_common>
 800474c:	3001      	adds	r0, #1
 800474e:	d14a      	bne.n	80047e6 <_printf_i+0x1f2>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	b004      	add	sp, #16
 8004756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f043 0320 	orr.w	r3, r3, #32
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	4833      	ldr	r0, [pc, #204]	@ (8004830 <_printf_i+0x23c>)
 8004764:	2778      	movs	r7, #120	@ 0x78
 8004766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6831      	ldr	r1, [r6, #0]
 800476e:	061f      	lsls	r7, r3, #24
 8004770:	f851 5b04 	ldr.w	r5, [r1], #4
 8004774:	d402      	bmi.n	800477c <_printf_i+0x188>
 8004776:	065f      	lsls	r7, r3, #25
 8004778:	bf48      	it	mi
 800477a:	b2ad      	uxthmi	r5, r5
 800477c:	6031      	str	r1, [r6, #0]
 800477e:	07d9      	lsls	r1, r3, #31
 8004780:	bf44      	itt	mi
 8004782:	f043 0320 	orrmi.w	r3, r3, #32
 8004786:	6023      	strmi	r3, [r4, #0]
 8004788:	b11d      	cbz	r5, 8004792 <_printf_i+0x19e>
 800478a:	2310      	movs	r3, #16
 800478c:	e7ac      	b.n	80046e8 <_printf_i+0xf4>
 800478e:	4827      	ldr	r0, [pc, #156]	@ (800482c <_printf_i+0x238>)
 8004790:	e7e9      	b.n	8004766 <_printf_i+0x172>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f023 0320 	bic.w	r3, r3, #32
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	e7f6      	b.n	800478a <_printf_i+0x196>
 800479c:	4616      	mov	r6, r2
 800479e:	e7bd      	b.n	800471c <_printf_i+0x128>
 80047a0:	6833      	ldr	r3, [r6, #0]
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	6961      	ldr	r1, [r4, #20]
 80047a6:	1d18      	adds	r0, r3, #4
 80047a8:	6030      	str	r0, [r6, #0]
 80047aa:	062e      	lsls	r6, r5, #24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0x1c0>
 80047b0:	6019      	str	r1, [r3, #0]
 80047b2:	e002      	b.n	80047ba <_printf_i+0x1c6>
 80047b4:	0668      	lsls	r0, r5, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0x1bc>
 80047b8:	8019      	strh	r1, [r3, #0]
 80047ba:	2300      	movs	r3, #0
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	4616      	mov	r6, r2
 80047c0:	e7bc      	b.n	800473c <_printf_i+0x148>
 80047c2:	6833      	ldr	r3, [r6, #0]
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	6032      	str	r2, [r6, #0]
 80047c8:	681e      	ldr	r6, [r3, #0]
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	2100      	movs	r1, #0
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7fb fd26 	bl	8000220 <memchr>
 80047d4:	b108      	cbz	r0, 80047da <_printf_i+0x1e6>
 80047d6:	1b80      	subs	r0, r0, r6
 80047d8:	6060      	str	r0, [r4, #4]
 80047da:	6863      	ldr	r3, [r4, #4]
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	2300      	movs	r3, #0
 80047e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e4:	e7aa      	b.n	800473c <_printf_i+0x148>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	4632      	mov	r2, r6
 80047ea:	4649      	mov	r1, r9
 80047ec:	4640      	mov	r0, r8
 80047ee:	47d0      	blx	sl
 80047f0:	3001      	adds	r0, #1
 80047f2:	d0ad      	beq.n	8004750 <_printf_i+0x15c>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	079b      	lsls	r3, r3, #30
 80047f8:	d413      	bmi.n	8004822 <_printf_i+0x22e>
 80047fa:	68e0      	ldr	r0, [r4, #12]
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	4298      	cmp	r0, r3
 8004800:	bfb8      	it	lt
 8004802:	4618      	movlt	r0, r3
 8004804:	e7a6      	b.n	8004754 <_printf_i+0x160>
 8004806:	2301      	movs	r3, #1
 8004808:	4632      	mov	r2, r6
 800480a:	4649      	mov	r1, r9
 800480c:	4640      	mov	r0, r8
 800480e:	47d0      	blx	sl
 8004810:	3001      	adds	r0, #1
 8004812:	d09d      	beq.n	8004750 <_printf_i+0x15c>
 8004814:	3501      	adds	r5, #1
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	9903      	ldr	r1, [sp, #12]
 800481a:	1a5b      	subs	r3, r3, r1
 800481c:	42ab      	cmp	r3, r5
 800481e:	dcf2      	bgt.n	8004806 <_printf_i+0x212>
 8004820:	e7eb      	b.n	80047fa <_printf_i+0x206>
 8004822:	2500      	movs	r5, #0
 8004824:	f104 0619 	add.w	r6, r4, #25
 8004828:	e7f5      	b.n	8004816 <_printf_i+0x222>
 800482a:	bf00      	nop
 800482c:	08004b31 	.word	0x08004b31
 8004830:	08004b42 	.word	0x08004b42

08004834 <__sflush_r>:
 8004834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800483c:	0716      	lsls	r6, r2, #28
 800483e:	4605      	mov	r5, r0
 8004840:	460c      	mov	r4, r1
 8004842:	d454      	bmi.n	80048ee <__sflush_r+0xba>
 8004844:	684b      	ldr	r3, [r1, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	dc02      	bgt.n	8004850 <__sflush_r+0x1c>
 800484a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	dd48      	ble.n	80048e2 <__sflush_r+0xae>
 8004850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004852:	2e00      	cmp	r6, #0
 8004854:	d045      	beq.n	80048e2 <__sflush_r+0xae>
 8004856:	2300      	movs	r3, #0
 8004858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800485c:	682f      	ldr	r7, [r5, #0]
 800485e:	6a21      	ldr	r1, [r4, #32]
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	d030      	beq.n	80048c6 <__sflush_r+0x92>
 8004864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	0759      	lsls	r1, r3, #29
 800486a:	d505      	bpl.n	8004878 <__sflush_r+0x44>
 800486c:	6863      	ldr	r3, [r4, #4]
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004872:	b10b      	cbz	r3, 8004878 <__sflush_r+0x44>
 8004874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	2300      	movs	r3, #0
 800487a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800487c:	6a21      	ldr	r1, [r4, #32]
 800487e:	4628      	mov	r0, r5
 8004880:	47b0      	blx	r6
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	d106      	bne.n	8004896 <__sflush_r+0x62>
 8004888:	6829      	ldr	r1, [r5, #0]
 800488a:	291d      	cmp	r1, #29
 800488c:	d82b      	bhi.n	80048e6 <__sflush_r+0xb2>
 800488e:	4a2a      	ldr	r2, [pc, #168]	@ (8004938 <__sflush_r+0x104>)
 8004890:	410a      	asrs	r2, r1
 8004892:	07d6      	lsls	r6, r2, #31
 8004894:	d427      	bmi.n	80048e6 <__sflush_r+0xb2>
 8004896:	2200      	movs	r2, #0
 8004898:	6062      	str	r2, [r4, #4]
 800489a:	04d9      	lsls	r1, r3, #19
 800489c:	6922      	ldr	r2, [r4, #16]
 800489e:	6022      	str	r2, [r4, #0]
 80048a0:	d504      	bpl.n	80048ac <__sflush_r+0x78>
 80048a2:	1c42      	adds	r2, r0, #1
 80048a4:	d101      	bne.n	80048aa <__sflush_r+0x76>
 80048a6:	682b      	ldr	r3, [r5, #0]
 80048a8:	b903      	cbnz	r3, 80048ac <__sflush_r+0x78>
 80048aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80048ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048ae:	602f      	str	r7, [r5, #0]
 80048b0:	b1b9      	cbz	r1, 80048e2 <__sflush_r+0xae>
 80048b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048b6:	4299      	cmp	r1, r3
 80048b8:	d002      	beq.n	80048c0 <__sflush_r+0x8c>
 80048ba:	4628      	mov	r0, r5
 80048bc:	f7ff fbf2 	bl	80040a4 <_free_r>
 80048c0:	2300      	movs	r3, #0
 80048c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80048c4:	e00d      	b.n	80048e2 <__sflush_r+0xae>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b0      	blx	r6
 80048cc:	4602      	mov	r2, r0
 80048ce:	1c50      	adds	r0, r2, #1
 80048d0:	d1c9      	bne.n	8004866 <__sflush_r+0x32>
 80048d2:	682b      	ldr	r3, [r5, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0c6      	beq.n	8004866 <__sflush_r+0x32>
 80048d8:	2b1d      	cmp	r3, #29
 80048da:	d001      	beq.n	80048e0 <__sflush_r+0xac>
 80048dc:	2b16      	cmp	r3, #22
 80048de:	d11e      	bne.n	800491e <__sflush_r+0xea>
 80048e0:	602f      	str	r7, [r5, #0]
 80048e2:	2000      	movs	r0, #0
 80048e4:	e022      	b.n	800492c <__sflush_r+0xf8>
 80048e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ea:	b21b      	sxth	r3, r3
 80048ec:	e01b      	b.n	8004926 <__sflush_r+0xf2>
 80048ee:	690f      	ldr	r7, [r1, #16]
 80048f0:	2f00      	cmp	r7, #0
 80048f2:	d0f6      	beq.n	80048e2 <__sflush_r+0xae>
 80048f4:	0793      	lsls	r3, r2, #30
 80048f6:	680e      	ldr	r6, [r1, #0]
 80048f8:	bf08      	it	eq
 80048fa:	694b      	ldreq	r3, [r1, #20]
 80048fc:	600f      	str	r7, [r1, #0]
 80048fe:	bf18      	it	ne
 8004900:	2300      	movne	r3, #0
 8004902:	eba6 0807 	sub.w	r8, r6, r7
 8004906:	608b      	str	r3, [r1, #8]
 8004908:	f1b8 0f00 	cmp.w	r8, #0
 800490c:	dde9      	ble.n	80048e2 <__sflush_r+0xae>
 800490e:	6a21      	ldr	r1, [r4, #32]
 8004910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004912:	4643      	mov	r3, r8
 8004914:	463a      	mov	r2, r7
 8004916:	4628      	mov	r0, r5
 8004918:	47b0      	blx	r6
 800491a:	2800      	cmp	r0, #0
 800491c:	dc08      	bgt.n	8004930 <__sflush_r+0xfc>
 800491e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004930:	4407      	add	r7, r0
 8004932:	eba8 0800 	sub.w	r8, r8, r0
 8004936:	e7e7      	b.n	8004908 <__sflush_r+0xd4>
 8004938:	dfbffffe 	.word	0xdfbffffe

0800493c <_fflush_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	690b      	ldr	r3, [r1, #16]
 8004940:	4605      	mov	r5, r0
 8004942:	460c      	mov	r4, r1
 8004944:	b913      	cbnz	r3, 800494c <_fflush_r+0x10>
 8004946:	2500      	movs	r5, #0
 8004948:	4628      	mov	r0, r5
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	b118      	cbz	r0, 8004956 <_fflush_r+0x1a>
 800494e:	6a03      	ldr	r3, [r0, #32]
 8004950:	b90b      	cbnz	r3, 8004956 <_fflush_r+0x1a>
 8004952:	f7ff f9ad 	bl	8003cb0 <__sinit>
 8004956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f3      	beq.n	8004946 <_fflush_r+0xa>
 800495e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004960:	07d0      	lsls	r0, r2, #31
 8004962:	d404      	bmi.n	800496e <_fflush_r+0x32>
 8004964:	0599      	lsls	r1, r3, #22
 8004966:	d402      	bmi.n	800496e <_fflush_r+0x32>
 8004968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800496a:	f7ff fb98 	bl	800409e <__retarget_lock_acquire_recursive>
 800496e:	4628      	mov	r0, r5
 8004970:	4621      	mov	r1, r4
 8004972:	f7ff ff5f 	bl	8004834 <__sflush_r>
 8004976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004978:	07da      	lsls	r2, r3, #31
 800497a:	4605      	mov	r5, r0
 800497c:	d4e4      	bmi.n	8004948 <_fflush_r+0xc>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	059b      	lsls	r3, r3, #22
 8004982:	d4e1      	bmi.n	8004948 <_fflush_r+0xc>
 8004984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004986:	f7ff fb8b 	bl	80040a0 <__retarget_lock_release_recursive>
 800498a:	e7dd      	b.n	8004948 <_fflush_r+0xc>

0800498c <__swhatbuf_r>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	460c      	mov	r4, r1
 8004990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004994:	2900      	cmp	r1, #0
 8004996:	b096      	sub	sp, #88	@ 0x58
 8004998:	4615      	mov	r5, r2
 800499a:	461e      	mov	r6, r3
 800499c:	da0d      	bge.n	80049ba <__swhatbuf_r+0x2e>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049a4:	f04f 0100 	mov.w	r1, #0
 80049a8:	bf14      	ite	ne
 80049aa:	2340      	movne	r3, #64	@ 0x40
 80049ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80049b0:	2000      	movs	r0, #0
 80049b2:	6031      	str	r1, [r6, #0]
 80049b4:	602b      	str	r3, [r5, #0]
 80049b6:	b016      	add	sp, #88	@ 0x58
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	466a      	mov	r2, sp
 80049bc:	f000 f848 	bl	8004a50 <_fstat_r>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	dbec      	blt.n	800499e <__swhatbuf_r+0x12>
 80049c4:	9901      	ldr	r1, [sp, #4]
 80049c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80049ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80049ce:	4259      	negs	r1, r3
 80049d0:	4159      	adcs	r1, r3
 80049d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049d6:	e7eb      	b.n	80049b0 <__swhatbuf_r+0x24>

080049d8 <__smakebuf_r>:
 80049d8:	898b      	ldrh	r3, [r1, #12]
 80049da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049dc:	079d      	lsls	r5, r3, #30
 80049de:	4606      	mov	r6, r0
 80049e0:	460c      	mov	r4, r1
 80049e2:	d507      	bpl.n	80049f4 <__smakebuf_r+0x1c>
 80049e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	6123      	str	r3, [r4, #16]
 80049ec:	2301      	movs	r3, #1
 80049ee:	6163      	str	r3, [r4, #20]
 80049f0:	b003      	add	sp, #12
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f4:	ab01      	add	r3, sp, #4
 80049f6:	466a      	mov	r2, sp
 80049f8:	f7ff ffc8 	bl	800498c <__swhatbuf_r>
 80049fc:	9f00      	ldr	r7, [sp, #0]
 80049fe:	4605      	mov	r5, r0
 8004a00:	4639      	mov	r1, r7
 8004a02:	4630      	mov	r0, r6
 8004a04:	f7ff fbba 	bl	800417c <_malloc_r>
 8004a08:	b948      	cbnz	r0, 8004a1e <__smakebuf_r+0x46>
 8004a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0e:	059a      	lsls	r2, r3, #22
 8004a10:	d4ee      	bmi.n	80049f0 <__smakebuf_r+0x18>
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	e7e2      	b.n	80049e4 <__smakebuf_r+0xc>
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	6020      	str	r0, [r4, #0]
 8004a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	9b01      	ldr	r3, [sp, #4]
 8004a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a2e:	b15b      	cbz	r3, 8004a48 <__smakebuf_r+0x70>
 8004a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 f81d 	bl	8004a74 <_isatty_r>
 8004a3a:	b128      	cbz	r0, 8004a48 <__smakebuf_r+0x70>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	431d      	orrs	r5, r3
 8004a4c:	81a5      	strh	r5, [r4, #12]
 8004a4e:	e7cf      	b.n	80049f0 <__smakebuf_r+0x18>

08004a50 <_fstat_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4d07      	ldr	r5, [pc, #28]	@ (8004a70 <_fstat_r+0x20>)
 8004a54:	2300      	movs	r3, #0
 8004a56:	4604      	mov	r4, r0
 8004a58:	4608      	mov	r0, r1
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	602b      	str	r3, [r5, #0]
 8004a5e:	f7fc f838 	bl	8000ad2 <_fstat>
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	d102      	bne.n	8004a6c <_fstat_r+0x1c>
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	b103      	cbz	r3, 8004a6c <_fstat_r+0x1c>
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	bd38      	pop	{r3, r4, r5, pc}
 8004a6e:	bf00      	nop
 8004a70:	200002e4 	.word	0x200002e4

08004a74 <_isatty_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d06      	ldr	r5, [pc, #24]	@ (8004a90 <_isatty_r+0x1c>)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	f7fc f837 	bl	8000af2 <_isatty>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d102      	bne.n	8004a8e <_isatty_r+0x1a>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	b103      	cbz	r3, 8004a8e <_isatty_r+0x1a>
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	200002e4 	.word	0x200002e4

08004a94 <_sbrk_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4d06      	ldr	r5, [pc, #24]	@ (8004ab0 <_sbrk_r+0x1c>)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	f7fc f840 	bl	8000b24 <_sbrk>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_sbrk_r+0x1a>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_sbrk_r+0x1a>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	200002e4 	.word	0x200002e4

08004ab4 <_init>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr

08004ac0 <_fini>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr
