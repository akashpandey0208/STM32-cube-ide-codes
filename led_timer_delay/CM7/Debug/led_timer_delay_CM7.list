
led_timer_delay_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a74  08002a74  00003a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002a84  08002a84  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a84  08002a84  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a84  08002a84  00003a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a88  08002a88  00003a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08002a8c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  24000010  08002a9c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400007c  08002a9c  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbf7  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5c  00000000  00000000  00011c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00013898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a4  00000000  00000000  00014520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e4b3  00000000  00000000  00014ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3e0  00000000  00000000  00053377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198697  00000000  00000000  00061757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f9dee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000344c  00000000  00000000  001f9e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001fd280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002a5c 	.word	0x08002a5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002a5c 	.word	0x08002a5c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800040a:	4b57      	ldr	r3, [pc, #348]	@ (8000568 <main+0x164>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000412:	2b00      	cmp	r3, #0
 8000414:	d11b      	bne.n	800044e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000416:	f3bf 8f4f 	dsb	sy
}
 800041a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800041c:	f3bf 8f6f 	isb	sy
}
 8000420:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000422:	4b51      	ldr	r3, [pc, #324]	@ (8000568 <main+0x164>)
 8000424:	2200      	movs	r2, #0
 8000426:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800042a:	f3bf 8f4f 	dsb	sy
}
 800042e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000430:	f3bf 8f6f 	isb	sy
}
 8000434:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000436:	4b4c      	ldr	r3, [pc, #304]	@ (8000568 <main+0x164>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a4b      	ldr	r2, [pc, #300]	@ (8000568 <main+0x164>)
 800043c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800044e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000450:	4b45      	ldr	r3, [pc, #276]	@ (8000568 <main+0x164>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000458:	2b00      	cmp	r3, #0
 800045a:	d138      	bne.n	80004ce <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800045c:	4b42      	ldr	r3, [pc, #264]	@ (8000568 <main+0x164>)
 800045e:	2200      	movs	r2, #0
 8000460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000464:	f3bf 8f4f 	dsb	sy
}
 8000468:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800046a:	4b3f      	ldr	r3, [pc, #252]	@ (8000568 <main+0x164>)
 800046c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000470:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	0b5b      	lsrs	r3, r3, #13
 8000476:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800047a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000484:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	015a      	lsls	r2, r3, #5
 800048a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800048e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000490:	68ba      	ldr	r2, [r7, #8]
 8000492:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000494:	4934      	ldr	r1, [pc, #208]	@ (8000568 <main+0x164>)
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1ef      	bne.n	8000486 <main+0x82>
    } while(sets-- != 0U);
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	1e5a      	subs	r2, r3, #1
 80004aa:	60fa      	str	r2, [r7, #12]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1e5      	bne.n	800047c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80004b0:	f3bf 8f4f 	dsb	sy
}
 80004b4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000568 <main+0x164>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000568 <main+0x164>)
 80004bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004c2:	f3bf 8f4f 	dsb	sy
}
 80004c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004c8:	f3bf 8f6f 	isb	sy
}
 80004cc:	e000      	b.n	80004d0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004ce:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d4:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004d6:	bf00      	nop
 80004d8:	4b24      	ldr	r3, [pc, #144]	@ (800056c <main+0x168>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d004      	beq.n	80004ee <main+0xea>
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	1e5a      	subs	r2, r3, #1
 80004e8:	617a      	str	r2, [r7, #20]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dcf4      	bgt.n	80004d8 <main+0xd4>
  if ( timeout < 0 )
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	da01      	bge.n	80004f8 <main+0xf4>
  {
  Error_Handler();
 80004f4:	f000 f950 	bl	8000798 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f9f8 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f83a 	bl	8000574 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000500:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <main+0x168>)
 8000502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000506:	4a19      	ldr	r2, [pc, #100]	@ (800056c <main+0x168>)
 8000508:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800050c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000510:	4b16      	ldr	r3, [pc, #88]	@ (800056c <main+0x168>)
 8000512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fd76 	bl	8001010 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000524:	2100      	movs	r1, #0
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fd8c 	bl	8001044 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800052c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000530:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000532:	bf00      	nop
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <main+0x168>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800053c:	2b00      	cmp	r3, #0
 800053e:	d104      	bne.n	800054a <main+0x146>
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	1e5a      	subs	r2, r3, #1
 8000544:	617a      	str	r2, [r7, #20]
 8000546:	2b00      	cmp	r3, #0
 8000548:	dcf4      	bgt.n	8000534 <main+0x130>
if ( timeout < 0 )
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	2b00      	cmp	r3, #0
 800054e:	da01      	bge.n	8000554 <main+0x150>
{
Error_Handler();
 8000550:	f000 f922 	bl	8000798 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f8d6 	bl	8000704 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000558:	f000 f886 	bl	8000668 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <main+0x16c>)
 800055e:	f001 fdc1 	bl	80020e4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	bf00      	nop
 8000564:	e7fd      	b.n	8000562 <main+0x15e>
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00
 800056c:	58024400 	.word	0x58024400
 8000570:	2400002c 	.word	0x2400002c

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b09c      	sub	sp, #112	@ 0x70
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800057e:	224c      	movs	r2, #76	@ 0x4c
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fa3e 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2220      	movs	r2, #32
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fa38 	bl	8002a04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000594:	2004      	movs	r0, #4
 8000596:	f000 fd69 	bl	800106c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	4b30      	ldr	r3, [pc, #192]	@ (8000660 <SystemClock_Config+0xec>)
 80005a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000660 <SystemClock_Config+0xec>)
 80005a4:	f023 0301 	bic.w	r3, r3, #1
 80005a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <SystemClock_Config+0xec>)
 80005ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000664 <SystemClock_Config+0xf0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a2a      	ldr	r2, [pc, #168]	@ (8000664 <SystemClock_Config+0xf0>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <SystemClock_Config+0xf0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005cc:	bf00      	nop
 80005ce:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <SystemClock_Config+0xf0>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005da:	d1f8      	bne.n	80005ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ee:	2305      	movs	r3, #5
 80005f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005f2:	23a0      	movs	r3, #160	@ 0xa0
 80005f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000602:	2308      	movs	r3, #8
 8000604:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000606:	2300      	movs	r3, #0
 8000608:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fd84 	bl	8001120 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061e:	f000 f8bb 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	233f      	movs	r3, #63	@ 0x3f
 8000624:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800062e:	2308      	movs	r3, #8
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000632:	2340      	movs	r3, #64	@ 0x40
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000636:	2340      	movs	r3, #64	@ 0x40
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800063a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000640:	2340      	movs	r3, #64	@ 0x40
 8000642:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f9c3 	bl	80019d4 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000654:	f000 f8a0 	bl	8000798 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3770      	adds	r7, #112	@ 0x70
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	58000400 	.word	0x58000400
 8000664:	58024800 	.word	0x58024800

08000668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_TIM2_Init+0x98>)
 8000688:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800068c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_TIM2_Init+0x98>)
 8000690:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_TIM2_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800069c:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_TIM2_Init+0x98>)
 800069e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_TIM2_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_TIM2_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <MX_TIM2_Init+0x98>)
 80006b2:	f001 fcbf 	bl	8002034 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80006bc:	f000 f86c 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <MX_TIM2_Init+0x98>)
 80006ce:	f001 fe89 	bl	80023e4 <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80006d8:	f000 f85e 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_TIM2_Init+0x98>)
 80006ea:	f002 f8df 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 f850 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2400002c 	.word	0x2400002c

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_GPIO_Init+0x64>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <MX_GPIO_Init+0x64>)
 8000720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x64>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800073c:	480b      	ldr	r0, [pc, #44]	@ (800076c <MX_GPIO_Init+0x68>)
 800073e:	f000 fc33 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_GPIO_Init+0x68>)
 800075a:	f000 fa75 	bl	8000c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	58024400 	.word	0x58024400
 800076c:	58022000 	.word	0x58022000

08000770 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	    {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	  	  if (htim->Instance == TIM2)  // Check if the interrupt is from TIM2
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000780:	d104      	bne.n	800078c <HAL_TIM_PeriodElapsedCallback+0x1c>
	  	      {
	  	          HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);  // Toggle the LED
 8000782:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000786:	4803      	ldr	r0, [pc, #12]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000788:	f000 fc27 	bl	8000fda <HAL_GPIO_TogglePin>


	  	      }
	    }
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	58022000 	.word	0x58022000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_MspInit+0x30>)
 80007ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007b0:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <HAL_MspInit+0x30>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_MspInit+0x30>)
 80007bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007c0:	f003 0302 	and.w	r3, r3, #2
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	58024400 	.word	0x58024400

080007d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007e8:	d116      	bne.n	8000818 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	201c      	movs	r0, #28
 800080e:	f000 f9e6 	bl	8000bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000812:	201c      	movs	r0, #28
 8000814:	f000 f9fd 	bl	8000c12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	58024400 	.word	0x58024400

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <MemManage_Handler+0x4>

0800083c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 f8a9 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <TIM2_IRQHandler+0x10>)
 800088a:	f001 fca3 	bl	80021d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2400002c 	.word	0x2400002c

08000898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800089c:	f7ff fd1c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	@ (80008e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f002 f8a5 	bl	8002a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ca:	f7ff fd9b 	bl	8000404 <main>
  bx  lr
 80008ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008dc:	08002a8c 	.word	0x08002a8c
  ldr r2, =_sbss
 80008e0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008e4:	2400007c 	.word	0x2400007c

080008e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC3_IRQHandler>
	...

080008ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 f968 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008f8:	f001 fa22 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80008fc:	4602      	mov	r2, r0
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_Init+0x68>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	f003 030f 	and.w	r3, r3, #15
 8000908:	4913      	ldr	r1, [pc, #76]	@ (8000958 <HAL_Init+0x6c>)
 800090a:	5ccb      	ldrb	r3, [r1, r3]
 800090c:	f003 031f 	and.w	r3, r3, #31
 8000910:	fa22 f303 	lsr.w	r3, r2, r3
 8000914:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <HAL_Init+0x68>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 030f 	and.w	r3, r3, #15
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_Init+0x6c>)
 8000920:	5cd3      	ldrb	r3, [r2, r3]
 8000922:	f003 031f 	and.w	r3, r3, #31
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	fa22 f303 	lsr.w	r3, r2, r3
 800092c:	4a0b      	ldr	r2, [pc, #44]	@ (800095c <HAL_Init+0x70>)
 800092e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000930:	4a0b      	ldr	r2, [pc, #44]	@ (8000960 <HAL_Init+0x74>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000936:	2000      	movs	r0, #0
 8000938:	f000 f814 	bl	8000964 <HAL_InitTick>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e002      	b.n	800094c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000946:	f7ff ff2d 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024400 	.word	0x58024400
 8000958:	08002a74 	.word	0x08002a74
 800095c:	24000004 	.word	0x24000004
 8000960:	24000000 	.word	0x24000000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_InitTick+0x60>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e021      	b.n	80009bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_InitTick+0x64>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <HAL_InitTick+0x60>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f94d 	bl	8000c2e <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f917 	bl	8000bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <HAL_InitTick+0x68>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2400000c 	.word	0x2400000c
 80009c8:	24000000 	.word	0x24000000
 80009cc:	24000008 	.word	0x24000008

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2400000c 	.word	0x2400000c
 80009f4:	24000078 	.word	0x24000078

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	24000078 	.word	0x24000078

08000a10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_GetREVID+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	0c1b      	lsrs	r3, r3, #16
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	5c001000 	.word	0x5c001000

08000a28 <__NVIC_SetPriorityGrouping>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x40>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x40>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	05fa0000 	.word	0x05fa0000

08000a70 <__NVIC_GetPriorityGrouping>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_EnableIRQ>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4907      	ldr	r1, [pc, #28]	@ (8000ac4 <__NVIC_EnableIRQ+0x38>)
 8000aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <__NVIC_SetPriority>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	@ (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	@ 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	@ 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff8e 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff29 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff40 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff90 	bl	8000b1c <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5f 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff33 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffa4 	bl	8000b84 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c56:	4b89      	ldr	r3, [pc, #548]	@ (8000e7c <HAL_GPIO_Init+0x234>)
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c5a:	e194      	b.n	8000f86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8186 	beq.w	8000f80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x44>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d017      	beq.n	8000d2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	69b9      	ldr	r1, [r7, #24]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0203 	and.w	r2, r3, #3
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80e0 	beq.w	8000f80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e80 <HAL_GPIO_Init+0x238>)
 8000dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8000e80 <HAL_GPIO_Init+0x238>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e80 <HAL_GPIO_Init+0x238>)
 8000dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dde:	4a29      	ldr	r2, [pc, #164]	@ (8000e84 <HAL_GPIO_Init+0x23c>)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <HAL_GPIO_Init+0x240>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d052      	beq.n	8000eb0 <HAL_GPIO_Init+0x268>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e8c <HAL_GPIO_Init+0x244>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d031      	beq.n	8000e76 <HAL_GPIO_Init+0x22e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a1e      	ldr	r2, [pc, #120]	@ (8000e90 <HAL_GPIO_Init+0x248>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d02b      	beq.n	8000e72 <HAL_GPIO_Init+0x22a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e94 <HAL_GPIO_Init+0x24c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d025      	beq.n	8000e6e <HAL_GPIO_Init+0x226>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <HAL_GPIO_Init+0x250>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01f      	beq.n	8000e6a <HAL_GPIO_Init+0x222>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e9c <HAL_GPIO_Init+0x254>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0x21e>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea0 <HAL_GPIO_Init+0x258>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x21a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <HAL_GPIO_Init+0x25c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x216>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a18      	ldr	r2, [pc, #96]	@ (8000ea8 <HAL_GPIO_Init+0x260>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_GPIO_Init+0x264>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x20e>
 8000e52:	2309      	movs	r3, #9
 8000e54:	e02d      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e56:	230a      	movs	r3, #10
 8000e58:	e02b      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	e029      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e5e:	2307      	movs	r3, #7
 8000e60:	e027      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e62:	2306      	movs	r3, #6
 8000e64:	e025      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e66:	2305      	movs	r3, #5
 8000e68:	e023      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e021      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e01f      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e01d      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e01b      	b.n	8000eb2 <HAL_GPIO_Init+0x26a>
 8000e7a:	bf00      	nop
 8000e7c:	58000080 	.word	0x58000080
 8000e80:	58024400 	.word	0x58024400
 8000e84:	58000400 	.word	0x58000400
 8000e88:	58020000 	.word	0x58020000
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	58020800 	.word	0x58020800
 8000e94:	58020c00 	.word	0x58020c00
 8000e98:	58021000 	.word	0x58021000
 8000e9c:	58021400 	.word	0x58021400
 8000ea0:	58021800 	.word	0x58021800
 8000ea4:	58021c00 	.word	0x58021c00
 8000ea8:	58022000 	.word	0x58022000
 8000eac:	58022400 	.word	0x58022400
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	f002 0203 	and.w	r2, r2, #3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec2:	4938      	ldr	r1, [pc, #224]	@ (8000fa4 <HAL_GPIO_Init+0x35c>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	3301      	adds	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f47f ae63 	bne.w	8000c5c <HAL_GPIO_Init+0x14>
  }
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	3724      	adds	r7, #36	@ 0x24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	58000400 	.word	0x58000400

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb8:	787b      	ldrb	r3, [r7, #1]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fc4:	e003      	b.n	8000fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	041a      	lsls	r2, r3, #16
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001018:	4a08      	ldr	r2, [pc, #32]	@ (800103c <HAL_HSEM_FastTake+0x2c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3320      	adds	r3, #32
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	4a07      	ldr	r2, [pc, #28]	@ (8001040 <HAL_HSEM_FastTake+0x30>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	e000      	b.n	800102e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	58026400 	.word	0x58026400
 8001040:	80000300 	.word	0x80000300

08001044 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800104e:	4906      	ldr	r1, [pc, #24]	@ (8001068 <HAL_HSEM_Release+0x24>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	58026400 	.word	0x58026400

0800106c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <HAL_PWREx_ConfigSupply+0xb0>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	2b06      	cmp	r3, #6
 800107e:	d00a      	beq.n	8001096 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <HAL_PWREx_ConfigSupply+0xb0>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d001      	beq.n	8001092 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e040      	b.n	8001114 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e03e      	b.n	8001114 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_PWREx_ConfigSupply+0xb0>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800109e:	491f      	ldr	r1, [pc, #124]	@ (800111c <HAL_PWREx_ConfigSupply+0xb0>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010a6:	f7ff fca7 	bl	80009f8 <HAL_GetTick>
 80010aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010ac:	e009      	b.n	80010c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010ae:	f7ff fca3 	bl	80009f8 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010bc:	d901      	bls.n	80010c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e028      	b.n	8001114 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_PWREx_ConfigSupply+0xb0>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010ce:	d1ee      	bne.n	80010ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b1e      	cmp	r3, #30
 80010d4:	d008      	beq.n	80010e8 <HAL_PWREx_ConfigSupply+0x7c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80010da:	d005      	beq.n	80010e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b1d      	cmp	r3, #29
 80010e0:	d002      	beq.n	80010e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80010e6:	d114      	bne.n	8001112 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010e8:	f7ff fc86 	bl	80009f8 <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010ee:	e009      	b.n	8001104 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010f0:	f7ff fc82 	bl	80009f8 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010fe:	d901      	bls.n	8001104 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e007      	b.n	8001114 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <HAL_PWREx_ConfigSupply+0xb0>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001110:	d1ee      	bne.n	80010f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	58024800 	.word	0x58024800

08001120 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	f000 bc48 	b.w	80019c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 8088 	beq.w	8001252 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001142:	4b99      	ldr	r3, [pc, #612]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800114c:	4b96      	ldr	r3, [pc, #600]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 800114e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001154:	2b10      	cmp	r3, #16
 8001156:	d007      	beq.n	8001168 <HAL_RCC_OscConfig+0x48>
 8001158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115a:	2b18      	cmp	r3, #24
 800115c:	d111      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
 800115e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b8f      	ldr	r3, [pc, #572]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d06d      	beq.n	8001250 <HAL_RCC_OscConfig+0x130>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d169      	bne.n	8001250 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	f000 bc21 	b.w	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x7a>
 800118c:	4b86      	ldr	r3, [pc, #536]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a85      	ldr	r2, [pc, #532]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e02e      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x9c>
 80011a2:	4b81      	ldr	r3, [pc, #516]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a80      	ldr	r2, [pc, #512]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b7e      	ldr	r3, [pc, #504]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a7d      	ldr	r2, [pc, #500]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0xc0>
 80011c6:	4b78      	ldr	r3, [pc, #480]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a77      	ldr	r2, [pc, #476]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b75      	ldr	r3, [pc, #468]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a74      	ldr	r2, [pc, #464]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xd8>
 80011e0:	4b71      	ldr	r3, [pc, #452]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a70      	ldr	r2, [pc, #448]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b6e      	ldr	r3, [pc, #440]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a6d      	ldr	r2, [pc, #436]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fbfa 	bl	80009f8 <HAL_GetTick>
 8001204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fbf6 	bl	80009f8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	@ 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e3d4      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800121a:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xe8>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fbe6 	bl	80009f8 <HAL_GetTick>
 800122c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fbe2 	bl	80009f8 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e3c0      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001242:	4b59      	ldr	r3, [pc, #356]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x110>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80ca 	beq.w	80013f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001260:	4b51      	ldr	r3, [pc, #324]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001268:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800126a:	4b4f      	ldr	r3, [pc, #316]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 800126c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <HAL_RCC_OscConfig+0x166>
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b18      	cmp	r3, #24
 800127a:	d156      	bne.n	800132a <HAL_RCC_OscConfig+0x20a>
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d151      	bne.n	800132a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001286:	4b48      	ldr	r3, [pc, #288]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x17e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e392      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800129e:	4b42      	ldr	r3, [pc, #264]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 0219 	bic.w	r2, r3, #25
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	493f      	ldr	r1, [pc, #252]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fba2 	bl	80009f8 <HAL_GetTick>
 80012b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b8:	f7ff fb9e 	bl	80009f8 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e37c      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ca:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	f7ff fb9b 	bl	8000a10 <HAL_GetREVID>
 80012da:	4603      	mov	r3, r0
 80012dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d817      	bhi.n	8001314 <HAL_RCC_OscConfig+0x1f4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b40      	cmp	r3, #64	@ 0x40
 80012ea:	d108      	bne.n	80012fe <HAL_RCC_OscConfig+0x1de>
 80012ec:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012f4:	4a2c      	ldr	r2, [pc, #176]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80012f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012fc:	e07a      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	031b      	lsls	r3, r3, #12
 800130c:	4926      	ldr	r1, [pc, #152]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001312:	e06f      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	061b      	lsls	r3, r3, #24
 8001322:	4921      	ldr	r1, [pc, #132]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001328:	e064      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d047      	beq.n	80013c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0219 	bic.w	r2, r3, #25
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	491a      	ldr	r1, [pc, #104]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fb58 	bl	80009f8 <HAL_GetTick>
 8001348:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fb54 	bl	80009f8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e332      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800135e:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	f7ff fb51 	bl	8000a10 <HAL_GetREVID>
 800136e:	4603      	mov	r3, r0
 8001370:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001374:	4293      	cmp	r3, r2
 8001376:	d819      	bhi.n	80013ac <HAL_RCC_OscConfig+0x28c>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b40      	cmp	r3, #64	@ 0x40
 800137e:	d108      	bne.n	8001392 <HAL_RCC_OscConfig+0x272>
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 800138a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800138e:	6053      	str	r3, [r2, #4]
 8001390:	e030      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
 8001392:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	031b      	lsls	r3, r3, #12
 80013a0:	4901      	ldr	r1, [pc, #4]	@ (80013a8 <HAL_RCC_OscConfig+0x288>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
 80013a6:	e025      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
 80013a8:	58024400 	.word	0x58024400
 80013ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	4997      	ldr	r1, [pc, #604]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b95      	ldr	r3, [pc, #596]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a94      	ldr	r2, [pc, #592]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fb13 	bl	80009f8 <HAL_GetTick>
 80013d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fb0f 	bl	80009f8 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e2ed      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e8:	4b8b      	ldr	r3, [pc, #556]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a9 	beq.w	8001554 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001402:	4b85      	ldr	r3, [pc, #532]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800140a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800140c:	4b82      	ldr	r3, [pc, #520]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001410:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b08      	cmp	r3, #8
 8001416:	d007      	beq.n	8001428 <HAL_RCC_OscConfig+0x308>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b18      	cmp	r3, #24
 800141c:	d13a      	bne.n	8001494 <HAL_RCC_OscConfig+0x374>
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d135      	bne.n	8001494 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001428:	4b7b      	ldr	r3, [pc, #492]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x320>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b80      	cmp	r3, #128	@ 0x80
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e2c1      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001440:	f7ff fae6 	bl	8000a10 <HAL_GetREVID>
 8001444:	4603      	mov	r3, r0
 8001446:	f241 0203 	movw	r2, #4099	@ 0x1003
 800144a:	4293      	cmp	r3, r2
 800144c:	d817      	bhi.n	800147e <HAL_RCC_OscConfig+0x35e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	2b20      	cmp	r3, #32
 8001454:	d108      	bne.n	8001468 <HAL_RCC_OscConfig+0x348>
 8001456:	4b70      	ldr	r3, [pc, #448]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800145e:	4a6e      	ldr	r2, [pc, #440]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001460:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001464:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001466:	e075      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001468:	4b6b      	ldr	r3, [pc, #428]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	069b      	lsls	r3, r3, #26
 8001476:	4968      	ldr	r1, [pc, #416]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800147c:	e06a      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800147e:	4b66      	ldr	r3, [pc, #408]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	061b      	lsls	r3, r3, #24
 800148c:	4962      	ldr	r1, [pc, #392]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800148e:	4313      	orrs	r3, r2
 8001490:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001492:	e05f      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d042      	beq.n	8001522 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800149c:	4b5e      	ldr	r3, [pc, #376]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff faa6 	bl	80009f8 <HAL_GetTick>
 80014ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014b0:	f7ff faa2 	bl	80009f8 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e280      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014c2:	4b55      	ldr	r3, [pc, #340]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ce:	f7ff fa9f 	bl	8000a10 <HAL_GetREVID>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014d8:	4293      	cmp	r3, r2
 80014da:	d817      	bhi.n	800150c <HAL_RCC_OscConfig+0x3ec>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	2b20      	cmp	r3, #32
 80014e2:	d108      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3d6>
 80014e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014f2:	6053      	str	r3, [r2, #4]
 80014f4:	e02e      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
 80014f6:	4b48      	ldr	r3, [pc, #288]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	069b      	lsls	r3, r3, #26
 8001504:	4944      	ldr	r1, [pc, #272]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
 800150a:	e023      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
 800150c:	4b42      	ldr	r3, [pc, #264]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	493f      	ldr	r1, [pc, #252]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	4313      	orrs	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001522:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a3c      	ldr	r2, [pc, #240]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fa63 	bl	80009f8 <HAL_GetTick>
 8001532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001536:	f7ff fa5f 	bl	80009f8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e23d      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001548:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d036      	beq.n	80015ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d019      	beq.n	800159c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001568:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800156a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800156c:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fa40 	bl	80009f8 <HAL_GetTick>
 8001578:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fa3c 	bl	80009f8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e21a      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800158e:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x45c>
 800159a:	e018      	b.n	80015ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff fa26 	bl	80009f8 <HAL_GetTick>
 80015ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff fa22 	bl	80009f8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e200      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d039      	beq.n	800164e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01c      	beq.n	800161c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fa03 	bl	80009f8 <HAL_GetTick>
 80015f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f6:	f7ff f9ff 	bl	80009f8 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1dd      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001608:	4b03      	ldr	r3, [pc, #12]	@ (8001618 <HAL_RCC_OscConfig+0x4f8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x4d6>
 8001614:	e01b      	b.n	800164e <HAL_RCC_OscConfig+0x52e>
 8001616:	bf00      	nop
 8001618:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800161c:	4b9b      	ldr	r3, [pc, #620]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a9a      	ldr	r2, [pc, #616]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001626:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001628:	f7ff f9e6 	bl	80009f8 <HAL_GetTick>
 800162c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001630:	f7ff f9e2 	bl	80009f8 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e1c0      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001642:	4b92      	ldr	r3, [pc, #584]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8081 	beq.w	800175e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800165c:	4b8c      	ldr	r3, [pc, #560]	@ (8001890 <HAL_RCC_OscConfig+0x770>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a8b      	ldr	r2, [pc, #556]	@ (8001890 <HAL_RCC_OscConfig+0x770>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001668:	f7ff f9c6 	bl	80009f8 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff f9c2 	bl	80009f8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	@ 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1a0      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001682:	4b83      	ldr	r3, [pc, #524]	@ (8001890 <HAL_RCC_OscConfig+0x770>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x584>
 8001696:	4b7d      	ldr	r3, [pc, #500]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169a:	4a7c      	ldr	r2, [pc, #496]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a2:	e02d      	b.n	8001700 <HAL_RCC_OscConfig+0x5e0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x5a6>
 80016ac:	4b77      	ldr	r3, [pc, #476]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b0:	4a76      	ldr	r2, [pc, #472]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b8:	4b74      	ldr	r3, [pc, #464]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	4a73      	ldr	r2, [pc, #460]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x5e0>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c8>
 80016ce:	4b6f      	ldr	r3, [pc, #444]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	4a6e      	ldr	r2, [pc, #440]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016da:	4b6c      	ldr	r3, [pc, #432]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016de:	4a6b      	ldr	r2, [pc, #428]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x5e0>
 80016e8:	4b68      	ldr	r3, [pc, #416]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ec:	4a67      	ldr	r2, [pc, #412]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f4:	4b65      	ldr	r3, [pc, #404]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f8:	4a64      	ldr	r2, [pc, #400]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d015      	beq.n	8001734 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff f976 	bl	80009f8 <HAL_GetTick>
 800170c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff f972 	bl	80009f8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e14e      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001726:	4b59      	ldr	r3, [pc, #356]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0ee      	beq.n	8001710 <HAL_RCC_OscConfig+0x5f0>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff f960 	bl	80009f8 <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff f95c 	bl	80009f8 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e138      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001752:	4b4e      	ldr	r3, [pc, #312]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ee      	bne.n	800173c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 812d 	beq.w	80019c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001768:	4b48      	ldr	r3, [pc, #288]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001770:	2b18      	cmp	r3, #24
 8001772:	f000 80bd 	beq.w	80018f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	2b02      	cmp	r3, #2
 800177c:	f040 809e 	bne.w	80018bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b42      	ldr	r3, [pc, #264]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a41      	ldr	r2, [pc, #260]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff f934 	bl	80009f8 <HAL_GetTick>
 8001790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f930 	bl	80009f8 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e10e      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017a6:	4b39      	ldr	r3, [pc, #228]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b2:	4b36      	ldr	r3, [pc, #216]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b6:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <HAL_RCC_OscConfig+0x774>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	430a      	orrs	r2, r1
 80017c6:	4931      	ldr	r1, [pc, #196]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d0:	3b01      	subs	r3, #1
 80017d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017da:	3b01      	subs	r3, #1
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	b29b      	uxth	r3, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e6:	3b01      	subs	r3, #1
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f4:	3b01      	subs	r3, #1
 80017f6:	061b      	lsls	r3, r3, #24
 80017f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80017fc:	4923      	ldr	r1, [pc, #140]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	4a21      	ldr	r2, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800180e:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <HAL_RCC_OscConfig+0x778>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800181a:	00d2      	lsls	r2, r2, #3
 800181c:	491b      	ldr	r1, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 800181e:	4313      	orrs	r3, r2
 8001820:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	f023 020c 	bic.w	r2, r3, #12
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4917      	ldr	r1, [pc, #92]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	f023 0202 	bic.w	r2, r3, #2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001840:	4912      	ldr	r1, [pc, #72]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	4a10      	ldr	r2, [pc, #64]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001856:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800185c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 800186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186e:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a04      	ldr	r2, [pc, #16]	@ (800188c <HAL_RCC_OscConfig+0x76c>)
 800187c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f8b9 	bl	80009f8 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001888:	e011      	b.n	80018ae <HAL_RCC_OscConfig+0x78e>
 800188a:	bf00      	nop
 800188c:	58024400 	.word	0x58024400
 8001890:	58024800 	.word	0x58024800
 8001894:	fffffc0c 	.word	0xfffffc0c
 8001898:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f8ac 	bl	80009f8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e08a      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ae:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x77c>
 80018ba:	e082      	b.n	80019c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018bc:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a42      	ldr	r2, [pc, #264]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f896 	bl	80009f8 <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f892 	bl	80009f8 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e070      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018e2:	4b3a      	ldr	r3, [pc, #232]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x7b0>
 80018ee:	e068      	b.n	80019c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80018f0:	4b36      	ldr	r3, [pc, #216]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	2b01      	cmp	r3, #1
 8001902:	d031      	beq.n	8001968 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0203 	and.w	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d12a      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d122      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d11a      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0a5b      	lsrs	r3, r3, #9
 8001936:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800193e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d111      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	0c1b      	lsrs	r3, r3, #16
 8001948:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001950:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d108      	bne.n	8001968 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	0e1b      	lsrs	r3, r3, #24
 800195a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001962:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e02b      	b.n	80019c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 800196e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001976:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d01f      	beq.n	80019c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001982:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	4a11      	ldr	r2, [pc, #68]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800198e:	f7ff f833 	bl	80009f8 <HAL_GetTick>
 8001992:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001994:	bf00      	nop
 8001996:	f7ff f82f 	bl	80009f8 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	4293      	cmp	r3, r2
 80019a0:	d0f9      	beq.n	8001996 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_RCC_OscConfig+0x8b0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ae:	00d2      	lsls	r2, r2, #3
 80019b0:	4906      	ldr	r1, [pc, #24]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_RCC_OscConfig+0x8ac>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3730      	adds	r7, #48	@ 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400
 80019d0:	ffff0007 	.word	0xffff0007

080019d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e19c      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b8a      	ldr	r3, [pc, #552]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b87      	ldr	r3, [pc, #540]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	4985      	ldr	r1, [pc, #532]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b83      	ldr	r3, [pc, #524]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e184      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	4b7b      	ldr	r3, [pc, #492]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d908      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a34:	4b78      	ldr	r3, [pc, #480]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	4975      	ldr	r1, [pc, #468]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	4b70      	ldr	r3, [pc, #448]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a62:	4b6d      	ldr	r3, [pc, #436]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	496a      	ldr	r1, [pc, #424]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	4b64      	ldr	r3, [pc, #400]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a90:	4b61      	ldr	r3, [pc, #388]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	495e      	ldr	r1, [pc, #376]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001abe:	4b56      	ldr	r3, [pc, #344]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4953      	ldr	r1, [pc, #332]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d908      	bls.n	8001afe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b4a      	ldr	r3, [pc, #296]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f023 020f 	bic.w	r2, r3, #15
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4947      	ldr	r1, [pc, #284]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d055      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b0a:	4b43      	ldr	r3, [pc, #268]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4940      	ldr	r1, [pc, #256]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b24:	4b3c      	ldr	r3, [pc, #240]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d121      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0f6      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3c:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d115      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0ea      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0de      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b64:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d6      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b74:	4b28      	ldr	r3, [pc, #160]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f023 0207 	bic.w	r2, r3, #7
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4925      	ldr	r1, [pc, #148]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b86:	f7fe ff37 	bl	80009f8 <HAL_GetTick>
 8001b8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8e:	f7fe ff33 	bl	80009f8 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0be      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d1eb      	bne.n	8001b8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d208      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f023 020f 	bic.w	r2, r3, #15
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	490e      	ldr	r1, [pc, #56]	@ (8001c18 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d214      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 020f 	bic.w	r2, r3, #15
 8001bfa:	4906      	ldr	r1, [pc, #24]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <HAL_RCC_ClockConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e086      	b.n	8001d22 <HAL_RCC_ClockConfig+0x34e>
 8001c14:	52002000 	.word	0x52002000
 8001c18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d208      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4939      	ldr	r1, [pc, #228]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d208      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	492e      	ldr	r1, [pc, #184]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d208      	bcs.n	8001ca6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4922      	ldr	r1, [pc, #136]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d208      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4917      	ldr	r1, [pc, #92]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cd4:	f000 f834 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	4912      	ldr	r1, [pc, #72]	@ (8001d30 <HAL_RCC_ClockConfig+0x35c>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_RCC_ClockConfig+0x358>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <HAL_RCC_ClockConfig+0x35c>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_RCC_ClockConfig+0x360>)
 8001d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <HAL_RCC_ClockConfig+0x364>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_RCC_ClockConfig+0x368>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fe24 	bl	8000964 <HAL_InitTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	08002a74 	.word	0x08002a74
 8001d34:	24000004 	.word	0x24000004
 8001d38:	24000000 	.word	0x24000000
 8001d3c:	24000008 	.word	0x24000008

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	@ 0x24
 8001d44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d46:	4bb3      	ldr	r3, [pc, #716]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d4e:	2b18      	cmp	r3, #24
 8001d50:	f200 8155 	bhi.w	8001ffe <HAL_RCC_GetSysClockFreq+0x2be>
 8001d54:	a201      	add	r2, pc, #4	@ (adr r2, 8001d5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001dc1 	.word	0x08001dc1
 8001d60:	08001fff 	.word	0x08001fff
 8001d64:	08001fff 	.word	0x08001fff
 8001d68:	08001fff 	.word	0x08001fff
 8001d6c:	08001fff 	.word	0x08001fff
 8001d70:	08001fff 	.word	0x08001fff
 8001d74:	08001fff 	.word	0x08001fff
 8001d78:	08001fff 	.word	0x08001fff
 8001d7c:	08001de7 	.word	0x08001de7
 8001d80:	08001fff 	.word	0x08001fff
 8001d84:	08001fff 	.word	0x08001fff
 8001d88:	08001fff 	.word	0x08001fff
 8001d8c:	08001fff 	.word	0x08001fff
 8001d90:	08001fff 	.word	0x08001fff
 8001d94:	08001fff 	.word	0x08001fff
 8001d98:	08001fff 	.word	0x08001fff
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001fff 	.word	0x08001fff
 8001da4:	08001fff 	.word	0x08001fff
 8001da8:	08001fff 	.word	0x08001fff
 8001dac:	08001fff 	.word	0x08001fff
 8001db0:	08001fff 	.word	0x08001fff
 8001db4:	08001fff 	.word	0x08001fff
 8001db8:	08001fff 	.word	0x08001fff
 8001dbc:	08001df3 	.word	0x08001df3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dc0:	4b94      	ldr	r3, [pc, #592]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001dcc:	4b91      	ldr	r3, [pc, #580]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	4a90      	ldr	r2, [pc, #576]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ddc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001dde:	e111      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001de0:	4b8d      	ldr	r3, [pc, #564]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001de2:	61bb      	str	r3, [r7, #24]
      break;
 8001de4:	e10e      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001de6:	4b8d      	ldr	r3, [pc, #564]	@ (800201c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001de8:	61bb      	str	r3, [r7, #24]
      break;
 8001dea:	e10b      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001dec:	4b8c      	ldr	r3, [pc, #560]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001dee:	61bb      	str	r3, [r7, #24]
      break;
 8001df0:	e108      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001df2:	4b88      	ldr	r3, [pc, #544]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001dfc:	4b85      	ldr	r3, [pc, #532]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e08:	4b82      	ldr	r3, [pc, #520]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e12:	4b80      	ldr	r3, [pc, #512]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e16:	08db      	lsrs	r3, r3, #3
 8001e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80e1 	beq.w	8001ff8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	f000 8083 	beq.w	8001f44 <HAL_RCC_GetSysClockFreq+0x204>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	f200 80a1 	bhi.w	8001f88 <HAL_RCC_GetSysClockFreq+0x248>
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x114>
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d056      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e52:	e099      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e54:	4b6f      	ldr	r3, [pc, #444]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d02d      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e60:	4b6c      	ldr	r3, [pc, #432]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e8a:	4b62      	ldr	r3, [pc, #392]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001eba:	e087      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002028 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ece:	4b51      	ldr	r3, [pc, #324]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ee2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001efe:	e065      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800202c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f12:	4b40      	ldr	r3, [pc, #256]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f42:	e043      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002030 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f56:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f86:	e021      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800202c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002024 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	0a5b      	lsrs	r3, r3, #9
 8001fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
      break;
 8001ffc:	e002      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002000:	61bb      	str	r3, [r7, #24]
      break;
 8002002:	bf00      	nop
  }

  return sysclockfreq;
 8002004:	69bb      	ldr	r3, [r7, #24]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	58024400 	.word	0x58024400
 8002018:	03d09000 	.word	0x03d09000
 800201c:	003d0900 	.word	0x003d0900
 8002020:	017d7840 	.word	0x017d7840
 8002024:	46000000 	.word	0x46000000
 8002028:	4c742400 	.word	0x4c742400
 800202c:	4a742400 	.word	0x4a742400
 8002030:	4bbebc20 	.word	0x4bbebc20

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e049      	b.n	80020da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fbbc 	bl	80007d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fad6 	bl	8002624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d001      	beq.n	80020fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e054      	b.n	80021a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a26      	ldr	r2, [pc, #152]	@ (80021b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002126:	d01d      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a22      	ldr	r2, [pc, #136]	@ (80021b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <HAL_TIM_Base_Start_IT+0xd8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1f      	ldr	r2, [pc, #124]	@ (80021c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	@ (80021c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_TIM_Base_Start_IT+0x80>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1b      	ldr	r2, [pc, #108]	@ (80021cc <HAL_TIM_Base_Start_IT+0xe8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d115      	bne.n	8002190 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_TIM_Base_Start_IT+0xec>)
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b06      	cmp	r3, #6
 8002174:	d015      	beq.n	80021a2 <HAL_TIM_Base_Start_IT+0xbe>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d011      	beq.n	80021a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	e008      	b.n	80021a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e000      	b.n	80021a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40000400 	.word	0x40000400
 80021bc:	40000800 	.word	0x40000800
 80021c0:	40000c00 	.word	0x40000c00
 80021c4:	40010400 	.word	0x40010400
 80021c8:	40001800 	.word	0x40001800
 80021cc:	40014000 	.word	0x40014000
 80021d0:	00010007 	.word	0x00010007

080021d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0202 	mvn.w	r2, #2
 8002208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f9e2 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f9d4 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9e5 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d020      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0204 	mvn.w	r2, #4
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f9bc 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9ae 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f9bf 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0208 	mvn.w	r2, #8
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f996 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f988 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f999 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d020      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0210 	mvn.w	r2, #16
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2208      	movs	r2, #8
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f970 	bl	80025e8 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f962 	bl	80025d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f973 	bl	80025fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00c      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0201 	mvn.w	r2, #1
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fa18 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002346:	2b00      	cmp	r3, #0
 8002348:	d104      	bne.n	8002354 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fb37 	bl	80029dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00c      	beq.n	8002392 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800238a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fb2f 	bl	80029f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f92d 	bl	8002610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0220 	mvn.w	r2, #32
 80023d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 faf7 	bl	80029c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_TIM_ConfigClockSource+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e0dc      	b.n	80025ba <HAL_TIM_ConfigClockSource+0x1d6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	4b6a      	ldr	r3, [pc, #424]	@ (80025c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a64      	ldr	r2, [pc, #400]	@ (80025c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	f000 80a9 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 800243c:	4a62      	ldr	r2, [pc, #392]	@ (80025c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	f200 80ae 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002444:	4a61      	ldr	r2, [pc, #388]	@ (80025cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	f000 80a1 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 800244c:	4a5f      	ldr	r2, [pc, #380]	@ (80025cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	f200 80a6 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002454:	4a5e      	ldr	r2, [pc, #376]	@ (80025d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002456:	4293      	cmp	r3, r2
 8002458:	f000 8099 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 800245c:	4a5c      	ldr	r2, [pc, #368]	@ (80025d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800245e:	4293      	cmp	r3, r2
 8002460:	f200 809e 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002464:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002468:	f000 8091 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 800246c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002470:	f200 8096 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002474:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002478:	f000 8089 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 800247c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002480:	f200 808e 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002488:	d03e      	beq.n	8002508 <HAL_TIM_ConfigClockSource+0x124>
 800248a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800248e:	f200 8087 	bhi.w	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002496:	f000 8086 	beq.w	80025a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800249a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249e:	d87f      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80024a0:	2b70      	cmp	r3, #112	@ 0x70
 80024a2:	d01a      	beq.n	80024da <HAL_TIM_ConfigClockSource+0xf6>
 80024a4:	2b70      	cmp	r3, #112	@ 0x70
 80024a6:	d87b      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80024a8:	2b60      	cmp	r3, #96	@ 0x60
 80024aa:	d050      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x16a>
 80024ac:	2b60      	cmp	r3, #96	@ 0x60
 80024ae:	d877      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80024b0:	2b50      	cmp	r3, #80	@ 0x50
 80024b2:	d03c      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x14a>
 80024b4:	2b50      	cmp	r3, #80	@ 0x50
 80024b6:	d873      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80024b8:	2b40      	cmp	r3, #64	@ 0x40
 80024ba:	d058      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x18a>
 80024bc:	2b40      	cmp	r3, #64	@ 0x40
 80024be:	d86f      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80024c0:	2b30      	cmp	r3, #48	@ 0x30
 80024c2:	d064      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 80024c4:	2b30      	cmp	r3, #48	@ 0x30
 80024c6:	d86b      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d060      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d867      	bhi.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05c      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d05a      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x1aa>
 80024d8:	e062      	b.n	80025a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ea:	f000 f9bf 	bl	800286c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	609a      	str	r2, [r3, #8]
      break;
 8002506:	e04f      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002518:	f000 f9a8 	bl	800286c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800252a:	609a      	str	r2, [r3, #8]
      break;
 800252c:	e03c      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800253a:	461a      	mov	r2, r3
 800253c:	f000 f918 	bl	8002770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2150      	movs	r1, #80	@ 0x50
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f972 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 800254c:	e02c      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800255a:	461a      	mov	r2, r3
 800255c:	f000 f937 	bl	80027ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2160      	movs	r1, #96	@ 0x60
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f962 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 800256c:	e01c      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257a:	461a      	mov	r2, r3
 800257c:	f000 f8f8 	bl	8002770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2140      	movs	r1, #64	@ 0x40
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f952 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 800258c:	e00c      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	4610      	mov	r0, r2
 800259a:	f000 f949 	bl	8002830 <TIM_ITRx_SetConfig>
      break;
 800259e:	e003      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e000      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80025a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	ffceff88 	.word	0xffceff88
 80025c8:	00100040 	.word	0x00100040
 80025cc:	00100030 	.word	0x00100030
 80025d0:	00100020 	.word	0x00100020

080025d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a46      	ldr	r2, [pc, #280]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002642:	d00f      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a43      	ldr	r2, [pc, #268]	@ (8002754 <TIM_Base_SetConfig+0x130>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00b      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a42      	ldr	r2, [pc, #264]	@ (8002758 <TIM_Base_SetConfig+0x134>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d007      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a41      	ldr	r2, [pc, #260]	@ (800275c <TIM_Base_SetConfig+0x138>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_Base_SetConfig+0x40>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a40      	ldr	r2, [pc, #256]	@ (8002760 <TIM_Base_SetConfig+0x13c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d108      	bne.n	8002676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a35      	ldr	r2, [pc, #212]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002684:	d01b      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a32      	ldr	r2, [pc, #200]	@ (8002754 <TIM_Base_SetConfig+0x130>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d017      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a31      	ldr	r2, [pc, #196]	@ (8002758 <TIM_Base_SetConfig+0x134>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a30      	ldr	r2, [pc, #192]	@ (800275c <TIM_Base_SetConfig+0x138>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00f      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002760 <TIM_Base_SetConfig+0x13c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00b      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002764 <TIM_Base_SetConfig+0x140>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002768 <TIM_Base_SetConfig+0x144>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d003      	beq.n	80026be <TIM_Base_SetConfig+0x9a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a2c      	ldr	r2, [pc, #176]	@ (800276c <TIM_Base_SetConfig+0x148>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d108      	bne.n	80026d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a16      	ldr	r2, [pc, #88]	@ (8002750 <TIM_Base_SetConfig+0x12c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00f      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a18      	ldr	r2, [pc, #96]	@ (8002760 <TIM_Base_SetConfig+0x13c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <TIM_Base_SetConfig+0x140>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a16      	ldr	r2, [pc, #88]	@ (8002768 <TIM_Base_SetConfig+0x144>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0xf8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a15      	ldr	r2, [pc, #84]	@ (800276c <TIM_Base_SetConfig+0x148>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f023 0201 	bic.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]
  }
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40010400 	.word	0x40010400
 8002764:	40014000 	.word	0x40014000
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800

08002770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f023 0201 	bic.w	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800279a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f023 030a 	bic.w	r3, r3, #10
 80027ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	621a      	str	r2, [r3, #32]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b087      	sub	sp, #28
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 0210 	bic.w	r2, r3, #16
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	031b      	lsls	r3, r3, #12
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800280a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	621a      	str	r2, [r3, #32]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <TIM_ITRx_SetConfig+0x38>)
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	f043 0307 	orr.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	609a      	str	r2, [r3, #8]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	ffcfff8f 	.word	0xffcfff8f

0800286c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	021a      	lsls	r2, r3, #8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	431a      	orrs	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4313      	orrs	r3, r2
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e06d      	b.n	80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a30      	ldr	r2, [pc, #192]	@ (80029ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2f      	ldr	r2, [pc, #188]	@ (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80028fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002910:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a20      	ldr	r2, [pc, #128]	@ (80029ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002936:	d01d      	beq.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1c      	ldr	r2, [pc, #112]	@ (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1a      	ldr	r2, [pc, #104]	@ (80029bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a16      	ldr	r2, [pc, #88]	@ (80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a15      	ldr	r2, [pc, #84]	@ (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d10c      	bne.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800297a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	4313      	orrs	r3, r2
 8002984:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40010400 	.word	0x40010400
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800
 80029bc:	40000c00 	.word	0x40000c00
 80029c0:	40001800 	.word	0x40001800
 80029c4:	40014000 	.word	0x40014000

080029c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <memset>:
 8002a04:	4402      	add	r2, r0
 8002a06:	4603      	mov	r3, r0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <__libc_init_array>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	4d0d      	ldr	r5, [pc, #52]	@ (8002a4c <__libc_init_array+0x38>)
 8002a18:	4c0d      	ldr	r4, [pc, #52]	@ (8002a50 <__libc_init_array+0x3c>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	2600      	movs	r6, #0
 8002a20:	42a6      	cmp	r6, r4
 8002a22:	d109      	bne.n	8002a38 <__libc_init_array+0x24>
 8002a24:	4d0b      	ldr	r5, [pc, #44]	@ (8002a54 <__libc_init_array+0x40>)
 8002a26:	4c0c      	ldr	r4, [pc, #48]	@ (8002a58 <__libc_init_array+0x44>)
 8002a28:	f000 f818 	bl	8002a5c <_init>
 8002a2c:	1b64      	subs	r4, r4, r5
 8002a2e:	10a4      	asrs	r4, r4, #2
 8002a30:	2600      	movs	r6, #0
 8002a32:	42a6      	cmp	r6, r4
 8002a34:	d105      	bne.n	8002a42 <__libc_init_array+0x2e>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3c:	4798      	blx	r3
 8002a3e:	3601      	adds	r6, #1
 8002a40:	e7ee      	b.n	8002a20 <__libc_init_array+0xc>
 8002a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a46:	4798      	blx	r3
 8002a48:	3601      	adds	r6, #1
 8002a4a:	e7f2      	b.n	8002a32 <__libc_init_array+0x1e>
 8002a4c:	08002a84 	.word	0x08002a84
 8002a50:	08002a84 	.word	0x08002a84
 8002a54:	08002a84 	.word	0x08002a84
 8002a58:	08002a88 	.word	0x08002a88

08002a5c <_init>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	bf00      	nop
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr

08002a68 <_fini>:
 8002a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6a:	bf00      	nop
 8002a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6e:	bc08      	pop	{r3}
 8002a70:	469e      	mov	lr, r3
 8002a72:	4770      	bx	lr
