
ADC_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800daa0  0800daa0  0000eaa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df28  0800df28  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800df28  0800df28  0000ef28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df30  0800df30  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df30  0800df30  0000ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df34  0800df34  0000ef34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800df38  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  240001d8  0800e110  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400045c  0800e110  0000f45c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e98  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281b  00000000  00000000  0002509e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  000278c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c62  00000000  00000000  000288d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000415b4  00000000  00000000  0002953a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016592  00000000  00000000  0006aaee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ab47e  00000000  00000000  00081080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022c4fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005780  00000000  00000000  0022c544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00231cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da84 	.word	0x0800da84

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800da84 	.word	0x0800da84

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000
 8000b94:	00000000 	.word	0x00000000

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 fbf2 	bl	8001384 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f870 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f000 f9b8 	bl	8000f18 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ba8:	f000 f8e6 	bl	8000d78 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000bac:	f000 f968 	bl	8000e80 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 8000bb0:	482d      	ldr	r0, [pc, #180]	@ (8000c68 <main+0xd0>)
 8000bb2:	f001 f893 	bl	8001cdc <HAL_ADC_Start>
	     if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000bb6:	2164      	movs	r1, #100	@ 0x64
 8000bb8:	482b      	ldr	r0, [pc, #172]	@ (8000c68 <main+0xd0>)
 8000bba:	f001 f98d 	bl	8001ed8 <HAL_ADC_PollForConversion>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d106      	bne.n	8000bd2 <main+0x3a>
	         ADC_VALUE = HAL_ADC_GetValue(&hadc1);
 8000bc4:	4828      	ldr	r0, [pc, #160]	@ (8000c68 <main+0xd0>)
 8000bc6:	f001 fa7b 	bl	80020c0 <HAL_ADC_GetValue>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <main+0xd4>)
 8000bd0:	801a      	strh	r2, [r3, #0]
	     }
	     	 voltage = (ADC_VALUE*V_REF)/65535;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <main+0xd4>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	ee07 3a90 	vmov	s15, r3
 8000bda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bde:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8000c58 <main+0xc0>
 8000be2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000be6:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000c60 <main+0xc8>
 8000bea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <main+0xd8>)
 8000bf4:	edc3 7a00 	vstr	s15, [r3]
	     sprintf(uart_buffer, "ADC Value: %u\r\n", ADC_VALUE);
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c6c <main+0xd4>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	491d      	ldr	r1, [pc, #116]	@ (8000c74 <main+0xdc>)
 8000c00:	481d      	ldr	r0, [pc, #116]	@ (8000c78 <main+0xe0>)
 8000c02:	f009 fbc7 	bl	800a394 <siprintf>
	     HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000c06:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <main+0xe0>)
 8000c08:	f7ff fbba 	bl	8000380 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	4918      	ldr	r1, [pc, #96]	@ (8000c78 <main+0xe0>)
 8000c16:	4819      	ldr	r0, [pc, #100]	@ (8000c7c <main+0xe4>)
 8000c18:	f006 ff64 	bl	8007ae4 <HAL_UART_Transmit>
	     sprintf(uart_buffer, "ADC volt: %.2f\r\n",voltage);
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <main+0xd8>)
 8000c1e:	edd3 7a00 	vldr	s15, [r3]
 8000c22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c26:	ec53 2b17 	vmov	r2, r3, d7
 8000c2a:	4915      	ldr	r1, [pc, #84]	@ (8000c80 <main+0xe8>)
 8000c2c:	4812      	ldr	r0, [pc, #72]	@ (8000c78 <main+0xe0>)
 8000c2e:	f009 fbb1 	bl	800a394 <siprintf>
		 HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000c32:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <main+0xe0>)
 8000c34:	f7ff fba4 	bl	8000380 <strlen>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	490d      	ldr	r1, [pc, #52]	@ (8000c78 <main+0xe0>)
 8000c42:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <main+0xe4>)
 8000c44:	f006 ff4e 	bl	8007ae4 <HAL_UART_Transmit>
	     HAL_ADC_Stop(&hadc1);
 8000c48:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <main+0xd0>)
 8000c4a:	f001 f911 	bl	8001e70 <HAL_ADC_Stop>
	     HAL_Delay(2000);
 8000c4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c52:	f000 fc29 	bl	80014a8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000c56:	e7ab      	b.n	8000bb0 <main+0x18>
 8000c58:	66666666 	.word	0x66666666
 8000c5c:	400a6666 	.word	0x400a6666
 8000c60:	00000000 	.word	0x00000000
 8000c64:	40efffe0 	.word	0x40efffe0
 8000c68:	240001f4 	.word	0x240001f4
 8000c6c:	240002f0 	.word	0x240002f0
 8000c70:	240002ec 	.word	0x240002ec
 8000c74:	0800daa0 	.word	0x0800daa0
 8000c78:	240002f4 	.word	0x240002f4
 8000c7c:	24000258 	.word	0x24000258
 8000c80:	0800dab0 	.word	0x0800dab0

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	@ 0x70
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8e:	224c      	movs	r2, #76	@ 0x4c
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f009 fbe1 	bl	800a45a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f009 fbdb 	bl	800a45a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f003 f94f 	bl	8003f48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b30      	ldr	r3, [pc, #192]	@ (8000d70 <SystemClock_Config+0xec>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8000d70 <SystemClock_Config+0xec>)
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <SystemClock_Config+0xec>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d74 <SystemClock_Config+0xf0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d74 <SystemClock_Config+0xf0>)
 8000cca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b28      	ldr	r3, [pc, #160]	@ (8000d74 <SystemClock_Config+0xf0>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cdc:	bf00      	nop
 8000cde:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <SystemClock_Config+0xf0>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cea:	d1f8      	bne.n	8000cde <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cec:	2301      	movs	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000d02:	23a0      	movs	r3, #160	@ 0xa0
 8000d04:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d12:	2308      	movs	r3, #8
 8000d14:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 f96a 	bl	8003ffc <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d2e:	f000 f90d 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	233f      	movs	r3, #63	@ 0x3f
 8000d34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d42:	2340      	movs	r3, #64	@ 0x40
 8000d44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d46:	2340      	movs	r3, #64	@ 0x40
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d50:	2340      	movs	r3, #64	@ 0x40
 8000d52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2102      	movs	r1, #2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fda9 	bl	80048b0 <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000d64:	f000 f8f2 	bl	8000f4c <Error_Handler>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3770      	adds	r7, #112	@ 0x70
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58000400 	.word	0x58000400
 8000d74:	58024800 	.word	0x58024800

08000d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]
 8000d9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d9c:	4b35      	ldr	r3, [pc, #212]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000d9e:	4a36      	ldr	r2, [pc, #216]	@ (8000e78 <MX_ADC1_Init+0x100>)
 8000da0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da8:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000daa:	2204      	movs	r2, #4
 8000dac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dae:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000db4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000dba:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd2:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd8:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000dec:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df2:	4820      	ldr	r0, [pc, #128]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000df4:	f000 fdd0 	bl	8001998 <HAL_ADC_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000dfe:	f000 f8a5 	bl	8000f4c <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0e:	4819      	ldr	r0, [pc, #100]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000e10:	f000 fdc2 	bl	8001998 <HAL_ADC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e1a:	f000 f897 	bl	8000f4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4812      	ldr	r0, [pc, #72]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000e2a:	f001 ff8b 	bl	8002d44 <HAL_ADCEx_MultiModeConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000e34:	f000 f88a 	bl	8000f4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <MX_ADC1_Init+0x104>)
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e40:	2307      	movs	r3, #7
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e44:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <MX_ADC1_Init+0xfc>)
 8000e5c:	f001 f93e 	bl	80020dc <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000e66:	f000 f871 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	@ 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	240001f4 	.word	0x240001f4
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	04300002 	.word	0x04300002

08000e80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e84:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <MX_USART1_UART_Init+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ec8:	4811      	ldr	r0, [pc, #68]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eca:	f006 fdbb 	bl	8007a44 <HAL_UART_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ed4:	f000 f83a 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000edc:	f008 fa8a 	bl	80093f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 f831 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000eee:	f008 fabf 	bl	8009470 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef8:	f000 f828 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_USART1_UART_Init+0x90>)
 8000efe:	f008 fa40 	bl	8009382 <HAL_UARTEx_DisableFifoMode>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f08:	f000 f820 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	24000258 	.word	0x24000258
 8000f14:	40011000 	.word	0x40011000

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MX_GPIO_Init+0x30>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f24:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <MX_GPIO_Init+0x30>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_GPIO_Init+0x30>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	58024400 	.word	0x58024400

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_MspInit+0x30>)
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_MspInit+0x30>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_MspInit+0x30>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	58024400 	.word	0x58024400

08000f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0b6      	sub	sp, #216	@ 0xd8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	22c8      	movs	r2, #200	@ 0xc8
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fa5c 	bl	800a45a <memset>
  if(hadc->Instance==ADC1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <HAL_ADC_MspInit+0xb8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d147      	bne.n	800103c <HAL_ADC_MspInit+0xb0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 76;
 8000fbc:	234c      	movs	r3, #76	@ 0x4c
 8000fbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000fd4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 ffef 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000ff0:	f7ff ffac 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_ADC_MspInit+0xbc>)
 8000ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ffa:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <HAL_ADC_MspInit+0xbc>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_ADC_MspInit+0xbc>)
 8001006:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800100a:	f003 0320 	and.w	r3, r3, #32
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_ADC_MspInit+0xbc>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_ADC_MspInit+0xbc>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_ADC_MspInit+0xbc>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8001030:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001034:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8001038:	f000 fa66 	bl	8001508 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800103c:	bf00      	nop
 800103e:	37d8      	adds	r7, #216	@ 0xd8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40022000 	.word	0x40022000
 8001048:	58024400 	.word	0x58024400

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0bc      	sub	sp, #240	@ 0xf0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	22c8      	movs	r2, #200	@ 0xc8
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 f9f4 	bl	800a45a <memset>
  if(huart->Instance==USART1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a2b      	ldr	r2, [pc, #172]	@ (8001124 <HAL_UART_MspInit+0xd8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d14e      	bne.n	800111a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800107c:	f04f 0201 	mov.w	r2, #1
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4618      	mov	r0, r3
 8001094:	f003 ff98 	bl	8004fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800109e:	f7ff ff55 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <HAL_UART_MspInit+0xdc>)
 80010a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <HAL_UART_MspInit+0xdc>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <HAL_UART_MspInit+0xdc>)
 80010b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_UART_MspInit+0xdc>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c6:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <HAL_UART_MspInit+0xdc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_UART_MspInit+0xdc>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80010de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f8:	2307      	movs	r3, #7
 80010fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <HAL_UART_MspInit+0xe0>)
 8001106:	f002 fd6f 	bl	8003be8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2025      	movs	r0, #37	@ 0x25
 8001110:	f001 ffd1 	bl	80030b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001114:	2025      	movs	r0, #37	@ 0x25
 8001116:	f001 ffe8 	bl	80030ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800111a:	bf00      	nop
 800111c:	37f0      	adds	r7, #240	@ 0xf0
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40011000 	.word	0x40011000
 8001128:	58024400 	.word	0x58024400
 800112c:	58020000 	.word	0x58020000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <NMI_Handler+0x4>

08001138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <MemManage_Handler+0x4>

08001148 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <UsageFault_Handler+0x4>

08001158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001186:	f000 f96f 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <USART1_IRQHandler+0x10>)
 8001196:	f006 fd33 	bl	8007c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	24000258 	.word	0x24000258

080011a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return 1;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_kill>:

int _kill(int pid, int sig)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011be:	f009 f99f 	bl	800a500 <__errno>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2216      	movs	r2, #22
 80011c6:	601a      	str	r2, [r3, #0]
  return -1;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_exit>:

void _exit (int status)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffe7 	bl	80011b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011e6:	bf00      	nop
 80011e8:	e7fd      	b.n	80011e6 <_exit+0x12>

080011ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e00a      	b.n	8001212 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011fc:	f3af 8000 	nop.w
 8001200:	4601      	mov	r1, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	60ba      	str	r2, [r7, #8]
 8001208:	b2ca      	uxtb	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	dbf0      	blt.n	80011fc <_read+0x12>
  }

  return len;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e009      	b.n	800124a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	60ba      	str	r2, [r7, #8]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	dbf1      	blt.n	8001236 <_write+0x12>
  }
  return len;
 8001252:	687b      	ldr	r3, [r7, #4]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_close>:

int _close(int file)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001284:	605a      	str	r2, [r3, #4]
  return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_isatty>:

int _isatty(int file)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	@ (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	@ (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f009 f904 	bl	800a500 <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	24080000 	.word	0x24080000
 8001324:	00000400 	.word	0x00000400
 8001328:	24000308 	.word	0x24000308
 800132c:	24000460 	.word	0x24000460

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001334:	f7ff fb98 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f009 f8d5 	bl	800a50c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fc19 	bl	8000b98 <main>
  bx  lr
 8001366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001368:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800136c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001370:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001374:	0800df38 	.word	0x0800df38
  ldr r2, =_sbss
 8001378:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800137c:	2400045c 	.word	0x2400045c

08001380 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC3_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138a:	2003      	movs	r0, #3
 800138c:	f001 fe88 	bl	80030a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001390:	f003 fc44 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_Init+0x68>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	4913      	ldr	r1, [pc, #76]	@ (80013f0 <HAL_Init+0x6c>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ae:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a0e      	ldr	r2, [pc, #56]	@ (80013f0 <HAL_Init+0x6c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a0b      	ldr	r2, [pc, #44]	@ (80013f4 <HAL_Init+0x70>)
 80013c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c8:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <HAL_Init+0x74>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f814 	bl	80013fc <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e002      	b.n	80013e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fdbb 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400
 80013f0:	0800dac4 	.word	0x0800dac4
 80013f4:	24000004 	.word	0x24000004
 80013f8:	24000000 	.word	0x24000000

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e021      	b.n	8001454 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <HAL_InitTick+0x64>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_InitTick+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fe6d 	bl	8003106 <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f001 fe37 	bl	80030b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <HAL_InitTick+0x68>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2400000c 	.word	0x2400000c
 8001460:	24000000 	.word	0x24000000
 8001464:	24000008 	.word	0x24000008

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2400000c 	.word	0x2400000c
 800148c:	2400030c 	.word	0x2400030c

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2400030c 	.word	0x2400030c

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2400000c 	.word	0x2400000c

080014f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_GetREVID+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0c1b      	lsrs	r3, r3, #16
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	5c001000 	.word	0x5c001000

08001508 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	4904      	ldr	r1, [pc, #16]	@ (8001530 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	58000400 	.word	0x58000400

08001534 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	609a      	str	r2, [r3, #8]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3360      	adds	r3, #96	@ 0x60
 80015ae:	461a      	mov	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	611a      	str	r2, [r3, #16]
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800160e:	b480      	push	{r7}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3360      	adds	r3, #96	@ 0x60
 800161e:	461a      	mov	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	431a      	orrs	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	601a      	str	r2, [r3, #0]
  }
}
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3330      	adds	r3, #48	@ 0x30
 800167a:	461a      	mov	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	4413      	add	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	211f      	movs	r1, #31
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	401a      	ands	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	0e9b      	lsrs	r3, r3, #26
 80016a2:	f003 011f 	and.w	r1, r3, #31
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b087      	sub	sp, #28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3314      	adds	r3, #20
 80016d2:	461a      	mov	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	0e5b      	lsrs	r3, r3, #25
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	0d1b      	lsrs	r3, r3, #20
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	2107      	movs	r1, #7
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	0d1b      	lsrs	r3, r3, #20
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	431a      	orrs	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001730:	43db      	mvns	r3, r3
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0318 	and.w	r3, r3, #24
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <LL_ADC_SetChannelSingleDiff+0x44>)
 800173c:	40d9      	lsrs	r1, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	400b      	ands	r3, r1
 8001742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001746:	431a      	orrs	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	000fffff 	.word	0x000fffff

08001760 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 031f 	and.w	r3, r3, #31
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6093      	str	r3, [r2, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	5fffffc0 	.word	0x5fffffc0

080017bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017d0:	d101      	bne.n	80017d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <LL_ADC_EnableInternalRegulator+0x24>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	6fffffc0 	.word	0x6fffffc0

0800180c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001820:	d101      	bne.n	8001826 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <LL_ADC_Enable+0x24>)
 8001842:	4013      	ands	r3, r2
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	7fffffc0 	.word	0x7fffffc0

0800185c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <LL_ADC_Disable+0x24>)
 800186a:	4013      	ands	r3, r2
 800186c:	f043 0202 	orr.w	r2, r3, #2
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	7fffffc0 	.word	0x7fffffc0

08001884 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <LL_ADC_IsEnabled+0x18>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <LL_ADC_IsEnabled+0x1a>
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d101      	bne.n	80018c2 <LL_ADC_IsDisableOngoing+0x18>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_ADC_IsDisableOngoing+0x1a>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <LL_ADC_REG_StartConversion+0x24>)
 80018de:	4013      	ands	r3, r2
 80018e0:	f043 0204 	orr.w	r2, r3, #4
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	7fffffc0 	.word	0x7fffffc0

080018f8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <LL_ADC_REG_StopConversion+0x24>)
 8001906:	4013      	ands	r3, r2
 8001908:	f043 0210 	orr.w	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	7fffffc0 	.word	0x7fffffc0

08001920 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b04      	cmp	r3, #4
 8001932:	d101      	bne.n	8001938 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <LL_ADC_INJ_StopConversion+0x24>)
 8001956:	4013      	ands	r3, r2
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	7fffffc0 	.word	0x7fffffc0

08001970 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b08      	cmp	r3, #8
 8001982:	d101      	bne.n	8001988 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e18f      	b.n	8001cd2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fae3 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff feef 	bl	80017bc <LL_ADC_IsDeepPowerDownEnabled>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fed5 	bl	8001798 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff0a 	bl	800180c <LL_ADC_IsInternalRegulatorEnabled>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d114      	bne.n	8001a28 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff feee 	bl	80017e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a08:	4b87      	ldr	r3, [pc, #540]	@ (8001c28 <HAL_ADC_Init+0x290>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	4a87      	ldr	r2, [pc, #540]	@ (8001c2c <HAL_ADC_Init+0x294>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	3301      	adds	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a1a:	e002      	b.n	8001a22 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f9      	bne.n	8001a1c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff feed 	bl	800180c <LL_ADC_IsInternalRegulatorEnabled>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10d      	bne.n	8001a54 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3c:	f043 0210 	orr.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff61 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001a5e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 8129 	bne.w	8001cc0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 8125 	bne.w	8001cc0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fefa 	bl	8001884 <LL_ADC_IsEnabled>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d136      	bne.n	8001b04 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a65      	ldr	r2, [pc, #404]	@ (8001c30 <HAL_ADC_Init+0x298>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d004      	beq.n	8001aaa <HAL_ADC_Init+0x112>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a63      	ldr	r2, [pc, #396]	@ (8001c34 <HAL_ADC_Init+0x29c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_ADC_Init+0x130>
 8001aaa:	4861      	ldr	r0, [pc, #388]	@ (8001c30 <HAL_ADC_Init+0x298>)
 8001aac:	f7ff feea 	bl	8001884 <LL_ADC_IsEnabled>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	4860      	ldr	r0, [pc, #384]	@ (8001c34 <HAL_ADC_Init+0x29c>)
 8001ab4:	f7ff fee6 	bl	8001884 <LL_ADC_IsEnabled>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4323      	orrs	r3, r4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e008      	b.n	8001ada <HAL_ADC_Init+0x142>
 8001ac8:	485b      	ldr	r0, [pc, #364]	@ (8001c38 <HAL_ADC_Init+0x2a0>)
 8001aca:	f7ff fedb 	bl	8001884 <LL_ADC_IsEnabled>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d012      	beq.n	8001b04 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a53      	ldr	r2, [pc, #332]	@ (8001c30 <HAL_ADC_Init+0x298>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_ADC_Init+0x15a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a51      	ldr	r2, [pc, #324]	@ (8001c34 <HAL_ADC_Init+0x29c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Init+0x15e>
 8001af2:	4a52      	ldr	r2, [pc, #328]	@ (8001c3c <HAL_ADC_Init+0x2a4>)
 8001af4:	e000      	b.n	8001af8 <HAL_ADC_Init+0x160>
 8001af6:	4a52      	ldr	r2, [pc, #328]	@ (8001c40 <HAL_ADC_Init+0x2a8>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f7ff fd18 	bl	8001534 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b04:	f7ff fcf4 	bl	80014f0 <HAL_GetREVID>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d914      	bls.n	8001b3c <HAL_ADC_Init+0x1a4>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d110      	bne.n	8001b3c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7d5b      	ldrb	r3, [r3, #21]
 8001b1e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b24:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b2a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7f1b      	ldrb	r3, [r3, #28]
 8001b30:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001b32:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b34:	f043 030c 	orr.w	r3, r3, #12
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	e00d      	b.n	8001b58 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7d5b      	ldrb	r3, [r3, #21]
 8001b40:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b46:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b4c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7f1b      	ldrb	r3, [r3, #28]
 8001b52:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7f1b      	ldrb	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	045b      	lsls	r3, r3, #17
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <HAL_ADC_Init+0x2ac>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	69b9      	ldr	r1, [r7, #24]
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff febc 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001ba8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fede 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 8001bb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d15f      	bne.n	8001c7c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d15c      	bne.n	8001c7c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7d1b      	ldrb	r3, [r3, #20]
 8001bc6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <HAL_ADC_Init+0x2b0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6812      	ldr	r2, [r2, #0]
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	430b      	orrs	r3, r1
 8001be2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d130      	bne.n	8001c50 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <HAL_ADC_Init+0x2b4>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c02:	3a01      	subs	r2, #1
 8001c04:	0411      	lsls	r1, r2, #16
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c10:	4311      	orrs	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c16:	430a      	orrs	r2, r1
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	611a      	str	r2, [r3, #16]
 8001c24:	e01c      	b.n	8001c60 <HAL_ADC_Init+0x2c8>
 8001c26:	bf00      	nop
 8001c28:	24000000 	.word	0x24000000
 8001c2c:	053e2d63 	.word	0x053e2d63
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40022100 	.word	0x40022100
 8001c38:	58026000 	.word	0x58026000
 8001c3c:	40022300 	.word	0x40022300
 8001c40:	58026300 	.word	0x58026300
 8001c44:	fff0c003 	.word	0xfff0c003
 8001c48:	ffffbffc 	.word	0xffffbffc
 8001c4c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 ff32 	bl	8002ae0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d10c      	bne.n	8001c9e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f023 010f 	bic.w	r1, r3, #15
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	1e5a      	subs	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c9c:	e007      	b.n	8001cae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020f 	bic.w	r2, r2, #15
 8001cac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cbe:	e007      	b.n	8001cd0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop

08001cdc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5c      	ldr	r2, [pc, #368]	@ (8001e5c <HAL_ADC_Start+0x180>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_Start+0x1c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8001e60 <HAL_ADC_Start+0x184>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_Start+0x20>
 8001cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_ADC_Start+0x188>)
 8001cfa:	e000      	b.n	8001cfe <HAL_ADC_Start+0x22>
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e68 <HAL_ADC_Start+0x18c>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd2e 	bl	8001760 <LL_ADC_GetMultimode>
 8001d04:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fe08 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 809a 	bne.w	8001e4c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Start+0x4a>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e095      	b.n	8001e52 <HAL_ADC_Start+0x176>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fdec 	bl	800290c <ADC_Enable>
 8001d34:	4603      	mov	r3, r0
 8001d36:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8081 	bne.w	8001e42 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d44:	4b49      	ldr	r3, [pc, #292]	@ (8001e6c <HAL_ADC_Start+0x190>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a42      	ldr	r2, [pc, #264]	@ (8001e60 <HAL_ADC_Start+0x184>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_Start+0x84>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_Start+0x86>
 8001d60:	4b3e      	ldr	r3, [pc, #248]	@ (8001e5c <HAL_ADC_Start+0x180>)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d002      	beq.n	8001d70 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	f023 0206 	bic.w	r2, r3, #6
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d96:	e002      	b.n	8001d9e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	221c      	movs	r2, #28
 8001da4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <HAL_ADC_Start+0x184>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d002      	beq.n	8001dbe <HAL_ADC_Start+0xe2>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e000      	b.n	8001dc0 <HAL_ADC_Start+0xe4>
 8001dbe:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <HAL_ADC_Start+0x180>)
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d008      	beq.n	8001dda <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d002      	beq.n	8001dda <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b09      	cmp	r3, #9
 8001dd8:	d114      	bne.n	8001e04 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001df0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fd67 	bl	80018d0 <LL_ADC_REG_StartConversion>
 8001e02:	e025      	b.n	8001e50 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <HAL_ADC_Start+0x184>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d002      	beq.n	8001e20 <HAL_ADC_Start+0x144>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_Start+0x146>
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_ADC_Start+0x180>)
 8001e22:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00f      	beq.n	8001e50 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e40:	e006      	b.n	8001e50 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001e4a:	e001      	b.n	8001e50 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40022100 	.word	0x40022100
 8001e64:	40022300 	.word	0x40022300
 8001e68:	58026300 	.word	0x58026300
 8001e6c:	fffff0fe 	.word	0xfffff0fe

08001e70 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADC_Stop+0x16>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e021      	b.n	8001eca <HAL_ADC_Stop+0x5a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e8e:	2103      	movs	r1, #3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fc7f 	bl	8002794 <ADC_ConversionStop>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fdbd 	bl	8002a20 <ADC_Disable>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <HAL_ADC_Stop+0x64>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	ffffeefe 	.word	0xffffeefe

08001ed8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a72      	ldr	r2, [pc, #456]	@ (80020b0 <HAL_ADC_PollForConversion+0x1d8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d004      	beq.n	8001ef6 <HAL_ADC_PollForConversion+0x1e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a70      	ldr	r2, [pc, #448]	@ (80020b4 <HAL_ADC_PollForConversion+0x1dc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_PollForConversion+0x22>
 8001ef6:	4b70      	ldr	r3, [pc, #448]	@ (80020b8 <HAL_ADC_PollForConversion+0x1e0>)
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_PollForConversion+0x24>
 8001efa:	4b70      	ldr	r3, [pc, #448]	@ (80020bc <HAL_ADC_PollForConversion+0x1e4>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fc2f 	bl	8001760 <LL_ADC_GetMultimode>
 8001f02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d102      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	e037      	b.n	8001f82 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d002      	beq.n	8001f24 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d111      	bne.n	8001f48 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0b1      	b.n	80020a6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f42:	2304      	movs	r3, #4
 8001f44:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f46:	e01c      	b.n	8001f82 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a58      	ldr	r2, [pc, #352]	@ (80020b0 <HAL_ADC_PollForConversion+0x1d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_ADC_PollForConversion+0x84>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a57      	ldr	r2, [pc, #348]	@ (80020b4 <HAL_ADC_PollForConversion+0x1dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_PollForConversion+0x88>
 8001f5c:	4b56      	ldr	r3, [pc, #344]	@ (80020b8 <HAL_ADC_PollForConversion+0x1e0>)
 8001f5e:	e000      	b.n	8001f62 <HAL_ADC_PollForConversion+0x8a>
 8001f60:	4b56      	ldr	r3, [pc, #344]	@ (80020bc <HAL_ADC_PollForConversion+0x1e4>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fc0a 	bl	800177c <LL_ADC_GetMultiDMATransfer>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f043 0220 	orr.w	r2, r3, #32
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e093      	b.n	80020a6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f7e:	2304      	movs	r3, #4
 8001f80:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f82:	f7ff fa85 	bl	8001490 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f88:	e021      	b.n	8001fce <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d01d      	beq.n	8001fce <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f92:	f7ff fa7d 	bl	8001490 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <HAL_ADC_PollForConversion+0xd0>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d112      	bne.n	8001fce <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fba:	f043 0204 	orr.w	r2, r3, #4
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e06b      	b.n	80020a6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0d6      	beq.n	8001f8a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb29 	bl	8001644 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01c      	beq.n	8002032 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7d5b      	ldrb	r3, [r3, #21]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d118      	bne.n	8002032 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d111      	bne.n	8002032 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1f      	ldr	r2, [pc, #124]	@ (80020b4 <HAL_ADC_PollForConversion+0x1dc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d002      	beq.n	8002042 <HAL_ADC_PollForConversion+0x16a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	e000      	b.n	8002044 <HAL_ADC_PollForConversion+0x16c>
 8002042:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_ADC_PollForConversion+0x1d8>)
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	4293      	cmp	r3, r2
 800204a:	d008      	beq.n	800205e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d002      	beq.n	800205e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b09      	cmp	r3, #9
 800205c:	d104      	bne.n	8002068 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	e00c      	b.n	8002082 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <HAL_ADC_PollForConversion+0x1dc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d002      	beq.n	8002078 <HAL_ADC_PollForConversion+0x1a0>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	e000      	b.n	800207a <HAL_ADC_PollForConversion+0x1a2>
 8002078:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <HAL_ADC_PollForConversion+0x1d8>)
 800207a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d104      	bne.n	8002092 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2208      	movs	r2, #8
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e008      	b.n	80020a4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	220c      	movs	r2, #12
 80020a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40022100 	.word	0x40022100
 80020b8:	40022300 	.word	0x40022300
 80020bc:	58026300 	.word	0x58026300

080020c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b0a1      	sub	sp, #132	@ 0x84
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a65      	ldr	r2, [pc, #404]	@ (800228c <HAL_ADC_ConfigChannel+0x1b0>)
 80020f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x2a>
 8002102:	2302      	movs	r3, #2
 8002104:	e32e      	b.n	8002764 <HAL_ADC_ConfigChannel+0x688>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fc04 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8313 	bne.w	8002746 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db2c      	blt.n	8002182 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002130:	2b00      	cmp	r3, #0
 8002132:	d108      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x6a>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2201      	movs	r2, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	e016      	b.n	8002174 <HAL_ADC_ConfigChannel+0x98>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002156:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002158:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800215e:	2320      	movs	r3, #32
 8002160:	e003      	b.n	800216a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002162:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2201      	movs	r2, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	69d1      	ldr	r1, [r2, #28]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	430b      	orrs	r3, r1
 8002180:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f7ff fa6b 	bl	800166a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fbc1 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 800219e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fbe3 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 80021aa:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f040 80b8 	bne.w	8002324 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80b4 	bne.w	8002324 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f7ff fa7a 	bl	80016c2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ce:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <HAL_ADC_ConfigChannel+0x1b4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80021d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021da:	d10b      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x118>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	e01d      	b.n	8002230 <HAL_ADC_ConfigChannel+0x154>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10b      	bne.n	800221a <HAL_ADC_ConfigChannel+0x13e>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	e00a      	b.n	8002230 <HAL_ADC_ConfigChannel+0x154>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d02c      	beq.n	8002294 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6919      	ldr	r1, [r3, #16]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002248:	f7ff f9a8 	bl	800159c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6919      	ldr	r1, [r3, #16]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7e5b      	ldrb	r3, [r3, #25]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x186>
 800225c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002260:	e000      	b.n	8002264 <HAL_ADC_ConfigChannel+0x188>
 8002262:	2300      	movs	r3, #0
 8002264:	461a      	mov	r2, r3
 8002266:	f7ff f9d2 	bl	800160e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6919      	ldr	r1, [r3, #16]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7e1b      	ldrb	r3, [r3, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d102      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1a4>
 800227a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800227e:	e000      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1a6>
 8002280:	2300      	movs	r3, #0
 8002282:	461a      	mov	r2, r3
 8002284:	f7ff f9aa 	bl	80015dc <LL_ADC_SetDataRightShift>
 8002288:	e04c      	b.n	8002324 <HAL_ADC_ConfigChannel+0x248>
 800228a:	bf00      	nop
 800228c:	47ff0000 	.word	0x47ff0000
 8002290:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	069b      	lsls	r3, r3, #26
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022b6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	069b      	lsls	r3, r3, #26
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d107      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022da:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	069b      	lsls	r3, r3, #26
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d107      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022fe:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002306:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	069b      	lsls	r3, r3, #26
 8002310:	429a      	cmp	r2, r3
 8002312:	d107      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002322:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff faab 	bl	8001884 <LL_ADC_IsEnabled>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 8211 	bne.w	8002758 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	461a      	mov	r2, r3
 8002344:	f7ff f9e8 	bl	8001718 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4aa1      	ldr	r2, [pc, #644]	@ (80025d4 <HAL_ADC_ConfigChannel+0x4f8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	f040 812e 	bne.w	80025b0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_ADC_ConfigChannel+0x2a0>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2b09      	cmp	r3, #9
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e019      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x2d4>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800238a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800238c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800238e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b09      	cmp	r3, #9
 80023a8:	bf94      	ite	ls
 80023aa:	2301      	movls	r3, #1
 80023ac:	2300      	movhi	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d079      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x2f4>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	069b      	lsls	r3, r3, #26
 80023ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ce:	e015      	b.n	80023fc <HAL_ADC_ConfigChannel+0x320>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80023de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80023e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e003      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80023ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	069b      	lsls	r3, r3, #26
 80023f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_ADC_ConfigChannel+0x340>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e9b      	lsrs	r3, r3, #26
 800240e:	3301      	adds	r3, #1
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	e017      	b.n	800244c <HAL_ADC_ConfigChannel+0x370>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002424:	fa93 f3a3 	rbit	r3, r3
 8002428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800242a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800242c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800242e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002434:	2320      	movs	r3, #32
 8002436:	e003      	b.n	8002440 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800243a:	fab3 f383 	clz	r3, r3
 800243e:	b2db      	uxtb	r3, r3
 8002440:	3301      	adds	r3, #1
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f303 	lsl.w	r3, r1, r3
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x396>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	e018      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x3c8>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002482:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e003      	b.n	8002496 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a4:	430b      	orrs	r3, r1
 80024a6:	e07e      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x3e8>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	3301      	adds	r3, #1
 80024bc:	069b      	lsls	r3, r3, #26
 80024be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c2:	e015      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x414>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80024d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80024dc:	2320      	movs	r3, #32
 80024de:	e003      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80024e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	069b      	lsls	r3, r3, #26
 80024ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x434>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0e9b      	lsrs	r3, r3, #26
 8002502:	3301      	adds	r3, #1
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	e017      	b.n	8002540 <HAL_ADC_ConfigChannel+0x464>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	61bb      	str	r3, [r7, #24]
  return result;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002528:	2320      	movs	r3, #32
 800252a:	e003      	b.n	8002534 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	2101      	movs	r1, #1
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	ea42 0103 	orr.w	r1, r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_ADC_ConfigChannel+0x490>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0e9b      	lsrs	r3, r3, #26
 8002556:	3301      	adds	r3, #1
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	3b1e      	subs	r3, #30
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800256a:	e01b      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x4c8>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	60fb      	str	r3, [r7, #12]
  return result;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e003      	b.n	8002590 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f003 021f 	and.w	r2, r3, #31
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	3b1e      	subs	r3, #30
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	430b      	orrs	r3, r1
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7ff f889 	bl	80016c2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f280 80cf 	bge.w	8002758 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <HAL_ADC_ConfigChannel+0x4fc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x4f2>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <HAL_ADC_ConfigChannel+0x500>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10a      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x508>
 80025ce:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <HAL_ADC_ConfigChannel+0x504>)
 80025d0:	e009      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x50a>
 80025d2:	bf00      	nop
 80025d4:	47ff0000 	.word	0x47ff0000
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40022100 	.word	0x40022100
 80025e0:	40022300 	.word	0x40022300
 80025e4:	4b61      	ldr	r3, [pc, #388]	@ (800276c <HAL_ADC_ConfigChannel+0x690>)
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe ffca 	bl	8001580 <LL_ADC_GetCommonPathInternalCh>
 80025ec:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002770 <HAL_ADC_ConfigChannel+0x694>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_ADC_ConfigChannel+0x526>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002774 <HAL_ADC_ConfigChannel+0x698>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10e      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x544>
 8002602:	485b      	ldr	r0, [pc, #364]	@ (8002770 <HAL_ADC_ConfigChannel+0x694>)
 8002604:	f7ff f93e 	bl	8001884 <LL_ADC_IsEnabled>
 8002608:	4604      	mov	r4, r0
 800260a:	485a      	ldr	r0, [pc, #360]	@ (8002774 <HAL_ADC_ConfigChannel+0x698>)
 800260c:	f7ff f93a 	bl	8001884 <LL_ADC_IsEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	4323      	orrs	r3, r4
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e008      	b.n	8002632 <HAL_ADC_ConfigChannel+0x556>
 8002620:	4855      	ldr	r0, [pc, #340]	@ (8002778 <HAL_ADC_ConfigChannel+0x69c>)
 8002622:	f7ff f92f 	bl	8001884 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d07d      	beq.n	8002732 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a50      	ldr	r2, [pc, #320]	@ (800277c <HAL_ADC_ConfigChannel+0x6a0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d130      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x5c6>
 8002640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d12b      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a4a      	ldr	r2, [pc, #296]	@ (8002778 <HAL_ADC_ConfigChannel+0x69c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	f040 8081 	bne.w	8002758 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a45      	ldr	r2, [pc, #276]	@ (8002770 <HAL_ADC_ConfigChannel+0x694>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_ADC_ConfigChannel+0x58e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a43      	ldr	r2, [pc, #268]	@ (8002774 <HAL_ADC_ConfigChannel+0x698>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x592>
 800266a:	4a45      	ldr	r2, [pc, #276]	@ (8002780 <HAL_ADC_ConfigChannel+0x6a4>)
 800266c:	e000      	b.n	8002670 <HAL_ADC_ConfigChannel+0x594>
 800266e:	4a3f      	ldr	r2, [pc, #252]	@ (800276c <HAL_ADC_ConfigChannel+0x690>)
 8002670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002672:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f7fe ff6e 	bl	800155a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800267e:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <HAL_ADC_ConfigChannel+0x6a8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	099b      	lsrs	r3, r3, #6
 8002684:	4a40      	ldr	r2, [pc, #256]	@ (8002788 <HAL_ADC_ConfigChannel+0x6ac>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	3301      	adds	r3, #1
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002692:	e002      	b.n	800269a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	3b01      	subs	r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a0:	e05a      	b.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a39      	ldr	r2, [pc, #228]	@ (800278c <HAL_ADC_ConfigChannel+0x6b0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d11e      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x60e>
 80026ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d119      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002778 <HAL_ADC_ConfigChannel+0x69c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d14b      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002770 <HAL_ADC_ConfigChannel+0x694>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x5f8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <HAL_ADC_ConfigChannel+0x698>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x5fc>
 80026d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002780 <HAL_ADC_ConfigChannel+0x6a4>)
 80026d6:	e000      	b.n	80026da <HAL_ADC_ConfigChannel+0x5fe>
 80026d8:	4a24      	ldr	r2, [pc, #144]	@ (800276c <HAL_ADC_ConfigChannel+0x690>)
 80026da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f7fe ff39 	bl	800155a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e8:	e036      	b.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a28      	ldr	r2, [pc, #160]	@ (8002790 <HAL_ADC_ConfigChannel+0x6b4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d131      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
 80026f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d12c      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1d      	ldr	r2, [pc, #116]	@ (8002778 <HAL_ADC_ConfigChannel+0x69c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d127      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	@ (8002770 <HAL_ADC_ConfigChannel+0x694>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_ConfigChannel+0x640>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <HAL_ADC_ConfigChannel+0x698>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x644>
 800271c:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_ADC_ConfigChannel+0x6a4>)
 800271e:	e000      	b.n	8002722 <HAL_ADC_ConfigChannel+0x646>
 8002720:	4a12      	ldr	r2, [pc, #72]	@ (800276c <HAL_ADC_ConfigChannel+0x690>)
 8002722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f7fe ff15 	bl	800155a <LL_ADC_SetCommonPathInternalCh>
 8002730:	e012      	b.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002744:	e008      	b.n	8002758 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002760:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002764:	4618      	mov	r0, r3
 8002766:	3784      	adds	r7, #132	@ 0x84
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	58026300 	.word	0x58026300
 8002770:	40022000 	.word	0x40022000
 8002774:	40022100 	.word	0x40022100
 8002778:	58026000 	.word	0x58026000
 800277c:	cb840000 	.word	0xcb840000
 8002780:	40022300 	.word	0x40022300
 8002784:	24000000 	.word	0x24000000
 8002788:	053e2d63 	.word	0x053e2d63
 800278c:	c7520000 	.word	0xc7520000
 8002790:	cfb80000 	.word	0xcfb80000

08002794 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f8b8 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 80027b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f8da 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 80027bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8098 	beq.w	80028fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02a      	beq.n	8002830 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7d5b      	ldrb	r3, [r3, #21]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d126      	bne.n	8002830 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7d1b      	ldrb	r3, [r3, #20]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d122      	bne.n	8002830 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027ee:	e014      	b.n	800281a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4a45      	ldr	r2, [pc, #276]	@ (8002908 <ADC_ConversionStop+0x174>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d90d      	bls.n	8002814 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e074      	b.n	80028fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3301      	adds	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	d1e3      	bne.n	80027f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d014      	beq.n	8002860 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f870 	bl	8001920 <LL_ADC_REG_IsConversionOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f82d 	bl	80018aa <LL_ADC_IsDisableOngoing>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f84c 	bl	80018f8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d014      	beq.n	8002890 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f880 	bl	8001970 <LL_ADC_INJ_IsConversionOngoing>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f815 	bl	80018aa <LL_ADC_IsDisableOngoing>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f85c 	bl	8001948 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d005      	beq.n	80028a2 <ADC_ConversionStop+0x10e>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d105      	bne.n	80028a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800289c:	230c      	movs	r3, #12
 800289e:	617b      	str	r3, [r7, #20]
        break;
 80028a0:	e005      	b.n	80028ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028a2:	2308      	movs	r3, #8
 80028a4:	617b      	str	r3, [r7, #20]
        break;
 80028a6:	e002      	b.n	80028ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028a8:	2304      	movs	r3, #4
 80028aa:	617b      	str	r3, [r7, #20]
        break;
 80028ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028ae:	f7fe fdef 	bl	8001490 <HAL_GetTick>
 80028b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028b4:	e01b      	b.n	80028ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028b6:	f7fe fdeb 	bl	8001490 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d914      	bls.n	80028ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e007      	b.n	80028fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1dc      	bne.n	80028b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	000cdbff 	.word	0x000cdbff

0800290c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe ffb3 	bl	8001884 <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d16e      	bne.n	8002a02 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <ADC_Enable+0x100>)
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e05a      	b.n	8002a04 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe ff6e 	bl	8001834 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002958:	f7fe fd9a 	bl	8001490 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2b      	ldr	r2, [pc, #172]	@ (8002a10 <ADC_Enable+0x104>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <ADC_Enable+0x66>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a29      	ldr	r2, [pc, #164]	@ (8002a14 <ADC_Enable+0x108>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <ADC_Enable+0x6a>
 8002972:	4b29      	ldr	r3, [pc, #164]	@ (8002a18 <ADC_Enable+0x10c>)
 8002974:	e000      	b.n	8002978 <ADC_Enable+0x6c>
 8002976:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <ADC_Enable+0x110>)
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fef1 	bl	8001760 <LL_ADC_GetMultimode>
 800297e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a23      	ldr	r2, [pc, #140]	@ (8002a14 <ADC_Enable+0x108>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d002      	beq.n	8002990 <ADC_Enable+0x84>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e000      	b.n	8002992 <ADC_Enable+0x86>
 8002990:	4b1f      	ldr	r3, [pc, #124]	@ (8002a10 <ADC_Enable+0x104>)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	4293      	cmp	r3, r2
 8002998:	d02c      	beq.n	80029f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d130      	bne.n	8002a02 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029a0:	e028      	b.n	80029f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe ff6c 	bl	8001884 <LL_ADC_IsEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe ff3c 	bl	8001834 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029bc:	f7fe fd68 	bl	8001490 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d914      	bls.n	80029f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d00d      	beq.n	80029f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	f043 0210 	orr.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d1cf      	bne.n	80029a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	8000003f 	.word	0x8000003f
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40022100 	.word	0x40022100
 8002a18:	40022300 	.word	0x40022300
 8002a1c:	58026300 	.word	0x58026300

08002a20 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe ff3c 	bl	80018aa <LL_ADC_IsDisableOngoing>
 8002a32:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe ff23 	bl	8001884 <LL_ADC_IsEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d047      	beq.n	8002ad4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d144      	bne.n	8002ad4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030d 	and.w	r3, r3, #13
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10c      	bne.n	8002a72 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe fefd 	bl	800185c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2203      	movs	r2, #3
 8002a68:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a6a:	f7fe fd11 	bl	8001490 <HAL_GetTick>
 8002a6e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a70:	e029      	b.n	8002ac6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e023      	b.n	8002ad6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a8e:	f7fe fcff 	bl	8001490 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d914      	bls.n	8002ac6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e007      	b.n	8002ad6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1dc      	bne.n	8002a8e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a7a      	ldr	r2, [pc, #488]	@ (8002cd8 <ADC_ConfigureBoostMode+0x1f8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d004      	beq.n	8002afc <ADC_ConfigureBoostMode+0x1c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a79      	ldr	r2, [pc, #484]	@ (8002cdc <ADC_ConfigureBoostMode+0x1fc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d109      	bne.n	8002b10 <ADC_ConfigureBoostMode+0x30>
 8002afc:	4b78      	ldr	r3, [pc, #480]	@ (8002ce0 <ADC_ConfigureBoostMode+0x200>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e008      	b.n	8002b22 <ADC_ConfigureBoostMode+0x42>
 8002b10:	4b74      	ldr	r3, [pc, #464]	@ (8002ce4 <ADC_ConfigureBoostMode+0x204>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01c      	beq.n	8002b60 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b26:	f002 f9f3 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8002b2a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b34:	d010      	beq.n	8002b58 <ADC_ConfigureBoostMode+0x78>
 8002b36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b3a:	d873      	bhi.n	8002c24 <ADC_ConfigureBoostMode+0x144>
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b40:	d002      	beq.n	8002b48 <ADC_ConfigureBoostMode+0x68>
 8002b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b46:	d16d      	bne.n	8002c24 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	60fb      	str	r3, [r7, #12]
        break;
 8002b56:	e068      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	60fb      	str	r3, [r7, #12]
        break;
 8002b5e:	e064      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b60:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f003 fc78 	bl	800645c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b6c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b76:	d051      	beq.n	8002c1c <ADC_ConfigureBoostMode+0x13c>
 8002b78:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002b7c:	d854      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002b7e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b82:	d047      	beq.n	8002c14 <ADC_ConfigureBoostMode+0x134>
 8002b84:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002b88:	d84e      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002b8a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b8e:	d03d      	beq.n	8002c0c <ADC_ConfigureBoostMode+0x12c>
 8002b90:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002b94:	d848      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002b96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b9a:	d033      	beq.n	8002c04 <ADC_ConfigureBoostMode+0x124>
 8002b9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ba0:	d842      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002ba2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002ba6:	d029      	beq.n	8002bfc <ADC_ConfigureBoostMode+0x11c>
 8002ba8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002bac:	d83c      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002bae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bb2:	d01a      	beq.n	8002bea <ADC_ConfigureBoostMode+0x10a>
 8002bb4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bb8:	d836      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002bba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bbe:	d014      	beq.n	8002bea <ADC_ConfigureBoostMode+0x10a>
 8002bc0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bc4:	d830      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bca:	d00e      	beq.n	8002bea <ADC_ConfigureBoostMode+0x10a>
 8002bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd0:	d82a      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002bd2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002bd6:	d008      	beq.n	8002bea <ADC_ConfigureBoostMode+0x10a>
 8002bd8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002bdc:	d824      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x148>
 8002bde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002be2:	d002      	beq.n	8002bea <ADC_ConfigureBoostMode+0x10a>
 8002be4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002be8:	d11e      	bne.n	8002c28 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0c9b      	lsrs	r3, r3, #18
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
        break;
 8002bfa:	e016      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
        break;
 8002c02:	e012      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	60fb      	str	r3, [r7, #12]
        break;
 8002c0a:	e00e      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	60fb      	str	r3, [r7, #12]
        break;
 8002c12:	e00a      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	09db      	lsrs	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
        break;
 8002c1a:	e006      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	60fb      	str	r3, [r7, #12]
        break;
 8002c22:	e002      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002c28:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c2a:	f7fe fc61 	bl	80014f0 <HAL_GetREVID>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d815      	bhi.n	8002c64 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce8 <ADC_ConfigureBoostMode+0x208>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d908      	bls.n	8002c52 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c50:	e03e      	b.n	8002cd0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c60:	609a      	str	r2, [r3, #8]
}
 8002c62:	e035      	b.n	8002cd0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cec <ADC_ConfigureBoostMode+0x20c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d808      	bhi.n	8002c84 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	e025      	b.n	8002cd0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf0 <ADC_ConfigureBoostMode+0x210>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d80a      	bhi.n	8002ca2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	e016      	b.n	8002cd0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <ADC_ConfigureBoostMode+0x214>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d80a      	bhi.n	8002cc0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cbc:	609a      	str	r2, [r3, #8]
}
 8002cbe:	e007      	b.n	8002cd0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022100 	.word	0x40022100
 8002ce0:	40022300 	.word	0x40022300
 8002ce4:	58026300 	.word	0x58026300
 8002ce8:	01312d00 	.word	0x01312d00
 8002cec:	005f5e10 	.word	0x005f5e10
 8002cf0:	00bebc20 	.word	0x00bebc20
 8002cf4:	017d7840 	.word	0x017d7840

08002cf8 <LL_ADC_IsEnabled>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <LL_ADC_IsEnabled+0x18>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <LL_ADC_IsEnabled+0x1a>
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d101      	bne.n	8002d36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b09f      	sub	sp, #124	@ 0x7c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0be      	b.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e001      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e09d      	b.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffb9 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002dac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffb3 	bl	8002d1e <LL_ADC_REG_IsConversionOngoing>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d17f      	bne.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d17c      	bne.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a47      	ldr	r2, [pc, #284]	@ (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a46      	ldr	r2, [pc, #280]	@ (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002dd8:	4b45      	ldr	r3, [pc, #276]	@ (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002dda:	e000      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ddc:	4b45      	ldr	r3, [pc, #276]	@ (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002dde:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d039      	beq.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002df8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a38      	ldr	r2, [pc, #224]	@ (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10e      	bne.n	8002e2c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e0e:	4836      	ldr	r0, [pc, #216]	@ (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e10:	f7ff ff72 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e14:	4604      	mov	r4, r0
 8002e16:	4835      	ldr	r0, [pc, #212]	@ (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e18:	f7ff ff6e 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4323      	orrs	r3, r4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e008      	b.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002e2c:	4832      	ldr	r0, [pc, #200]	@ (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e2e:	f7ff ff63 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d047      	beq.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6811      	ldr	r1, [r2, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	6892      	ldr	r2, [r2, #8]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	431a      	orrs	r2, r3
 8002e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e58:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5a:	e03a      	b.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	@ (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10e      	bne.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002e7c:	481a      	ldr	r0, [pc, #104]	@ (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e7e:	f7ff ff3b 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e82:	4604      	mov	r4, r0
 8002e84:	4819      	ldr	r0, [pc, #100]	@ (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e86:	f7ff ff37 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4323      	orrs	r3, r4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	e008      	b.n	8002eac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e9a:	4817      	ldr	r0, [pc, #92]	@ (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e9c:	f7ff ff2c 	bl	8002cf8 <LL_ADC_IsEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002eba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ebc:	e009      	b.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec2:	f043 0220 	orr.w	r2, r3, #32
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002ed0:	e000      	b.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002edc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	377c      	adds	r7, #124	@ 0x7c
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40022100 	.word	0x40022100
 8002ef0:	40022300 	.word	0x40022300
 8002ef4:	58026300 	.word	0x58026300
 8002ef8:	58026000 	.word	0x58026000
 8002efc:	fffff0e0 	.word	0xfffff0e0

08002f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <__NVIC_SetPriorityGrouping+0x40>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00
 8002f44:	05fa0000 	.word	0x05fa0000

08002f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4907      	ldr	r1, [pc, #28]	@ (8002f9c <__NVIC_EnableIRQ+0x38>)
 8002f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	6039      	str	r1, [r7, #0]
 8002faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	db0a      	blt.n	8002fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	490c      	ldr	r1, [pc, #48]	@ (8002fec <__NVIC_SetPriority+0x4c>)
 8002fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fbe:	0112      	lsls	r2, r2, #4
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc8:	e00a      	b.n	8002fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4908      	ldr	r1, [pc, #32]	@ (8002ff0 <__NVIC_SetPriority+0x50>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	3b04      	subs	r3, #4
 8002fd8:	0112      	lsls	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	440b      	add	r3, r1
 8002fde:	761a      	strb	r2, [r3, #24]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000e100 	.word	0xe000e100
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	bf28      	it	cs
 8003012:	2304      	movcs	r3, #4
 8003014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3304      	adds	r3, #4
 800301a:	2b06      	cmp	r3, #6
 800301c:	d902      	bls.n	8003024 <NVIC_EncodePriority+0x30>
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3b03      	subs	r3, #3
 8003022:	e000      	b.n	8003026 <NVIC_EncodePriority+0x32>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	f04f 32ff 	mov.w	r2, #4294967295
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800303c:	f04f 31ff 	mov.w	r1, #4294967295
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	43d9      	mvns	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	4313      	orrs	r3, r2
         );
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	@ 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800306c:	d301      	bcc.n	8003072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306e:	2301      	movs	r3, #1
 8003070:	e00f      	b.n	8003092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003072:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <SysTick_Config+0x40>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800307a:	210f      	movs	r1, #15
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f7ff ff8e 	bl	8002fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <SysTick_Config+0x40>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800308a:	4b04      	ldr	r3, [pc, #16]	@ (800309c <SysTick_Config+0x40>)
 800308c:	2207      	movs	r2, #7
 800308e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	e000e010 	.word	0xe000e010

080030a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff29 	bl	8002f00 <__NVIC_SetPriorityGrouping>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b086      	sub	sp, #24
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030c4:	f7ff ff40 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 80030c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ff90 	bl	8002ff4 <NVIC_EncodePriority>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff5f 	bl	8002fa0 <__NVIC_SetPriority>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff33 	bl	8002f64 <__NVIC_EnableIRQ>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffa4 	bl	800305c <SysTick_Config>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003128:	f7fe f9b2 	bl	8001490 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e2dc      	b.n	80036f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d008      	beq.n	8003156 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e2cd      	b.n	80036f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a76      	ldr	r2, [pc, #472]	@ (8003334 <HAL_DMA_Abort+0x214>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04a      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a74      	ldr	r2, [pc, #464]	@ (8003338 <HAL_DMA_Abort+0x218>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d045      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a73      	ldr	r2, [pc, #460]	@ (800333c <HAL_DMA_Abort+0x21c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a71      	ldr	r2, [pc, #452]	@ (8003340 <HAL_DMA_Abort+0x220>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03b      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a70      	ldr	r2, [pc, #448]	@ (8003344 <HAL_DMA_Abort+0x224>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6e      	ldr	r2, [pc, #440]	@ (8003348 <HAL_DMA_Abort+0x228>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a6d      	ldr	r2, [pc, #436]	@ (800334c <HAL_DMA_Abort+0x22c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02c      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003350 <HAL_DMA_Abort+0x230>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6a      	ldr	r2, [pc, #424]	@ (8003354 <HAL_DMA_Abort+0x234>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a68      	ldr	r2, [pc, #416]	@ (8003358 <HAL_DMA_Abort+0x238>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a67      	ldr	r2, [pc, #412]	@ (800335c <HAL_DMA_Abort+0x23c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a65      	ldr	r2, [pc, #404]	@ (8003360 <HAL_DMA_Abort+0x240>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a64      	ldr	r2, [pc, #400]	@ (8003364 <HAL_DMA_Abort+0x244>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a62      	ldr	r2, [pc, #392]	@ (8003368 <HAL_DMA_Abort+0x248>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a61      	ldr	r2, [pc, #388]	@ (800336c <HAL_DMA_Abort+0x24c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_Abort+0xd6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003370 <HAL_DMA_Abort+0x250>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_DMA_Abort+0xda>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_DMA_Abort+0xdc>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 021e 	bic.w	r2, r2, #30
 800320e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800321e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e00a      	b.n	800323e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 020e 	bic.w	r2, r2, #14
 8003236:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a3c      	ldr	r2, [pc, #240]	@ (8003334 <HAL_DMA_Abort+0x214>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d072      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a3a      	ldr	r2, [pc, #232]	@ (8003338 <HAL_DMA_Abort+0x218>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d06d      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a39      	ldr	r2, [pc, #228]	@ (800333c <HAL_DMA_Abort+0x21c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d068      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a37      	ldr	r2, [pc, #220]	@ (8003340 <HAL_DMA_Abort+0x220>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d063      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a36      	ldr	r2, [pc, #216]	@ (8003344 <HAL_DMA_Abort+0x224>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d05e      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a34      	ldr	r2, [pc, #208]	@ (8003348 <HAL_DMA_Abort+0x228>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d059      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a33      	ldr	r2, [pc, #204]	@ (800334c <HAL_DMA_Abort+0x22c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d054      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a31      	ldr	r2, [pc, #196]	@ (8003350 <HAL_DMA_Abort+0x230>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d04f      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a30      	ldr	r2, [pc, #192]	@ (8003354 <HAL_DMA_Abort+0x234>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d04a      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2e      	ldr	r2, [pc, #184]	@ (8003358 <HAL_DMA_Abort+0x238>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d045      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2d      	ldr	r2, [pc, #180]	@ (800335c <HAL_DMA_Abort+0x23c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d040      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003360 <HAL_DMA_Abort+0x240>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d03b      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003364 <HAL_DMA_Abort+0x244>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d036      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <HAL_DMA_Abort+0x248>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d031      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a27      	ldr	r2, [pc, #156]	@ (800336c <HAL_DMA_Abort+0x24c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d02c      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a25      	ldr	r2, [pc, #148]	@ (8003370 <HAL_DMA_Abort+0x250>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d027      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a24      	ldr	r2, [pc, #144]	@ (8003374 <HAL_DMA_Abort+0x254>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d022      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a22      	ldr	r2, [pc, #136]	@ (8003378 <HAL_DMA_Abort+0x258>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01d      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a21      	ldr	r2, [pc, #132]	@ (800337c <HAL_DMA_Abort+0x25c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d018      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1f      	ldr	r2, [pc, #124]	@ (8003380 <HAL_DMA_Abort+0x260>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1e      	ldr	r2, [pc, #120]	@ (8003384 <HAL_DMA_Abort+0x264>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <HAL_DMA_Abort+0x268>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1b      	ldr	r2, [pc, #108]	@ (800338c <HAL_DMA_Abort+0x26c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_DMA_Abort+0x20e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a19      	ldr	r2, [pc, #100]	@ (8003390 <HAL_DMA_Abort+0x270>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d132      	bne.n	8003394 <HAL_DMA_Abort+0x274>
 800332e:	2301      	movs	r3, #1
 8003330:	e031      	b.n	8003396 <HAL_DMA_Abort+0x276>
 8003332:	bf00      	nop
 8003334:	40020010 	.word	0x40020010
 8003338:	40020028 	.word	0x40020028
 800333c:	40020040 	.word	0x40020040
 8003340:	40020058 	.word	0x40020058
 8003344:	40020070 	.word	0x40020070
 8003348:	40020088 	.word	0x40020088
 800334c:	400200a0 	.word	0x400200a0
 8003350:	400200b8 	.word	0x400200b8
 8003354:	40020410 	.word	0x40020410
 8003358:	40020428 	.word	0x40020428
 800335c:	40020440 	.word	0x40020440
 8003360:	40020458 	.word	0x40020458
 8003364:	40020470 	.word	0x40020470
 8003368:	40020488 	.word	0x40020488
 800336c:	400204a0 	.word	0x400204a0
 8003370:	400204b8 	.word	0x400204b8
 8003374:	58025408 	.word	0x58025408
 8003378:	5802541c 	.word	0x5802541c
 800337c:	58025430 	.word	0x58025430
 8003380:	58025444 	.word	0x58025444
 8003384:	58025458 	.word	0x58025458
 8003388:	5802546c 	.word	0x5802546c
 800338c:	58025480 	.word	0x58025480
 8003390:	58025494 	.word	0x58025494
 8003394:	2300      	movs	r3, #0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003564 <HAL_DMA_Abort+0x444>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04a      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003568 <HAL_DMA_Abort+0x448>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d045      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6a      	ldr	r2, [pc, #424]	@ (800356c <HAL_DMA_Abort+0x44c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d040      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a68      	ldr	r2, [pc, #416]	@ (8003570 <HAL_DMA_Abort+0x450>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d03b      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a67      	ldr	r2, [pc, #412]	@ (8003574 <HAL_DMA_Abort+0x454>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d036      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a65      	ldr	r2, [pc, #404]	@ (8003578 <HAL_DMA_Abort+0x458>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d031      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a64      	ldr	r2, [pc, #400]	@ (800357c <HAL_DMA_Abort+0x45c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d02c      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a62      	ldr	r2, [pc, #392]	@ (8003580 <HAL_DMA_Abort+0x460>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d027      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a61      	ldr	r2, [pc, #388]	@ (8003584 <HAL_DMA_Abort+0x464>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d022      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a5f      	ldr	r2, [pc, #380]	@ (8003588 <HAL_DMA_Abort+0x468>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01d      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5e      	ldr	r2, [pc, #376]	@ (800358c <HAL_DMA_Abort+0x46c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d018      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5c      	ldr	r2, [pc, #368]	@ (8003590 <HAL_DMA_Abort+0x470>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a5b      	ldr	r2, [pc, #364]	@ (8003594 <HAL_DMA_Abort+0x474>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a59      	ldr	r2, [pc, #356]	@ (8003598 <HAL_DMA_Abort+0x478>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a58      	ldr	r2, [pc, #352]	@ (800359c <HAL_DMA_Abort+0x47c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_DMA_Abort+0x32a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a56      	ldr	r2, [pc, #344]	@ (80035a0 <HAL_DMA_Abort+0x480>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d108      	bne.n	800345c <HAL_DMA_Abort+0x33c>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <HAL_DMA_Abort+0x34c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800346c:	e013      	b.n	8003496 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346e:	f7fe f80f 	bl	8001490 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b05      	cmp	r3, #5
 800347a:	d90c      	bls.n	8003496 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e12d      	b.n	80036f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003564 <HAL_DMA_Abort+0x444>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d04a      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003568 <HAL_DMA_Abort+0x448>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d045      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2c      	ldr	r2, [pc, #176]	@ (800356c <HAL_DMA_Abort+0x44c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d040      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003570 <HAL_DMA_Abort+0x450>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d03b      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a29      	ldr	r2, [pc, #164]	@ (8003574 <HAL_DMA_Abort+0x454>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d036      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a27      	ldr	r2, [pc, #156]	@ (8003578 <HAL_DMA_Abort+0x458>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a26      	ldr	r2, [pc, #152]	@ (800357c <HAL_DMA_Abort+0x45c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d02c      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a24      	ldr	r2, [pc, #144]	@ (8003580 <HAL_DMA_Abort+0x460>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a23      	ldr	r2, [pc, #140]	@ (8003584 <HAL_DMA_Abort+0x464>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <HAL_DMA_Abort+0x468>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a20      	ldr	r2, [pc, #128]	@ (800358c <HAL_DMA_Abort+0x46c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1e      	ldr	r2, [pc, #120]	@ (8003590 <HAL_DMA_Abort+0x470>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_DMA_Abort+0x474>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1b      	ldr	r2, [pc, #108]	@ (8003598 <HAL_DMA_Abort+0x478>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1a      	ldr	r2, [pc, #104]	@ (800359c <HAL_DMA_Abort+0x47c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_DMA_Abort+0x422>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <HAL_DMA_Abort+0x480>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Abort+0x426>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_DMA_Abort+0x428>
 8003546:	2300      	movs	r3, #0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02b      	beq.n	80035a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	223f      	movs	r2, #63	@ 0x3f
 800355c:	409a      	lsls	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	e02a      	b.n	80035ba <HAL_DMA_Abort+0x49a>
 8003564:	40020010 	.word	0x40020010
 8003568:	40020028 	.word	0x40020028
 800356c:	40020040 	.word	0x40020040
 8003570:	40020058 	.word	0x40020058
 8003574:	40020070 	.word	0x40020070
 8003578:	40020088 	.word	0x40020088
 800357c:	400200a0 	.word	0x400200a0
 8003580:	400200b8 	.word	0x400200b8
 8003584:	40020410 	.word	0x40020410
 8003588:	40020428 	.word	0x40020428
 800358c:	40020440 	.word	0x40020440
 8003590:	40020458 	.word	0x40020458
 8003594:	40020470 	.word	0x40020470
 8003598:	40020488 	.word	0x40020488
 800359c:	400204a0 	.word	0x400204a0
 80035a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2201      	movs	r2, #1
 80035b4:	409a      	lsls	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a4f      	ldr	r2, [pc, #316]	@ (80036fc <HAL_DMA_Abort+0x5dc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d072      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003700 <HAL_DMA_Abort+0x5e0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d06d      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003704 <HAL_DMA_Abort+0x5e4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d068      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <HAL_DMA_Abort+0x5e8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d063      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a49      	ldr	r2, [pc, #292]	@ (800370c <HAL_DMA_Abort+0x5ec>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d05e      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a47      	ldr	r2, [pc, #284]	@ (8003710 <HAL_DMA_Abort+0x5f0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d059      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a46      	ldr	r2, [pc, #280]	@ (8003714 <HAL_DMA_Abort+0x5f4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d054      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a44      	ldr	r2, [pc, #272]	@ (8003718 <HAL_DMA_Abort+0x5f8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d04f      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a43      	ldr	r2, [pc, #268]	@ (800371c <HAL_DMA_Abort+0x5fc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04a      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a41      	ldr	r2, [pc, #260]	@ (8003720 <HAL_DMA_Abort+0x600>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d045      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a40      	ldr	r2, [pc, #256]	@ (8003724 <HAL_DMA_Abort+0x604>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d040      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3e      	ldr	r2, [pc, #248]	@ (8003728 <HAL_DMA_Abort+0x608>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a3d      	ldr	r2, [pc, #244]	@ (800372c <HAL_DMA_Abort+0x60c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d036      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3b      	ldr	r2, [pc, #236]	@ (8003730 <HAL_DMA_Abort+0x610>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3a      	ldr	r2, [pc, #232]	@ (8003734 <HAL_DMA_Abort+0x614>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d02c      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a38      	ldr	r2, [pc, #224]	@ (8003738 <HAL_DMA_Abort+0x618>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d027      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a37      	ldr	r2, [pc, #220]	@ (800373c <HAL_DMA_Abort+0x61c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a35      	ldr	r2, [pc, #212]	@ (8003740 <HAL_DMA_Abort+0x620>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01d      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <HAL_DMA_Abort+0x624>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d018      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a32      	ldr	r2, [pc, #200]	@ (8003748 <HAL_DMA_Abort+0x628>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a31      	ldr	r2, [pc, #196]	@ (800374c <HAL_DMA_Abort+0x62c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2f      	ldr	r2, [pc, #188]	@ (8003750 <HAL_DMA_Abort+0x630>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2e      	ldr	r2, [pc, #184]	@ (8003754 <HAL_DMA_Abort+0x634>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_DMA_Abort+0x58a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003758 <HAL_DMA_Abort+0x638>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d101      	bne.n	80036ae <HAL_DMA_Abort+0x58e>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_DMA_Abort+0x590>
 80036ae:	2300      	movs	r3, #0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40020010 	.word	0x40020010
 8003700:	40020028 	.word	0x40020028
 8003704:	40020040 	.word	0x40020040
 8003708:	40020058 	.word	0x40020058
 800370c:	40020070 	.word	0x40020070
 8003710:	40020088 	.word	0x40020088
 8003714:	400200a0 	.word	0x400200a0
 8003718:	400200b8 	.word	0x400200b8
 800371c:	40020410 	.word	0x40020410
 8003720:	40020428 	.word	0x40020428
 8003724:	40020440 	.word	0x40020440
 8003728:	40020458 	.word	0x40020458
 800372c:	40020470 	.word	0x40020470
 8003730:	40020488 	.word	0x40020488
 8003734:	400204a0 	.word	0x400204a0
 8003738:	400204b8 	.word	0x400204b8
 800373c:	58025408 	.word	0x58025408
 8003740:	5802541c 	.word	0x5802541c
 8003744:	58025430 	.word	0x58025430
 8003748:	58025444 	.word	0x58025444
 800374c:	58025458 	.word	0x58025458
 8003750:	5802546c 	.word	0x5802546c
 8003754:	58025480 	.word	0x58025480
 8003758:	58025494 	.word	0x58025494

0800375c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e237      	b.n	8003bde <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d004      	beq.n	8003784 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2280      	movs	r2, #128	@ 0x80
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e22c      	b.n	8003bde <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a5c      	ldr	r2, [pc, #368]	@ (80038fc <HAL_DMA_Abort_IT+0x1a0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d04a      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a5b      	ldr	r2, [pc, #364]	@ (8003900 <HAL_DMA_Abort_IT+0x1a4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d045      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a59      	ldr	r2, [pc, #356]	@ (8003904 <HAL_DMA_Abort_IT+0x1a8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d040      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a58      	ldr	r2, [pc, #352]	@ (8003908 <HAL_DMA_Abort_IT+0x1ac>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d03b      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a56      	ldr	r2, [pc, #344]	@ (800390c <HAL_DMA_Abort_IT+0x1b0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d036      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a55      	ldr	r2, [pc, #340]	@ (8003910 <HAL_DMA_Abort_IT+0x1b4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d031      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a53      	ldr	r2, [pc, #332]	@ (8003914 <HAL_DMA_Abort_IT+0x1b8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d02c      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a52      	ldr	r2, [pc, #328]	@ (8003918 <HAL_DMA_Abort_IT+0x1bc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d027      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a50      	ldr	r2, [pc, #320]	@ (800391c <HAL_DMA_Abort_IT+0x1c0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d022      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003920 <HAL_DMA_Abort_IT+0x1c4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d01d      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003924 <HAL_DMA_Abort_IT+0x1c8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d018      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003928 <HAL_DMA_Abort_IT+0x1cc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d013      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a4a      	ldr	r2, [pc, #296]	@ (800392c <HAL_DMA_Abort_IT+0x1d0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00e      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a49      	ldr	r2, [pc, #292]	@ (8003930 <HAL_DMA_Abort_IT+0x1d4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a47      	ldr	r2, [pc, #284]	@ (8003934 <HAL_DMA_Abort_IT+0x1d8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_DMA_Abort_IT+0xc8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a46      	ldr	r2, [pc, #280]	@ (8003938 <HAL_DMA_Abort_IT+0x1dc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_DMA_Abort_IT+0xcc>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_DMA_Abort_IT+0xce>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8086 	beq.w	800393c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2204      	movs	r2, #4
 8003834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a2f      	ldr	r2, [pc, #188]	@ (80038fc <HAL_DMA_Abort_IT+0x1a0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d04a      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <HAL_DMA_Abort_IT+0x1a4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d045      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2c      	ldr	r2, [pc, #176]	@ (8003904 <HAL_DMA_Abort_IT+0x1a8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d040      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <HAL_DMA_Abort_IT+0x1ac>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d03b      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a29      	ldr	r2, [pc, #164]	@ (800390c <HAL_DMA_Abort_IT+0x1b0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d036      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a28      	ldr	r2, [pc, #160]	@ (8003910 <HAL_DMA_Abort_IT+0x1b4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d031      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a26      	ldr	r2, [pc, #152]	@ (8003914 <HAL_DMA_Abort_IT+0x1b8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d02c      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a25      	ldr	r2, [pc, #148]	@ (8003918 <HAL_DMA_Abort_IT+0x1bc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d027      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a23      	ldr	r2, [pc, #140]	@ (800391c <HAL_DMA_Abort_IT+0x1c0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d022      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <HAL_DMA_Abort_IT+0x1c4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d01d      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a20      	ldr	r2, [pc, #128]	@ (8003924 <HAL_DMA_Abort_IT+0x1c8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d018      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <HAL_DMA_Abort_IT+0x1cc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	@ (800392c <HAL_DMA_Abort_IT+0x1d0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00e      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1c      	ldr	r2, [pc, #112]	@ (8003930 <HAL_DMA_Abort_IT+0x1d4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003934 <HAL_DMA_Abort_IT+0x1d8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_DMA_Abort_IT+0x17c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a19      	ldr	r2, [pc, #100]	@ (8003938 <HAL_DMA_Abort_IT+0x1dc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d108      	bne.n	80038ea <HAL_DMA_Abort_IT+0x18e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e178      	b.n	8003bdc <HAL_DMA_Abort_IT+0x480>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e16f      	b.n	8003bdc <HAL_DMA_Abort_IT+0x480>
 80038fc:	40020010 	.word	0x40020010
 8003900:	40020028 	.word	0x40020028
 8003904:	40020040 	.word	0x40020040
 8003908:	40020058 	.word	0x40020058
 800390c:	40020070 	.word	0x40020070
 8003910:	40020088 	.word	0x40020088
 8003914:	400200a0 	.word	0x400200a0
 8003918:	400200b8 	.word	0x400200b8
 800391c:	40020410 	.word	0x40020410
 8003920:	40020428 	.word	0x40020428
 8003924:	40020440 	.word	0x40020440
 8003928:	40020458 	.word	0x40020458
 800392c:	40020470 	.word	0x40020470
 8003930:	40020488 	.word	0x40020488
 8003934:	400204a0 	.word	0x400204a0
 8003938:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 020e 	bic.w	r2, r2, #14
 800394a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6c      	ldr	r2, [pc, #432]	@ (8003b04 <HAL_DMA_Abort_IT+0x3a8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d04a      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6b      	ldr	r2, [pc, #428]	@ (8003b08 <HAL_DMA_Abort_IT+0x3ac>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d045      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a69      	ldr	r2, [pc, #420]	@ (8003b0c <HAL_DMA_Abort_IT+0x3b0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d040      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a68      	ldr	r2, [pc, #416]	@ (8003b10 <HAL_DMA_Abort_IT+0x3b4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d03b      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a66      	ldr	r2, [pc, #408]	@ (8003b14 <HAL_DMA_Abort_IT+0x3b8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d036      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a65      	ldr	r2, [pc, #404]	@ (8003b18 <HAL_DMA_Abort_IT+0x3bc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d031      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a63      	ldr	r2, [pc, #396]	@ (8003b1c <HAL_DMA_Abort_IT+0x3c0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02c      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a62      	ldr	r2, [pc, #392]	@ (8003b20 <HAL_DMA_Abort_IT+0x3c4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d027      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a60      	ldr	r2, [pc, #384]	@ (8003b24 <HAL_DMA_Abort_IT+0x3c8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d022      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5f      	ldr	r2, [pc, #380]	@ (8003b28 <HAL_DMA_Abort_IT+0x3cc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d01d      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5d      	ldr	r2, [pc, #372]	@ (8003b2c <HAL_DMA_Abort_IT+0x3d0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d018      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5c      	ldr	r2, [pc, #368]	@ (8003b30 <HAL_DMA_Abort_IT+0x3d4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b34 <HAL_DMA_Abort_IT+0x3d8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a59      	ldr	r2, [pc, #356]	@ (8003b38 <HAL_DMA_Abort_IT+0x3dc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a57      	ldr	r2, [pc, #348]	@ (8003b3c <HAL_DMA_Abort_IT+0x3e0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_DMA_Abort_IT+0x290>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a56      	ldr	r2, [pc, #344]	@ (8003b40 <HAL_DMA_Abort_IT+0x3e4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <HAL_DMA_Abort_IT+0x2a2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e007      	b.n	8003a0e <HAL_DMA_Abort_IT+0x2b2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a3c      	ldr	r2, [pc, #240]	@ (8003b04 <HAL_DMA_Abort_IT+0x3a8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d072      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b08 <HAL_DMA_Abort_IT+0x3ac>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d06d      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a39      	ldr	r2, [pc, #228]	@ (8003b0c <HAL_DMA_Abort_IT+0x3b0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d068      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a37      	ldr	r2, [pc, #220]	@ (8003b10 <HAL_DMA_Abort_IT+0x3b4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d063      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a36      	ldr	r2, [pc, #216]	@ (8003b14 <HAL_DMA_Abort_IT+0x3b8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d05e      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a34      	ldr	r2, [pc, #208]	@ (8003b18 <HAL_DMA_Abort_IT+0x3bc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d059      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a33      	ldr	r2, [pc, #204]	@ (8003b1c <HAL_DMA_Abort_IT+0x3c0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d054      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a31      	ldr	r2, [pc, #196]	@ (8003b20 <HAL_DMA_Abort_IT+0x3c4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d04f      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a30      	ldr	r2, [pc, #192]	@ (8003b24 <HAL_DMA_Abort_IT+0x3c8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b28 <HAL_DMA_Abort_IT+0x3cc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2d      	ldr	r2, [pc, #180]	@ (8003b2c <HAL_DMA_Abort_IT+0x3d0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2b      	ldr	r2, [pc, #172]	@ (8003b30 <HAL_DMA_Abort_IT+0x3d4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b34 <HAL_DMA_Abort_IT+0x3d8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a28      	ldr	r2, [pc, #160]	@ (8003b38 <HAL_DMA_Abort_IT+0x3dc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a27      	ldr	r2, [pc, #156]	@ (8003b3c <HAL_DMA_Abort_IT+0x3e0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a25      	ldr	r2, [pc, #148]	@ (8003b40 <HAL_DMA_Abort_IT+0x3e4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <HAL_DMA_Abort_IT+0x3e8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a22      	ldr	r2, [pc, #136]	@ (8003b48 <HAL_DMA_Abort_IT+0x3ec>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <HAL_DMA_Abort_IT+0x3f0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b50 <HAL_DMA_Abort_IT+0x3f4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	@ (8003b54 <HAL_DMA_Abort_IT+0x3f8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b58 <HAL_DMA_Abort_IT+0x3fc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1b      	ldr	r2, [pc, #108]	@ (8003b5c <HAL_DMA_Abort_IT+0x400>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_Abort_IT+0x3a2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <HAL_DMA_Abort_IT+0x404>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d132      	bne.n	8003b64 <HAL_DMA_Abort_IT+0x408>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e031      	b.n	8003b66 <HAL_DMA_Abort_IT+0x40a>
 8003b02:	bf00      	nop
 8003b04:	40020010 	.word	0x40020010
 8003b08:	40020028 	.word	0x40020028
 8003b0c:	40020040 	.word	0x40020040
 8003b10:	40020058 	.word	0x40020058
 8003b14:	40020070 	.word	0x40020070
 8003b18:	40020088 	.word	0x40020088
 8003b1c:	400200a0 	.word	0x400200a0
 8003b20:	400200b8 	.word	0x400200b8
 8003b24:	40020410 	.word	0x40020410
 8003b28:	40020428 	.word	0x40020428
 8003b2c:	40020440 	.word	0x40020440
 8003b30:	40020458 	.word	0x40020458
 8003b34:	40020470 	.word	0x40020470
 8003b38:	40020488 	.word	0x40020488
 8003b3c:	400204a0 	.word	0x400204a0
 8003b40:	400204b8 	.word	0x400204b8
 8003b44:	58025408 	.word	0x58025408
 8003b48:	5802541c 	.word	0x5802541c
 8003b4c:	58025430 	.word	0x58025430
 8003b50:	58025444 	.word	0x58025444
 8003b54:	58025458 	.word	0x58025458
 8003b58:	5802546c 	.word	0x5802546c
 8003b5c:	58025480 	.word	0x58025480
 8003b60:	58025494 	.word	0x58025494
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d028      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	@ 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003bf6:	4b89      	ldr	r3, [pc, #548]	@ (8003e1c <HAL_GPIO_Init+0x234>)
 8003bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bfa:	e194      	b.n	8003f26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8186 	beq.w	8003f20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d005      	beq.n	8003c2c <HAL_GPIO_Init+0x44>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d130      	bne.n	8003c8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c62:	2201      	movs	r2, #1
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 0201 	and.w	r2, r3, #1
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d017      	beq.n	8003cca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d123      	bne.n	8003d1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	08da      	lsrs	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3208      	adds	r2, #8
 8003cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	220f      	movs	r2, #15
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	08da      	lsrs	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3208      	adds	r2, #8
 8003d18:	69b9      	ldr	r1, [r7, #24]
 8003d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80e0 	beq.w	8003f20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d60:	4b2f      	ldr	r3, [pc, #188]	@ (8003e20 <HAL_GPIO_Init+0x238>)
 8003d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d66:	4a2e      	ldr	r2, [pc, #184]	@ (8003e20 <HAL_GPIO_Init+0x238>)
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d70:	4b2b      	ldr	r3, [pc, #172]	@ (8003e20 <HAL_GPIO_Init+0x238>)
 8003d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7e:	4a29      	ldr	r2, [pc, #164]	@ (8003e24 <HAL_GPIO_Init+0x23c>)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a20      	ldr	r2, [pc, #128]	@ (8003e28 <HAL_GPIO_Init+0x240>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d052      	beq.n	8003e50 <HAL_GPIO_Init+0x268>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1f      	ldr	r2, [pc, #124]	@ (8003e2c <HAL_GPIO_Init+0x244>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d031      	beq.n	8003e16 <HAL_GPIO_Init+0x22e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e30 <HAL_GPIO_Init+0x248>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02b      	beq.n	8003e12 <HAL_GPIO_Init+0x22a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e34 <HAL_GPIO_Init+0x24c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d025      	beq.n	8003e0e <HAL_GPIO_Init+0x226>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e38 <HAL_GPIO_Init+0x250>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01f      	beq.n	8003e0a <HAL_GPIO_Init+0x222>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e3c <HAL_GPIO_Init+0x254>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d019      	beq.n	8003e06 <HAL_GPIO_Init+0x21e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e40 <HAL_GPIO_Init+0x258>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_GPIO_Init+0x21a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a19      	ldr	r2, [pc, #100]	@ (8003e44 <HAL_GPIO_Init+0x25c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00d      	beq.n	8003dfe <HAL_GPIO_Init+0x216>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a18      	ldr	r2, [pc, #96]	@ (8003e48 <HAL_GPIO_Init+0x260>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <HAL_GPIO_Init+0x212>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a17      	ldr	r2, [pc, #92]	@ (8003e4c <HAL_GPIO_Init+0x264>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_GPIO_Init+0x20e>
 8003df2:	2309      	movs	r3, #9
 8003df4:	e02d      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003df6:	230a      	movs	r3, #10
 8003df8:	e02b      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	e029      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003dfe:	2307      	movs	r3, #7
 8003e00:	e027      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003e02:	2306      	movs	r3, #6
 8003e04:	e025      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003e06:	2305      	movs	r3, #5
 8003e08:	e023      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	e021      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e01f      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e01d      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e01b      	b.n	8003e52 <HAL_GPIO_Init+0x26a>
 8003e1a:	bf00      	nop
 8003e1c:	58000080 	.word	0x58000080
 8003e20:	58024400 	.word	0x58024400
 8003e24:	58000400 	.word	0x58000400
 8003e28:	58020000 	.word	0x58020000
 8003e2c:	58020400 	.word	0x58020400
 8003e30:	58020800 	.word	0x58020800
 8003e34:	58020c00 	.word	0x58020c00
 8003e38:	58021000 	.word	0x58021000
 8003e3c:	58021400 	.word	0x58021400
 8003e40:	58021800 	.word	0x58021800
 8003e44:	58021c00 	.word	0x58021c00
 8003e48:	58022000 	.word	0x58022000
 8003e4c:	58022400 	.word	0x58022400
 8003e50:	2300      	movs	r3, #0
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	f002 0203 	and.w	r2, r2, #3
 8003e58:	0092      	lsls	r2, r2, #2
 8003e5a:	4093      	lsls	r3, r2
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e62:	4938      	ldr	r1, [pc, #224]	@ (8003f44 <HAL_GPIO_Init+0x35c>)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	3302      	adds	r3, #2
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ec4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	3301      	adds	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f47f ae63 	bne.w	8003bfc <HAL_GPIO_Init+0x14>
  }
}
 8003f36:	bf00      	nop
 8003f38:	bf00      	nop
 8003f3a:	3724      	adds	r7, #36	@ 0x24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	58000400 	.word	0x58000400

08003f48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003f50:	4b29      	ldr	r3, [pc, #164]	@ (8003ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	d00a      	beq.n	8003f72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f5c:	4b26      	ldr	r3, [pc, #152]	@ (8003ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d001      	beq.n	8003f6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e040      	b.n	8003ff0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e03e      	b.n	8003ff0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f72:	4b21      	ldr	r3, [pc, #132]	@ (8003ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003f7a:	491f      	ldr	r1, [pc, #124]	@ (8003ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f82:	f7fd fa85 	bl	8001490 <HAL_GetTick>
 8003f86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f88:	e009      	b.n	8003f9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f8a:	f7fd fa81 	bl	8001490 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f98:	d901      	bls.n	8003f9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e028      	b.n	8003ff0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003faa:	d1ee      	bne.n	8003f8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b1e      	cmp	r3, #30
 8003fb0:	d008      	beq.n	8003fc4 <HAL_PWREx_ConfigSupply+0x7c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fb6:	d005      	beq.n	8003fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b1d      	cmp	r3, #29
 8003fbc:	d002      	beq.n	8003fc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b2d      	cmp	r3, #45	@ 0x2d
 8003fc2:	d114      	bne.n	8003fee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003fc4:	f7fd fa64 	bl	8001490 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003fca:	e009      	b.n	8003fe0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003fcc:	f7fd fa60 	bl	8001490 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fda:	d901      	bls.n	8003fe0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e007      	b.n	8003ff0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003fe0:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fec:	d1ee      	bne.n	8003fcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	58024800 	.word	0x58024800

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08c      	sub	sp, #48	@ 0x30
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f000 bc48 	b.w	80048a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8088 	beq.w	800412e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4b99      	ldr	r3, [pc, #612]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004028:	4b96      	ldr	r3, [pc, #600]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	2b10      	cmp	r3, #16
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x48>
 8004034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004036:	2b18      	cmp	r3, #24
 8004038:	d111      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d10c      	bne.n	800405e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	4b8f      	ldr	r3, [pc, #572]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d06d      	beq.n	800412c <HAL_RCC_OscConfig+0x130>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d169      	bne.n	800412c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f000 bc21 	b.w	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004066:	d106      	bne.n	8004076 <HAL_RCC_OscConfig+0x7a>
 8004068:	4b86      	ldr	r3, [pc, #536]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a85      	ldr	r2, [pc, #532]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e02e      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x9c>
 800407e:	4b81      	ldr	r3, [pc, #516]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a80      	ldr	r2, [pc, #512]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b7e      	ldr	r3, [pc, #504]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a7d      	ldr	r2, [pc, #500]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e01d      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80040a2:	4b78      	ldr	r3, [pc, #480]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a77      	ldr	r2, [pc, #476]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b75      	ldr	r3, [pc, #468]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a74      	ldr	r2, [pc, #464]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0xd8>
 80040bc:	4b71      	ldr	r3, [pc, #452]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a70      	ldr	r2, [pc, #448]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b6e      	ldr	r3, [pc, #440]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6d      	ldr	r2, [pc, #436]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d013      	beq.n	8004104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fd f9d8 	bl	8001490 <HAL_GetTick>
 80040e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd f9d4 	bl	8001490 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e3d4      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040f6:	4b63      	ldr	r3, [pc, #396]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0xe8>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd f9c4 	bl	8001490 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fd f9c0 	bl	8001490 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	@ 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e3c0      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800411e:	4b59      	ldr	r3, [pc, #356]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x110>
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80ca 	beq.w	80042d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413c:	4b51      	ldr	r3, [pc, #324]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004144:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004146:	4b4f      	ldr	r3, [pc, #316]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <HAL_RCC_OscConfig+0x166>
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2b18      	cmp	r3, #24
 8004156:	d156      	bne.n	8004206 <HAL_RCC_OscConfig+0x20a>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d151      	bne.n	8004206 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004162:	4b48      	ldr	r3, [pc, #288]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x17e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e392      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800417a:	4b42      	ldr	r3, [pc, #264]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0219 	bic.w	r2, r3, #25
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	493f      	ldr	r1, [pc, #252]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd f980 	bl	8001490 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7fd f97c 	bl	8001490 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e37c      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a6:	4b37      	ldr	r3, [pc, #220]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	f7fd f99d 	bl	80014f0 <HAL_GetREVID>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80041bc:	4293      	cmp	r3, r2
 80041be:	d817      	bhi.n	80041f0 <HAL_RCC_OscConfig+0x1f4>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d108      	bne.n	80041da <HAL_RCC_OscConfig+0x1de>
 80041c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80041d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d8:	e07a      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b2a      	ldr	r3, [pc, #168]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	031b      	lsls	r3, r3, #12
 80041e8:	4926      	ldr	r1, [pc, #152]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ee:	e06f      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f0:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	061b      	lsls	r3, r3, #24
 80041fe:	4921      	ldr	r1, [pc, #132]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004204:	e064      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d047      	beq.n	800429e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800420e:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 0219 	bic.w	r2, r3, #25
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	491a      	ldr	r1, [pc, #104]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd f936 	bl	8001490 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004228:	f7fd f932 	bl	8001490 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e332      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800423a:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	f7fd f953 	bl	80014f0 <HAL_GetREVID>
 800424a:	4603      	mov	r3, r0
 800424c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004250:	4293      	cmp	r3, r2
 8004252:	d819      	bhi.n	8004288 <HAL_RCC_OscConfig+0x28c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b40      	cmp	r3, #64	@ 0x40
 800425a:	d108      	bne.n	800426e <HAL_RCC_OscConfig+0x272>
 800425c:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004264:	4a07      	ldr	r2, [pc, #28]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800426a:	6053      	str	r3, [r2, #4]
 800426c:	e030      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
 800426e:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	031b      	lsls	r3, r3, #12
 800427c:	4901      	ldr	r1, [pc, #4]	@ (8004284 <HAL_RCC_OscConfig+0x288>)
 800427e:	4313      	orrs	r3, r2
 8004280:	604b      	str	r3, [r1, #4]
 8004282:	e025      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
 8004284:	58024400 	.word	0x58024400
 8004288:	4b9a      	ldr	r3, [pc, #616]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	061b      	lsls	r3, r3, #24
 8004296:	4997      	ldr	r1, [pc, #604]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	e018      	b.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429e:	4b95      	ldr	r3, [pc, #596]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a94      	ldr	r2, [pc, #592]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd f8f1 	bl	8001490 <HAL_GetTick>
 80042ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b2:	f7fd f8ed 	bl	8001490 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e2ed      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042c4:	4b8b      	ldr	r3, [pc, #556]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a9 	beq.w	8004430 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4b85      	ldr	r3, [pc, #532]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e8:	4b82      	ldr	r3, [pc, #520]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d007      	beq.n	8004304 <HAL_RCC_OscConfig+0x308>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b18      	cmp	r3, #24
 80042f8:	d13a      	bne.n	8004370 <HAL_RCC_OscConfig+0x374>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d135      	bne.n	8004370 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004304:	4b7b      	ldr	r3, [pc, #492]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x320>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d001      	beq.n	800431c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e2c1      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800431c:	f7fd f8e8 	bl	80014f0 <HAL_GetREVID>
 8004320:	4603      	mov	r3, r0
 8004322:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004326:	4293      	cmp	r3, r2
 8004328:	d817      	bhi.n	800435a <HAL_RCC_OscConfig+0x35e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	2b20      	cmp	r3, #32
 8004330:	d108      	bne.n	8004344 <HAL_RCC_OscConfig+0x348>
 8004332:	4b70      	ldr	r3, [pc, #448]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800433a:	4a6e      	ldr	r2, [pc, #440]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800433c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004340:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004342:	e075      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004344:	4b6b      	ldr	r3, [pc, #428]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	069b      	lsls	r3, r3, #26
 8004352:	4968      	ldr	r1, [pc, #416]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004358:	e06a      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800435a:	4b66      	ldr	r3, [pc, #408]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	061b      	lsls	r3, r3, #24
 8004368:	4962      	ldr	r1, [pc, #392]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	4313      	orrs	r3, r2
 800436c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800436e:	e05f      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d042      	beq.n	80043fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004378:	4b5e      	ldr	r3, [pc, #376]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a5d      	ldr	r2, [pc, #372]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800437e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd f884 	bl	8001490 <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800438c:	f7fd f880 	bl	8001490 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e280      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800439e:	4b55      	ldr	r3, [pc, #340]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043aa:	f7fd f8a1 	bl	80014f0 <HAL_GetREVID>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d817      	bhi.n	80043e8 <HAL_RCC_OscConfig+0x3ec>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d108      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3d6>
 80043c0:	4b4c      	ldr	r3, [pc, #304]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80043c8:	4a4a      	ldr	r2, [pc, #296]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043ce:	6053      	str	r3, [r2, #4]
 80043d0:	e02e      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
 80043d2:	4b48      	ldr	r3, [pc, #288]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	069b      	lsls	r3, r3, #26
 80043e0:	4944      	ldr	r1, [pc, #272]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]
 80043e6:	e023      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
 80043e8:	4b42      	ldr	r3, [pc, #264]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	493f      	ldr	r1, [pc, #252]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60cb      	str	r3, [r1, #12]
 80043fc:	e018      	b.n	8004430 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043fe:	4b3d      	ldr	r3, [pc, #244]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3c      	ldr	r2, [pc, #240]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440a:	f7fd f841 	bl	8001490 <HAL_GetTick>
 800440e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004412:	f7fd f83d 	bl	8001490 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e23d      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004424:	4b33      	ldr	r3, [pc, #204]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d036      	beq.n	80044aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d019      	beq.n	8004478 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004444:	4b2b      	ldr	r3, [pc, #172]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 8004446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004448:	4a2a      	ldr	r2, [pc, #168]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fd f81e 	bl	8001490 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004458:	f7fd f81a 	bl	8001490 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e21a      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800446a:	4b22      	ldr	r3, [pc, #136]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800446c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x45c>
 8004476:	e018      	b.n	80044aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004478:	4b1e      	ldr	r3, [pc, #120]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800447a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447c:	4a1d      	ldr	r2, [pc, #116]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fd f804 	bl	8001490 <HAL_GetTick>
 8004488:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448c:	f7fd f800 	bl	8001490 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e200      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800449e:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d039      	beq.n	800452a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044be:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044ca:	f7fc ffe1 	bl	8001490 <HAL_GetTick>
 80044ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d2:	f7fc ffdd 	bl	8001490 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1dd      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044e4:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <HAL_RCC_OscConfig+0x4f8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCC_OscConfig+0x4d6>
 80044f0:	e01b      	b.n	800452a <HAL_RCC_OscConfig+0x52e>
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044f8:	4b9b      	ldr	r3, [pc, #620]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a9a      	ldr	r2, [pc, #616]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80044fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004504:	f7fc ffc4 	bl	8001490 <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800450c:	f7fc ffc0 	bl	8001490 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1c0      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800451e:	4b92      	ldr	r3, [pc, #584]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8081 	beq.w	800463a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004538:	4b8c      	ldr	r3, [pc, #560]	@ (800476c <HAL_RCC_OscConfig+0x770>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a8b      	ldr	r2, [pc, #556]	@ (800476c <HAL_RCC_OscConfig+0x770>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004544:	f7fc ffa4 	bl	8001490 <HAL_GetTick>
 8004548:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fc ffa0 	bl	8001490 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e1a0      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455e:	4b83      	ldr	r3, [pc, #524]	@ (800476c <HAL_RCC_OscConfig+0x770>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x584>
 8004572:	4b7d      	ldr	r3, [pc, #500]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004576:	4a7c      	ldr	r2, [pc, #496]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6713      	str	r3, [r2, #112]	@ 0x70
 800457e:	e02d      	b.n	80045dc <HAL_RCC_OscConfig+0x5e0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x5a6>
 8004588:	4b77      	ldr	r3, [pc, #476]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458c:	4a76      	ldr	r2, [pc, #472]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	@ 0x70
 8004594:	4b74      	ldr	r3, [pc, #464]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a73      	ldr	r2, [pc, #460]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a0:	e01c      	b.n	80045dc <HAL_RCC_OscConfig+0x5e0>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b05      	cmp	r3, #5
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x5c8>
 80045aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ae:	4a6e      	ldr	r2, [pc, #440]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ba:	4a6b      	ldr	r2, [pc, #428]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0x5e0>
 80045c4:	4b68      	ldr	r3, [pc, #416]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c8:	4a67      	ldr	r2, [pc, #412]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d0:	4b65      	ldr	r3, [pc, #404]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	4a64      	ldr	r2, [pc, #400]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80045d6:	f023 0304 	bic.w	r3, r3, #4
 80045da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fc ff54 	bl	8001490 <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fc ff50 	bl	8001490 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e14e      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004602:	4b59      	ldr	r3, [pc, #356]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ee      	beq.n	80045ec <HAL_RCC_OscConfig+0x5f0>
 800460e:	e014      	b.n	800463a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fc ff3e 	bl	8001490 <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fc ff3a 	bl	8001490 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e138      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800462e:	4b4e      	ldr	r3, [pc, #312]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ee      	bne.n	8004618 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 812d 	beq.w	800489e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004644:	4b48      	ldr	r3, [pc, #288]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800464c:	2b18      	cmp	r3, #24
 800464e:	f000 80bd 	beq.w	80047cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	2b02      	cmp	r3, #2
 8004658:	f040 809e 	bne.w	8004798 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465c:	4b42      	ldr	r3, [pc, #264]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a41      	ldr	r2, [pc, #260]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004662:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fc ff12 	bl	8001490 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004670:	f7fc ff0e 	bl	8001490 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e10e      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004682:	4b39      	ldr	r3, [pc, #228]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800468e:	4b36      	ldr	r3, [pc, #216]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004690:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004692:	4b37      	ldr	r3, [pc, #220]	@ (8004770 <HAL_RCC_OscConfig+0x774>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	430a      	orrs	r2, r1
 80046a2:	4931      	ldr	r1, [pc, #196]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	3b01      	subs	r3, #1
 80046ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b6:	3b01      	subs	r3, #1
 80046b8:	025b      	lsls	r3, r3, #9
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	3b01      	subs	r3, #1
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d0:	3b01      	subs	r3, #1
 80046d2:	061b      	lsls	r3, r3, #24
 80046d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046d8:	4923      	ldr	r1, [pc, #140]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046de:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	4a21      	ldr	r2, [pc, #132]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046ee:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046f6:	00d2      	lsls	r2, r2, #3
 80046f8:	491b      	ldr	r1, [pc, #108]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	f023 020c 	bic.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	4917      	ldr	r1, [pc, #92]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004710:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	f023 0202 	bic.w	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471c:	4912      	ldr	r1, [pc, #72]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004722:	4b11      	ldr	r3, [pc, #68]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004726:	4a10      	ldr	r2, [pc, #64]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472e:	4b0e      	ldr	r3, [pc, #56]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4a0d      	ldr	r2, [pc, #52]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800473a:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	4a0a      	ldr	r2, [pc, #40]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004744:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004746:	4b08      	ldr	r3, [pc, #32]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	4a07      	ldr	r2, [pc, #28]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004752:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a04      	ldr	r2, [pc, #16]	@ (8004768 <HAL_RCC_OscConfig+0x76c>)
 8004758:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800475c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fc fe97 	bl	8001490 <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004764:	e011      	b.n	800478a <HAL_RCC_OscConfig+0x78e>
 8004766:	bf00      	nop
 8004768:	58024400 	.word	0x58024400
 800476c:	58024800 	.word	0x58024800
 8004770:	fffffc0c 	.word	0xfffffc0c
 8004774:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004778:	f7fc fe8a 	bl	8001490 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e08a      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800478a:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x77c>
 8004796:	e082      	b.n	800489e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004798:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800479e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fc fe74 	bl	8001490 <HAL_GetTick>
 80047a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fc fe70 	bl	8001490 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e070      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047be:	4b3a      	ldr	r3, [pc, #232]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x7b0>
 80047ca:	e068      	b.n	800489e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047cc:	4b36      	ldr	r3, [pc, #216]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047d2:	4b35      	ldr	r3, [pc, #212]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d031      	beq.n	8004844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d12a      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d122      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004808:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d11a      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	0a5b      	lsrs	r3, r3, #9
 8004812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d111      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0e1b      	lsrs	r3, r3, #24
 8004836:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e02b      	b.n	80048a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004848:	4b17      	ldr	r3, [pc, #92]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800484a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004852:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d01f      	beq.n	800489e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800485e:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	4a11      	ldr	r2, [pc, #68]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800486a:	f7fc fe11 	bl	8001490 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004870:	bf00      	nop
 8004872:	f7fc fe0d 	bl	8001490 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	4293      	cmp	r3, r2
 800487c:	d0f9      	beq.n	8004872 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800487e:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004882:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <HAL_RCC_OscConfig+0x8b0>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800488a:	00d2      	lsls	r2, r2, #3
 800488c:	4906      	ldr	r1, [pc, #24]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 800488e:	4313      	orrs	r3, r2
 8004890:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004892:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	4a04      	ldr	r2, [pc, #16]	@ (80048a8 <HAL_RCC_OscConfig+0x8ac>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3730      	adds	r7, #48	@ 0x30
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400
 80048ac:	ffff0007 	.word	0xffff0007

080048b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e19c      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c4:	4b8a      	ldr	r3, [pc, #552]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d910      	bls.n	80048f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b87      	ldr	r3, [pc, #540]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 020f 	bic.w	r2, r3, #15
 80048da:	4985      	ldr	r1, [pc, #532]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b83      	ldr	r3, [pc, #524]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e184      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	4b7b      	ldr	r3, [pc, #492]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800490c:	429a      	cmp	r2, r3
 800490e:	d908      	bls.n	8004922 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004910:	4b78      	ldr	r3, [pc, #480]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	4975      	ldr	r1, [pc, #468]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800491e:	4313      	orrs	r3, r2
 8004920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	4b70      	ldr	r3, [pc, #448]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800493a:	429a      	cmp	r2, r3
 800493c:	d908      	bls.n	8004950 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800493e:	4b6d      	ldr	r3, [pc, #436]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	496a      	ldr	r1, [pc, #424]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800494c:	4313      	orrs	r3, r2
 800494e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d010      	beq.n	800497e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	4b64      	ldr	r3, [pc, #400]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004968:	429a      	cmp	r2, r3
 800496a:	d908      	bls.n	800497e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800496c:	4b61      	ldr	r3, [pc, #388]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	495e      	ldr	r1, [pc, #376]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800497a:	4313      	orrs	r3, r2
 800497c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	4b59      	ldr	r3, [pc, #356]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004996:	429a      	cmp	r2, r3
 8004998:	d908      	bls.n	80049ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800499a:	4b56      	ldr	r3, [pc, #344]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	4953      	ldr	r1, [pc, #332]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d010      	beq.n	80049da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	4b4d      	ldr	r3, [pc, #308]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d908      	bls.n	80049da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b4a      	ldr	r3, [pc, #296]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f023 020f 	bic.w	r2, r3, #15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4947      	ldr	r1, [pc, #284]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d055      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049e6:	4b43      	ldr	r3, [pc, #268]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4940      	ldr	r1, [pc, #256]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a00:	4b3c      	ldr	r3, [pc, #240]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d121      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e0f6      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d107      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a18:	4b36      	ldr	r3, [pc, #216]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d115      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0ea      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a30:	4b30      	ldr	r3, [pc, #192]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0de      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a40:	4b2c      	ldr	r3, [pc, #176]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0d6      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a50:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f023 0207 	bic.w	r2, r3, #7
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4925      	ldr	r1, [pc, #148]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a62:	f7fc fd15 	bl	8001490 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a6a:	f7fc fd11 	bl	8001490 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0be      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a80:	4b1c      	ldr	r3, [pc, #112]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d1eb      	bne.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d208      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aae:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f023 020f 	bic.w	r2, r3, #15
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	490e      	ldr	r1, [pc, #56]	@ (8004af4 <HAL_RCC_ClockConfig+0x244>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d214      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b08      	ldr	r3, [pc, #32]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 020f 	bic.w	r2, r3, #15
 8004ad6:	4906      	ldr	r1, [pc, #24]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <HAL_RCC_ClockConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e086      	b.n	8004bfe <HAL_RCC_ClockConfig+0x34e>
 8004af0:	52002000 	.word	0x52002000
 8004af4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d010      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	4b3f      	ldr	r3, [pc, #252]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d208      	bcs.n	8004b26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b14:	4b3c      	ldr	r3, [pc, #240]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	4939      	ldr	r1, [pc, #228]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	4b34      	ldr	r3, [pc, #208]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d208      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b42:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	492e      	ldr	r1, [pc, #184]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d010      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699a      	ldr	r2, [r3, #24]
 8004b64:	4b28      	ldr	r3, [pc, #160]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d208      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b70:	4b25      	ldr	r3, [pc, #148]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	4922      	ldr	r1, [pc, #136]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d010      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d208      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4917      	ldr	r1, [pc, #92]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bb0:	f000 f834 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	4912      	ldr	r1, [pc, #72]	@ (8004c0c <HAL_RCC_ClockConfig+0x35c>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bce:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <HAL_RCC_ClockConfig+0x358>)
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <HAL_RCC_ClockConfig+0x35c>)
 8004bd8:	5cd3      	ldrb	r3, [r2, r3]
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <HAL_RCC_ClockConfig+0x360>)
 8004be6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004be8:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <HAL_RCC_ClockConfig+0x364>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bee:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <HAL_RCC_ClockConfig+0x368>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fc fc02 	bl	80013fc <HAL_InitTick>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	0800dac4 	.word	0x0800dac4
 8004c10:	24000004 	.word	0x24000004
 8004c14:	24000000 	.word	0x24000000
 8004c18:	24000008 	.word	0x24000008

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	@ 0x24
 8004c20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c22:	4bb3      	ldr	r3, [pc, #716]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c2a:	2b18      	cmp	r3, #24
 8004c2c:	f200 8155 	bhi.w	8004eda <HAL_RCC_GetSysClockFreq+0x2be>
 8004c30:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004edb 	.word	0x08004edb
 8004c40:	08004edb 	.word	0x08004edb
 8004c44:	08004edb 	.word	0x08004edb
 8004c48:	08004edb 	.word	0x08004edb
 8004c4c:	08004edb 	.word	0x08004edb
 8004c50:	08004edb 	.word	0x08004edb
 8004c54:	08004edb 	.word	0x08004edb
 8004c58:	08004cc3 	.word	0x08004cc3
 8004c5c:	08004edb 	.word	0x08004edb
 8004c60:	08004edb 	.word	0x08004edb
 8004c64:	08004edb 	.word	0x08004edb
 8004c68:	08004edb 	.word	0x08004edb
 8004c6c:	08004edb 	.word	0x08004edb
 8004c70:	08004edb 	.word	0x08004edb
 8004c74:	08004edb 	.word	0x08004edb
 8004c78:	08004cc9 	.word	0x08004cc9
 8004c7c:	08004edb 	.word	0x08004edb
 8004c80:	08004edb 	.word	0x08004edb
 8004c84:	08004edb 	.word	0x08004edb
 8004c88:	08004edb 	.word	0x08004edb
 8004c8c:	08004edb 	.word	0x08004edb
 8004c90:	08004edb 	.word	0x08004edb
 8004c94:	08004edb 	.word	0x08004edb
 8004c98:	08004ccf 	.word	0x08004ccf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c9c:	4b94      	ldr	r3, [pc, #592]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca8:	4b91      	ldr	r3, [pc, #580]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	4a90      	ldr	r2, [pc, #576]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004cba:	e111      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cbc:	4b8d      	ldr	r3, [pc, #564]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cbe:	61bb      	str	r3, [r7, #24]
      break;
 8004cc0:	e10e      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cc4:	61bb      	str	r3, [r7, #24]
      break;
 8004cc6:	e10b      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cca:	61bb      	str	r3, [r7, #24]
      break;
 8004ccc:	e108      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cce:	4b88      	ldr	r3, [pc, #544]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cd8:	4b85      	ldr	r3, [pc, #532]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ce2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ce4:	4b82      	ldr	r3, [pc, #520]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cee:	4b80      	ldr	r3, [pc, #512]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	08db      	lsrs	r3, r3, #3
 8004cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80e1 	beq.w	8004ed4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	f000 8083 	beq.w	8004e20 <HAL_RCC_GetSysClockFreq+0x204>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	f200 80a1 	bhi.w	8004e64 <HAL_RCC_GetSysClockFreq+0x248>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x114>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d056      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d2e:	e099      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d30:	4b6f      	ldr	r3, [pc, #444]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02d      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	08db      	lsrs	r3, r3, #3
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	4a6b      	ldr	r2, [pc, #428]	@ (8004ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d66:	4b62      	ldr	r3, [pc, #392]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d96:	e087      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004f04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004daa:	4b51      	ldr	r3, [pc, #324]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dbe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004dda:	e065      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dee:	4b40      	ldr	r3, [pc, #256]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e1e:	e043      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004f0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e32:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e62:	e021      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ea6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ea8:	4b11      	ldr	r3, [pc, #68]	@ (8004ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	0a5b      	lsrs	r3, r3, #9
 8004eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ecc:	ee17 3a90 	vmov	r3, s15
 8004ed0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
      break;
 8004ed8:	e002      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004eda:	4b07      	ldr	r3, [pc, #28]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004edc:	61bb      	str	r3, [r7, #24]
      break;
 8004ede:	bf00      	nop
  }

  return sysclockfreq;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3724      	adds	r7, #36	@ 0x24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	03d09000 	.word	0x03d09000
 8004ef8:	003d0900 	.word	0x003d0900
 8004efc:	017d7840 	.word	0x017d7840
 8004f00:	46000000 	.word	0x46000000
 8004f04:	4c742400 	.word	0x4c742400
 8004f08:	4a742400 	.word	0x4a742400
 8004f0c:	4bbebc20 	.word	0x4bbebc20

08004f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f16:	f7ff fe81 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	4b10      	ldr	r3, [pc, #64]	@ (8004f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	490f      	ldr	r1, [pc, #60]	@ (8004f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f28:	5ccb      	ldrb	r3, [r1, r3]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	4a09      	ldr	r2, [pc, #36]	@ (8004f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f3e:	5cd3      	ldrb	r3, [r2, r3]
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	4a07      	ldr	r2, [pc, #28]	@ (8004f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f4e:	4a07      	ldr	r2, [pc, #28]	@ (8004f6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f54:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	58024400 	.word	0x58024400
 8004f64:	0800dac4 	.word	0x0800dac4
 8004f68:	24000004 	.word	0x24000004
 8004f6c:	24000000 	.word	0x24000000

08004f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f74:	f7ff ffcc 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4904      	ldr	r1, [pc, #16]	@ (8004f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	58024400 	.word	0x58024400
 8004f98:	0800dac4 	.word	0x0800dac4

08004f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fa0:	f7ff ffb6 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	0a1b      	lsrs	r3, r3, #8
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4904      	ldr	r1, [pc, #16]	@ (8004fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	0800dac4 	.word	0x0800dac4

08004fc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fcc:	b0cc      	sub	sp, #304	@ 0x130
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004fec:	2500      	movs	r5, #0
 8004fee:	ea54 0305 	orrs.w	r3, r4, r5
 8004ff2:	d049      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ffe:	d02f      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005000:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005004:	d828      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800500a:	d01a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800500c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005010:	d822      	bhi.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800501a:	d007      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800501c:	e01c      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501e:	4bb8      	ldr	r3, [pc, #736]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005022:	4ab7      	ldr	r2, [pc, #732]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005028:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800502a:	e01a      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800502c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005030:	3308      	adds	r3, #8
 8005032:	2102      	movs	r1, #2
 8005034:	4618      	mov	r0, r3
 8005036:	f002 fba1 	bl	800777c <RCCEx_PLL2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005040:	e00f      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005046:	3328      	adds	r3, #40	@ 0x28
 8005048:	2102      	movs	r1, #2
 800504a:	4618      	mov	r0, r3
 800504c:	f002 fc48 	bl	80078e0 <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005056:	e004      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800505e:	e000      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005062:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800506a:	4ba5      	ldr	r3, [pc, #660]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800506c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005078:	4aa1      	ldr	r2, [pc, #644]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800507a:	430b      	orrs	r3, r1
 800507c:	6513      	str	r3, [r2, #80]	@ 0x50
 800507e:	e003      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005084:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005094:	f04f 0900 	mov.w	r9, #0
 8005098:	ea58 0309 	orrs.w	r3, r8, r9
 800509c:	d047      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800509e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d82a      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050a8:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ae:	bf00      	nop
 80050b0:	080050c5 	.word	0x080050c5
 80050b4:	080050d3 	.word	0x080050d3
 80050b8:	080050e9 	.word	0x080050e9
 80050bc:	08005107 	.word	0x08005107
 80050c0:	08005107 	.word	0x08005107
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	4a8d      	ldr	r2, [pc, #564]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d0:	e01a      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050d6:	3308      	adds	r3, #8
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f002 fb4e 	bl	800777c <RCCEx_PLL2_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050e6:	e00f      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ec:	3328      	adds	r3, #40	@ 0x28
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f002 fbf5 	bl	80078e0 <RCCEx_PLL3_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050fc:	e004      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005108:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005110:	4b7b      	ldr	r3, [pc, #492]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005114:	f023 0107 	bic.w	r1, r3, #7
 8005118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800511c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511e:	4a78      	ldr	r2, [pc, #480]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005120:	430b      	orrs	r3, r1
 8005122:	6513      	str	r3, [r2, #80]	@ 0x50
 8005124:	e003      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800512a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800512e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800513a:	f04f 0b00 	mov.w	fp, #0
 800513e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005142:	d04c      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800514a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800514e:	d030      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005154:	d829      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005156:	2bc0      	cmp	r3, #192	@ 0xc0
 8005158:	d02d      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800515a:	2bc0      	cmp	r3, #192	@ 0xc0
 800515c:	d825      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800515e:	2b80      	cmp	r3, #128	@ 0x80
 8005160:	d018      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d821      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800516a:	2b40      	cmp	r3, #64	@ 0x40
 800516c:	d007      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800516e:	e01c      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005170:	4b63      	ldr	r3, [pc, #396]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	4a62      	ldr	r2, [pc, #392]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800517a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800517c:	e01c      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800517e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005182:	3308      	adds	r3, #8
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f002 faf8 	bl	800777c <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005192:	e011      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005198:	3328      	adds	r3, #40	@ 0x28
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f002 fb9f 	bl	80078e0 <RCCEx_PLL3_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051a8:	e006      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80051b0:	e002      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80051c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80051ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80051ee:	2300      	movs	r3, #0
 80051f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80051f4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80051f8:	460b      	mov	r3, r1
 80051fa:	4313      	orrs	r3, r2
 80051fc:	d053      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80051fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005206:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800520a:	d035      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800520c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005210:	d82e      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005212:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005216:	d031      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005218:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800521c:	d828      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800521e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005222:	d01a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005228:	d822      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800522e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005232:	d007      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005234:	e01c      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005236:	4b32      	ldr	r3, [pc, #200]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	4a31      	ldr	r2, [pc, #196]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800523c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005242:	e01c      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005244:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005248:	3308      	adds	r3, #8
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f002 fa95 	bl	800777c <RCCEx_PLL2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005258:	e011      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800525a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800525e:	3328      	adds	r3, #40	@ 0x28
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f002 fb3c 	bl	80078e0 <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800526e:	e006      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005276:	e002      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800527c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005286:	4b1e      	ldr	r3, [pc, #120]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800528e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005296:	4a1a      	ldr	r2, [pc, #104]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005298:	430b      	orrs	r3, r1
 800529a:	6593      	str	r3, [r2, #88]	@ 0x58
 800529c:	e003      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80052b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80052bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d056      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052d2:	d038      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052d8:	d831      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052de:	d034      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80052e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052e4:	d82b      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052ea:	d01d      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80052ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f0:	d825      	bhi.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80052f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80052fc:	e01f      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052fe:	bf00      	nop
 8005300:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005304:	4ba2      	ldr	r3, [pc, #648]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	4aa1      	ldr	r2, [pc, #644]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800530a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800530e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005310:	e01c      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005316:	3308      	adds	r3, #8
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f002 fa2e 	bl	800777c <RCCEx_PLL2_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005326:	e011      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800532c:	3328      	adds	r3, #40	@ 0x28
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f002 fad5 	bl	80078e0 <RCCEx_PLL3_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800533c:	e006      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005344:	e002      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800534a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005354:	4b8e      	ldr	r3, [pc, #568]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005358:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800535c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005360:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005364:	4a8a      	ldr	r2, [pc, #552]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005366:	430b      	orrs	r3, r1
 8005368:	6593      	str	r3, [r2, #88]	@ 0x58
 800536a:	e003      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005370:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005380:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800538a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800538e:	460b      	mov	r3, r1
 8005390:	4313      	orrs	r3, r2
 8005392:	d03a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539a:	2b30      	cmp	r3, #48	@ 0x30
 800539c:	d01f      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800539e:	2b30      	cmp	r3, #48	@ 0x30
 80053a0:	d819      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d00c      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d815      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d019      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d111      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b2:	4b77      	ldr	r3, [pc, #476]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	4a76      	ldr	r2, [pc, #472]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053be:	e011      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c4:	3308      	adds	r3, #8
 80053c6:	2102      	movs	r1, #2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f002 f9d7 	bl	800777c <RCCEx_PLL2_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80053d4:	e006      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80053e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053ec:	4b68      	ldr	r3, [pc, #416]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80053f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fa:	4a65      	ldr	r2, [pc, #404]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005400:	e003      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005402:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005406:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800540a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005416:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005420:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005424:	460b      	mov	r3, r1
 8005426:	4313      	orrs	r3, r2
 8005428:	d051      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800542a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800542e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005434:	d035      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800543a:	d82e      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800543c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005440:	d031      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005442:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005446:	d828      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800544c:	d01a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800544e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005452:	d822      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800545c:	d007      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800545e:	e01c      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005460:	4b4b      	ldr	r3, [pc, #300]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	4a4a      	ldr	r2, [pc, #296]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800546a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800546c:	e01c      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800546e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005472:	3308      	adds	r3, #8
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f002 f980 	bl	800777c <RCCEx_PLL2_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005482:	e011      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005488:	3328      	adds	r3, #40	@ 0x28
 800548a:	2100      	movs	r1, #0
 800548c:	4618      	mov	r0, r3
 800548e:	f002 fa27 	bl	80078e0 <RCCEx_PLL3_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005498:	e006      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054b0:	4b37      	ldr	r3, [pc, #220]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80054b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054be:	4a34      	ldr	r2, [pc, #208]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80054da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80054de:	2300      	movs	r3, #0
 80054e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4313      	orrs	r3, r2
 80054ec:	d056      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054f8:	d033      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80054fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054fe:	d82c      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005500:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005504:	d02f      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800550a:	d826      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800550c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005510:	d02b      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005512:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005516:	d820      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800551c:	d012      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800551e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005522:	d81a      	bhi.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d022      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552c:	d115      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800552e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005532:	3308      	adds	r3, #8
 8005534:	2101      	movs	r1, #1
 8005536:	4618      	mov	r0, r3
 8005538:	f002 f920 	bl	800777c <RCCEx_PLL2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005542:	e015      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005548:	3328      	adds	r3, #40	@ 0x28
 800554a:	2101      	movs	r1, #1
 800554c:	4618      	mov	r0, r3
 800554e:	f002 f9c7 	bl	80078e0 <RCCEx_PLL3_Config>
 8005552:	4603      	mov	r3, r0
 8005554:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005558:	e00a      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005560:	e006      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005562:	bf00      	nop
 8005564:	e004      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800556e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005570:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10d      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005578:	4b05      	ldr	r3, [pc, #20]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005584:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005586:	4a02      	ldr	r2, [pc, #8]	@ (8005590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005588:	430b      	orrs	r3, r1
 800558a:	6513      	str	r3, [r2, #80]	@ 0x50
 800558c:	e006      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800558e:	bf00      	nop
 8005590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005598:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800559c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80055a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055b2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80055b6:	460b      	mov	r3, r1
 80055b8:	4313      	orrs	r3, r2
 80055ba:	d055      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055c8:	d033      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80055ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055ce:	d82c      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d4:	d02f      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055da:	d826      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055e0:	d02b      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80055e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055e6:	d820      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ec:	d012      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80055ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055f2:	d81a      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d022      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80055f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055fc:	d115      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005602:	3308      	adds	r3, #8
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f002 f8b8 	bl	800777c <RCCEx_PLL2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005612:	e015      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005618:	3328      	adds	r3, #40	@ 0x28
 800561a:	2101      	movs	r1, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f002 f95f 	bl	80078e0 <RCCEx_PLL3_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005628:	e00a      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005632:	bf00      	nop
 8005634:	e004      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005648:	4bb6      	ldr	r3, [pc, #728]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005658:	4ab2      	ldr	r2, [pc, #712]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800565a:	430b      	orrs	r3, r1
 800565c:	6593      	str	r3, [r2, #88]	@ 0x58
 800565e:	e003      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005664:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005678:	2300      	movs	r3, #0
 800567a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800567e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005682:	460b      	mov	r3, r1
 8005684:	4313      	orrs	r3, r2
 8005686:	d02a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800568c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005696:	d10a      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800569c:	3308      	adds	r3, #8
 800569e:	2101      	movs	r1, #1
 80056a0:	4618      	mov	r0, r3
 80056a2:	f002 f86b 	bl	800777c <RCCEx_PLL2_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80056ac:	e004      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80056b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80056c0:	4b98      	ldr	r3, [pc, #608]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80056c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ce:	4a95      	ldr	r2, [pc, #596]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80056ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80056f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056f8:	460b      	mov	r3, r1
 80056fa:	4313      	orrs	r3, r2
 80056fc:	d037      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80056fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005708:	d00e      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800570a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800570e:	d816      	bhi.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d018      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005718:	d111      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800571a:	4b82      	ldr	r3, [pc, #520]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	4a81      	ldr	r2, [pc, #516]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005724:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005726:	e00f      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800572c:	3308      	adds	r3, #8
 800572e:	2101      	movs	r1, #1
 8005730:	4618      	mov	r0, r3
 8005732:	f002 f823 	bl	800777c <RCCEx_PLL2_Config>
 8005736:	4603      	mov	r3, r0
 8005738:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800573c:	e004      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005748:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005750:	4b74      	ldr	r3, [pc, #464]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005754:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800575c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575e:	4a71      	ldr	r2, [pc, #452]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005760:	430b      	orrs	r3, r1
 8005762:	6513      	str	r3, [r2, #80]	@ 0x50
 8005764:	e003      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005766:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800576a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800576e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800577a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800577e:	2300      	movs	r3, #0
 8005780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005784:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005788:	460b      	mov	r3, r1
 800578a:	4313      	orrs	r3, r2
 800578c:	d03a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800578e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005794:	2b03      	cmp	r3, #3
 8005796:	d81d      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005798:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057dd 	.word	0x080057dd
 80057a4:	080057b1 	.word	0x080057b1
 80057a8:	080057bf 	.word	0x080057bf
 80057ac:	080057dd 	.word	0x080057dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	4a5b      	ldr	r2, [pc, #364]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057bc:	e00f      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057c2:	3308      	adds	r3, #8
 80057c4:	2102      	movs	r1, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 ffd8 	bl	800777c <RCCEx_PLL2_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057d2:	e004      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80057dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80057e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ea:	f023 0103 	bic.w	r1, r3, #3
 80057ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f4:	4a4b      	ldr	r2, [pc, #300]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005800:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800581a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	f000 80a0 	beq.w	8005966 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005826:	4b40      	ldr	r3, [pc, #256]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a3f      	ldr	r2, [pc, #252]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005832:	f7fb fe2d 	bl	8001490 <HAL_GetTick>
 8005836:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800583a:	e00b      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fb fe28 	bl	8001490 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b64      	cmp	r3, #100	@ 0x64
 800584a:	d903      	bls.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005852:	e005      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005854:	4b34      	ldr	r3, [pc, #208]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ed      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005860:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005864:	2b00      	cmp	r3, #0
 8005866:	d17a      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005868:	4b2e      	ldr	r3, [pc, #184]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800586a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800586c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005870:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005874:	4053      	eors	r3, r2
 8005876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587a:	2b00      	cmp	r3, #0
 800587c:	d015      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800587e:	4b29      	ldr	r3, [pc, #164]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005886:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800588a:	4b26      	ldr	r3, [pc, #152]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	4a25      	ldr	r2, [pc, #148]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005894:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005896:	4b23      	ldr	r3, [pc, #140]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589a:	4a22      	ldr	r2, [pc, #136]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800589c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058a2:	4a20      	ldr	r2, [pc, #128]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80058a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b6:	d118      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fb fdea 	bl	8001490 <HAL_GetTick>
 80058bc:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058c0:	e00d      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fb fde5 	bl	8001490 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058cc:	1ad2      	subs	r2, r2, r3
 80058ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d903      	bls.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80058dc:	e005      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058de:	4b11      	ldr	r3, [pc, #68]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0eb      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80058ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d130      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005902:	d115      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005904:	4b07      	ldr	r3, [pc, #28]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800590c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005910:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005914:	091a      	lsrs	r2, r3, #4
 8005916:	4b05      	ldr	r3, [pc, #20]	@ (800592c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005918:	4013      	ands	r3, r2
 800591a:	4a02      	ldr	r2, [pc, #8]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800591c:	430b      	orrs	r3, r1
 800591e:	6113      	str	r3, [r2, #16]
 8005920:	e00c      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005922:	bf00      	nop
 8005924:	58024400 	.word	0x58024400
 8005928:	58024800 	.word	0x58024800
 800592c:	00ffffcf 	.word	0x00ffffcf
 8005930:	4bd4      	ldr	r3, [pc, #848]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	4ad3      	ldr	r2, [pc, #844]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005936:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800593a:	6113      	str	r3, [r2, #16]
 800593c:	4bd1      	ldr	r3, [pc, #836]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800593e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005944:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	4acd      	ldr	r2, [pc, #820]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800594e:	430b      	orrs	r3, r1
 8005950:	6713      	str	r3, [r2, #112]	@ 0x70
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005954:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005958:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800595c:	e003      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005962:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005966:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f002 0301 	and.w	r3, r2, #1
 8005972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005976:	2300      	movs	r3, #0
 8005978:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800597c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005980:	460b      	mov	r3, r1
 8005982:	4313      	orrs	r3, r2
 8005984:	f000 808b 	beq.w	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005990:	2b28      	cmp	r3, #40	@ 0x28
 8005992:	d86b      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005994:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599a:	bf00      	nop
 800599c:	08005a75 	.word	0x08005a75
 80059a0:	08005a6d 	.word	0x08005a6d
 80059a4:	08005a6d 	.word	0x08005a6d
 80059a8:	08005a6d 	.word	0x08005a6d
 80059ac:	08005a6d 	.word	0x08005a6d
 80059b0:	08005a6d 	.word	0x08005a6d
 80059b4:	08005a6d 	.word	0x08005a6d
 80059b8:	08005a6d 	.word	0x08005a6d
 80059bc:	08005a41 	.word	0x08005a41
 80059c0:	08005a6d 	.word	0x08005a6d
 80059c4:	08005a6d 	.word	0x08005a6d
 80059c8:	08005a6d 	.word	0x08005a6d
 80059cc:	08005a6d 	.word	0x08005a6d
 80059d0:	08005a6d 	.word	0x08005a6d
 80059d4:	08005a6d 	.word	0x08005a6d
 80059d8:	08005a6d 	.word	0x08005a6d
 80059dc:	08005a57 	.word	0x08005a57
 80059e0:	08005a6d 	.word	0x08005a6d
 80059e4:	08005a6d 	.word	0x08005a6d
 80059e8:	08005a6d 	.word	0x08005a6d
 80059ec:	08005a6d 	.word	0x08005a6d
 80059f0:	08005a6d 	.word	0x08005a6d
 80059f4:	08005a6d 	.word	0x08005a6d
 80059f8:	08005a6d 	.word	0x08005a6d
 80059fc:	08005a75 	.word	0x08005a75
 8005a00:	08005a6d 	.word	0x08005a6d
 8005a04:	08005a6d 	.word	0x08005a6d
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005a6d 	.word	0x08005a6d
 8005a10:	08005a6d 	.word	0x08005a6d
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a6d 	.word	0x08005a6d
 8005a1c:	08005a75 	.word	0x08005a75
 8005a20:	08005a6d 	.word	0x08005a6d
 8005a24:	08005a6d 	.word	0x08005a6d
 8005a28:	08005a6d 	.word	0x08005a6d
 8005a2c:	08005a6d 	.word	0x08005a6d
 8005a30:	08005a6d 	.word	0x08005a6d
 8005a34:	08005a6d 	.word	0x08005a6d
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005a75 	.word	0x08005a75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a44:	3308      	adds	r3, #8
 8005a46:	2101      	movs	r1, #1
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 fe97 	bl	800777c <RCCEx_PLL2_Config>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a54:	e00f      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a5a:	3328      	adds	r3, #40	@ 0x28
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 ff3e 	bl	80078e0 <RCCEx_PLL3_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a6a:	e004      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a7e:	4b81      	ldr	r3, [pc, #516]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a8e:	4a7d      	ldr	r2, [pc, #500]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a94:	e003      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f002 0302 	and.w	r3, r2, #2
 8005aaa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ab4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d042      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d825      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005b1d 	.word	0x08005b1d
 8005ad4:	08005ae9 	.word	0x08005ae9
 8005ad8:	08005aff 	.word	0x08005aff
 8005adc:	08005b1d 	.word	0x08005b1d
 8005ae0:	08005b1d 	.word	0x08005b1d
 8005ae4:	08005b1d 	.word	0x08005b1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aec:	3308      	adds	r3, #8
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fe43 	bl	800777c <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005afc:	e00f      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b02:	3328      	adds	r3, #40	@ 0x28
 8005b04:	2101      	movs	r1, #1
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 feea 	bl	80078e0 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b12:	e004      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b1a:	e000      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b26:	4b57      	ldr	r3, [pc, #348]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2a:	f023 0107 	bic.w	r1, r3, #7
 8005b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b34:	4a53      	ldr	r2, [pc, #332]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b3a:	e003      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b40:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	f002 0304 	and.w	r3, r2, #4
 8005b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d044      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d825      	bhi.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005b70:	a201      	add	r2, pc, #4	@ (adr r2, 8005b78 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005bc5 	.word	0x08005bc5
 8005b7c:	08005b91 	.word	0x08005b91
 8005b80:	08005ba7 	.word	0x08005ba7
 8005b84:	08005bc5 	.word	0x08005bc5
 8005b88:	08005bc5 	.word	0x08005bc5
 8005b8c:	08005bc5 	.word	0x08005bc5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b94:	3308      	adds	r3, #8
 8005b96:	2101      	movs	r1, #1
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fdef 	bl	800777c <RCCEx_PLL2_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ba4:	e00f      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005baa:	3328      	adds	r3, #40	@ 0x28
 8005bac:	2101      	movs	r1, #1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 fe96 	bl	80078e0 <RCCEx_PLL3_Config>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bba:	e004      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bce:	4b2d      	ldr	r3, [pc, #180]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	f023 0107 	bic.w	r1, r3, #7
 8005bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bde:	4a29      	ldr	r2, [pc, #164]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005be0:	430b      	orrs	r3, r1
 8005be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f002 0320 	and.w	r3, r2, #32
 8005bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	d057      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c1a:	d035      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c20:	d82c      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c26:	d031      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2c:	d826      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c32:	d02d      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005c34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c38:	d820      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c3e:	d012      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c44:	d81a      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d024      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c4e:	d115      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c54:	3308      	adds	r3, #8
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 fd8f 	bl	800777c <RCCEx_PLL2_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c64:	e017      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c6a:	3328      	adds	r3, #40	@ 0x28
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fe36 	bl	80078e0 <RCCEx_PLL3_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c7a:	e00c      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c82:	e008      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005c84:	58024400 	.word	0x58024400
        break;
 8005c88:	bf00      	nop
 8005c8a:	e004      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005c8c:	bf00      	nop
 8005c8e:	e002      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005c90:	bf00      	nop
 8005c92:	e000      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c9e:	4bc2      	ldr	r3, [pc, #776]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cae:	4abe      	ldr	r2, [pc, #760]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cb4:	e003      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	d055      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ce6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005cea:	d033      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005cec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005cf0:	d82c      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf6:	d02f      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfc:	d826      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005cfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d02:	d02b      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d08:	d820      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d0e:	d012      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d14:	d81a      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d022      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d1e:	d115      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d24:	3308      	adds	r3, #8
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 fd27 	bl	800777c <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d34:	e015      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d3a:	3328      	adds	r3, #40	@ 0x28
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fdce 	bl	80078e0 <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d52:	e006      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d54:	bf00      	nop
 8005d56:	e004      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d58:	bf00      	nop
 8005d5a:	e002      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d5c:	bf00      	nop
 8005d5e:	e000      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d6a:	4b8f      	ldr	r3, [pc, #572]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d7a:	4a8b      	ldr	r2, [pc, #556]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d80:	e003      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005da0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d055      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005db2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005db6:	d033      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005db8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005dbc:	d82c      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc2:	d02f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc8:	d826      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005dca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005dce:	d02b      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005dd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005dd4:	d820      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dda:	d012      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005ddc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005de0:	d81a      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d022      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dea:	d115      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005df0:	3308      	adds	r3, #8
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fcc1 	bl	800777c <RCCEx_PLL2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e00:	e015      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e06:	3328      	adds	r3, #40	@ 0x28
 8005e08:	2102      	movs	r1, #2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 fd68 	bl	80078e0 <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e16:	e00a      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e1e:	e006      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e20:	bf00      	nop
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e24:	bf00      	nop
 8005e26:	e002      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10b      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e36:	4b5c      	ldr	r3, [pc, #368]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e46:	4a58      	ldr	r2, [pc, #352]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e4c:	e003      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f002 0308 	and.w	r3, r2, #8
 8005e62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e6c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005e70:	460b      	mov	r3, r1
 8005e72:	4313      	orrs	r3, r2
 8005e74:	d01e      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e82:	d10c      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e88:	3328      	adds	r3, #40	@ 0x28
 8005e8a:	2102      	movs	r1, #2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 fd27 	bl	80078e0 <RCCEx_PLL3_Config>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e9e:	4b42      	ldr	r3, [pc, #264]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eae:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f002 0310 	and.w	r3, r2, #16
 8005ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005eca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	d01e      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ee0:	d10c      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ee6:	3328      	adds	r3, #40	@ 0x28
 8005ee8:	2102      	movs	r1, #2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fcf8 	bl	80078e0 <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005efc:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f00:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f0c:	4a26      	ldr	r2, [pc, #152]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f22:	2300      	movs	r3, #0
 8005f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f28:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d040      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f3e:	d022      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f44:	d81b      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f4e:	d00b      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005f50:	e015      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f56:	3308      	adds	r3, #8
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fc0e 	bl	800777c <RCCEx_PLL2_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f66:	e00f      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f6c:	3328      	adds	r3, #40	@ 0x28
 8005f6e:	2102      	movs	r1, #2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 fcb5 	bl	80078e0 <RCCEx_PLL3_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f7c:	e004      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10d      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f94:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fa0:	4a01      	ldr	r2, [pc, #4]	@ (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fb0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fc6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	d03b      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fdc:	d01f      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005fde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fe2:	d818      	bhi.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005fe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe8:	d003      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fee:	d007      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005ff0:	e011      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff2:	4b64      	ldr	r3, [pc, #400]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	4a63      	ldr	r2, [pc, #396]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ffe:	e00f      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006004:	3328      	adds	r3, #40	@ 0x28
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f001 fc69 	bl	80078e0 <RCCEx_PLL3_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006014:	e004      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800601c:	e000      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800601e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006020:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006028:	4b56      	ldr	r3, [pc, #344]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800602a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006030:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006034:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006038:	4a52      	ldr	r2, [pc, #328]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800603a:	430b      	orrs	r3, r1
 800603c:	6553      	str	r3, [r2, #84]	@ 0x54
 800603e:	e003      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006044:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006054:	673b      	str	r3, [r7, #112]	@ 0x70
 8006056:	2300      	movs	r3, #0
 8006058:	677b      	str	r3, [r7, #116]	@ 0x74
 800605a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d031      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800606e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006072:	d007      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006074:	e011      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006076:	4b43      	ldr	r3, [pc, #268]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	4a42      	ldr	r2, [pc, #264]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800607c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006082:	e00e      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006088:	3308      	adds	r3, #8
 800608a:	2102      	movs	r1, #2
 800608c:	4618      	mov	r0, r3
 800608e:	f001 fb75 	bl	800777c <RCCEx_PLL2_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060aa:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b8:	4a32      	ldr	r2, [pc, #200]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060ba:	430b      	orrs	r3, r1
 80060bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060be:	e003      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80060d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060d6:	2300      	movs	r3, #0
 80060d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80060de:	460b      	mov	r3, r1
 80060e0:	4313      	orrs	r3, r2
 80060e2:	d00c      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060e8:	3328      	adds	r3, #40	@ 0x28
 80060ea:	2102      	movs	r1, #2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 fbf7 	bl	80078e0 <RCCEx_PLL3_Config>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80060fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800610a:	663b      	str	r3, [r7, #96]	@ 0x60
 800610c:	2300      	movs	r3, #0
 800610e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006110:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006114:	460b      	mov	r3, r1
 8006116:	4313      	orrs	r3, r2
 8006118:	d03a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800611a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800611e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006126:	d018      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800612c:	d811      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800612e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006132:	d014      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006138:	d80b      	bhi.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d011      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800613e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006142:	d106      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006144:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	4a0e      	ldr	r2, [pc, #56]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800614a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800614e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006150:	e008      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006158:	e004      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10d      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800616e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006170:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800617c:	4a01      	ldr	r2, [pc, #4]	@ (8006184 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800617e:	430b      	orrs	r3, r1
 8006180:	6553      	str	r3, [r2, #84]	@ 0x54
 8006182:	e005      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006188:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800618c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800619c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800619e:	2300      	movs	r3, #0
 80061a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80061a6:	460b      	mov	r3, r1
 80061a8:	4313      	orrs	r3, r2
 80061aa:	d009      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061ac:	4baa      	ldr	r3, [pc, #680]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80061b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ba:	4aa7      	ldr	r2, [pc, #668]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80061c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80061cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ce:	2300      	movs	r3, #0
 80061d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80061d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80061d6:	460b      	mov	r3, r1
 80061d8:	4313      	orrs	r3, r2
 80061da:	d00a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80061dc:	4b9e      	ldr	r3, [pc, #632]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061ec:	4a9a      	ldr	r2, [pc, #616]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80061ee:	430b      	orrs	r3, r1
 80061f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80061fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006200:	2300      	movs	r3, #0
 8006202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006204:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006208:	460b      	mov	r3, r1
 800620a:	4313      	orrs	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800620e:	4b92      	ldr	r3, [pc, #584]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006212:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621c:	4a8e      	ldr	r2, [pc, #568]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800621e:	430b      	orrs	r3, r1
 8006220:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800622e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006230:	2300      	movs	r3, #0
 8006232:	647b      	str	r3, [r7, #68]	@ 0x44
 8006234:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006238:	460b      	mov	r3, r1
 800623a:	4313      	orrs	r3, r2
 800623c:	d00e      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800623e:	4b86      	ldr	r3, [pc, #536]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	4a85      	ldr	r2, [pc, #532]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006244:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006248:	6113      	str	r3, [r2, #16]
 800624a:	4b83      	ldr	r3, [pc, #524]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800624c:	6919      	ldr	r1, [r3, #16]
 800624e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006252:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006256:	4a80      	ldr	r2, [pc, #512]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006258:	430b      	orrs	r3, r1
 800625a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800625c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006268:	63bb      	str	r3, [r7, #56]	@ 0x38
 800626a:	2300      	movs	r3, #0
 800626c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800626e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006272:	460b      	mov	r3, r1
 8006274:	4313      	orrs	r3, r2
 8006276:	d009      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006278:	4b77      	ldr	r3, [pc, #476]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800627a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800627c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006286:	4a74      	ldr	r2, [pc, #464]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006288:	430b      	orrs	r3, r1
 800628a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800628c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006298:	633b      	str	r3, [r7, #48]	@ 0x30
 800629a:	2300      	movs	r3, #0
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
 800629e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80062a2:	460b      	mov	r3, r1
 80062a4:	4313      	orrs	r3, r2
 80062a6:	d00a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062a8:	4b6b      	ldr	r3, [pc, #428]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80062b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b8:	4a67      	ldr	r2, [pc, #412]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062ba:	430b      	orrs	r3, r1
 80062bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80062be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	2100      	movs	r1, #0
 80062c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80062d4:	460b      	mov	r3, r1
 80062d6:	4313      	orrs	r3, r2
 80062d8:	d011      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062de:	3308      	adds	r3, #8
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 fa4a 	bl	800777c <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80062ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80062fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	2100      	movs	r1, #0
 8006308:	6239      	str	r1, [r7, #32]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006310:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d011      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800631a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800631e:	3308      	adds	r3, #8
 8006320:	2101      	movs	r1, #1
 8006322:	4618      	mov	r0, r3
 8006324:	f001 fa2a 	bl	800777c <RCCEx_PLL2_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800632e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800633a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800633e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	2100      	movs	r1, #0
 8006348:	61b9      	str	r1, [r7, #24]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006354:	460b      	mov	r3, r1
 8006356:	4313      	orrs	r3, r2
 8006358:	d011      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800635a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800635e:	3308      	adds	r3, #8
 8006360:	2102      	movs	r1, #2
 8006362:	4618      	mov	r0, r3
 8006364:	f001 fa0a 	bl	800777c <RCCEx_PLL2_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800636e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800637a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800637e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	2100      	movs	r1, #0
 8006388:	6139      	str	r1, [r7, #16]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006394:	460b      	mov	r3, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	d011      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800639a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800639e:	3328      	adds	r3, #40	@ 0x28
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fa9c 	bl	80078e0 <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80063ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80063be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	2100      	movs	r1, #0
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d011      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063de:	3328      	adds	r3, #40	@ 0x28
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fa7c 	bl	80078e0 <RCCEx_PLL3_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80063ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80063fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	2100      	movs	r1, #0
 8006408:	6039      	str	r1, [r7, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	607b      	str	r3, [r7, #4]
 8006410:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006414:	460b      	mov	r3, r1
 8006416:	4313      	orrs	r3, r2
 8006418:	d011      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800641a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800641e:	3328      	adds	r3, #40	@ 0x28
 8006420:	2102      	movs	r1, #2
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fa5c 	bl	80078e0 <RCCEx_PLL3_Config>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800642e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800643a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800643e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e000      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
}
 800644c:	4618      	mov	r0, r3
 800644e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006458:	58024400 	.word	0x58024400

0800645c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b090      	sub	sp, #64	@ 0x40
 8006460:	af00      	add	r7, sp, #0
 8006462:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800646e:	430b      	orrs	r3, r1
 8006470:	f040 8094 	bne.w	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006474:	4b9e      	ldr	r3, [pc, #632]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	2b04      	cmp	r3, #4
 8006482:	f200 8087 	bhi.w	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064a1 	.word	0x080064a1
 8006490:	080064c9 	.word	0x080064c9
 8006494:	080064f1 	.word	0x080064f1
 8006498:	0800658d 	.word	0x0800658d
 800649c:	08006519 	.word	0x08006519
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064a0:	4b93      	ldr	r3, [pc, #588]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ac:	d108      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 f810 	bl	80074d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064bc:	f000 bd45 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c4:	f000 bd41 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064c8:	4b89      	ldr	r3, [pc, #548]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064d4:	d108      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d6:	f107 0318 	add.w	r3, r7, #24
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fd54 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e4:	f000 bd31 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ec:	f000 bd2d 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064f0:	4b7f      	ldr	r3, [pc, #508]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064fc:	d108      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064fe:	f107 030c 	add.w	r3, r7, #12
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fe94 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800650c:	f000 bd1d 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006514:	f000 bd19 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006518:	4b75      	ldr	r3, [pc, #468]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800651a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800651c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006522:	4b73      	ldr	r3, [pc, #460]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b04      	cmp	r3, #4
 800652c:	d10c      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800652e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006530:	2b00      	cmp	r3, #0
 8006532:	d109      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006534:	4b6e      	ldr	r3, [pc, #440]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	08db      	lsrs	r3, r3, #3
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	4a6d      	ldr	r2, [pc, #436]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006546:	e01f      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006548:	4b69      	ldr	r3, [pc, #420]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800655c:	d102      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800655e:	4b66      	ldr	r3, [pc, #408]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006562:	e011      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006564:	4b62      	ldr	r3, [pc, #392]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006570:	d106      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006578:	d102      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800657a:	4b60      	ldr	r3, [pc, #384]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657e:	e003      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006584:	f000 bce1 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006588:	f000 bcdf 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800658c:	4b5c      	ldr	r3, [pc, #368]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800658e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006590:	f000 bcdb 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006598:	f000 bcd7 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80065a4:	430b      	orrs	r3, r1
 80065a6:	f040 80ad 	bne.w	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80065aa:	4b51      	ldr	r3, [pc, #324]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80065b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ba:	d056      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c2:	f200 8090 	bhi.w	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80065ca:	f000 8088 	beq.w	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80065d2:	f200 8088 	bhi.w	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	2b80      	cmp	r3, #128	@ 0x80
 80065da:	d032      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	2b80      	cmp	r3, #128	@ 0x80
 80065e0:	f200 8081 	bhi.w	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d014      	beq.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80065f0:	e079      	b.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f2:	4b3f      	ldr	r3, [pc, #252]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065fe:	d108      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006600:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f000 ff67 	bl	80074d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800660a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660e:	f000 bc9c 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006616:	f000 bc98 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800661a:	4b35      	ldr	r3, [pc, #212]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006626:	d108      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006628:	f107 0318 	add.w	r3, r7, #24
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fcab 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006636:	f000 bc88 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800663e:	f000 bc84 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006642:	4b2b      	ldr	r3, [pc, #172]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800664a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800664e:	d108      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006650:	f107 030c 	add.w	r3, r7, #12
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fdeb 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665e:	f000 bc74 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006666:	f000 bc70 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800666a:	4b21      	ldr	r3, [pc, #132]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800666c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800666e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006672:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006674:	4b1e      	ldr	r3, [pc, #120]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b04      	cmp	r3, #4
 800667e:	d10c      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006686:	4b1a      	ldr	r3, [pc, #104]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	08db      	lsrs	r3, r3, #3
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	4a18      	ldr	r2, [pc, #96]	@ (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006698:	e01f      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800669a:	4b15      	ldr	r3, [pc, #84]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a6:	d106      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ae:	d102      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066b0:	4b11      	ldr	r3, [pc, #68]	@ (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066b4:	e011      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066b6:	4b0e      	ldr	r3, [pc, #56]	@ (80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c2:	d106      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80066c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ca:	d102      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066cc:	4b0b      	ldr	r3, [pc, #44]	@ (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d0:	e003      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80066d6:	f000 bc38 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066da:	f000 bc36 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066de:	4b08      	ldr	r3, [pc, #32]	@ (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066e2:	f000 bc32 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ea:	f000 bc2e 	b.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066ee:	bf00      	nop
 80066f0:	58024400 	.word	0x58024400
 80066f4:	03d09000 	.word	0x03d09000
 80066f8:	003d0900 	.word	0x003d0900
 80066fc:	017d7840 	.word	0x017d7840
 8006700:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006708:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800670c:	430b      	orrs	r3, r1
 800670e:	f040 809c 	bne.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006712:	4b9e      	ldr	r3, [pc, #632]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006716:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800671a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006722:	d054      	beq.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006726:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800672a:	f200 808b 	bhi.w	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006734:	f000 8083 	beq.w	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800673e:	f200 8081 	bhi.w	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006748:	d02f      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006750:	d878      	bhi.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800675e:	d012      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006760:	e070      	b.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006762:	4b8a      	ldr	r3, [pc, #552]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800676a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800676e:	d107      	bne.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f000 feaf 	bl	80074d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800677e:	e3e4      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006784:	e3e1      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006786:	4b81      	ldr	r3, [pc, #516]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800678e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006792:	d107      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006794:	f107 0318 	add.w	r3, r7, #24
 8006798:	4618      	mov	r0, r3
 800679a:	f000 fbf5 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a2:	e3d2      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a8:	e3cf      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067aa:	4b78      	ldr	r3, [pc, #480]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067b6:	d107      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b8:	f107 030c 	add.w	r3, r7, #12
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fd37 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c6:	e3c0      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067cc:	e3bd      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067ce:	4b6f      	ldr	r3, [pc, #444]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067d8:	4b6c      	ldr	r3, [pc, #432]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d10c      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80067e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ea:	4b68      	ldr	r3, [pc, #416]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	08db      	lsrs	r3, r3, #3
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	4a66      	ldr	r2, [pc, #408]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80067f6:	fa22 f303 	lsr.w	r3, r2, r3
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067fc:	e01e      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067fe:	4b63      	ldr	r3, [pc, #396]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680a:	d106      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006812:	d102      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006814:	4b5f      	ldr	r3, [pc, #380]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006818:	e010      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800681a:	4b5c      	ldr	r3, [pc, #368]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006822:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006826:	d106      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800682e:	d102      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006830:	4b59      	ldr	r3, [pc, #356]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006834:	e002      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800683a:	e386      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800683c:	e385      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800683e:	4b57      	ldr	r3, [pc, #348]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006842:	e382      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006848:	e37f      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800684a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006852:	430b      	orrs	r3, r1
 8006854:	f040 80a7 	bne.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006858:	4b4c      	ldr	r3, [pc, #304]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800685a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006860:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006868:	d055      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006870:	f200 8096 	bhi.w	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800687a:	f000 8084 	beq.w	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006884:	f200 808c 	bhi.w	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800688e:	d030      	beq.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006896:	f200 8083 	bhi.w	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068a6:	d012      	beq.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80068a8:	e07a      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068aa:	4b38      	ldr	r3, [pc, #224]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068b6:	d107      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fe0b 	bl	80074d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c6:	e340      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068cc:	e33d      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068ce:	4b2f      	ldr	r3, [pc, #188]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068da:	d107      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068dc:	f107 0318 	add.w	r3, r7, #24
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fb51 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ea:	e32e      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f0:	e32b      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068f2:	4b26      	ldr	r3, [pc, #152]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068fe:	d107      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006900:	f107 030c 	add.w	r3, r7, #12
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fc93 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690e:	e31c      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006914:	e319      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006916:	4b1d      	ldr	r3, [pc, #116]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800691e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006920:	4b1a      	ldr	r3, [pc, #104]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b04      	cmp	r3, #4
 800692a:	d10c      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800692c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006932:	4b16      	ldr	r3, [pc, #88]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	08db      	lsrs	r3, r3, #3
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	4a14      	ldr	r2, [pc, #80]	@ (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800693e:	fa22 f303 	lsr.w	r3, r2, r3
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006944:	e01e      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006946:	4b11      	ldr	r3, [pc, #68]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006952:	d106      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800695a:	d102      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800695c:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006960:	e010      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006962:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800696e:	d106      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006976:	d102      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006978:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800697c:	e002      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006982:	e2e2      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006984:	e2e1      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006986:	4b05      	ldr	r3, [pc, #20]	@ (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698a:	e2de      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800698c:	58024400 	.word	0x58024400
 8006990:	03d09000 	.word	0x03d09000
 8006994:	003d0900 	.word	0x003d0900
 8006998:	017d7840 	.word	0x017d7840
 800699c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a4:	e2d1      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069aa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80069ae:	430b      	orrs	r3, r1
 80069b0:	f040 809c 	bne.w	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80069b4:	4b93      	ldr	r3, [pc, #588]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80069bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80069be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069c4:	d054      	beq.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069cc:	f200 808b 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069d6:	f000 8083 	beq.w	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80069e0:	f200 8081 	bhi.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ea:	d02f      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069f2:	d878      	bhi.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a00:	d012      	beq.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a02:	e070      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a04:	4b7f      	ldr	r3, [pc, #508]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a10:	d107      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fd5e 	bl	80074d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a20:	e293      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a26:	e290      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a28:	4b76      	ldr	r3, [pc, #472]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a34:	d107      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a36:	f107 0318 	add.w	r3, r7, #24
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 faa4 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a44:	e281      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a4a:	e27e      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a4c:	4b6d      	ldr	r3, [pc, #436]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a58:	d107      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a5a:	f107 030c 	add.w	r3, r7, #12
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fbe6 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a68:	e26f      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a6e:	e26c      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a70:	4b64      	ldr	r3, [pc, #400]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a7a:	4b62      	ldr	r3, [pc, #392]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	08db      	lsrs	r3, r3, #3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	4a5c      	ldr	r2, [pc, #368]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a9e:	e01e      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aa0:	4b58      	ldr	r3, [pc, #352]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aac:	d106      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ab4:	d102      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ab6:	4b55      	ldr	r3, [pc, #340]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aba:	e010      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006abc:	4b51      	ldr	r3, [pc, #324]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac8:	d106      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ad6:	e002      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006adc:	e235      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ade:	e234      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae4:	e231      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aea:	e22e      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006af4:	430b      	orrs	r3, r1
 8006af6:	f040 808f 	bne.w	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006afa:	4b42      	ldr	r3, [pc, #264]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006b02:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b0a:	d06b      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b12:	d874      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b1a:	d056      	beq.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b22:	d86c      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b2a:	d03b      	beq.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b32:	d864      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b3a:	d021      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b42:	d85c      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b50:	d004      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006b52:	e054      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fe fa0c 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8006b58:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b5a:	e1f6      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b5c:	4b29      	ldr	r3, [pc, #164]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b68:	d107      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6a:	f107 0318 	add.w	r3, r7, #24
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fa0a 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b78:	e1e7      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b7e:	e1e4      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b80:	4b20      	ldr	r3, [pc, #128]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b8e:	f107 030c 	add.w	r3, r7, #12
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fb4c 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b9c:	e1d5      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba2:	e1d2      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ba4:	4b17      	ldr	r3, [pc, #92]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d109      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb0:	4b14      	ldr	r3, [pc, #80]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	08db      	lsrs	r3, r3, #3
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	4a13      	ldr	r2, [pc, #76]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc2:	e1c2      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bc8:	e1bf      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006bca:	4b0e      	ldr	r3, [pc, #56]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd6:	d102      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bdc:	e1b5      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006be2:	e1b2      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006be4:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf0:	d102      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006bf2:	4b07      	ldr	r3, [pc, #28]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf6:	e1a8      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bfc:	e1a5      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c02:	e1a2      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c04:	58024400 	.word	0x58024400
 8006c08:	03d09000 	.word	0x03d09000
 8006c0c:	003d0900 	.word	0x003d0900
 8006c10:	017d7840 	.word	0x017d7840
 8006c14:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006c20:	430b      	orrs	r3, r1
 8006c22:	d173      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c24:	4b9c      	ldr	r3, [pc, #624]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c34:	d02f      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c3c:	d863      	bhi.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4a:	d012      	beq.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006c4c:	e05b      	b.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c4e:	4b92      	ldr	r3, [pc, #584]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c5a:	d107      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c5c:	f107 0318 	add.w	r3, r7, #24
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 f991 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c6a:	e16e      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c70:	e16b      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c72:	4b89      	ldr	r3, [pc, #548]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c80:	f107 030c 	add.w	r3, r7, #12
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fad3 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c8e:	e15c      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c94:	e159      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c96:	4b80      	ldr	r3, [pc, #512]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ca0:	4b7d      	ldr	r3, [pc, #500]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d10c      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cb2:	4b79      	ldr	r3, [pc, #484]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	4a77      	ldr	r2, [pc, #476]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cc4:	e01e      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cc6:	4b74      	ldr	r3, [pc, #464]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cda:	d102      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cdc:	4b70      	ldr	r3, [pc, #448]	@ (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce0:	e010      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cee:	d106      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cf6:	d102      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cfc:	e002      	b.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d02:	e122      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d04:	e121      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d0a:	e11e      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d10:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006d14:	430b      	orrs	r3, r1
 8006d16:	d133      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d18:	4b5f      	ldr	r3, [pc, #380]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2e:	d012      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006d30:	e023      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d32:	4b59      	ldr	r3, [pc, #356]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fbc7 	bl	80074d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d4e:	e0fc      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d54:	e0f9      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d56:	4b50      	ldr	r3, [pc, #320]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d62:	d107      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d64:	f107 0318 	add.w	r3, r7, #24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f90d 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d72:	e0ea      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d78:	e0e7      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7e:	e0e4      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d84:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	f040 808d 	bne.w	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d8e:	4b42      	ldr	r3, [pc, #264]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006d96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9e:	d06b      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da6:	d874      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dae:	d056      	beq.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db6:	d86c      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dbe:	d03b      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dc6:	d864      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dce:	d021      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dd6:	d85c      	bhi.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006de4:	d004      	beq.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006de6:	e054      	b.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006de8:	f000 f8b8 	bl	8006f5c <HAL_RCCEx_GetD3PCLK1Freq>
 8006dec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dee:	e0ac      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006df0:	4b29      	ldr	r3, [pc, #164]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dfc:	d107      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dfe:	f107 0318 	add.w	r3, r7, #24
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f8c0 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e0c:	e09d      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e12:	e09a      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e14:	4b20      	ldr	r3, [pc, #128]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e20:	d107      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e22:	f107 030c 	add.w	r3, r7, #12
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fa02 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e30:	e08b      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e36:	e088      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e38:	4b17      	ldr	r3, [pc, #92]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d109      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e44:	4b14      	ldr	r3, [pc, #80]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	08db      	lsrs	r3, r3, #3
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	4a13      	ldr	r2, [pc, #76]	@ (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e56:	e078      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5c:	e075      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e6a:	d102      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e70:	e06b      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e76:	e068      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e78:	4b07      	ldr	r3, [pc, #28]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e84:	d102      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006e86:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8a:	e05e      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e90:	e05b      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e96:	e058      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	03d09000 	.word	0x03d09000
 8006ea0:	003d0900 	.word	0x003d0900
 8006ea4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	d148      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006eb4:	4b27      	ldr	r3, [pc, #156]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006ebc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec4:	d02a      	beq.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ecc:	d838      	bhi.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eda:	d00d      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006edc:	e030      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ede:	4b1d      	ldr	r3, [pc, #116]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eea:	d102      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006eec:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef0:	e02b      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef6:	e028      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ef8:	4b16      	ldr	r3, [pc, #88]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f04:	d107      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fae4 	bl	80074d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f14:	e019      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1a:	e016      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f28:	d107      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2a:	f107 0318 	add.w	r3, r7, #24
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f82a 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f38:	e007      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3e:	e004      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f44:	e001      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3740      	adds	r7, #64	@ 0x40
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	58024400 	.word	0x58024400
 8006f58:	017d7840 	.word	0x017d7840

08006f5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f60:	f7fd ffd6 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8006f64:	4602      	mov	r2, r0
 8006f66:	4b06      	ldr	r3, [pc, #24]	@ (8006f80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	091b      	lsrs	r3, r3, #4
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	4904      	ldr	r1, [pc, #16]	@ (8006f84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f72:	5ccb      	ldrb	r3, [r1, r3]
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	58024400 	.word	0x58024400
 8006f84:	0800dac4 	.word	0x0800dac4

08006f88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b089      	sub	sp, #36	@ 0x24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f90:	4ba1      	ldr	r3, [pc, #644]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f9a:	4b9f      	ldr	r3, [pc, #636]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	0b1b      	lsrs	r3, r3, #12
 8006fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fa4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fa6:	4b9c      	ldr	r3, [pc, #624]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	091b      	lsrs	r3, r3, #4
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006fb2:	4b99      	ldr	r3, [pc, #612]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb6:	08db      	lsrs	r3, r3, #3
 8006fb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8111 	beq.w	80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	f000 8083 	beq.w	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	f200 80a1 	bhi.w	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d056      	beq.n	80070a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ff2:	e099      	b.n	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff4:	4b88      	ldr	r3, [pc, #544]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d02d      	beq.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007000:	4b85      	ldr	r3, [pc, #532]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	4a84      	ldr	r2, [pc, #528]	@ (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
 8007010:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702a:	4b7b      	ldr	r3, [pc, #492]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703a:	ed97 6a03 	vldr	s12, [r7, #12]
 800703e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800704e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007056:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800705a:	e087      	b.n	800716c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800706a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706e:	4b6a      	ldr	r3, [pc, #424]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007082:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800709e:	e065      	b.n	800716c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b2:	4b59      	ldr	r3, [pc, #356]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e2:	e043      	b.n	800716c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800722c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f6:	4b48      	ldr	r3, [pc, #288]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007106:	ed97 6a03 	vldr	s12, [r7, #12]
 800710a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800710e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007126:	e021      	b.n	800716c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713a:	4b37      	ldr	r3, [pc, #220]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714a:	ed97 6a03 	vldr	s12, [r7, #12]
 800714e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800715e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800716a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800716c:	4b2a      	ldr	r3, [pc, #168]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800716e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007170:	0a5b      	lsrs	r3, r3, #9
 8007172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007186:	edd7 6a07 	vldr	s13, [r7, #28]
 800718a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800718e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007192:	ee17 2a90 	vmov	r2, s15
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800719a:	4b1f      	ldr	r3, [pc, #124]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c0:	ee17 2a90 	vmov	r2, s15
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071c8:	4b13      	ldr	r3, [pc, #76]	@ (8007218 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	0e1b      	lsrs	r3, r3, #24
 80071ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ee:	ee17 2a90 	vmov	r2, s15
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071f6:	e008      	b.n	800720a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	609a      	str	r2, [r3, #8]
}
 800720a:	bf00      	nop
 800720c:	3724      	adds	r7, #36	@ 0x24
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	58024400 	.word	0x58024400
 800721c:	03d09000 	.word	0x03d09000
 8007220:	46000000 	.word	0x46000000
 8007224:	4c742400 	.word	0x4c742400
 8007228:	4a742400 	.word	0x4a742400
 800722c:	4bbebc20 	.word	0x4bbebc20

08007230 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007230:	b480      	push	{r7}
 8007232:	b089      	sub	sp, #36	@ 0x24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007238:	4ba1      	ldr	r3, [pc, #644]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007242:	4b9f      	ldr	r3, [pc, #636]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	0d1b      	lsrs	r3, r3, #20
 8007248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800724c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800724e:	4b9c      	ldr	r3, [pc, #624]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800725a:	4b99      	ldr	r3, [pc, #612]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725e:	08db      	lsrs	r3, r3, #3
 8007260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	fb02 f303 	mul.w	r3, r2, r3
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 8111 	beq.w	80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b02      	cmp	r3, #2
 8007282:	f000 8083 	beq.w	800738c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b02      	cmp	r3, #2
 800728a:	f200 80a1 	bhi.w	80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d056      	beq.n	8007348 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800729a:	e099      	b.n	80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800729c:	4b88      	ldr	r3, [pc, #544]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02d      	beq.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072a8:	4b85      	ldr	r3, [pc, #532]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	08db      	lsrs	r3, r3, #3
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	4a84      	ldr	r2, [pc, #528]	@ (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072b4:	fa22 f303 	lsr.w	r3, r2, r3
 80072b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d2:	4b7b      	ldr	r3, [pc, #492]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007302:	e087      	b.n	8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007316:	4b6a      	ldr	r3, [pc, #424]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007326:	ed97 6a03 	vldr	s12, [r7, #12]
 800732a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800732e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800733a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800733e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007346:	e065      	b.n	8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735a:	4b59      	ldr	r3, [pc, #356]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736a:	ed97 6a03 	vldr	s12, [r7, #12]
 800736e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800737e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800738a:	e043      	b.n	8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800739a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739e:	4b48      	ldr	r3, [pc, #288]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ce:	e021      	b.n	8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e2:	4b37      	ldr	r3, [pc, #220]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007412:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007414:	4b2a      	ldr	r3, [pc, #168]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	0a5b      	lsrs	r3, r3, #9
 800741a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800742e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743a:	ee17 2a90 	vmov	r2, s15
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007442:	4b1f      	ldr	r3, [pc, #124]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007446:	0c1b      	lsrs	r3, r3, #16
 8007448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744c:	ee07 3a90 	vmov	s15, r3
 8007450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007468:	ee17 2a90 	vmov	r2, s15
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007470:	4b13      	ldr	r3, [pc, #76]	@ (80074c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007474:	0e1b      	lsrs	r3, r3, #24
 8007476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800748a:	edd7 6a07 	vldr	s13, [r7, #28]
 800748e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007496:	ee17 2a90 	vmov	r2, s15
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800749e:	e008      	b.n	80074b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
}
 80074b2:	bf00      	nop
 80074b4:	3724      	adds	r7, #36	@ 0x24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	58024400 	.word	0x58024400
 80074c4:	03d09000 	.word	0x03d09000
 80074c8:	46000000 	.word	0x46000000
 80074cc:	4c742400 	.word	0x4c742400
 80074d0:	4a742400 	.word	0x4a742400
 80074d4:	4bbebc20 	.word	0x4bbebc20

080074d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	@ 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074e0:	4ba0      	ldr	r3, [pc, #640]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80074ea:	4b9e      	ldr	r3, [pc, #632]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80074f6:	4b9b      	ldr	r3, [pc, #620]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007500:	4b98      	ldr	r3, [pc, #608]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007504:	08db      	lsrs	r3, r3, #3
 8007506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	fb02 f303 	mul.w	r3, r2, r3
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007518:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8111 	beq.w	8007746 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	2b02      	cmp	r3, #2
 8007528:	f000 8083 	beq.w	8007632 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	2b02      	cmp	r3, #2
 8007530:	f200 80a1 	bhi.w	8007676 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d056      	beq.n	80075ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007540:	e099      	b.n	8007676 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007542:	4b88      	ldr	r3, [pc, #544]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d02d      	beq.n	80075aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800754e:	4b85      	ldr	r3, [pc, #532]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	08db      	lsrs	r3, r3, #3
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	4a83      	ldr	r2, [pc, #524]	@ (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800755a:	fa22 f303 	lsr.w	r3, r2, r3
 800755e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007578:	4b7a      	ldr	r3, [pc, #488]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800757a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007580:	ee07 3a90 	vmov	s15, r3
 8007584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007588:	ed97 6a03 	vldr	s12, [r7, #12]
 800758c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800776c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800759c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075a8:	e087      	b.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007770 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80075b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075bc:	4b69      	ldr	r3, [pc, #420]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c4:	ee07 3a90 	vmov	s15, r3
 80075c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800776c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ec:	e065      	b.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007774 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80075fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007600:	4b58      	ldr	r3, [pc, #352]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007610:	ed97 6a03 	vldr	s12, [r7, #12]
 8007614:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800776c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007630:	e043      	b.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007778 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007644:	4b47      	ldr	r3, [pc, #284]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007654:	ed97 6a03 	vldr	s12, [r7, #12]
 8007658:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800776c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800765c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007674:	e021      	b.n	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007680:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007770 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007688:	4b36      	ldr	r3, [pc, #216]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800768a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007698:	ed97 6a03 	vldr	s12, [r7, #12]
 800769c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800776c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80076ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	0a5b      	lsrs	r3, r3, #9
 80076c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e0:	ee17 2a90 	vmov	r2, s15
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80076e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ec:	0c1b      	lsrs	r3, r3, #16
 80076ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007702:	edd7 6a07 	vldr	s13, [r7, #28]
 8007706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770e:	ee17 2a90 	vmov	r2, s15
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007716:	4b13      	ldr	r3, [pc, #76]	@ (8007764 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771a:	0e1b      	lsrs	r3, r3, #24
 800771c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800772c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007730:	edd7 6a07 	vldr	s13, [r7, #28]
 8007734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773c:	ee17 2a90 	vmov	r2, s15
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007744:	e008      	b.n	8007758 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	609a      	str	r2, [r3, #8]
}
 8007758:	bf00      	nop
 800775a:	3724      	adds	r7, #36	@ 0x24
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	58024400 	.word	0x58024400
 8007768:	03d09000 	.word	0x03d09000
 800776c:	46000000 	.word	0x46000000
 8007770:	4c742400 	.word	0x4c742400
 8007774:	4a742400 	.word	0x4a742400
 8007778:	4bbebc20 	.word	0x4bbebc20

0800777c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800778a:	4b53      	ldr	r3, [pc, #332]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 800778c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d101      	bne.n	800779a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e099      	b.n	80078ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800779a:	4b4f      	ldr	r3, [pc, #316]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a4e      	ldr	r2, [pc, #312]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 80077a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a6:	f7f9 fe73 	bl	8001490 <HAL_GetTick>
 80077aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077ac:	e008      	b.n	80077c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077ae:	f7f9 fe6f 	bl	8001490 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e086      	b.n	80078ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077c0:	4b45      	ldr	r3, [pc, #276]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f0      	bne.n	80077ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077cc:	4b42      	ldr	r3, [pc, #264]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 80077ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	031b      	lsls	r3, r3, #12
 80077da:	493f      	ldr	r1, [pc, #252]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	628b      	str	r3, [r1, #40]	@ 0x28
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	025b      	lsls	r3, r3, #9
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	041b      	lsls	r3, r3, #16
 80077fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	3b01      	subs	r3, #1
 800780a:	061b      	lsls	r3, r3, #24
 800780c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007810:	4931      	ldr	r1, [pc, #196]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007812:	4313      	orrs	r3, r2
 8007814:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007816:	4b30      	ldr	r3, [pc, #192]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	492d      	ldr	r1, [pc, #180]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007824:	4313      	orrs	r3, r2
 8007826:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007828:	4b2b      	ldr	r3, [pc, #172]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	f023 0220 	bic.w	r2, r3, #32
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	4928      	ldr	r1, [pc, #160]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007836:	4313      	orrs	r3, r2
 8007838:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800783a:	4b27      	ldr	r3, [pc, #156]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 800783c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783e:	4a26      	ldr	r2, [pc, #152]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007840:	f023 0310 	bic.w	r3, r3, #16
 8007844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007846:	4b24      	ldr	r3, [pc, #144]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800784a:	4b24      	ldr	r3, [pc, #144]	@ (80078dc <RCCEx_PLL2_Config+0x160>)
 800784c:	4013      	ands	r3, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	69d2      	ldr	r2, [r2, #28]
 8007852:	00d2      	lsls	r2, r2, #3
 8007854:	4920      	ldr	r1, [pc, #128]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007856:	4313      	orrs	r3, r2
 8007858:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800785a:	4b1f      	ldr	r3, [pc, #124]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	4a1e      	ldr	r2, [pc, #120]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007860:	f043 0310 	orr.w	r3, r3, #16
 8007864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800786c:	4b1a      	ldr	r3, [pc, #104]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 800786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007870:	4a19      	ldr	r2, [pc, #100]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007872:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007878:	e00f      	b.n	800789a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d106      	bne.n	800788e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007880:	4b15      	ldr	r3, [pc, #84]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	4a14      	ldr	r2, [pc, #80]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800788a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800788c:	e005      	b.n	800789a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800788e:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	4a11      	ldr	r2, [pc, #68]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 8007894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007898:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800789a:	4b0f      	ldr	r3, [pc, #60]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a0e      	ldr	r2, [pc, #56]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 80078a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078a6:	f7f9 fdf3 	bl	8001490 <HAL_GetTick>
 80078aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078ac:	e008      	b.n	80078c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078ae:	f7f9 fdef 	bl	8001490 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e006      	b.n	80078ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <RCCEx_PLL2_Config+0x15c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f0      	beq.n	80078ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	58024400 	.word	0x58024400
 80078dc:	ffff0007 	.word	0xffff0007

080078e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078ee:	4b53      	ldr	r3, [pc, #332]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d101      	bne.n	80078fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e099      	b.n	8007a32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078fe:	4b4f      	ldr	r3, [pc, #316]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a4e      	ldr	r2, [pc, #312]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790a:	f7f9 fdc1 	bl	8001490 <HAL_GetTick>
 800790e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007910:	e008      	b.n	8007924 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007912:	f7f9 fdbd 	bl	8001490 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e086      	b.n	8007a32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007924:	4b45      	ldr	r3, [pc, #276]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f0      	bne.n	8007912 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007930:	4b42      	ldr	r3, [pc, #264]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	051b      	lsls	r3, r3, #20
 800793e:	493f      	ldr	r1, [pc, #252]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007940:	4313      	orrs	r3, r2
 8007942:	628b      	str	r3, [r1, #40]	@ 0x28
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	3b01      	subs	r3, #1
 800794a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	3b01      	subs	r3, #1
 8007954:	025b      	lsls	r3, r3, #9
 8007956:	b29b      	uxth	r3, r3
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	3b01      	subs	r3, #1
 8007960:	041b      	lsls	r3, r3, #16
 8007962:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	3b01      	subs	r3, #1
 800796e:	061b      	lsls	r3, r3, #24
 8007970:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007974:	4931      	ldr	r1, [pc, #196]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007976:	4313      	orrs	r3, r2
 8007978:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800797a:	4b30      	ldr	r3, [pc, #192]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 800797c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	492d      	ldr	r1, [pc, #180]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007988:	4313      	orrs	r3, r2
 800798a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800798c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 800798e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007990:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	4928      	ldr	r1, [pc, #160]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 800799a:	4313      	orrs	r3, r2
 800799c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800799e:	4b27      	ldr	r3, [pc, #156]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a2:	4a26      	ldr	r2, [pc, #152]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079aa:	4b24      	ldr	r3, [pc, #144]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ae:	4b24      	ldr	r3, [pc, #144]	@ (8007a40 <RCCEx_PLL3_Config+0x160>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	69d2      	ldr	r2, [r2, #28]
 80079b6:	00d2      	lsls	r2, r2, #3
 80079b8:	4920      	ldr	r1, [pc, #128]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079be:	4b1f      	ldr	r3, [pc, #124]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	4a1e      	ldr	r2, [pc, #120]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079d0:	4b1a      	ldr	r3, [pc, #104]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d4:	4a19      	ldr	r2, [pc, #100]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80079da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079dc:	e00f      	b.n	80079fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d106      	bne.n	80079f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80079e4:	4b15      	ldr	r3, [pc, #84]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e8:	4a14      	ldr	r2, [pc, #80]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80079ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80079f0:	e005      	b.n	80079fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80079f2:	4b12      	ldr	r3, [pc, #72]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	4a11      	ldr	r2, [pc, #68]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 80079f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079fe:	4b0f      	ldr	r3, [pc, #60]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a0e      	ldr	r2, [pc, #56]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a0a:	f7f9 fd41 	bl	8001490 <HAL_GetTick>
 8007a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a10:	e008      	b.n	8007a24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a12:	f7f9 fd3d 	bl	8001490 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d901      	bls.n	8007a24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e006      	b.n	8007a32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a24:	4b05      	ldr	r3, [pc, #20]	@ (8007a3c <RCCEx_PLL3_Config+0x15c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0f0      	beq.n	8007a12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	ffff0007 	.word	0xffff0007

08007a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e042      	b.n	8007adc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7f9 faef 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2224      	movs	r2, #36	@ 0x24
 8007a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f9f8 	bl	8008e84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fc8d 	bl	80083b4 <UART_SetConfig>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e01b      	b.n	8007adc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fa77 	bl	8008fc8 <UART_CheckIdleState>
 8007ada:	4603      	mov	r3, r0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	@ 0x28
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	4613      	mov	r3, r2
 8007af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d17b      	bne.n	8007bf6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <HAL_UART_Transmit+0x26>
 8007b04:	88fb      	ldrh	r3, [r7, #6]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e074      	b.n	8007bf8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2221      	movs	r2, #33	@ 0x21
 8007b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b1e:	f7f9 fcb7 	bl	8001490 <HAL_GetTick>
 8007b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	88fa      	ldrh	r2, [r7, #6]
 8007b30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b3c:	d108      	bne.n	8007b50 <HAL_UART_Transmit+0x6c>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	e003      	b.n	8007b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b58:	e030      	b.n	8007bbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2200      	movs	r2, #0
 8007b62:	2180      	movs	r1, #128	@ 0x80
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f001 fad9 	bl	800911c <UART_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e03d      	b.n	8007bf8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	3302      	adds	r3, #2
 8007b96:	61bb      	str	r3, [r7, #24]
 8007b98:	e007      	b.n	8007baa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1c8      	bne.n	8007b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2140      	movs	r1, #64	@ 0x40
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f001 faa2 	bl	800911c <UART_WaitOnFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e006      	b.n	8007bf8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e000      	b.n	8007bf8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007bf6:	2302      	movs	r3, #2
  }
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3720      	adds	r7, #32
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b0ba      	sub	sp, #232	@ 0xe8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007c2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007c2e:	4013      	ands	r3, r2
 8007c30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d11b      	bne.n	8007c74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d015      	beq.n	8007c74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d009      	beq.n	8007c74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8377 	beq.w	8008358 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
      }
      return;
 8007c72:	e371      	b.n	8008358 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8123 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c82:	4b8d      	ldr	r3, [pc, #564]	@ (8007eb8 <HAL_UART_IRQHandler+0x2b8>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d106      	bne.n	8007c98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8007ebc <HAL_UART_IRQHandler+0x2bc>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 8116 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d011      	beq.n	8007cc8 <HAL_UART_IRQHandler+0xc8>
 8007ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cbe:	f043 0201 	orr.w	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d011      	beq.n	8007cf8 <HAL_UART_IRQHandler+0xf8>
 8007cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cee:	f043 0204 	orr.w	r2, r3, #4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d011      	beq.n	8007d28 <HAL_UART_IRQHandler+0x128>
 8007d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2204      	movs	r2, #4
 8007d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d1e:	f043 0202 	orr.w	r2, r3, #2
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d017      	beq.n	8007d64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d105      	bne.n	8007d4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d44:	4b5c      	ldr	r3, [pc, #368]	@ (8007eb8 <HAL_UART_IRQHandler+0x2b8>)
 8007d46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2208      	movs	r2, #8
 8007d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5a:	f043 0208 	orr.w	r2, r3, #8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d012      	beq.n	8007d96 <HAL_UART_IRQHandler+0x196>
 8007d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00c      	beq.n	8007d96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d8c:	f043 0220 	orr.w	r2, r3, #32
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 82dd 	beq.w	800835c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d013      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dea:	2b40      	cmp	r3, #64	@ 0x40
 8007dec:	d005      	beq.n	8007dfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007df2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d054      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f9fc 	bl	80091f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e0a:	2b40      	cmp	r3, #64	@ 0x40
 8007e0c:	d146      	bne.n	8007e9c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3308      	adds	r3, #8
 8007e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1d9      	bne.n	8007e0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d017      	beq.n	8007e94 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e6a:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <HAL_UART_IRQHandler+0x2c0>)
 8007e6c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fb fc71 	bl	800375c <HAL_DMA_Abort_IT>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d019      	beq.n	8007eb4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e92:	e00f      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa77 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9a:	e00b      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fa73 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea2:	e007      	b.n	8007eb4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa6f 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007eb2:	e253      	b.n	800835c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb4:	bf00      	nop
    return;
 8007eb6:	e251      	b.n	800835c <HAL_UART_IRQHandler+0x75c>
 8007eb8:	10000001 	.word	0x10000001
 8007ebc:	04000120 	.word	0x04000120
 8007ec0:	080092c5 	.word	0x080092c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	f040 81e7 	bne.w	800829c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed2:	f003 0310 	and.w	r3, r3, #16
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 81e0 	beq.w	800829c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 81d9 	beq.w	800829c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2210      	movs	r2, #16
 8007ef0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efc:	2b40      	cmp	r3, #64	@ 0x40
 8007efe:	f040 8151 	bne.w	80081a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a96      	ldr	r2, [pc, #600]	@ (8008164 <HAL_UART_IRQHandler+0x564>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d068      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a93      	ldr	r2, [pc, #588]	@ (8008168 <HAL_UART_IRQHandler+0x568>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d061      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a91      	ldr	r2, [pc, #580]	@ (800816c <HAL_UART_IRQHandler+0x56c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d05a      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a8e      	ldr	r2, [pc, #568]	@ (8008170 <HAL_UART_IRQHandler+0x570>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d053      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a8c      	ldr	r2, [pc, #560]	@ (8008174 <HAL_UART_IRQHandler+0x574>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d04c      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a89      	ldr	r2, [pc, #548]	@ (8008178 <HAL_UART_IRQHandler+0x578>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d045      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a87      	ldr	r2, [pc, #540]	@ (800817c <HAL_UART_IRQHandler+0x57c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d03e      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a84      	ldr	r2, [pc, #528]	@ (8008180 <HAL_UART_IRQHandler+0x580>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d037      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a82      	ldr	r2, [pc, #520]	@ (8008184 <HAL_UART_IRQHandler+0x584>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d030      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a7f      	ldr	r2, [pc, #508]	@ (8008188 <HAL_UART_IRQHandler+0x588>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d029      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a7d      	ldr	r2, [pc, #500]	@ (800818c <HAL_UART_IRQHandler+0x58c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d022      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a7a      	ldr	r2, [pc, #488]	@ (8008190 <HAL_UART_IRQHandler+0x590>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d01b      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a78      	ldr	r2, [pc, #480]	@ (8008194 <HAL_UART_IRQHandler+0x594>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d014      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a75      	ldr	r2, [pc, #468]	@ (8008198 <HAL_UART_IRQHandler+0x598>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00d      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a73      	ldr	r2, [pc, #460]	@ (800819c <HAL_UART_IRQHandler+0x59c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d006      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x3e2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a70      	ldr	r2, [pc, #448]	@ (80081a0 <HAL_UART_IRQHandler+0x5a0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d106      	bne.n	8007ff0 <HAL_UART_IRQHandler+0x3f0>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	e005      	b.n	8007ffc <HAL_UART_IRQHandler+0x3fc>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 81ab 	beq.w	8008360 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008014:	429a      	cmp	r2, r3
 8008016:	f080 81a3 	bcs.w	8008360 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008020:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008030:	f000 8087 	beq.w	8008142 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008048:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800804c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	461a      	mov	r2, r3
 800805a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800805e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008062:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800806a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1da      	bne.n	8008034 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800808e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3308      	adds	r3, #8
 800809e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e1      	bne.n	800807e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3308      	adds	r3, #8
 80080da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80080de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80080e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e3      	bne.n	80080ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800810e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008110:	f023 0310 	bic.w	r3, r3, #16
 8008114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008122:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008124:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008128:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e4      	bne.n	8008100 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800813c:	4618      	mov	r0, r3
 800813e:	f7fa ffef 	bl	8003120 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008154:	b29b      	uxth	r3, r3
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	b29b      	uxth	r3, r3
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f91d 	bl	800839c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008162:	e0fd      	b.n	8008360 <HAL_UART_IRQHandler+0x760>
 8008164:	40020010 	.word	0x40020010
 8008168:	40020028 	.word	0x40020028
 800816c:	40020040 	.word	0x40020040
 8008170:	40020058 	.word	0x40020058
 8008174:	40020070 	.word	0x40020070
 8008178:	40020088 	.word	0x40020088
 800817c:	400200a0 	.word	0x400200a0
 8008180:	400200b8 	.word	0x400200b8
 8008184:	40020410 	.word	0x40020410
 8008188:	40020428 	.word	0x40020428
 800818c:	40020440 	.word	0x40020440
 8008190:	40020458 	.word	0x40020458
 8008194:	40020470 	.word	0x40020470
 8008198:	40020488 	.word	0x40020488
 800819c:	400204a0 	.word	0x400204a0
 80081a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80cf 	beq.w	8008364 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80081c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80ca 	beq.w	8008364 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e4      	bne.n	80081d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	623b      	str	r3, [r7, #32]
   return(result);
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	4b55      	ldr	r3, [pc, #340]	@ (8008370 <HAL_UART_IRQHandler+0x770>)
 800821a:	4013      	ands	r3, r2
 800821c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3308      	adds	r3, #8
 8008226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800822a:	633a      	str	r2, [r7, #48]	@ 0x30
 800822c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e3      	bne.n	8008206 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	e853 3f00 	ldrex	r3, [r3]
 800825e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0310 	bic.w	r3, r3, #16
 8008266:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008278:	69b9      	ldr	r1, [r7, #24]
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	e841 2300 	strex	r3, r2, [r1]
 8008280:	617b      	str	r3, [r7, #20]
   return(result);
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e4      	bne.n	8008252 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800828e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f881 	bl	800839c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800829a:	e063      	b.n	8008364 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800829c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00e      	beq.n	80082c6 <HAL_UART_IRQHandler+0x6c6>
 80082a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d008      	beq.n	80082c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80082bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f841 	bl	8009346 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082c4:	e051      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d014      	beq.n	80082fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80082de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d03a      	beq.n	8008368 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
    }
    return;
 80082fa:	e035      	b.n	8008368 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d009      	beq.n	800831c <HAL_UART_IRQHandler+0x71c>
 8008308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800830c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	d003      	beq.n	800831c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 ffeb 	bl	80092f0 <UART_EndTransmit_IT>
    return;
 800831a:	e026      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d009      	beq.n	800833c <HAL_UART_IRQHandler+0x73c>
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f81a 	bl	800936e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800833a:	e016      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800833c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008340:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d010      	beq.n	800836a <HAL_UART_IRQHandler+0x76a>
 8008348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800834c:	2b00      	cmp	r3, #0
 800834e:	da0c      	bge.n	800836a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f802 	bl	800935a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008356:	e008      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
      return;
 8008358:	bf00      	nop
 800835a:	e006      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
    return;
 800835c:	bf00      	nop
 800835e:	e004      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
      return;
 8008360:	bf00      	nop
 8008362:	e002      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
      return;
 8008364:	bf00      	nop
 8008366:	e000      	b.n	800836a <HAL_UART_IRQHandler+0x76a>
    return;
 8008368:	bf00      	nop
  }
}
 800836a:	37e8      	adds	r7, #232	@ 0xe8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	effffffe 	.word	0xeffffffe

08008374 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083b8:	b092      	sub	sp, #72	@ 0x48
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	431a      	orrs	r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	4313      	orrs	r3, r2
 80083da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4bbe      	ldr	r3, [pc, #760]	@ (80086dc <UART_SetConfig+0x328>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4ab3      	ldr	r2, [pc, #716]	@ (80086e0 <UART_SetConfig+0x32c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d004      	beq.n	8008420 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800841c:	4313      	orrs	r3, r2
 800841e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	4baf      	ldr	r3, [pc, #700]	@ (80086e4 <UART_SetConfig+0x330>)
 8008428:	4013      	ands	r3, r2
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	6812      	ldr	r2, [r2, #0]
 800842e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008430:	430b      	orrs	r3, r1
 8008432:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843a:	f023 010f 	bic.w	r1, r3, #15
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4aa6      	ldr	r2, [pc, #664]	@ (80086e8 <UART_SetConfig+0x334>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d177      	bne.n	8008544 <UART_SetConfig+0x190>
 8008454:	4ba5      	ldr	r3, [pc, #660]	@ (80086ec <UART_SetConfig+0x338>)
 8008456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008458:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800845c:	2b28      	cmp	r3, #40	@ 0x28
 800845e:	d86d      	bhi.n	800853c <UART_SetConfig+0x188>
 8008460:	a201      	add	r2, pc, #4	@ (adr r2, 8008468 <UART_SetConfig+0xb4>)
 8008462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008466:	bf00      	nop
 8008468:	0800850d 	.word	0x0800850d
 800846c:	0800853d 	.word	0x0800853d
 8008470:	0800853d 	.word	0x0800853d
 8008474:	0800853d 	.word	0x0800853d
 8008478:	0800853d 	.word	0x0800853d
 800847c:	0800853d 	.word	0x0800853d
 8008480:	0800853d 	.word	0x0800853d
 8008484:	0800853d 	.word	0x0800853d
 8008488:	08008515 	.word	0x08008515
 800848c:	0800853d 	.word	0x0800853d
 8008490:	0800853d 	.word	0x0800853d
 8008494:	0800853d 	.word	0x0800853d
 8008498:	0800853d 	.word	0x0800853d
 800849c:	0800853d 	.word	0x0800853d
 80084a0:	0800853d 	.word	0x0800853d
 80084a4:	0800853d 	.word	0x0800853d
 80084a8:	0800851d 	.word	0x0800851d
 80084ac:	0800853d 	.word	0x0800853d
 80084b0:	0800853d 	.word	0x0800853d
 80084b4:	0800853d 	.word	0x0800853d
 80084b8:	0800853d 	.word	0x0800853d
 80084bc:	0800853d 	.word	0x0800853d
 80084c0:	0800853d 	.word	0x0800853d
 80084c4:	0800853d 	.word	0x0800853d
 80084c8:	08008525 	.word	0x08008525
 80084cc:	0800853d 	.word	0x0800853d
 80084d0:	0800853d 	.word	0x0800853d
 80084d4:	0800853d 	.word	0x0800853d
 80084d8:	0800853d 	.word	0x0800853d
 80084dc:	0800853d 	.word	0x0800853d
 80084e0:	0800853d 	.word	0x0800853d
 80084e4:	0800853d 	.word	0x0800853d
 80084e8:	0800852d 	.word	0x0800852d
 80084ec:	0800853d 	.word	0x0800853d
 80084f0:	0800853d 	.word	0x0800853d
 80084f4:	0800853d 	.word	0x0800853d
 80084f8:	0800853d 	.word	0x0800853d
 80084fc:	0800853d 	.word	0x0800853d
 8008500:	0800853d 	.word	0x0800853d
 8008504:	0800853d 	.word	0x0800853d
 8008508:	08008535 	.word	0x08008535
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e222      	b.n	800895a <UART_SetConfig+0x5a6>
 8008514:	2304      	movs	r3, #4
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e21e      	b.n	800895a <UART_SetConfig+0x5a6>
 800851c:	2308      	movs	r3, #8
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e21a      	b.n	800895a <UART_SetConfig+0x5a6>
 8008524:	2310      	movs	r3, #16
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e216      	b.n	800895a <UART_SetConfig+0x5a6>
 800852c:	2320      	movs	r3, #32
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e212      	b.n	800895a <UART_SetConfig+0x5a6>
 8008534:	2340      	movs	r3, #64	@ 0x40
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e20e      	b.n	800895a <UART_SetConfig+0x5a6>
 800853c:	2380      	movs	r3, #128	@ 0x80
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e20a      	b.n	800895a <UART_SetConfig+0x5a6>
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a69      	ldr	r2, [pc, #420]	@ (80086f0 <UART_SetConfig+0x33c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d130      	bne.n	80085b0 <UART_SetConfig+0x1fc>
 800854e:	4b67      	ldr	r3, [pc, #412]	@ (80086ec <UART_SetConfig+0x338>)
 8008550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	2b05      	cmp	r3, #5
 8008558:	d826      	bhi.n	80085a8 <UART_SetConfig+0x1f4>
 800855a:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <UART_SetConfig+0x1ac>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008579 	.word	0x08008579
 8008564:	08008581 	.word	0x08008581
 8008568:	08008589 	.word	0x08008589
 800856c:	08008591 	.word	0x08008591
 8008570:	08008599 	.word	0x08008599
 8008574:	080085a1 	.word	0x080085a1
 8008578:	2300      	movs	r3, #0
 800857a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857e:	e1ec      	b.n	800895a <UART_SetConfig+0x5a6>
 8008580:	2304      	movs	r3, #4
 8008582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008586:	e1e8      	b.n	800895a <UART_SetConfig+0x5a6>
 8008588:	2308      	movs	r3, #8
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858e:	e1e4      	b.n	800895a <UART_SetConfig+0x5a6>
 8008590:	2310      	movs	r3, #16
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008596:	e1e0      	b.n	800895a <UART_SetConfig+0x5a6>
 8008598:	2320      	movs	r3, #32
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e1dc      	b.n	800895a <UART_SetConfig+0x5a6>
 80085a0:	2340      	movs	r3, #64	@ 0x40
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e1d8      	b.n	800895a <UART_SetConfig+0x5a6>
 80085a8:	2380      	movs	r3, #128	@ 0x80
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e1d4      	b.n	800895a <UART_SetConfig+0x5a6>
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a4f      	ldr	r2, [pc, #316]	@ (80086f4 <UART_SetConfig+0x340>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d130      	bne.n	800861c <UART_SetConfig+0x268>
 80085ba:	4b4c      	ldr	r3, [pc, #304]	@ (80086ec <UART_SetConfig+0x338>)
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	d826      	bhi.n	8008614 <UART_SetConfig+0x260>
 80085c6:	a201      	add	r2, pc, #4	@ (adr r2, 80085cc <UART_SetConfig+0x218>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	080085e5 	.word	0x080085e5
 80085d0:	080085ed 	.word	0x080085ed
 80085d4:	080085f5 	.word	0x080085f5
 80085d8:	080085fd 	.word	0x080085fd
 80085dc:	08008605 	.word	0x08008605
 80085e0:	0800860d 	.word	0x0800860d
 80085e4:	2300      	movs	r3, #0
 80085e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ea:	e1b6      	b.n	800895a <UART_SetConfig+0x5a6>
 80085ec:	2304      	movs	r3, #4
 80085ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f2:	e1b2      	b.n	800895a <UART_SetConfig+0x5a6>
 80085f4:	2308      	movs	r3, #8
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fa:	e1ae      	b.n	800895a <UART_SetConfig+0x5a6>
 80085fc:	2310      	movs	r3, #16
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008602:	e1aa      	b.n	800895a <UART_SetConfig+0x5a6>
 8008604:	2320      	movs	r3, #32
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e1a6      	b.n	800895a <UART_SetConfig+0x5a6>
 800860c:	2340      	movs	r3, #64	@ 0x40
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e1a2      	b.n	800895a <UART_SetConfig+0x5a6>
 8008614:	2380      	movs	r3, #128	@ 0x80
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e19e      	b.n	800895a <UART_SetConfig+0x5a6>
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a35      	ldr	r2, [pc, #212]	@ (80086f8 <UART_SetConfig+0x344>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d130      	bne.n	8008688 <UART_SetConfig+0x2d4>
 8008626:	4b31      	ldr	r3, [pc, #196]	@ (80086ec <UART_SetConfig+0x338>)
 8008628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	2b05      	cmp	r3, #5
 8008630:	d826      	bhi.n	8008680 <UART_SetConfig+0x2cc>
 8008632:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <UART_SetConfig+0x284>)
 8008634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008638:	08008651 	.word	0x08008651
 800863c:	08008659 	.word	0x08008659
 8008640:	08008661 	.word	0x08008661
 8008644:	08008669 	.word	0x08008669
 8008648:	08008671 	.word	0x08008671
 800864c:	08008679 	.word	0x08008679
 8008650:	2300      	movs	r3, #0
 8008652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008656:	e180      	b.n	800895a <UART_SetConfig+0x5a6>
 8008658:	2304      	movs	r3, #4
 800865a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865e:	e17c      	b.n	800895a <UART_SetConfig+0x5a6>
 8008660:	2308      	movs	r3, #8
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008666:	e178      	b.n	800895a <UART_SetConfig+0x5a6>
 8008668:	2310      	movs	r3, #16
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866e:	e174      	b.n	800895a <UART_SetConfig+0x5a6>
 8008670:	2320      	movs	r3, #32
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e170      	b.n	800895a <UART_SetConfig+0x5a6>
 8008678:	2340      	movs	r3, #64	@ 0x40
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e16c      	b.n	800895a <UART_SetConfig+0x5a6>
 8008680:	2380      	movs	r3, #128	@ 0x80
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e168      	b.n	800895a <UART_SetConfig+0x5a6>
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1b      	ldr	r2, [pc, #108]	@ (80086fc <UART_SetConfig+0x348>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d142      	bne.n	8008718 <UART_SetConfig+0x364>
 8008692:	4b16      	ldr	r3, [pc, #88]	@ (80086ec <UART_SetConfig+0x338>)
 8008694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	2b05      	cmp	r3, #5
 800869c:	d838      	bhi.n	8008710 <UART_SetConfig+0x35c>
 800869e:	a201      	add	r2, pc, #4	@ (adr r2, 80086a4 <UART_SetConfig+0x2f0>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	080086bd 	.word	0x080086bd
 80086a8:	080086c5 	.word	0x080086c5
 80086ac:	080086cd 	.word	0x080086cd
 80086b0:	080086d5 	.word	0x080086d5
 80086b4:	08008701 	.word	0x08008701
 80086b8:	08008709 	.word	0x08008709
 80086bc:	2300      	movs	r3, #0
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c2:	e14a      	b.n	800895a <UART_SetConfig+0x5a6>
 80086c4:	2304      	movs	r3, #4
 80086c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ca:	e146      	b.n	800895a <UART_SetConfig+0x5a6>
 80086cc:	2308      	movs	r3, #8
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d2:	e142      	b.n	800895a <UART_SetConfig+0x5a6>
 80086d4:	2310      	movs	r3, #16
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086da:	e13e      	b.n	800895a <UART_SetConfig+0x5a6>
 80086dc:	cfff69f3 	.word	0xcfff69f3
 80086e0:	58000c00 	.word	0x58000c00
 80086e4:	11fff4ff 	.word	0x11fff4ff
 80086e8:	40011000 	.word	0x40011000
 80086ec:	58024400 	.word	0x58024400
 80086f0:	40004400 	.word	0x40004400
 80086f4:	40004800 	.word	0x40004800
 80086f8:	40004c00 	.word	0x40004c00
 80086fc:	40005000 	.word	0x40005000
 8008700:	2320      	movs	r3, #32
 8008702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008706:	e128      	b.n	800895a <UART_SetConfig+0x5a6>
 8008708:	2340      	movs	r3, #64	@ 0x40
 800870a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870e:	e124      	b.n	800895a <UART_SetConfig+0x5a6>
 8008710:	2380      	movs	r3, #128	@ 0x80
 8008712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008716:	e120      	b.n	800895a <UART_SetConfig+0x5a6>
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4acb      	ldr	r2, [pc, #812]	@ (8008a4c <UART_SetConfig+0x698>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d176      	bne.n	8008810 <UART_SetConfig+0x45c>
 8008722:	4bcb      	ldr	r3, [pc, #812]	@ (8008a50 <UART_SetConfig+0x69c>)
 8008724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800872a:	2b28      	cmp	r3, #40	@ 0x28
 800872c:	d86c      	bhi.n	8008808 <UART_SetConfig+0x454>
 800872e:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <UART_SetConfig+0x380>)
 8008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008734:	080087d9 	.word	0x080087d9
 8008738:	08008809 	.word	0x08008809
 800873c:	08008809 	.word	0x08008809
 8008740:	08008809 	.word	0x08008809
 8008744:	08008809 	.word	0x08008809
 8008748:	08008809 	.word	0x08008809
 800874c:	08008809 	.word	0x08008809
 8008750:	08008809 	.word	0x08008809
 8008754:	080087e1 	.word	0x080087e1
 8008758:	08008809 	.word	0x08008809
 800875c:	08008809 	.word	0x08008809
 8008760:	08008809 	.word	0x08008809
 8008764:	08008809 	.word	0x08008809
 8008768:	08008809 	.word	0x08008809
 800876c:	08008809 	.word	0x08008809
 8008770:	08008809 	.word	0x08008809
 8008774:	080087e9 	.word	0x080087e9
 8008778:	08008809 	.word	0x08008809
 800877c:	08008809 	.word	0x08008809
 8008780:	08008809 	.word	0x08008809
 8008784:	08008809 	.word	0x08008809
 8008788:	08008809 	.word	0x08008809
 800878c:	08008809 	.word	0x08008809
 8008790:	08008809 	.word	0x08008809
 8008794:	080087f1 	.word	0x080087f1
 8008798:	08008809 	.word	0x08008809
 800879c:	08008809 	.word	0x08008809
 80087a0:	08008809 	.word	0x08008809
 80087a4:	08008809 	.word	0x08008809
 80087a8:	08008809 	.word	0x08008809
 80087ac:	08008809 	.word	0x08008809
 80087b0:	08008809 	.word	0x08008809
 80087b4:	080087f9 	.word	0x080087f9
 80087b8:	08008809 	.word	0x08008809
 80087bc:	08008809 	.word	0x08008809
 80087c0:	08008809 	.word	0x08008809
 80087c4:	08008809 	.word	0x08008809
 80087c8:	08008809 	.word	0x08008809
 80087cc:	08008809 	.word	0x08008809
 80087d0:	08008809 	.word	0x08008809
 80087d4:	08008801 	.word	0x08008801
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e0bc      	b.n	800895a <UART_SetConfig+0x5a6>
 80087e0:	2304      	movs	r3, #4
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e0b8      	b.n	800895a <UART_SetConfig+0x5a6>
 80087e8:	2308      	movs	r3, #8
 80087ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ee:	e0b4      	b.n	800895a <UART_SetConfig+0x5a6>
 80087f0:	2310      	movs	r3, #16
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f6:	e0b0      	b.n	800895a <UART_SetConfig+0x5a6>
 80087f8:	2320      	movs	r3, #32
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fe:	e0ac      	b.n	800895a <UART_SetConfig+0x5a6>
 8008800:	2340      	movs	r3, #64	@ 0x40
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008806:	e0a8      	b.n	800895a <UART_SetConfig+0x5a6>
 8008808:	2380      	movs	r3, #128	@ 0x80
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880e:	e0a4      	b.n	800895a <UART_SetConfig+0x5a6>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a8f      	ldr	r2, [pc, #572]	@ (8008a54 <UART_SetConfig+0x6a0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d130      	bne.n	800887c <UART_SetConfig+0x4c8>
 800881a:	4b8d      	ldr	r3, [pc, #564]	@ (8008a50 <UART_SetConfig+0x69c>)
 800881c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	2b05      	cmp	r3, #5
 8008824:	d826      	bhi.n	8008874 <UART_SetConfig+0x4c0>
 8008826:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <UART_SetConfig+0x478>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008845 	.word	0x08008845
 8008830:	0800884d 	.word	0x0800884d
 8008834:	08008855 	.word	0x08008855
 8008838:	0800885d 	.word	0x0800885d
 800883c:	08008865 	.word	0x08008865
 8008840:	0800886d 	.word	0x0800886d
 8008844:	2300      	movs	r3, #0
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e086      	b.n	800895a <UART_SetConfig+0x5a6>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e082      	b.n	800895a <UART_SetConfig+0x5a6>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885a:	e07e      	b.n	800895a <UART_SetConfig+0x5a6>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008862:	e07a      	b.n	800895a <UART_SetConfig+0x5a6>
 8008864:	2320      	movs	r3, #32
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886a:	e076      	b.n	800895a <UART_SetConfig+0x5a6>
 800886c:	2340      	movs	r3, #64	@ 0x40
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008872:	e072      	b.n	800895a <UART_SetConfig+0x5a6>
 8008874:	2380      	movs	r3, #128	@ 0x80
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887a:	e06e      	b.n	800895a <UART_SetConfig+0x5a6>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a75      	ldr	r2, [pc, #468]	@ (8008a58 <UART_SetConfig+0x6a4>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d130      	bne.n	80088e8 <UART_SetConfig+0x534>
 8008886:	4b72      	ldr	r3, [pc, #456]	@ (8008a50 <UART_SetConfig+0x69c>)
 8008888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888a:	f003 0307 	and.w	r3, r3, #7
 800888e:	2b05      	cmp	r3, #5
 8008890:	d826      	bhi.n	80088e0 <UART_SetConfig+0x52c>
 8008892:	a201      	add	r2, pc, #4	@ (adr r2, 8008898 <UART_SetConfig+0x4e4>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	080088b1 	.word	0x080088b1
 800889c:	080088b9 	.word	0x080088b9
 80088a0:	080088c1 	.word	0x080088c1
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b6:	e050      	b.n	800895a <UART_SetConfig+0x5a6>
 80088b8:	2304      	movs	r3, #4
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e04c      	b.n	800895a <UART_SetConfig+0x5a6>
 80088c0:	2308      	movs	r3, #8
 80088c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c6:	e048      	b.n	800895a <UART_SetConfig+0x5a6>
 80088c8:	2310      	movs	r3, #16
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ce:	e044      	b.n	800895a <UART_SetConfig+0x5a6>
 80088d0:	2320      	movs	r3, #32
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e040      	b.n	800895a <UART_SetConfig+0x5a6>
 80088d8:	2340      	movs	r3, #64	@ 0x40
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e03c      	b.n	800895a <UART_SetConfig+0x5a6>
 80088e0:	2380      	movs	r3, #128	@ 0x80
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e038      	b.n	800895a <UART_SetConfig+0x5a6>
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a5b      	ldr	r2, [pc, #364]	@ (8008a5c <UART_SetConfig+0x6a8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d130      	bne.n	8008954 <UART_SetConfig+0x5a0>
 80088f2:	4b57      	ldr	r3, [pc, #348]	@ (8008a50 <UART_SetConfig+0x69c>)
 80088f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	2b05      	cmp	r3, #5
 80088fc:	d826      	bhi.n	800894c <UART_SetConfig+0x598>
 80088fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008904 <UART_SetConfig+0x550>)
 8008900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008904:	0800891d 	.word	0x0800891d
 8008908:	08008925 	.word	0x08008925
 800890c:	0800892d 	.word	0x0800892d
 8008910:	08008935 	.word	0x08008935
 8008914:	0800893d 	.word	0x0800893d
 8008918:	08008945 	.word	0x08008945
 800891c:	2302      	movs	r3, #2
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e01a      	b.n	800895a <UART_SetConfig+0x5a6>
 8008924:	2304      	movs	r3, #4
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e016      	b.n	800895a <UART_SetConfig+0x5a6>
 800892c:	2308      	movs	r3, #8
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008932:	e012      	b.n	800895a <UART_SetConfig+0x5a6>
 8008934:	2310      	movs	r3, #16
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893a:	e00e      	b.n	800895a <UART_SetConfig+0x5a6>
 800893c:	2320      	movs	r3, #32
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008942:	e00a      	b.n	800895a <UART_SetConfig+0x5a6>
 8008944:	2340      	movs	r3, #64	@ 0x40
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894a:	e006      	b.n	800895a <UART_SetConfig+0x5a6>
 800894c:	2380      	movs	r3, #128	@ 0x80
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e002      	b.n	800895a <UART_SetConfig+0x5a6>
 8008954:	2380      	movs	r3, #128	@ 0x80
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a5c <UART_SetConfig+0x6a8>)
 8008960:	4293      	cmp	r3, r2
 8008962:	f040 80f8 	bne.w	8008b56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008966:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800896a:	2b20      	cmp	r3, #32
 800896c:	dc46      	bgt.n	80089fc <UART_SetConfig+0x648>
 800896e:	2b02      	cmp	r3, #2
 8008970:	f2c0 8082 	blt.w	8008a78 <UART_SetConfig+0x6c4>
 8008974:	3b02      	subs	r3, #2
 8008976:	2b1e      	cmp	r3, #30
 8008978:	d87e      	bhi.n	8008a78 <UART_SetConfig+0x6c4>
 800897a:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <UART_SetConfig+0x5cc>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008a03 	.word	0x08008a03
 8008984:	08008a79 	.word	0x08008a79
 8008988:	08008a0b 	.word	0x08008a0b
 800898c:	08008a79 	.word	0x08008a79
 8008990:	08008a79 	.word	0x08008a79
 8008994:	08008a79 	.word	0x08008a79
 8008998:	08008a1b 	.word	0x08008a1b
 800899c:	08008a79 	.word	0x08008a79
 80089a0:	08008a79 	.word	0x08008a79
 80089a4:	08008a79 	.word	0x08008a79
 80089a8:	08008a79 	.word	0x08008a79
 80089ac:	08008a79 	.word	0x08008a79
 80089b0:	08008a79 	.word	0x08008a79
 80089b4:	08008a79 	.word	0x08008a79
 80089b8:	08008a2b 	.word	0x08008a2b
 80089bc:	08008a79 	.word	0x08008a79
 80089c0:	08008a79 	.word	0x08008a79
 80089c4:	08008a79 	.word	0x08008a79
 80089c8:	08008a79 	.word	0x08008a79
 80089cc:	08008a79 	.word	0x08008a79
 80089d0:	08008a79 	.word	0x08008a79
 80089d4:	08008a79 	.word	0x08008a79
 80089d8:	08008a79 	.word	0x08008a79
 80089dc:	08008a79 	.word	0x08008a79
 80089e0:	08008a79 	.word	0x08008a79
 80089e4:	08008a79 	.word	0x08008a79
 80089e8:	08008a79 	.word	0x08008a79
 80089ec:	08008a79 	.word	0x08008a79
 80089f0:	08008a79 	.word	0x08008a79
 80089f4:	08008a79 	.word	0x08008a79
 80089f8:	08008a6b 	.word	0x08008a6b
 80089fc:	2b40      	cmp	r3, #64	@ 0x40
 80089fe:	d037      	beq.n	8008a70 <UART_SetConfig+0x6bc>
 8008a00:	e03a      	b.n	8008a78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a02:	f7fe faab 	bl	8006f5c <HAL_RCCEx_GetD3PCLK1Freq>
 8008a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a08:	e03c      	b.n	8008a84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe faba 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a18:	e034      	b.n	8008a84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a1a:	f107 0318 	add.w	r3, r7, #24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fc06 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a28:	e02c      	b.n	8008a84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a2a:	4b09      	ldr	r3, [pc, #36]	@ (8008a50 <UART_SetConfig+0x69c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d016      	beq.n	8008a64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a36:	4b06      	ldr	r3, [pc, #24]	@ (8008a50 <UART_SetConfig+0x69c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	08db      	lsrs	r3, r3, #3
 8008a3c:	f003 0303 	and.w	r3, r3, #3
 8008a40:	4a07      	ldr	r2, [pc, #28]	@ (8008a60 <UART_SetConfig+0x6ac>)
 8008a42:	fa22 f303 	lsr.w	r3, r2, r3
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a48:	e01c      	b.n	8008a84 <UART_SetConfig+0x6d0>
 8008a4a:	bf00      	nop
 8008a4c:	40011400 	.word	0x40011400
 8008a50:	58024400 	.word	0x58024400
 8008a54:	40007800 	.word	0x40007800
 8008a58:	40007c00 	.word	0x40007c00
 8008a5c:	58000c00 	.word	0x58000c00
 8008a60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a64:	4b9d      	ldr	r3, [pc, #628]	@ (8008cdc <UART_SetConfig+0x928>)
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a68:	e00c      	b.n	8008a84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a6a:	4b9d      	ldr	r3, [pc, #628]	@ (8008ce0 <UART_SetConfig+0x92c>)
 8008a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6e:	e009      	b.n	8008a84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a76:	e005      	b.n	8008a84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 81de 	beq.w	8008e48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a90:	4a94      	ldr	r2, [pc, #592]	@ (8008ce4 <UART_SetConfig+0x930>)
 8008a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a9e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	4413      	add	r3, r2
 8008aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d305      	bcc.n	8008abc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d903      	bls.n	8008ac4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ac2:	e1c1      	b.n	8008e48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	60bb      	str	r3, [r7, #8]
 8008aca:	60fa      	str	r2, [r7, #12]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad0:	4a84      	ldr	r2, [pc, #528]	@ (8008ce4 <UART_SetConfig+0x930>)
 8008ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ae6:	f7f7 fe0f 	bl	8000708 <__aeabi_uldivmod>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4610      	mov	r0, r2
 8008af0:	4619      	mov	r1, r3
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	020b      	lsls	r3, r1, #8
 8008afc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b00:	0202      	lsls	r2, r0, #8
 8008b02:	6979      	ldr	r1, [r7, #20]
 8008b04:	6849      	ldr	r1, [r1, #4]
 8008b06:	0849      	lsrs	r1, r1, #1
 8008b08:	2000      	movs	r0, #0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	eb12 0804 	adds.w	r8, r2, r4
 8008b12:	eb43 0905 	adc.w	r9, r3, r5
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	469a      	mov	sl, r3
 8008b1e:	4693      	mov	fp, r2
 8008b20:	4652      	mov	r2, sl
 8008b22:	465b      	mov	r3, fp
 8008b24:	4640      	mov	r0, r8
 8008b26:	4649      	mov	r1, r9
 8008b28:	f7f7 fdee 	bl	8000708 <__aeabi_uldivmod>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4613      	mov	r3, r2
 8008b32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b3a:	d308      	bcc.n	8008b4e <UART_SetConfig+0x79a>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b42:	d204      	bcs.n	8008b4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b4a:	60da      	str	r2, [r3, #12]
 8008b4c:	e17c      	b.n	8008e48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b54:	e178      	b.n	8008e48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b5e:	f040 80c5 	bne.w	8008cec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	dc48      	bgt.n	8008bfc <UART_SetConfig+0x848>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	db7b      	blt.n	8008c66 <UART_SetConfig+0x8b2>
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	d879      	bhi.n	8008c66 <UART_SetConfig+0x8b2>
 8008b72:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <UART_SetConfig+0x7c4>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008c03 	.word	0x08008c03
 8008b7c:	08008c0b 	.word	0x08008c0b
 8008b80:	08008c67 	.word	0x08008c67
 8008b84:	08008c67 	.word	0x08008c67
 8008b88:	08008c13 	.word	0x08008c13
 8008b8c:	08008c67 	.word	0x08008c67
 8008b90:	08008c67 	.word	0x08008c67
 8008b94:	08008c67 	.word	0x08008c67
 8008b98:	08008c23 	.word	0x08008c23
 8008b9c:	08008c67 	.word	0x08008c67
 8008ba0:	08008c67 	.word	0x08008c67
 8008ba4:	08008c67 	.word	0x08008c67
 8008ba8:	08008c67 	.word	0x08008c67
 8008bac:	08008c67 	.word	0x08008c67
 8008bb0:	08008c67 	.word	0x08008c67
 8008bb4:	08008c67 	.word	0x08008c67
 8008bb8:	08008c33 	.word	0x08008c33
 8008bbc:	08008c67 	.word	0x08008c67
 8008bc0:	08008c67 	.word	0x08008c67
 8008bc4:	08008c67 	.word	0x08008c67
 8008bc8:	08008c67 	.word	0x08008c67
 8008bcc:	08008c67 	.word	0x08008c67
 8008bd0:	08008c67 	.word	0x08008c67
 8008bd4:	08008c67 	.word	0x08008c67
 8008bd8:	08008c67 	.word	0x08008c67
 8008bdc:	08008c67 	.word	0x08008c67
 8008be0:	08008c67 	.word	0x08008c67
 8008be4:	08008c67 	.word	0x08008c67
 8008be8:	08008c67 	.word	0x08008c67
 8008bec:	08008c67 	.word	0x08008c67
 8008bf0:	08008c67 	.word	0x08008c67
 8008bf4:	08008c67 	.word	0x08008c67
 8008bf8:	08008c59 	.word	0x08008c59
 8008bfc:	2b40      	cmp	r3, #64	@ 0x40
 8008bfe:	d02e      	beq.n	8008c5e <UART_SetConfig+0x8aa>
 8008c00:	e031      	b.n	8008c66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c02:	f7fc f9b5 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8008c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c08:	e033      	b.n	8008c72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c0a:	f7fc f9c7 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 8008c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c10:	e02f      	b.n	8008c72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe f9b6 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c20:	e027      	b.n	8008c72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c22:	f107 0318 	add.w	r3, r7, #24
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fb02 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c30:	e01f      	b.n	8008c72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c32:	4b2d      	ldr	r3, [pc, #180]	@ (8008ce8 <UART_SetConfig+0x934>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce8 <UART_SetConfig+0x934>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	08db      	lsrs	r3, r3, #3
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	4a24      	ldr	r2, [pc, #144]	@ (8008cdc <UART_SetConfig+0x928>)
 8008c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c50:	e00f      	b.n	8008c72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008c52:	4b22      	ldr	r3, [pc, #136]	@ (8008cdc <UART_SetConfig+0x928>)
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c56:	e00c      	b.n	8008c72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c58:	4b21      	ldr	r3, [pc, #132]	@ (8008ce0 <UART_SetConfig+0x92c>)
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5c:	e009      	b.n	8008c72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c64:	e005      	b.n	8008c72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80e7 	beq.w	8008e48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c7e:	4a19      	ldr	r2, [pc, #100]	@ (8008ce4 <UART_SetConfig+0x930>)
 8008c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c84:	461a      	mov	r2, r3
 8008c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c8c:	005a      	lsls	r2, r3, #1
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	085b      	lsrs	r3, r3, #1
 8008c94:	441a      	add	r2, r3
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca2:	2b0f      	cmp	r3, #15
 8008ca4:	d916      	bls.n	8008cd4 <UART_SetConfig+0x920>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cac:	d212      	bcs.n	8008cd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f023 030f 	bic.w	r3, r3, #15
 8008cb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cba:	085b      	lsrs	r3, r3, #1
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	f003 0307 	and.w	r3, r3, #7
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008cd0:	60da      	str	r2, [r3, #12]
 8008cd2:	e0b9      	b.n	8008e48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cda:	e0b5      	b.n	8008e48 <UART_SetConfig+0xa94>
 8008cdc:	03d09000 	.word	0x03d09000
 8008ce0:	003d0900 	.word	0x003d0900
 8008ce4:	0800dad4 	.word	0x0800dad4
 8008ce8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	dc49      	bgt.n	8008d88 <UART_SetConfig+0x9d4>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	db7c      	blt.n	8008df2 <UART_SetConfig+0xa3e>
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d87a      	bhi.n	8008df2 <UART_SetConfig+0xa3e>
 8008cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <UART_SetConfig+0x950>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d8f 	.word	0x08008d8f
 8008d08:	08008d97 	.word	0x08008d97
 8008d0c:	08008df3 	.word	0x08008df3
 8008d10:	08008df3 	.word	0x08008df3
 8008d14:	08008d9f 	.word	0x08008d9f
 8008d18:	08008df3 	.word	0x08008df3
 8008d1c:	08008df3 	.word	0x08008df3
 8008d20:	08008df3 	.word	0x08008df3
 8008d24:	08008daf 	.word	0x08008daf
 8008d28:	08008df3 	.word	0x08008df3
 8008d2c:	08008df3 	.word	0x08008df3
 8008d30:	08008df3 	.word	0x08008df3
 8008d34:	08008df3 	.word	0x08008df3
 8008d38:	08008df3 	.word	0x08008df3
 8008d3c:	08008df3 	.word	0x08008df3
 8008d40:	08008df3 	.word	0x08008df3
 8008d44:	08008dbf 	.word	0x08008dbf
 8008d48:	08008df3 	.word	0x08008df3
 8008d4c:	08008df3 	.word	0x08008df3
 8008d50:	08008df3 	.word	0x08008df3
 8008d54:	08008df3 	.word	0x08008df3
 8008d58:	08008df3 	.word	0x08008df3
 8008d5c:	08008df3 	.word	0x08008df3
 8008d60:	08008df3 	.word	0x08008df3
 8008d64:	08008df3 	.word	0x08008df3
 8008d68:	08008df3 	.word	0x08008df3
 8008d6c:	08008df3 	.word	0x08008df3
 8008d70:	08008df3 	.word	0x08008df3
 8008d74:	08008df3 	.word	0x08008df3
 8008d78:	08008df3 	.word	0x08008df3
 8008d7c:	08008df3 	.word	0x08008df3
 8008d80:	08008df3 	.word	0x08008df3
 8008d84:	08008de5 	.word	0x08008de5
 8008d88:	2b40      	cmp	r3, #64	@ 0x40
 8008d8a:	d02e      	beq.n	8008dea <UART_SetConfig+0xa36>
 8008d8c:	e031      	b.n	8008df2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d8e:	f7fc f8ef 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8008d92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d94:	e033      	b.n	8008dfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d96:	f7fc f901 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 8008d9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d9c:	e02f      	b.n	8008dfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe f8f0 	bl	8006f88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dac:	e027      	b.n	8008dfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dae:	f107 0318 	add.w	r3, r7, #24
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe fa3c 	bl	8007230 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbc:	e01f      	b.n	8008dfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8008e74 <UART_SetConfig+0xac0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dca:	4b2a      	ldr	r3, [pc, #168]	@ (8008e74 <UART_SetConfig+0xac0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	08db      	lsrs	r3, r3, #3
 8008dd0:	f003 0303 	and.w	r3, r3, #3
 8008dd4:	4a28      	ldr	r2, [pc, #160]	@ (8008e78 <UART_SetConfig+0xac4>)
 8008dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ddc:	e00f      	b.n	8008dfe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008dde:	4b26      	ldr	r3, [pc, #152]	@ (8008e78 <UART_SetConfig+0xac4>)
 8008de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de2:	e00c      	b.n	8008dfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008de4:	4b25      	ldr	r3, [pc, #148]	@ (8008e7c <UART_SetConfig+0xac8>)
 8008de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de8:	e009      	b.n	8008dfe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df0:	e005      	b.n	8008dfe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d021      	beq.n	8008e48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	4a1d      	ldr	r2, [pc, #116]	@ (8008e80 <UART_SetConfig+0xacc>)
 8008e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	441a      	add	r2, r3
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2a:	2b0f      	cmp	r3, #15
 8008e2c:	d909      	bls.n	8008e42 <UART_SetConfig+0xa8e>
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e34:	d205      	bcs.n	8008e42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60da      	str	r2, [r3, #12]
 8008e40:	e002      	b.n	8008e48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2200      	movs	r2, #0
 8008e62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e64:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3748      	adds	r7, #72	@ 0x48
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e72:	bf00      	nop
 8008e74:	58024400 	.word	0x58024400
 8008e78:	03d09000 	.word	0x03d09000
 8008e7c:	003d0900 	.word	0x003d0900
 8008e80:	0800dad4 	.word	0x0800dad4

08008e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e90:	f003 0308 	and.w	r3, r3, #8
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00a      	beq.n	8008eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00a      	beq.n	8008ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00a      	beq.n	8008ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef6:	f003 0304 	and.w	r3, r3, #4
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	f003 0310 	and.w	r3, r3, #16
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01a      	beq.n	8008f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	430a      	orrs	r2, r1
 8008f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f82:	d10a      	bne.n	8008f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	605a      	str	r2, [r3, #4]
  }
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b098      	sub	sp, #96	@ 0x60
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fd8:	f7f8 fa5a 	bl	8001490 <HAL_GetTick>
 8008fdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0308 	and.w	r3, r3, #8
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d12f      	bne.n	800904c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f88e 	bl	800911c <UART_WaitOnFlagUntilTimeout>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d022      	beq.n	800904c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800901a:	653b      	str	r3, [r7, #80]	@ 0x50
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009024:	647b      	str	r3, [r7, #68]	@ 0x44
 8009026:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800902a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e6      	bne.n	8009006 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2220      	movs	r2, #32
 800903c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e063      	b.n	8009114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0304 	and.w	r3, r3, #4
 8009056:	2b04      	cmp	r3, #4
 8009058:	d149      	bne.n	80090ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800905a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009062:	2200      	movs	r2, #0
 8009064:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f857 	bl	800911c <UART_WaitOnFlagUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d03c      	beq.n	80090ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	623b      	str	r3, [r7, #32]
   return(result);
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009092:	633b      	str	r3, [r7, #48]	@ 0x30
 8009094:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e6      	bne.n	8009074 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3308      	adds	r3, #8
 80090ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f023 0301 	bic.w	r3, r3, #1
 80090bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3308      	adds	r3, #8
 80090c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090c6:	61fa      	str	r2, [r7, #28]
 80090c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	69b9      	ldr	r1, [r7, #24]
 80090cc:	69fa      	ldr	r2, [r7, #28]
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	617b      	str	r3, [r7, #20]
   return(result);
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e5      	bne.n	80090a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e012      	b.n	8009114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3758      	adds	r7, #88	@ 0x58
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	4613      	mov	r3, r2
 800912a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800912c:	e04f      	b.n	80091ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d04b      	beq.n	80091ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009136:	f7f8 f9ab 	bl	8001490 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	429a      	cmp	r2, r3
 8009144:	d302      	bcc.n	800914c <UART_WaitOnFlagUntilTimeout+0x30>
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e04e      	b.n	80091ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0304 	and.w	r3, r3, #4
 800915a:	2b00      	cmp	r3, #0
 800915c:	d037      	beq.n	80091ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b80      	cmp	r3, #128	@ 0x80
 8009162:	d034      	beq.n	80091ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b40      	cmp	r3, #64	@ 0x40
 8009168:	d031      	beq.n	80091ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b08      	cmp	r3, #8
 8009176:	d110      	bne.n	800919a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2208      	movs	r2, #8
 800917e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 f839 	bl	80091f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2208      	movs	r2, #8
 800918a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e029      	b.n	80091ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091a8:	d111      	bne.n	80091ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f81f 	bl	80091f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2220      	movs	r2, #32
 80091be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e00f      	b.n	80091ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69da      	ldr	r2, [r3, #28]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	4013      	ands	r3, r2
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	429a      	cmp	r2, r3
 80091dc:	bf0c      	ite	eq
 80091de:	2301      	moveq	r3, #1
 80091e0:	2300      	movne	r3, #0
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d0a0      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b095      	sub	sp, #84	@ 0x54
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800920e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009220:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009224:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e6      	bne.n	8009200 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3308      	adds	r3, #8
 8009238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	61fb      	str	r3, [r7, #28]
   return(result);
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	4b1e      	ldr	r3, [pc, #120]	@ (80092c0 <UART_EndRxTransfer+0xc8>)
 8009246:	4013      	ands	r3, r2
 8009248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e5      	bne.n	8009232 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800926a:	2b01      	cmp	r3, #1
 800926c:	d118      	bne.n	80092a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	60bb      	str	r3, [r7, #8]
   return(result);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f023 0310 	bic.w	r3, r3, #16
 8009282:	647b      	str	r3, [r7, #68]	@ 0x44
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800928c:	61bb      	str	r3, [r7, #24]
 800928e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6979      	ldr	r1, [r7, #20]
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	613b      	str	r3, [r7, #16]
   return(result);
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e6      	bne.n	800926e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092b4:	bf00      	nop
 80092b6:	3754      	adds	r7, #84	@ 0x54
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	effffffe 	.word	0xeffffffe

080092c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f7ff f850 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	60bb      	str	r3, [r7, #8]
   return(result);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800930c:	61fb      	str	r3, [r7, #28]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	61bb      	str	r3, [r7, #24]
 8009318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6979      	ldr	r1, [r7, #20]
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	613b      	str	r3, [r7, #16]
   return(result);
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e6      	bne.n	80092f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff f81b 	bl	8008374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800933e:	bf00      	nop
 8009340:	3720      	adds	r7, #32
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009382:	b480      	push	{r7}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_UARTEx_DisableFifoMode+0x16>
 8009394:	2302      	movs	r3, #2
 8009396:	e027      	b.n	80093e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2224      	movs	r2, #36	@ 0x24
 80093a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0201 	bic.w	r2, r2, #1
 80093be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80093c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2220      	movs	r2, #32
 80093da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009408:	2302      	movs	r3, #2
 800940a:	e02d      	b.n	8009468 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2224      	movs	r2, #36	@ 0x24
 8009418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f84f 	bl	80094ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009484:	2302      	movs	r3, #2
 8009486:	e02d      	b.n	80094e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2224      	movs	r2, #36	@ 0x24
 8009494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0201 	bic.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f811 	bl	80094ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d108      	bne.n	800950e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800950c:	e031      	b.n	8009572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800950e:	2310      	movs	r3, #16
 8009510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009512:	2310      	movs	r3, #16
 8009514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	0e5b      	lsrs	r3, r3, #25
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	0f5b      	lsrs	r3, r3, #29
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 0307 	and.w	r3, r3, #7
 8009534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	7b3a      	ldrb	r2, [r7, #12]
 800953a:	4911      	ldr	r1, [pc, #68]	@ (8009580 <UARTEx_SetNbDataToProcess+0x94>)
 800953c:	5c8a      	ldrb	r2, [r1, r2]
 800953e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009542:	7b3a      	ldrb	r2, [r7, #12]
 8009544:	490f      	ldr	r1, [pc, #60]	@ (8009584 <UARTEx_SetNbDataToProcess+0x98>)
 8009546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009548:	fb93 f3f2 	sdiv	r3, r3, r2
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	7b7a      	ldrb	r2, [r7, #13]
 8009558:	4909      	ldr	r1, [pc, #36]	@ (8009580 <UARTEx_SetNbDataToProcess+0x94>)
 800955a:	5c8a      	ldrb	r2, [r1, r2]
 800955c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009560:	7b7a      	ldrb	r2, [r7, #13]
 8009562:	4908      	ldr	r1, [pc, #32]	@ (8009584 <UARTEx_SetNbDataToProcess+0x98>)
 8009564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009566:	fb93 f3f2 	sdiv	r3, r3, r2
 800956a:	b29a      	uxth	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009572:	bf00      	nop
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	0800daec 	.word	0x0800daec
 8009584:	0800daf4 	.word	0x0800daf4

08009588 <__cvt>:
 8009588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800958a:	ed2d 8b02 	vpush	{d8}
 800958e:	eeb0 8b40 	vmov.f64	d8, d0
 8009592:	b085      	sub	sp, #20
 8009594:	4617      	mov	r7, r2
 8009596:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009598:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800959a:	ee18 2a90 	vmov	r2, s17
 800959e:	f025 0520 	bic.w	r5, r5, #32
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	bfb6      	itet	lt
 80095a6:	222d      	movlt	r2, #45	@ 0x2d
 80095a8:	2200      	movge	r2, #0
 80095aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80095ae:	2d46      	cmp	r5, #70	@ 0x46
 80095b0:	460c      	mov	r4, r1
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	d004      	beq.n	80095c0 <__cvt+0x38>
 80095b6:	2d45      	cmp	r5, #69	@ 0x45
 80095b8:	d100      	bne.n	80095bc <__cvt+0x34>
 80095ba:	3401      	adds	r4, #1
 80095bc:	2102      	movs	r1, #2
 80095be:	e000      	b.n	80095c2 <__cvt+0x3a>
 80095c0:	2103      	movs	r1, #3
 80095c2:	ab03      	add	r3, sp, #12
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	ab02      	add	r3, sp, #8
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	4622      	mov	r2, r4
 80095cc:	4633      	mov	r3, r6
 80095ce:	eeb0 0b48 	vmov.f64	d0, d8
 80095d2:	f001 f851 	bl	800a678 <_dtoa_r>
 80095d6:	2d47      	cmp	r5, #71	@ 0x47
 80095d8:	d114      	bne.n	8009604 <__cvt+0x7c>
 80095da:	07fb      	lsls	r3, r7, #31
 80095dc:	d50a      	bpl.n	80095f4 <__cvt+0x6c>
 80095de:	1902      	adds	r2, r0, r4
 80095e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80095e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e8:	bf08      	it	eq
 80095ea:	9203      	streq	r2, [sp, #12]
 80095ec:	2130      	movs	r1, #48	@ 0x30
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d319      	bcc.n	8009628 <__cvt+0xa0>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095f8:	1a1b      	subs	r3, r3, r0
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	b005      	add	sp, #20
 80095fe:	ecbd 8b02 	vpop	{d8}
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009604:	2d46      	cmp	r5, #70	@ 0x46
 8009606:	eb00 0204 	add.w	r2, r0, r4
 800960a:	d1e9      	bne.n	80095e0 <__cvt+0x58>
 800960c:	7803      	ldrb	r3, [r0, #0]
 800960e:	2b30      	cmp	r3, #48	@ 0x30
 8009610:	d107      	bne.n	8009622 <__cvt+0x9a>
 8009612:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961a:	bf1c      	itt	ne
 800961c:	f1c4 0401 	rsbne	r4, r4, #1
 8009620:	6034      	strne	r4, [r6, #0]
 8009622:	6833      	ldr	r3, [r6, #0]
 8009624:	441a      	add	r2, r3
 8009626:	e7db      	b.n	80095e0 <__cvt+0x58>
 8009628:	1c5c      	adds	r4, r3, #1
 800962a:	9403      	str	r4, [sp, #12]
 800962c:	7019      	strb	r1, [r3, #0]
 800962e:	e7de      	b.n	80095ee <__cvt+0x66>

08009630 <__exponent>:
 8009630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009632:	2900      	cmp	r1, #0
 8009634:	bfba      	itte	lt
 8009636:	4249      	neglt	r1, r1
 8009638:	232d      	movlt	r3, #45	@ 0x2d
 800963a:	232b      	movge	r3, #43	@ 0x2b
 800963c:	2909      	cmp	r1, #9
 800963e:	7002      	strb	r2, [r0, #0]
 8009640:	7043      	strb	r3, [r0, #1]
 8009642:	dd29      	ble.n	8009698 <__exponent+0x68>
 8009644:	f10d 0307 	add.w	r3, sp, #7
 8009648:	461d      	mov	r5, r3
 800964a:	270a      	movs	r7, #10
 800964c:	461a      	mov	r2, r3
 800964e:	fbb1 f6f7 	udiv	r6, r1, r7
 8009652:	fb07 1416 	mls	r4, r7, r6, r1
 8009656:	3430      	adds	r4, #48	@ 0x30
 8009658:	f802 4c01 	strb.w	r4, [r2, #-1]
 800965c:	460c      	mov	r4, r1
 800965e:	2c63      	cmp	r4, #99	@ 0x63
 8009660:	f103 33ff 	add.w	r3, r3, #4294967295
 8009664:	4631      	mov	r1, r6
 8009666:	dcf1      	bgt.n	800964c <__exponent+0x1c>
 8009668:	3130      	adds	r1, #48	@ 0x30
 800966a:	1e94      	subs	r4, r2, #2
 800966c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009670:	1c41      	adds	r1, r0, #1
 8009672:	4623      	mov	r3, r4
 8009674:	42ab      	cmp	r3, r5
 8009676:	d30a      	bcc.n	800968e <__exponent+0x5e>
 8009678:	f10d 0309 	add.w	r3, sp, #9
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	42ac      	cmp	r4, r5
 8009680:	bf88      	it	hi
 8009682:	2300      	movhi	r3, #0
 8009684:	3302      	adds	r3, #2
 8009686:	4403      	add	r3, r0
 8009688:	1a18      	subs	r0, r3, r0
 800968a:	b003      	add	sp, #12
 800968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009692:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009696:	e7ed      	b.n	8009674 <__exponent+0x44>
 8009698:	2330      	movs	r3, #48	@ 0x30
 800969a:	3130      	adds	r1, #48	@ 0x30
 800969c:	7083      	strb	r3, [r0, #2]
 800969e:	70c1      	strb	r1, [r0, #3]
 80096a0:	1d03      	adds	r3, r0, #4
 80096a2:	e7f1      	b.n	8009688 <__exponent+0x58>
 80096a4:	0000      	movs	r0, r0
	...

080096a8 <_printf_float>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	b08d      	sub	sp, #52	@ 0x34
 80096ae:	460c      	mov	r4, r1
 80096b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80096b4:	4616      	mov	r6, r2
 80096b6:	461f      	mov	r7, r3
 80096b8:	4605      	mov	r5, r0
 80096ba:	f000 fed7 	bl	800a46c <_localeconv_r>
 80096be:	f8d0 b000 	ldr.w	fp, [r0]
 80096c2:	4658      	mov	r0, fp
 80096c4:	f7f6 fe5c 	bl	8000380 <strlen>
 80096c8:	2300      	movs	r3, #0
 80096ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80096cc:	f8d8 3000 	ldr.w	r3, [r8]
 80096d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80096d4:	6822      	ldr	r2, [r4, #0]
 80096d6:	9005      	str	r0, [sp, #20]
 80096d8:	3307      	adds	r3, #7
 80096da:	f023 0307 	bic.w	r3, r3, #7
 80096de:	f103 0108 	add.w	r1, r3, #8
 80096e2:	f8c8 1000 	str.w	r1, [r8]
 80096e6:	ed93 0b00 	vldr	d0, [r3]
 80096ea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009948 <_printf_float+0x2a0>
 80096ee:	eeb0 7bc0 	vabs.f64	d7, d0
 80096f2:	eeb4 7b46 	vcmp.f64	d7, d6
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80096fe:	dd24      	ble.n	800974a <_printf_float+0xa2>
 8009700:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009708:	d502      	bpl.n	8009710 <_printf_float+0x68>
 800970a:	232d      	movs	r3, #45	@ 0x2d
 800970c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009710:	498f      	ldr	r1, [pc, #572]	@ (8009950 <_printf_float+0x2a8>)
 8009712:	4b90      	ldr	r3, [pc, #576]	@ (8009954 <_printf_float+0x2ac>)
 8009714:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009718:	bf94      	ite	ls
 800971a:	4688      	movls	r8, r1
 800971c:	4698      	movhi	r8, r3
 800971e:	f022 0204 	bic.w	r2, r2, #4
 8009722:	2303      	movs	r3, #3
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	9700      	str	r7, [sp, #0]
 800972e:	4633      	mov	r3, r6
 8009730:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009732:	4621      	mov	r1, r4
 8009734:	4628      	mov	r0, r5
 8009736:	f000 f9d1 	bl	8009adc <_printf_common>
 800973a:	3001      	adds	r0, #1
 800973c:	f040 8089 	bne.w	8009852 <_printf_float+0x1aa>
 8009740:	f04f 30ff 	mov.w	r0, #4294967295
 8009744:	b00d      	add	sp, #52	@ 0x34
 8009746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974a:	eeb4 0b40 	vcmp.f64	d0, d0
 800974e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009752:	d709      	bvc.n	8009768 <_printf_float+0xc0>
 8009754:	ee10 3a90 	vmov	r3, s1
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfbc      	itt	lt
 800975c:	232d      	movlt	r3, #45	@ 0x2d
 800975e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009762:	497d      	ldr	r1, [pc, #500]	@ (8009958 <_printf_float+0x2b0>)
 8009764:	4b7d      	ldr	r3, [pc, #500]	@ (800995c <_printf_float+0x2b4>)
 8009766:	e7d5      	b.n	8009714 <_printf_float+0x6c>
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	1c59      	adds	r1, r3, #1
 800976c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009770:	d139      	bne.n	80097e6 <_printf_float+0x13e>
 8009772:	2306      	movs	r3, #6
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800977a:	2300      	movs	r3, #0
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	9303      	str	r3, [sp, #12]
 8009780:	ab0a      	add	r3, sp, #40	@ 0x28
 8009782:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009786:	ab09      	add	r3, sp, #36	@ 0x24
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	6861      	ldr	r1, [r4, #4]
 800978c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009790:	4628      	mov	r0, r5
 8009792:	f7ff fef9 	bl	8009588 <__cvt>
 8009796:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800979a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800979c:	4680      	mov	r8, r0
 800979e:	d129      	bne.n	80097f4 <_printf_float+0x14c>
 80097a0:	1cc8      	adds	r0, r1, #3
 80097a2:	db02      	blt.n	80097aa <_printf_float+0x102>
 80097a4:	6863      	ldr	r3, [r4, #4]
 80097a6:	4299      	cmp	r1, r3
 80097a8:	dd41      	ble.n	800982e <_printf_float+0x186>
 80097aa:	f1a9 0902 	sub.w	r9, r9, #2
 80097ae:	fa5f f989 	uxtb.w	r9, r9
 80097b2:	3901      	subs	r1, #1
 80097b4:	464a      	mov	r2, r9
 80097b6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80097bc:	f7ff ff38 	bl	8009630 <__exponent>
 80097c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097c2:	1813      	adds	r3, r2, r0
 80097c4:	2a01      	cmp	r2, #1
 80097c6:	4682      	mov	sl, r0
 80097c8:	6123      	str	r3, [r4, #16]
 80097ca:	dc02      	bgt.n	80097d2 <_printf_float+0x12a>
 80097cc:	6822      	ldr	r2, [r4, #0]
 80097ce:	07d2      	lsls	r2, r2, #31
 80097d0:	d501      	bpl.n	80097d6 <_printf_float+0x12e>
 80097d2:	3301      	adds	r3, #1
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d0a6      	beq.n	800972c <_printf_float+0x84>
 80097de:	232d      	movs	r3, #45	@ 0x2d
 80097e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097e4:	e7a2      	b.n	800972c <_printf_float+0x84>
 80097e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80097ea:	d1c4      	bne.n	8009776 <_printf_float+0xce>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1c2      	bne.n	8009776 <_printf_float+0xce>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e7bf      	b.n	8009774 <_printf_float+0xcc>
 80097f4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80097f8:	d9db      	bls.n	80097b2 <_printf_float+0x10a>
 80097fa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80097fe:	d118      	bne.n	8009832 <_printf_float+0x18a>
 8009800:	2900      	cmp	r1, #0
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	dd0b      	ble.n	800981e <_printf_float+0x176>
 8009806:	6121      	str	r1, [r4, #16]
 8009808:	b913      	cbnz	r3, 8009810 <_printf_float+0x168>
 800980a:	6822      	ldr	r2, [r4, #0]
 800980c:	07d0      	lsls	r0, r2, #31
 800980e:	d502      	bpl.n	8009816 <_printf_float+0x16e>
 8009810:	3301      	adds	r3, #1
 8009812:	440b      	add	r3, r1
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009818:	f04f 0a00 	mov.w	sl, #0
 800981c:	e7db      	b.n	80097d6 <_printf_float+0x12e>
 800981e:	b913      	cbnz	r3, 8009826 <_printf_float+0x17e>
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	07d2      	lsls	r2, r2, #31
 8009824:	d501      	bpl.n	800982a <_printf_float+0x182>
 8009826:	3302      	adds	r3, #2
 8009828:	e7f4      	b.n	8009814 <_printf_float+0x16c>
 800982a:	2301      	movs	r3, #1
 800982c:	e7f2      	b.n	8009814 <_printf_float+0x16c>
 800982e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009834:	4299      	cmp	r1, r3
 8009836:	db05      	blt.n	8009844 <_printf_float+0x19c>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	6121      	str	r1, [r4, #16]
 800983c:	07d8      	lsls	r0, r3, #31
 800983e:	d5ea      	bpl.n	8009816 <_printf_float+0x16e>
 8009840:	1c4b      	adds	r3, r1, #1
 8009842:	e7e7      	b.n	8009814 <_printf_float+0x16c>
 8009844:	2900      	cmp	r1, #0
 8009846:	bfd4      	ite	le
 8009848:	f1c1 0202 	rsble	r2, r1, #2
 800984c:	2201      	movgt	r2, #1
 800984e:	4413      	add	r3, r2
 8009850:	e7e0      	b.n	8009814 <_printf_float+0x16c>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	055a      	lsls	r2, r3, #21
 8009856:	d407      	bmi.n	8009868 <_printf_float+0x1c0>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	4642      	mov	r2, r8
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	d12a      	bne.n	80098bc <_printf_float+0x214>
 8009866:	e76b      	b.n	8009740 <_printf_float+0x98>
 8009868:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800986c:	f240 80e0 	bls.w	8009a30 <_printf_float+0x388>
 8009870:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009874:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987c:	d133      	bne.n	80098e6 <_printf_float+0x23e>
 800987e:	4a38      	ldr	r2, [pc, #224]	@ (8009960 <_printf_float+0x2b8>)
 8009880:	2301      	movs	r3, #1
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	47b8      	blx	r7
 8009888:	3001      	adds	r0, #1
 800988a:	f43f af59 	beq.w	8009740 <_printf_float+0x98>
 800988e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009892:	4543      	cmp	r3, r8
 8009894:	db02      	blt.n	800989c <_printf_float+0x1f4>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	07d8      	lsls	r0, r3, #31
 800989a:	d50f      	bpl.n	80098bc <_printf_float+0x214>
 800989c:	9b05      	ldr	r3, [sp, #20]
 800989e:	465a      	mov	r2, fp
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f af4a 	beq.w	8009740 <_printf_float+0x98>
 80098ac:	f04f 0900 	mov.w	r9, #0
 80098b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80098b4:	f104 0a1a 	add.w	sl, r4, #26
 80098b8:	45c8      	cmp	r8, r9
 80098ba:	dc09      	bgt.n	80098d0 <_printf_float+0x228>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	079b      	lsls	r3, r3, #30
 80098c0:	f100 8107 	bmi.w	8009ad2 <_printf_float+0x42a>
 80098c4:	68e0      	ldr	r0, [r4, #12]
 80098c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098c8:	4298      	cmp	r0, r3
 80098ca:	bfb8      	it	lt
 80098cc:	4618      	movlt	r0, r3
 80098ce:	e739      	b.n	8009744 <_printf_float+0x9c>
 80098d0:	2301      	movs	r3, #1
 80098d2:	4652      	mov	r2, sl
 80098d4:	4631      	mov	r1, r6
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	f43f af30 	beq.w	8009740 <_printf_float+0x98>
 80098e0:	f109 0901 	add.w	r9, r9, #1
 80098e4:	e7e8      	b.n	80098b8 <_printf_float+0x210>
 80098e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dc3b      	bgt.n	8009964 <_printf_float+0x2bc>
 80098ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009960 <_printf_float+0x2b8>)
 80098ee:	2301      	movs	r3, #1
 80098f0:	4631      	mov	r1, r6
 80098f2:	4628      	mov	r0, r5
 80098f4:	47b8      	blx	r7
 80098f6:	3001      	adds	r0, #1
 80098f8:	f43f af22 	beq.w	8009740 <_printf_float+0x98>
 80098fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009900:	ea59 0303 	orrs.w	r3, r9, r3
 8009904:	d102      	bne.n	800990c <_printf_float+0x264>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	07d9      	lsls	r1, r3, #31
 800990a:	d5d7      	bpl.n	80098bc <_printf_float+0x214>
 800990c:	9b05      	ldr	r3, [sp, #20]
 800990e:	465a      	mov	r2, fp
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	47b8      	blx	r7
 8009916:	3001      	adds	r0, #1
 8009918:	f43f af12 	beq.w	8009740 <_printf_float+0x98>
 800991c:	f04f 0a00 	mov.w	sl, #0
 8009920:	f104 0b1a 	add.w	fp, r4, #26
 8009924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009926:	425b      	negs	r3, r3
 8009928:	4553      	cmp	r3, sl
 800992a:	dc01      	bgt.n	8009930 <_printf_float+0x288>
 800992c:	464b      	mov	r3, r9
 800992e:	e794      	b.n	800985a <_printf_float+0x1b2>
 8009930:	2301      	movs	r3, #1
 8009932:	465a      	mov	r2, fp
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	f43f af00 	beq.w	8009740 <_printf_float+0x98>
 8009940:	f10a 0a01 	add.w	sl, sl, #1
 8009944:	e7ee      	b.n	8009924 <_printf_float+0x27c>
 8009946:	bf00      	nop
 8009948:	ffffffff 	.word	0xffffffff
 800994c:	7fefffff 	.word	0x7fefffff
 8009950:	0800dafc 	.word	0x0800dafc
 8009954:	0800db00 	.word	0x0800db00
 8009958:	0800db04 	.word	0x0800db04
 800995c:	0800db08 	.word	0x0800db08
 8009960:	0800db0c 	.word	0x0800db0c
 8009964:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009966:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800996a:	4553      	cmp	r3, sl
 800996c:	bfa8      	it	ge
 800996e:	4653      	movge	r3, sl
 8009970:	2b00      	cmp	r3, #0
 8009972:	4699      	mov	r9, r3
 8009974:	dc37      	bgt.n	80099e6 <_printf_float+0x33e>
 8009976:	2300      	movs	r3, #0
 8009978:	9307      	str	r3, [sp, #28]
 800997a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800997e:	f104 021a 	add.w	r2, r4, #26
 8009982:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009984:	9907      	ldr	r1, [sp, #28]
 8009986:	9306      	str	r3, [sp, #24]
 8009988:	eba3 0309 	sub.w	r3, r3, r9
 800998c:	428b      	cmp	r3, r1
 800998e:	dc31      	bgt.n	80099f4 <_printf_float+0x34c>
 8009990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009992:	459a      	cmp	sl, r3
 8009994:	dc3b      	bgt.n	8009a0e <_printf_float+0x366>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	07da      	lsls	r2, r3, #31
 800999a:	d438      	bmi.n	8009a0e <_printf_float+0x366>
 800999c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999e:	ebaa 0903 	sub.w	r9, sl, r3
 80099a2:	9b06      	ldr	r3, [sp, #24]
 80099a4:	ebaa 0303 	sub.w	r3, sl, r3
 80099a8:	4599      	cmp	r9, r3
 80099aa:	bfa8      	it	ge
 80099ac:	4699      	movge	r9, r3
 80099ae:	f1b9 0f00 	cmp.w	r9, #0
 80099b2:	dc34      	bgt.n	8009a1e <_printf_float+0x376>
 80099b4:	f04f 0800 	mov.w	r8, #0
 80099b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099bc:	f104 0b1a 	add.w	fp, r4, #26
 80099c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c2:	ebaa 0303 	sub.w	r3, sl, r3
 80099c6:	eba3 0309 	sub.w	r3, r3, r9
 80099ca:	4543      	cmp	r3, r8
 80099cc:	f77f af76 	ble.w	80098bc <_printf_float+0x214>
 80099d0:	2301      	movs	r3, #1
 80099d2:	465a      	mov	r2, fp
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	f43f aeb0 	beq.w	8009740 <_printf_float+0x98>
 80099e0:	f108 0801 	add.w	r8, r8, #1
 80099e4:	e7ec      	b.n	80099c0 <_printf_float+0x318>
 80099e6:	4642      	mov	r2, r8
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	d1c1      	bne.n	8009976 <_printf_float+0x2ce>
 80099f2:	e6a5      	b.n	8009740 <_printf_float+0x98>
 80099f4:	2301      	movs	r3, #1
 80099f6:	4631      	mov	r1, r6
 80099f8:	4628      	mov	r0, r5
 80099fa:	9206      	str	r2, [sp, #24]
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f43f ae9e 	beq.w	8009740 <_printf_float+0x98>
 8009a04:	9b07      	ldr	r3, [sp, #28]
 8009a06:	9a06      	ldr	r2, [sp, #24]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	9307      	str	r3, [sp, #28]
 8009a0c:	e7b9      	b.n	8009982 <_printf_float+0x2da>
 8009a0e:	9b05      	ldr	r3, [sp, #20]
 8009a10:	465a      	mov	r2, fp
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d1bf      	bne.n	800999c <_printf_float+0x2f4>
 8009a1c:	e690      	b.n	8009740 <_printf_float+0x98>
 8009a1e:	9a06      	ldr	r2, [sp, #24]
 8009a20:	464b      	mov	r3, r9
 8009a22:	4442      	add	r2, r8
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d1c2      	bne.n	80099b4 <_printf_float+0x30c>
 8009a2e:	e687      	b.n	8009740 <_printf_float+0x98>
 8009a30:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009a34:	f1b9 0f01 	cmp.w	r9, #1
 8009a38:	dc01      	bgt.n	8009a3e <_printf_float+0x396>
 8009a3a:	07db      	lsls	r3, r3, #31
 8009a3c:	d536      	bpl.n	8009aac <_printf_float+0x404>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4642      	mov	r2, r8
 8009a42:	4631      	mov	r1, r6
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b8      	blx	r7
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f43f ae79 	beq.w	8009740 <_printf_float+0x98>
 8009a4e:	9b05      	ldr	r3, [sp, #20]
 8009a50:	465a      	mov	r2, fp
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f ae71 	beq.w	8009740 <_printf_float+0x98>
 8009a5e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009a62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a6a:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a6e:	d018      	beq.n	8009aa2 <_printf_float+0x3fa>
 8009a70:	464b      	mov	r3, r9
 8009a72:	f108 0201 	add.w	r2, r8, #1
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	47b8      	blx	r7
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d10c      	bne.n	8009a9a <_printf_float+0x3f2>
 8009a80:	e65e      	b.n	8009740 <_printf_float+0x98>
 8009a82:	2301      	movs	r3, #1
 8009a84:	465a      	mov	r2, fp
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f ae57 	beq.w	8009740 <_printf_float+0x98>
 8009a92:	f108 0801 	add.w	r8, r8, #1
 8009a96:	45c8      	cmp	r8, r9
 8009a98:	dbf3      	blt.n	8009a82 <_printf_float+0x3da>
 8009a9a:	4653      	mov	r3, sl
 8009a9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009aa0:	e6dc      	b.n	800985c <_printf_float+0x1b4>
 8009aa2:	f04f 0800 	mov.w	r8, #0
 8009aa6:	f104 0b1a 	add.w	fp, r4, #26
 8009aaa:	e7f4      	b.n	8009a96 <_printf_float+0x3ee>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4642      	mov	r2, r8
 8009ab0:	e7e1      	b.n	8009a76 <_printf_float+0x3ce>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	464a      	mov	r2, r9
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f ae3f 	beq.w	8009740 <_printf_float+0x98>
 8009ac2:	f108 0801 	add.w	r8, r8, #1
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	4543      	cmp	r3, r8
 8009ace:	dcf0      	bgt.n	8009ab2 <_printf_float+0x40a>
 8009ad0:	e6f8      	b.n	80098c4 <_printf_float+0x21c>
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	f104 0919 	add.w	r9, r4, #25
 8009ada:	e7f4      	b.n	8009ac6 <_printf_float+0x41e>

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	4698      	mov	r8, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfb8      	it	lt
 8009af0:	4613      	movlt	r3, r2
 8009af2:	6033      	str	r3, [r6, #0]
 8009af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009af8:	4607      	mov	r7, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b10a      	cbz	r2, 8009b02 <_printf_common+0x26>
 8009afe:	3301      	adds	r3, #1
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	0699      	lsls	r1, r3, #26
 8009b06:	bf42      	ittt	mi
 8009b08:	6833      	ldrmi	r3, [r6, #0]
 8009b0a:	3302      	addmi	r3, #2
 8009b0c:	6033      	strmi	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	f015 0506 	ands.w	r5, r5, #6
 8009b14:	d106      	bne.n	8009b24 <_printf_common+0x48>
 8009b16:	f104 0a19 	add.w	sl, r4, #25
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	6832      	ldr	r2, [r6, #0]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	dc26      	bgt.n	8009b72 <_printf_common+0x96>
 8009b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b28:	6822      	ldr	r2, [r4, #0]
 8009b2a:	3b00      	subs	r3, #0
 8009b2c:	bf18      	it	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	0692      	lsls	r2, r2, #26
 8009b32:	d42b      	bmi.n	8009b8c <_printf_common+0xb0>
 8009b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b38:	4641      	mov	r1, r8
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	47c8      	blx	r9
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d01e      	beq.n	8009b80 <_printf_common+0xa4>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	f003 0306 	and.w	r3, r3, #6
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	bf02      	ittt	eq
 8009b4e:	68e5      	ldreq	r5, [r4, #12]
 8009b50:	6833      	ldreq	r3, [r6, #0]
 8009b52:	1aed      	subeq	r5, r5, r3
 8009b54:	68a3      	ldr	r3, [r4, #8]
 8009b56:	bf0c      	ite	eq
 8009b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b5c:	2500      	movne	r5, #0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bfc4      	itt	gt
 8009b62:	1a9b      	subgt	r3, r3, r2
 8009b64:	18ed      	addgt	r5, r5, r3
 8009b66:	2600      	movs	r6, #0
 8009b68:	341a      	adds	r4, #26
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	d11a      	bne.n	8009ba4 <_printf_common+0xc8>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e008      	b.n	8009b84 <_printf_common+0xa8>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4641      	mov	r1, r8
 8009b78:	4638      	mov	r0, r7
 8009b7a:	47c8      	blx	r9
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_printf_common+0xac>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7c6      	b.n	8009b1a <_printf_common+0x3e>
 8009b8c:	18e1      	adds	r1, r4, r3
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	2030      	movs	r0, #48	@ 0x30
 8009b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b96:	4422      	add	r2, r4
 8009b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	e7c7      	b.n	8009b34 <_printf_common+0x58>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4641      	mov	r1, r8
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c8      	blx	r9
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d0e6      	beq.n	8009b80 <_printf_common+0xa4>
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7d9      	b.n	8009b6a <_printf_common+0x8e>
	...

08009bb8 <_printf_i>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	7e0f      	ldrb	r7, [r1, #24]
 8009bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bc0:	2f78      	cmp	r7, #120	@ 0x78
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	469a      	mov	sl, r3
 8009bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bce:	d807      	bhi.n	8009be0 <_printf_i+0x28>
 8009bd0:	2f62      	cmp	r7, #98	@ 0x62
 8009bd2:	d80a      	bhi.n	8009bea <_printf_i+0x32>
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	f000 80d2 	beq.w	8009d7e <_printf_i+0x1c6>
 8009bda:	2f58      	cmp	r7, #88	@ 0x58
 8009bdc:	f000 80b9 	beq.w	8009d52 <_printf_i+0x19a>
 8009be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009be8:	e03a      	b.n	8009c60 <_printf_i+0xa8>
 8009bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bee:	2b15      	cmp	r3, #21
 8009bf0:	d8f6      	bhi.n	8009be0 <_printf_i+0x28>
 8009bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8009bf8 <_printf_i+0x40>)
 8009bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009be1 	.word	0x08009be1
 8009c04:	08009be1 	.word	0x08009be1
 8009c08:	08009be1 	.word	0x08009be1
 8009c0c:	08009be1 	.word	0x08009be1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009be1 	.word	0x08009be1
 8009c18:	08009be1 	.word	0x08009be1
 8009c1c:	08009be1 	.word	0x08009be1
 8009c20:	08009be1 	.word	0x08009be1
 8009c24:	08009d65 	.word	0x08009d65
 8009c28:	08009c8f 	.word	0x08009c8f
 8009c2c:	08009d1f 	.word	0x08009d1f
 8009c30:	08009be1 	.word	0x08009be1
 8009c34:	08009be1 	.word	0x08009be1
 8009c38:	08009d87 	.word	0x08009d87
 8009c3c:	08009be1 	.word	0x08009be1
 8009c40:	08009c8f 	.word	0x08009c8f
 8009c44:	08009be1 	.word	0x08009be1
 8009c48:	08009be1 	.word	0x08009be1
 8009c4c:	08009d27 	.word	0x08009d27
 8009c50:	6833      	ldr	r3, [r6, #0]
 8009c52:	1d1a      	adds	r2, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6032      	str	r2, [r6, #0]
 8009c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c60:	2301      	movs	r3, #1
 8009c62:	e09d      	b.n	8009da0 <_printf_i+0x1e8>
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	1d19      	adds	r1, r3, #4
 8009c6a:	6031      	str	r1, [r6, #0]
 8009c6c:	0606      	lsls	r6, r0, #24
 8009c6e:	d501      	bpl.n	8009c74 <_printf_i+0xbc>
 8009c70:	681d      	ldr	r5, [r3, #0]
 8009c72:	e003      	b.n	8009c7c <_printf_i+0xc4>
 8009c74:	0645      	lsls	r5, r0, #25
 8009c76:	d5fb      	bpl.n	8009c70 <_printf_i+0xb8>
 8009c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	da03      	bge.n	8009c88 <_printf_i+0xd0>
 8009c80:	232d      	movs	r3, #45	@ 0x2d
 8009c82:	426d      	negs	r5, r5
 8009c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c88:	4859      	ldr	r0, [pc, #356]	@ (8009df0 <_printf_i+0x238>)
 8009c8a:	230a      	movs	r3, #10
 8009c8c:	e011      	b.n	8009cb2 <_printf_i+0xfa>
 8009c8e:	6821      	ldr	r1, [r4, #0]
 8009c90:	6833      	ldr	r3, [r6, #0]
 8009c92:	0608      	lsls	r0, r1, #24
 8009c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c98:	d402      	bmi.n	8009ca0 <_printf_i+0xe8>
 8009c9a:	0649      	lsls	r1, r1, #25
 8009c9c:	bf48      	it	mi
 8009c9e:	b2ad      	uxthmi	r5, r5
 8009ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ca2:	4853      	ldr	r0, [pc, #332]	@ (8009df0 <_printf_i+0x238>)
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	bf14      	ite	ne
 8009ca8:	230a      	movne	r3, #10
 8009caa:	2308      	moveq	r3, #8
 8009cac:	2100      	movs	r1, #0
 8009cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cb2:	6866      	ldr	r6, [r4, #4]
 8009cb4:	60a6      	str	r6, [r4, #8]
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	bfa2      	ittt	ge
 8009cba:	6821      	ldrge	r1, [r4, #0]
 8009cbc:	f021 0104 	bicge.w	r1, r1, #4
 8009cc0:	6021      	strge	r1, [r4, #0]
 8009cc2:	b90d      	cbnz	r5, 8009cc8 <_printf_i+0x110>
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	d04b      	beq.n	8009d60 <_printf_i+0x1a8>
 8009cc8:	4616      	mov	r6, r2
 8009cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cce:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd2:	5dc7      	ldrb	r7, [r0, r7]
 8009cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cd8:	462f      	mov	r7, r5
 8009cda:	42bb      	cmp	r3, r7
 8009cdc:	460d      	mov	r5, r1
 8009cde:	d9f4      	bls.n	8009cca <_printf_i+0x112>
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d10b      	bne.n	8009cfc <_printf_i+0x144>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	07df      	lsls	r7, r3, #31
 8009ce8:	d508      	bpl.n	8009cfc <_printf_i+0x144>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	6861      	ldr	r1, [r4, #4]
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	bfde      	ittt	le
 8009cf2:	2330      	movle	r3, #48	@ 0x30
 8009cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cfc:	1b92      	subs	r2, r2, r6
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	f8cd a000 	str.w	sl, [sp]
 8009d04:	464b      	mov	r3, r9
 8009d06:	aa03      	add	r2, sp, #12
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f7ff fee6 	bl	8009adc <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d14a      	bne.n	8009daa <_printf_i+0x1f2>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	b004      	add	sp, #16
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	4833      	ldr	r0, [pc, #204]	@ (8009df4 <_printf_i+0x23c>)
 8009d28:	2778      	movs	r7, #120	@ 0x78
 8009d2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	6831      	ldr	r1, [r6, #0]
 8009d32:	061f      	lsls	r7, r3, #24
 8009d34:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d38:	d402      	bmi.n	8009d40 <_printf_i+0x188>
 8009d3a:	065f      	lsls	r7, r3, #25
 8009d3c:	bf48      	it	mi
 8009d3e:	b2ad      	uxthmi	r5, r5
 8009d40:	6031      	str	r1, [r6, #0]
 8009d42:	07d9      	lsls	r1, r3, #31
 8009d44:	bf44      	itt	mi
 8009d46:	f043 0320 	orrmi.w	r3, r3, #32
 8009d4a:	6023      	strmi	r3, [r4, #0]
 8009d4c:	b11d      	cbz	r5, 8009d56 <_printf_i+0x19e>
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e7ac      	b.n	8009cac <_printf_i+0xf4>
 8009d52:	4827      	ldr	r0, [pc, #156]	@ (8009df0 <_printf_i+0x238>)
 8009d54:	e7e9      	b.n	8009d2a <_printf_i+0x172>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f023 0320 	bic.w	r3, r3, #32
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	e7f6      	b.n	8009d4e <_printf_i+0x196>
 8009d60:	4616      	mov	r6, r2
 8009d62:	e7bd      	b.n	8009ce0 <_printf_i+0x128>
 8009d64:	6833      	ldr	r3, [r6, #0]
 8009d66:	6825      	ldr	r5, [r4, #0]
 8009d68:	6961      	ldr	r1, [r4, #20]
 8009d6a:	1d18      	adds	r0, r3, #4
 8009d6c:	6030      	str	r0, [r6, #0]
 8009d6e:	062e      	lsls	r6, r5, #24
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	d501      	bpl.n	8009d78 <_printf_i+0x1c0>
 8009d74:	6019      	str	r1, [r3, #0]
 8009d76:	e002      	b.n	8009d7e <_printf_i+0x1c6>
 8009d78:	0668      	lsls	r0, r5, #25
 8009d7a:	d5fb      	bpl.n	8009d74 <_printf_i+0x1bc>
 8009d7c:	8019      	strh	r1, [r3, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	4616      	mov	r6, r2
 8009d84:	e7bc      	b.n	8009d00 <_printf_i+0x148>
 8009d86:	6833      	ldr	r3, [r6, #0]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	6032      	str	r2, [r6, #0]
 8009d8c:	681e      	ldr	r6, [r3, #0]
 8009d8e:	6862      	ldr	r2, [r4, #4]
 8009d90:	2100      	movs	r1, #0
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 faa4 	bl	80002e0 <memchr>
 8009d98:	b108      	cbz	r0, 8009d9e <_printf_i+0x1e6>
 8009d9a:	1b80      	subs	r0, r0, r6
 8009d9c:	6060      	str	r0, [r4, #4]
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	2300      	movs	r3, #0
 8009da4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009da8:	e7aa      	b.n	8009d00 <_printf_i+0x148>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	4632      	mov	r2, r6
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	47d0      	blx	sl
 8009db4:	3001      	adds	r0, #1
 8009db6:	d0ad      	beq.n	8009d14 <_printf_i+0x15c>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	079b      	lsls	r3, r3, #30
 8009dbc:	d413      	bmi.n	8009de6 <_printf_i+0x22e>
 8009dbe:	68e0      	ldr	r0, [r4, #12]
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	4298      	cmp	r0, r3
 8009dc4:	bfb8      	it	lt
 8009dc6:	4618      	movlt	r0, r3
 8009dc8:	e7a6      	b.n	8009d18 <_printf_i+0x160>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	47d0      	blx	sl
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d09d      	beq.n	8009d14 <_printf_i+0x15c>
 8009dd8:	3501      	adds	r5, #1
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	9903      	ldr	r1, [sp, #12]
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	dcf2      	bgt.n	8009dca <_printf_i+0x212>
 8009de4:	e7eb      	b.n	8009dbe <_printf_i+0x206>
 8009de6:	2500      	movs	r5, #0
 8009de8:	f104 0619 	add.w	r6, r4, #25
 8009dec:	e7f5      	b.n	8009dda <_printf_i+0x222>
 8009dee:	bf00      	nop
 8009df0:	0800db0e 	.word	0x0800db0e
 8009df4:	0800db1f 	.word	0x0800db1f

08009df8 <_scanf_float>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	b087      	sub	sp, #28
 8009dfe:	4617      	mov	r7, r2
 8009e00:	9303      	str	r3, [sp, #12]
 8009e02:	688b      	ldr	r3, [r1, #8]
 8009e04:	1e5a      	subs	r2, r3, #1
 8009e06:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e0a:	bf81      	itttt	hi
 8009e0c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e10:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e14:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e18:	608b      	strhi	r3, [r1, #8]
 8009e1a:	680b      	ldr	r3, [r1, #0]
 8009e1c:	460a      	mov	r2, r1
 8009e1e:	f04f 0500 	mov.w	r5, #0
 8009e22:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e26:	f842 3b1c 	str.w	r3, [r2], #28
 8009e2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e2e:	4680      	mov	r8, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	bf98      	it	ls
 8009e34:	f04f 0b00 	movls.w	fp, #0
 8009e38:	9201      	str	r2, [sp, #4]
 8009e3a:	4616      	mov	r6, r2
 8009e3c:	46aa      	mov	sl, r5
 8009e3e:	46a9      	mov	r9, r5
 8009e40:	9502      	str	r5, [sp, #8]
 8009e42:	68a2      	ldr	r2, [r4, #8]
 8009e44:	b152      	cbz	r2, 8009e5c <_scanf_float+0x64>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e4c:	d864      	bhi.n	8009f18 <_scanf_float+0x120>
 8009e4e:	2b40      	cmp	r3, #64	@ 0x40
 8009e50:	d83c      	bhi.n	8009ecc <_scanf_float+0xd4>
 8009e52:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009e56:	b2c8      	uxtb	r0, r1
 8009e58:	280e      	cmp	r0, #14
 8009e5a:	d93a      	bls.n	8009ed2 <_scanf_float+0xda>
 8009e5c:	f1b9 0f00 	cmp.w	r9, #0
 8009e60:	d003      	beq.n	8009e6a <_scanf_float+0x72>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e6e:	f1ba 0f01 	cmp.w	sl, #1
 8009e72:	f200 8117 	bhi.w	800a0a4 <_scanf_float+0x2ac>
 8009e76:	9b01      	ldr	r3, [sp, #4]
 8009e78:	429e      	cmp	r6, r3
 8009e7a:	f200 8108 	bhi.w	800a08e <_scanf_float+0x296>
 8009e7e:	2001      	movs	r0, #1
 8009e80:	b007      	add	sp, #28
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e86:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009e8a:	2a0d      	cmp	r2, #13
 8009e8c:	d8e6      	bhi.n	8009e5c <_scanf_float+0x64>
 8009e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8009e94 <_scanf_float+0x9c>)
 8009e90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e94:	08009fdb 	.word	0x08009fdb
 8009e98:	08009e5d 	.word	0x08009e5d
 8009e9c:	08009e5d 	.word	0x08009e5d
 8009ea0:	08009e5d 	.word	0x08009e5d
 8009ea4:	0800a03b 	.word	0x0800a03b
 8009ea8:	0800a013 	.word	0x0800a013
 8009eac:	08009e5d 	.word	0x08009e5d
 8009eb0:	08009e5d 	.word	0x08009e5d
 8009eb4:	08009fe9 	.word	0x08009fe9
 8009eb8:	08009e5d 	.word	0x08009e5d
 8009ebc:	08009e5d 	.word	0x08009e5d
 8009ec0:	08009e5d 	.word	0x08009e5d
 8009ec4:	08009e5d 	.word	0x08009e5d
 8009ec8:	08009fa1 	.word	0x08009fa1
 8009ecc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009ed0:	e7db      	b.n	8009e8a <_scanf_float+0x92>
 8009ed2:	290e      	cmp	r1, #14
 8009ed4:	d8c2      	bhi.n	8009e5c <_scanf_float+0x64>
 8009ed6:	a001      	add	r0, pc, #4	@ (adr r0, 8009edc <_scanf_float+0xe4>)
 8009ed8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009edc:	08009f91 	.word	0x08009f91
 8009ee0:	08009e5d 	.word	0x08009e5d
 8009ee4:	08009f91 	.word	0x08009f91
 8009ee8:	0800a027 	.word	0x0800a027
 8009eec:	08009e5d 	.word	0x08009e5d
 8009ef0:	08009f39 	.word	0x08009f39
 8009ef4:	08009f77 	.word	0x08009f77
 8009ef8:	08009f77 	.word	0x08009f77
 8009efc:	08009f77 	.word	0x08009f77
 8009f00:	08009f77 	.word	0x08009f77
 8009f04:	08009f77 	.word	0x08009f77
 8009f08:	08009f77 	.word	0x08009f77
 8009f0c:	08009f77 	.word	0x08009f77
 8009f10:	08009f77 	.word	0x08009f77
 8009f14:	08009f77 	.word	0x08009f77
 8009f18:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f1a:	d809      	bhi.n	8009f30 <_scanf_float+0x138>
 8009f1c:	2b60      	cmp	r3, #96	@ 0x60
 8009f1e:	d8b2      	bhi.n	8009e86 <_scanf_float+0x8e>
 8009f20:	2b54      	cmp	r3, #84	@ 0x54
 8009f22:	d07b      	beq.n	800a01c <_scanf_float+0x224>
 8009f24:	2b59      	cmp	r3, #89	@ 0x59
 8009f26:	d199      	bne.n	8009e5c <_scanf_float+0x64>
 8009f28:	2d07      	cmp	r5, #7
 8009f2a:	d197      	bne.n	8009e5c <_scanf_float+0x64>
 8009f2c:	2508      	movs	r5, #8
 8009f2e:	e02c      	b.n	8009f8a <_scanf_float+0x192>
 8009f30:	2b74      	cmp	r3, #116	@ 0x74
 8009f32:	d073      	beq.n	800a01c <_scanf_float+0x224>
 8009f34:	2b79      	cmp	r3, #121	@ 0x79
 8009f36:	e7f6      	b.n	8009f26 <_scanf_float+0x12e>
 8009f38:	6821      	ldr	r1, [r4, #0]
 8009f3a:	05c8      	lsls	r0, r1, #23
 8009f3c:	d51b      	bpl.n	8009f76 <_scanf_float+0x17e>
 8009f3e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009f42:	6021      	str	r1, [r4, #0]
 8009f44:	f109 0901 	add.w	r9, r9, #1
 8009f48:	f1bb 0f00 	cmp.w	fp, #0
 8009f4c:	d003      	beq.n	8009f56 <_scanf_float+0x15e>
 8009f4e:	3201      	adds	r2, #1
 8009f50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f54:	60a2      	str	r2, [r4, #8]
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	60a3      	str	r3, [r4, #8]
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	6123      	str	r3, [r4, #16]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	f340 8087 	ble.w	800a07c <_scanf_float+0x284>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	3301      	adds	r3, #1
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	e765      	b.n	8009e42 <_scanf_float+0x4a>
 8009f76:	eb1a 0105 	adds.w	r1, sl, r5
 8009f7a:	f47f af6f 	bne.w	8009e5c <_scanf_float+0x64>
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009f84:	6022      	str	r2, [r4, #0]
 8009f86:	460d      	mov	r5, r1
 8009f88:	468a      	mov	sl, r1
 8009f8a:	f806 3b01 	strb.w	r3, [r6], #1
 8009f8e:	e7e2      	b.n	8009f56 <_scanf_float+0x15e>
 8009f90:	6822      	ldr	r2, [r4, #0]
 8009f92:	0610      	lsls	r0, r2, #24
 8009f94:	f57f af62 	bpl.w	8009e5c <_scanf_float+0x64>
 8009f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f9c:	6022      	str	r2, [r4, #0]
 8009f9e:	e7f4      	b.n	8009f8a <_scanf_float+0x192>
 8009fa0:	f1ba 0f00 	cmp.w	sl, #0
 8009fa4:	d10e      	bne.n	8009fc4 <_scanf_float+0x1cc>
 8009fa6:	f1b9 0f00 	cmp.w	r9, #0
 8009faa:	d10e      	bne.n	8009fca <_scanf_float+0x1d2>
 8009fac:	6822      	ldr	r2, [r4, #0]
 8009fae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009fb2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009fb6:	d108      	bne.n	8009fca <_scanf_float+0x1d2>
 8009fb8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fbc:	6022      	str	r2, [r4, #0]
 8009fbe:	f04f 0a01 	mov.w	sl, #1
 8009fc2:	e7e2      	b.n	8009f8a <_scanf_float+0x192>
 8009fc4:	f1ba 0f02 	cmp.w	sl, #2
 8009fc8:	d055      	beq.n	800a076 <_scanf_float+0x27e>
 8009fca:	2d01      	cmp	r5, #1
 8009fcc:	d002      	beq.n	8009fd4 <_scanf_float+0x1dc>
 8009fce:	2d04      	cmp	r5, #4
 8009fd0:	f47f af44 	bne.w	8009e5c <_scanf_float+0x64>
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	b2ed      	uxtb	r5, r5
 8009fd8:	e7d7      	b.n	8009f8a <_scanf_float+0x192>
 8009fda:	f1ba 0f01 	cmp.w	sl, #1
 8009fde:	f47f af3d 	bne.w	8009e5c <_scanf_float+0x64>
 8009fe2:	f04f 0a02 	mov.w	sl, #2
 8009fe6:	e7d0      	b.n	8009f8a <_scanf_float+0x192>
 8009fe8:	b97d      	cbnz	r5, 800a00a <_scanf_float+0x212>
 8009fea:	f1b9 0f00 	cmp.w	r9, #0
 8009fee:	f47f af38 	bne.w	8009e62 <_scanf_float+0x6a>
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009ff8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009ffc:	f040 8101 	bne.w	800a202 <_scanf_float+0x40a>
 800a000:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a004:	6022      	str	r2, [r4, #0]
 800a006:	2501      	movs	r5, #1
 800a008:	e7bf      	b.n	8009f8a <_scanf_float+0x192>
 800a00a:	2d03      	cmp	r5, #3
 800a00c:	d0e2      	beq.n	8009fd4 <_scanf_float+0x1dc>
 800a00e:	2d05      	cmp	r5, #5
 800a010:	e7de      	b.n	8009fd0 <_scanf_float+0x1d8>
 800a012:	2d02      	cmp	r5, #2
 800a014:	f47f af22 	bne.w	8009e5c <_scanf_float+0x64>
 800a018:	2503      	movs	r5, #3
 800a01a:	e7b6      	b.n	8009f8a <_scanf_float+0x192>
 800a01c:	2d06      	cmp	r5, #6
 800a01e:	f47f af1d 	bne.w	8009e5c <_scanf_float+0x64>
 800a022:	2507      	movs	r5, #7
 800a024:	e7b1      	b.n	8009f8a <_scanf_float+0x192>
 800a026:	6822      	ldr	r2, [r4, #0]
 800a028:	0591      	lsls	r1, r2, #22
 800a02a:	f57f af17 	bpl.w	8009e5c <_scanf_float+0x64>
 800a02e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a032:	6022      	str	r2, [r4, #0]
 800a034:	f8cd 9008 	str.w	r9, [sp, #8]
 800a038:	e7a7      	b.n	8009f8a <_scanf_float+0x192>
 800a03a:	6822      	ldr	r2, [r4, #0]
 800a03c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a040:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a044:	d006      	beq.n	800a054 <_scanf_float+0x25c>
 800a046:	0550      	lsls	r0, r2, #21
 800a048:	f57f af08 	bpl.w	8009e5c <_scanf_float+0x64>
 800a04c:	f1b9 0f00 	cmp.w	r9, #0
 800a050:	f000 80d7 	beq.w	800a202 <_scanf_float+0x40a>
 800a054:	0591      	lsls	r1, r2, #22
 800a056:	bf58      	it	pl
 800a058:	9902      	ldrpl	r1, [sp, #8]
 800a05a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a05e:	bf58      	it	pl
 800a060:	eba9 0101 	subpl.w	r1, r9, r1
 800a064:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a068:	bf58      	it	pl
 800a06a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a06e:	6022      	str	r2, [r4, #0]
 800a070:	f04f 0900 	mov.w	r9, #0
 800a074:	e789      	b.n	8009f8a <_scanf_float+0x192>
 800a076:	f04f 0a03 	mov.w	sl, #3
 800a07a:	e786      	b.n	8009f8a <_scanf_float+0x192>
 800a07c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a080:	4639      	mov	r1, r7
 800a082:	4640      	mov	r0, r8
 800a084:	4798      	blx	r3
 800a086:	2800      	cmp	r0, #0
 800a088:	f43f aedb 	beq.w	8009e42 <_scanf_float+0x4a>
 800a08c:	e6e6      	b.n	8009e5c <_scanf_float+0x64>
 800a08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a096:	463a      	mov	r2, r7
 800a098:	4640      	mov	r0, r8
 800a09a:	4798      	blx	r3
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	e6e8      	b.n	8009e76 <_scanf_float+0x7e>
 800a0a4:	1e6b      	subs	r3, r5, #1
 800a0a6:	2b06      	cmp	r3, #6
 800a0a8:	d824      	bhi.n	800a0f4 <_scanf_float+0x2fc>
 800a0aa:	2d02      	cmp	r5, #2
 800a0ac:	d836      	bhi.n	800a11c <_scanf_float+0x324>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	429e      	cmp	r6, r3
 800a0b2:	f67f aee4 	bls.w	8009e7e <_scanf_float+0x86>
 800a0b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0be:	463a      	mov	r2, r7
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	4798      	blx	r3
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	e7f0      	b.n	800a0ae <_scanf_float+0x2b6>
 800a0cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a0d4:	463a      	mov	r2, r7
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	4798      	blx	r3
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	6123      	str	r3, [r4, #16]
 800a0e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0e4:	fa5f fa8a 	uxtb.w	sl, sl
 800a0e8:	f1ba 0f02 	cmp.w	sl, #2
 800a0ec:	d1ee      	bne.n	800a0cc <_scanf_float+0x2d4>
 800a0ee:	3d03      	subs	r5, #3
 800a0f0:	b2ed      	uxtb	r5, r5
 800a0f2:	1b76      	subs	r6, r6, r5
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	05da      	lsls	r2, r3, #23
 800a0f8:	d530      	bpl.n	800a15c <_scanf_float+0x364>
 800a0fa:	055b      	lsls	r3, r3, #21
 800a0fc:	d511      	bpl.n	800a122 <_scanf_float+0x32a>
 800a0fe:	9b01      	ldr	r3, [sp, #4]
 800a100:	429e      	cmp	r6, r3
 800a102:	f67f aebc 	bls.w	8009e7e <_scanf_float+0x86>
 800a106:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a10a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a10e:	463a      	mov	r2, r7
 800a110:	4640      	mov	r0, r8
 800a112:	4798      	blx	r3
 800a114:	6923      	ldr	r3, [r4, #16]
 800a116:	3b01      	subs	r3, #1
 800a118:	6123      	str	r3, [r4, #16]
 800a11a:	e7f0      	b.n	800a0fe <_scanf_float+0x306>
 800a11c:	46aa      	mov	sl, r5
 800a11e:	46b3      	mov	fp, r6
 800a120:	e7de      	b.n	800a0e0 <_scanf_float+0x2e8>
 800a122:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	2965      	cmp	r1, #101	@ 0x65
 800a12a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a12e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	d00c      	beq.n	800a150 <_scanf_float+0x358>
 800a136:	2945      	cmp	r1, #69	@ 0x45
 800a138:	d00a      	beq.n	800a150 <_scanf_float+0x358>
 800a13a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a13e:	463a      	mov	r2, r7
 800a140:	4640      	mov	r0, r8
 800a142:	4798      	blx	r3
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	1eb5      	subs	r5, r6, #2
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a154:	463a      	mov	r2, r7
 800a156:	4640      	mov	r0, r8
 800a158:	4798      	blx	r3
 800a15a:	462e      	mov	r6, r5
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	f012 0210 	ands.w	r2, r2, #16
 800a162:	d001      	beq.n	800a168 <_scanf_float+0x370>
 800a164:	2000      	movs	r0, #0
 800a166:	e68b      	b.n	8009e80 <_scanf_float+0x88>
 800a168:	7032      	strb	r2, [r6, #0]
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a174:	d11a      	bne.n	800a1ac <_scanf_float+0x3b4>
 800a176:	9b02      	ldr	r3, [sp, #8]
 800a178:	454b      	cmp	r3, r9
 800a17a:	eba3 0209 	sub.w	r2, r3, r9
 800a17e:	d121      	bne.n	800a1c4 <_scanf_float+0x3cc>
 800a180:	9901      	ldr	r1, [sp, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	4640      	mov	r0, r8
 800a186:	f002 fb2d 	bl	800c7e4 <_strtod_r>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	6821      	ldr	r1, [r4, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f011 0f02 	tst.w	r1, #2
 800a194:	f103 0204 	add.w	r2, r3, #4
 800a198:	d01f      	beq.n	800a1da <_scanf_float+0x3e2>
 800a19a:	9903      	ldr	r1, [sp, #12]
 800a19c:	600a      	str	r2, [r1, #0]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	ed83 0b00 	vstr	d0, [r3]
 800a1a4:	68e3      	ldr	r3, [r4, #12]
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	60e3      	str	r3, [r4, #12]
 800a1aa:	e7db      	b.n	800a164 <_scanf_float+0x36c>
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0e6      	beq.n	800a180 <_scanf_float+0x388>
 800a1b2:	9905      	ldr	r1, [sp, #20]
 800a1b4:	230a      	movs	r3, #10
 800a1b6:	3101      	adds	r1, #1
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	f002 fb93 	bl	800c8e4 <_strtol_r>
 800a1be:	9b04      	ldr	r3, [sp, #16]
 800a1c0:	9e05      	ldr	r6, [sp, #20]
 800a1c2:	1ac2      	subs	r2, r0, r3
 800a1c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a1c8:	429e      	cmp	r6, r3
 800a1ca:	bf28      	it	cs
 800a1cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a1d0:	490d      	ldr	r1, [pc, #52]	@ (800a208 <_scanf_float+0x410>)
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f000 f8de 	bl	800a394 <siprintf>
 800a1d8:	e7d2      	b.n	800a180 <_scanf_float+0x388>
 800a1da:	f011 0f04 	tst.w	r1, #4
 800a1de:	9903      	ldr	r1, [sp, #12]
 800a1e0:	600a      	str	r2, [r1, #0]
 800a1e2:	d1dc      	bne.n	800a19e <_scanf_float+0x3a6>
 800a1e4:	eeb4 0b40 	vcmp.f64	d0, d0
 800a1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ec:	681d      	ldr	r5, [r3, #0]
 800a1ee:	d705      	bvc.n	800a1fc <_scanf_float+0x404>
 800a1f0:	4806      	ldr	r0, [pc, #24]	@ (800a20c <_scanf_float+0x414>)
 800a1f2:	f000 f9b3 	bl	800a55c <nanf>
 800a1f6:	ed85 0a00 	vstr	s0, [r5]
 800a1fa:	e7d3      	b.n	800a1a4 <_scanf_float+0x3ac>
 800a1fc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a200:	e7f9      	b.n	800a1f6 <_scanf_float+0x3fe>
 800a202:	f04f 0900 	mov.w	r9, #0
 800a206:	e630      	b.n	8009e6a <_scanf_float+0x72>
 800a208:	0800db30 	.word	0x0800db30
 800a20c:	0800dec5 	.word	0x0800dec5

0800a210 <std>:
 800a210:	2300      	movs	r3, #0
 800a212:	b510      	push	{r4, lr}
 800a214:	4604      	mov	r4, r0
 800a216:	e9c0 3300 	strd	r3, r3, [r0]
 800a21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a21e:	6083      	str	r3, [r0, #8]
 800a220:	8181      	strh	r1, [r0, #12]
 800a222:	6643      	str	r3, [r0, #100]	@ 0x64
 800a224:	81c2      	strh	r2, [r0, #14]
 800a226:	6183      	str	r3, [r0, #24]
 800a228:	4619      	mov	r1, r3
 800a22a:	2208      	movs	r2, #8
 800a22c:	305c      	adds	r0, #92	@ 0x5c
 800a22e:	f000 f914 	bl	800a45a <memset>
 800a232:	4b0d      	ldr	r3, [pc, #52]	@ (800a268 <std+0x58>)
 800a234:	6263      	str	r3, [r4, #36]	@ 0x24
 800a236:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <std+0x5c>)
 800a238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a23a:	4b0d      	ldr	r3, [pc, #52]	@ (800a270 <std+0x60>)
 800a23c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a23e:	4b0d      	ldr	r3, [pc, #52]	@ (800a274 <std+0x64>)
 800a240:	6323      	str	r3, [r4, #48]	@ 0x30
 800a242:	4b0d      	ldr	r3, [pc, #52]	@ (800a278 <std+0x68>)
 800a244:	6224      	str	r4, [r4, #32]
 800a246:	429c      	cmp	r4, r3
 800a248:	d006      	beq.n	800a258 <std+0x48>
 800a24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a24e:	4294      	cmp	r4, r2
 800a250:	d002      	beq.n	800a258 <std+0x48>
 800a252:	33d0      	adds	r3, #208	@ 0xd0
 800a254:	429c      	cmp	r4, r3
 800a256:	d105      	bne.n	800a264 <std+0x54>
 800a258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a260:	f000 b978 	b.w	800a554 <__retarget_lock_init_recursive>
 800a264:	bd10      	pop	{r4, pc}
 800a266:	bf00      	nop
 800a268:	0800a3d5 	.word	0x0800a3d5
 800a26c:	0800a3f7 	.word	0x0800a3f7
 800a270:	0800a42f 	.word	0x0800a42f
 800a274:	0800a453 	.word	0x0800a453
 800a278:	24000310 	.word	0x24000310

0800a27c <stdio_exit_handler>:
 800a27c:	4a02      	ldr	r2, [pc, #8]	@ (800a288 <stdio_exit_handler+0xc>)
 800a27e:	4903      	ldr	r1, [pc, #12]	@ (800a28c <stdio_exit_handler+0x10>)
 800a280:	4803      	ldr	r0, [pc, #12]	@ (800a290 <stdio_exit_handler+0x14>)
 800a282:	f000 b869 	b.w	800a358 <_fwalk_sglue>
 800a286:	bf00      	nop
 800a288:	24000010 	.word	0x24000010
 800a28c:	0800cca1 	.word	0x0800cca1
 800a290:	24000020 	.word	0x24000020

0800a294 <cleanup_stdio>:
 800a294:	6841      	ldr	r1, [r0, #4]
 800a296:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <cleanup_stdio+0x34>)
 800a298:	4299      	cmp	r1, r3
 800a29a:	b510      	push	{r4, lr}
 800a29c:	4604      	mov	r4, r0
 800a29e:	d001      	beq.n	800a2a4 <cleanup_stdio+0x10>
 800a2a0:	f002 fcfe 	bl	800cca0 <_fflush_r>
 800a2a4:	68a1      	ldr	r1, [r4, #8]
 800a2a6:	4b09      	ldr	r3, [pc, #36]	@ (800a2cc <cleanup_stdio+0x38>)
 800a2a8:	4299      	cmp	r1, r3
 800a2aa:	d002      	beq.n	800a2b2 <cleanup_stdio+0x1e>
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f002 fcf7 	bl	800cca0 <_fflush_r>
 800a2b2:	68e1      	ldr	r1, [r4, #12]
 800a2b4:	4b06      	ldr	r3, [pc, #24]	@ (800a2d0 <cleanup_stdio+0x3c>)
 800a2b6:	4299      	cmp	r1, r3
 800a2b8:	d004      	beq.n	800a2c4 <cleanup_stdio+0x30>
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c0:	f002 bcee 	b.w	800cca0 <_fflush_r>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	bf00      	nop
 800a2c8:	24000310 	.word	0x24000310
 800a2cc:	24000378 	.word	0x24000378
 800a2d0:	240003e0 	.word	0x240003e0

0800a2d4 <global_stdio_init.part.0>:
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a304 <global_stdio_init.part.0+0x30>)
 800a2d8:	4c0b      	ldr	r4, [pc, #44]	@ (800a308 <global_stdio_init.part.0+0x34>)
 800a2da:	4a0c      	ldr	r2, [pc, #48]	@ (800a30c <global_stdio_init.part.0+0x38>)
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	4620      	mov	r0, r4
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2104      	movs	r1, #4
 800a2e4:	f7ff ff94 	bl	800a210 <std>
 800a2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	2109      	movs	r1, #9
 800a2f0:	f7ff ff8e 	bl	800a210 <std>
 800a2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2fe:	2112      	movs	r1, #18
 800a300:	f7ff bf86 	b.w	800a210 <std>
 800a304:	24000448 	.word	0x24000448
 800a308:	24000310 	.word	0x24000310
 800a30c:	0800a27d 	.word	0x0800a27d

0800a310 <__sfp_lock_acquire>:
 800a310:	4801      	ldr	r0, [pc, #4]	@ (800a318 <__sfp_lock_acquire+0x8>)
 800a312:	f000 b920 	b.w	800a556 <__retarget_lock_acquire_recursive>
 800a316:	bf00      	nop
 800a318:	24000451 	.word	0x24000451

0800a31c <__sfp_lock_release>:
 800a31c:	4801      	ldr	r0, [pc, #4]	@ (800a324 <__sfp_lock_release+0x8>)
 800a31e:	f000 b91b 	b.w	800a558 <__retarget_lock_release_recursive>
 800a322:	bf00      	nop
 800a324:	24000451 	.word	0x24000451

0800a328 <__sinit>:
 800a328:	b510      	push	{r4, lr}
 800a32a:	4604      	mov	r4, r0
 800a32c:	f7ff fff0 	bl	800a310 <__sfp_lock_acquire>
 800a330:	6a23      	ldr	r3, [r4, #32]
 800a332:	b11b      	cbz	r3, 800a33c <__sinit+0x14>
 800a334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a338:	f7ff bff0 	b.w	800a31c <__sfp_lock_release>
 800a33c:	4b04      	ldr	r3, [pc, #16]	@ (800a350 <__sinit+0x28>)
 800a33e:	6223      	str	r3, [r4, #32]
 800a340:	4b04      	ldr	r3, [pc, #16]	@ (800a354 <__sinit+0x2c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1f5      	bne.n	800a334 <__sinit+0xc>
 800a348:	f7ff ffc4 	bl	800a2d4 <global_stdio_init.part.0>
 800a34c:	e7f2      	b.n	800a334 <__sinit+0xc>
 800a34e:	bf00      	nop
 800a350:	0800a295 	.word	0x0800a295
 800a354:	24000448 	.word	0x24000448

0800a358 <_fwalk_sglue>:
 800a358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a35c:	4607      	mov	r7, r0
 800a35e:	4688      	mov	r8, r1
 800a360:	4614      	mov	r4, r2
 800a362:	2600      	movs	r6, #0
 800a364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a368:	f1b9 0901 	subs.w	r9, r9, #1
 800a36c:	d505      	bpl.n	800a37a <_fwalk_sglue+0x22>
 800a36e:	6824      	ldr	r4, [r4, #0]
 800a370:	2c00      	cmp	r4, #0
 800a372:	d1f7      	bne.n	800a364 <_fwalk_sglue+0xc>
 800a374:	4630      	mov	r0, r6
 800a376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d907      	bls.n	800a390 <_fwalk_sglue+0x38>
 800a380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a384:	3301      	adds	r3, #1
 800a386:	d003      	beq.n	800a390 <_fwalk_sglue+0x38>
 800a388:	4629      	mov	r1, r5
 800a38a:	4638      	mov	r0, r7
 800a38c:	47c0      	blx	r8
 800a38e:	4306      	orrs	r6, r0
 800a390:	3568      	adds	r5, #104	@ 0x68
 800a392:	e7e9      	b.n	800a368 <_fwalk_sglue+0x10>

0800a394 <siprintf>:
 800a394:	b40e      	push	{r1, r2, r3}
 800a396:	b500      	push	{lr}
 800a398:	b09c      	sub	sp, #112	@ 0x70
 800a39a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a39c:	9002      	str	r0, [sp, #8]
 800a39e:	9006      	str	r0, [sp, #24]
 800a3a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a3a4:	4809      	ldr	r0, [pc, #36]	@ (800a3cc <siprintf+0x38>)
 800a3a6:	9107      	str	r1, [sp, #28]
 800a3a8:	9104      	str	r1, [sp, #16]
 800a3aa:	4909      	ldr	r1, [pc, #36]	@ (800a3d0 <siprintf+0x3c>)
 800a3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b0:	9105      	str	r1, [sp, #20]
 800a3b2:	6800      	ldr	r0, [r0, #0]
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	a902      	add	r1, sp, #8
 800a3b8:	f002 faf2 	bl	800c9a0 <_svfiprintf_r>
 800a3bc:	9b02      	ldr	r3, [sp, #8]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	701a      	strb	r2, [r3, #0]
 800a3c2:	b01c      	add	sp, #112	@ 0x70
 800a3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3c8:	b003      	add	sp, #12
 800a3ca:	4770      	bx	lr
 800a3cc:	2400001c 	.word	0x2400001c
 800a3d0:	ffff0208 	.word	0xffff0208

0800a3d4 <__sread>:
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3dc:	f000 f86c 	bl	800a4b8 <_read_r>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	bfab      	itete	ge
 800a3e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a3e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3e8:	181b      	addge	r3, r3, r0
 800a3ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a3ee:	bfac      	ite	ge
 800a3f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a3f2:	81a3      	strhlt	r3, [r4, #12]
 800a3f4:	bd10      	pop	{r4, pc}

0800a3f6 <__swrite>:
 800a3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fa:	461f      	mov	r7, r3
 800a3fc:	898b      	ldrh	r3, [r1, #12]
 800a3fe:	05db      	lsls	r3, r3, #23
 800a400:	4605      	mov	r5, r0
 800a402:	460c      	mov	r4, r1
 800a404:	4616      	mov	r6, r2
 800a406:	d505      	bpl.n	800a414 <__swrite+0x1e>
 800a408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40c:	2302      	movs	r3, #2
 800a40e:	2200      	movs	r2, #0
 800a410:	f000 f840 	bl	800a494 <_lseek_r>
 800a414:	89a3      	ldrh	r3, [r4, #12]
 800a416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a41a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a41e:	81a3      	strh	r3, [r4, #12]
 800a420:	4632      	mov	r2, r6
 800a422:	463b      	mov	r3, r7
 800a424:	4628      	mov	r0, r5
 800a426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a42a:	f000 b857 	b.w	800a4dc <_write_r>

0800a42e <__sseek>:
 800a42e:	b510      	push	{r4, lr}
 800a430:	460c      	mov	r4, r1
 800a432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a436:	f000 f82d 	bl	800a494 <_lseek_r>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	bf15      	itete	ne
 800a440:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a442:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a446:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a44a:	81a3      	strheq	r3, [r4, #12]
 800a44c:	bf18      	it	ne
 800a44e:	81a3      	strhne	r3, [r4, #12]
 800a450:	bd10      	pop	{r4, pc}

0800a452 <__sclose>:
 800a452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a456:	f000 b80d 	b.w	800a474 <_close_r>

0800a45a <memset>:
 800a45a:	4402      	add	r2, r0
 800a45c:	4603      	mov	r3, r0
 800a45e:	4293      	cmp	r3, r2
 800a460:	d100      	bne.n	800a464 <memset+0xa>
 800a462:	4770      	bx	lr
 800a464:	f803 1b01 	strb.w	r1, [r3], #1
 800a468:	e7f9      	b.n	800a45e <memset+0x4>
	...

0800a46c <_localeconv_r>:
 800a46c:	4800      	ldr	r0, [pc, #0]	@ (800a470 <_localeconv_r+0x4>)
 800a46e:	4770      	bx	lr
 800a470:	2400015c 	.word	0x2400015c

0800a474 <_close_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d06      	ldr	r5, [pc, #24]	@ (800a490 <_close_r+0x1c>)
 800a478:	2300      	movs	r3, #0
 800a47a:	4604      	mov	r4, r0
 800a47c:	4608      	mov	r0, r1
 800a47e:	602b      	str	r3, [r5, #0]
 800a480:	f7f6 feec 	bl	800125c <_close>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_close_r+0x1a>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_close_r+0x1a>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	2400044c 	.word	0x2400044c

0800a494 <_lseek_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d07      	ldr	r5, [pc, #28]	@ (800a4b4 <_lseek_r+0x20>)
 800a498:	4604      	mov	r4, r0
 800a49a:	4608      	mov	r0, r1
 800a49c:	4611      	mov	r1, r2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	602a      	str	r2, [r5, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f7f6 ff01 	bl	80012aa <_lseek>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_lseek_r+0x1e>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_lseek_r+0x1e>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	2400044c 	.word	0x2400044c

0800a4b8 <_read_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d07      	ldr	r5, [pc, #28]	@ (800a4d8 <_read_r+0x20>)
 800a4bc:	4604      	mov	r4, r0
 800a4be:	4608      	mov	r0, r1
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f7f6 fe8f 	bl	80011ea <_read>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_read_r+0x1e>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_read_r+0x1e>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	2400044c 	.word	0x2400044c

0800a4dc <_write_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d07      	ldr	r5, [pc, #28]	@ (800a4fc <_write_r+0x20>)
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	602a      	str	r2, [r5, #0]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f7f6 fe9a 	bl	8001224 <_write>
 800a4f0:	1c43      	adds	r3, r0, #1
 800a4f2:	d102      	bne.n	800a4fa <_write_r+0x1e>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	b103      	cbz	r3, 800a4fa <_write_r+0x1e>
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	2400044c 	.word	0x2400044c

0800a500 <__errno>:
 800a500:	4b01      	ldr	r3, [pc, #4]	@ (800a508 <__errno+0x8>)
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	2400001c 	.word	0x2400001c

0800a50c <__libc_init_array>:
 800a50c:	b570      	push	{r4, r5, r6, lr}
 800a50e:	4d0d      	ldr	r5, [pc, #52]	@ (800a544 <__libc_init_array+0x38>)
 800a510:	4c0d      	ldr	r4, [pc, #52]	@ (800a548 <__libc_init_array+0x3c>)
 800a512:	1b64      	subs	r4, r4, r5
 800a514:	10a4      	asrs	r4, r4, #2
 800a516:	2600      	movs	r6, #0
 800a518:	42a6      	cmp	r6, r4
 800a51a:	d109      	bne.n	800a530 <__libc_init_array+0x24>
 800a51c:	4d0b      	ldr	r5, [pc, #44]	@ (800a54c <__libc_init_array+0x40>)
 800a51e:	4c0c      	ldr	r4, [pc, #48]	@ (800a550 <__libc_init_array+0x44>)
 800a520:	f003 fab0 	bl	800da84 <_init>
 800a524:	1b64      	subs	r4, r4, r5
 800a526:	10a4      	asrs	r4, r4, #2
 800a528:	2600      	movs	r6, #0
 800a52a:	42a6      	cmp	r6, r4
 800a52c:	d105      	bne.n	800a53a <__libc_init_array+0x2e>
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	f855 3b04 	ldr.w	r3, [r5], #4
 800a534:	4798      	blx	r3
 800a536:	3601      	adds	r6, #1
 800a538:	e7ee      	b.n	800a518 <__libc_init_array+0xc>
 800a53a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53e:	4798      	blx	r3
 800a540:	3601      	adds	r6, #1
 800a542:	e7f2      	b.n	800a52a <__libc_init_array+0x1e>
 800a544:	0800df30 	.word	0x0800df30
 800a548:	0800df30 	.word	0x0800df30
 800a54c:	0800df30 	.word	0x0800df30
 800a550:	0800df34 	.word	0x0800df34

0800a554 <__retarget_lock_init_recursive>:
 800a554:	4770      	bx	lr

0800a556 <__retarget_lock_acquire_recursive>:
 800a556:	4770      	bx	lr

0800a558 <__retarget_lock_release_recursive>:
 800a558:	4770      	bx	lr
	...

0800a55c <nanf>:
 800a55c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a564 <nanf+0x8>
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	7fc00000 	.word	0x7fc00000

0800a568 <quorem>:
 800a568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	6903      	ldr	r3, [r0, #16]
 800a56e:	690c      	ldr	r4, [r1, #16]
 800a570:	42a3      	cmp	r3, r4
 800a572:	4607      	mov	r7, r0
 800a574:	db7e      	blt.n	800a674 <quorem+0x10c>
 800a576:	3c01      	subs	r4, #1
 800a578:	f101 0814 	add.w	r8, r1, #20
 800a57c:	00a3      	lsls	r3, r4, #2
 800a57e:	f100 0514 	add.w	r5, r0, #20
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a58e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a592:	3301      	adds	r3, #1
 800a594:	429a      	cmp	r2, r3
 800a596:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a59a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a59e:	d32e      	bcc.n	800a5fe <quorem+0x96>
 800a5a0:	f04f 0a00 	mov.w	sl, #0
 800a5a4:	46c4      	mov	ip, r8
 800a5a6:	46ae      	mov	lr, r5
 800a5a8:	46d3      	mov	fp, sl
 800a5aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5ae:	b298      	uxth	r0, r3
 800a5b0:	fb06 a000 	mla	r0, r6, r0, sl
 800a5b4:	0c02      	lsrs	r2, r0, #16
 800a5b6:	0c1b      	lsrs	r3, r3, #16
 800a5b8:	fb06 2303 	mla	r3, r6, r3, r2
 800a5bc:	f8de 2000 	ldr.w	r2, [lr]
 800a5c0:	b280      	uxth	r0, r0
 800a5c2:	b292      	uxth	r2, r2
 800a5c4:	1a12      	subs	r2, r2, r0
 800a5c6:	445a      	add	r2, fp
 800a5c8:	f8de 0000 	ldr.w	r0, [lr]
 800a5cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a5da:	b292      	uxth	r2, r2
 800a5dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a5e0:	45e1      	cmp	r9, ip
 800a5e2:	f84e 2b04 	str.w	r2, [lr], #4
 800a5e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a5ea:	d2de      	bcs.n	800a5aa <quorem+0x42>
 800a5ec:	9b00      	ldr	r3, [sp, #0]
 800a5ee:	58eb      	ldr	r3, [r5, r3]
 800a5f0:	b92b      	cbnz	r3, 800a5fe <quorem+0x96>
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	3b04      	subs	r3, #4
 800a5f6:	429d      	cmp	r5, r3
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	d32f      	bcc.n	800a65c <quorem+0xf4>
 800a5fc:	613c      	str	r4, [r7, #16]
 800a5fe:	4638      	mov	r0, r7
 800a600:	f001 f954 	bl	800b8ac <__mcmp>
 800a604:	2800      	cmp	r0, #0
 800a606:	db25      	blt.n	800a654 <quorem+0xec>
 800a608:	4629      	mov	r1, r5
 800a60a:	2000      	movs	r0, #0
 800a60c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a610:	f8d1 c000 	ldr.w	ip, [r1]
 800a614:	fa1f fe82 	uxth.w	lr, r2
 800a618:	fa1f f38c 	uxth.w	r3, ip
 800a61c:	eba3 030e 	sub.w	r3, r3, lr
 800a620:	4403      	add	r3, r0
 800a622:	0c12      	lsrs	r2, r2, #16
 800a624:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a628:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a632:	45c1      	cmp	r9, r8
 800a634:	f841 3b04 	str.w	r3, [r1], #4
 800a638:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a63c:	d2e6      	bcs.n	800a60c <quorem+0xa4>
 800a63e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a646:	b922      	cbnz	r2, 800a652 <quorem+0xea>
 800a648:	3b04      	subs	r3, #4
 800a64a:	429d      	cmp	r5, r3
 800a64c:	461a      	mov	r2, r3
 800a64e:	d30b      	bcc.n	800a668 <quorem+0x100>
 800a650:	613c      	str	r4, [r7, #16]
 800a652:	3601      	adds	r6, #1
 800a654:	4630      	mov	r0, r6
 800a656:	b003      	add	sp, #12
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	6812      	ldr	r2, [r2, #0]
 800a65e:	3b04      	subs	r3, #4
 800a660:	2a00      	cmp	r2, #0
 800a662:	d1cb      	bne.n	800a5fc <quorem+0x94>
 800a664:	3c01      	subs	r4, #1
 800a666:	e7c6      	b.n	800a5f6 <quorem+0x8e>
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	3b04      	subs	r3, #4
 800a66c:	2a00      	cmp	r2, #0
 800a66e:	d1ef      	bne.n	800a650 <quorem+0xe8>
 800a670:	3c01      	subs	r4, #1
 800a672:	e7ea      	b.n	800a64a <quorem+0xe2>
 800a674:	2000      	movs	r0, #0
 800a676:	e7ee      	b.n	800a656 <quorem+0xee>

0800a678 <_dtoa_r>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	ed2d 8b02 	vpush	{d8}
 800a680:	69c7      	ldr	r7, [r0, #28]
 800a682:	b091      	sub	sp, #68	@ 0x44
 800a684:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a688:	ec55 4b10 	vmov	r4, r5, d0
 800a68c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a68e:	9107      	str	r1, [sp, #28]
 800a690:	4681      	mov	r9, r0
 800a692:	9209      	str	r2, [sp, #36]	@ 0x24
 800a694:	930d      	str	r3, [sp, #52]	@ 0x34
 800a696:	b97f      	cbnz	r7, 800a6b8 <_dtoa_r+0x40>
 800a698:	2010      	movs	r0, #16
 800a69a:	f000 fd8d 	bl	800b1b8 <malloc>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	f8c9 001c 	str.w	r0, [r9, #28]
 800a6a4:	b920      	cbnz	r0, 800a6b0 <_dtoa_r+0x38>
 800a6a6:	4ba0      	ldr	r3, [pc, #640]	@ (800a928 <_dtoa_r+0x2b0>)
 800a6a8:	21ef      	movs	r1, #239	@ 0xef
 800a6aa:	48a0      	ldr	r0, [pc, #640]	@ (800a92c <_dtoa_r+0x2b4>)
 800a6ac:	f002 fb74 	bl	800cd98 <__assert_func>
 800a6b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6b4:	6007      	str	r7, [r0, #0]
 800a6b6:	60c7      	str	r7, [r0, #12]
 800a6b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6bc:	6819      	ldr	r1, [r3, #0]
 800a6be:	b159      	cbz	r1, 800a6d8 <_dtoa_r+0x60>
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	604a      	str	r2, [r1, #4]
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	4093      	lsls	r3, r2
 800a6c8:	608b      	str	r3, [r1, #8]
 800a6ca:	4648      	mov	r0, r9
 800a6cc:	f000 fe6a 	bl	800b3a4 <_Bfree>
 800a6d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	1e2b      	subs	r3, r5, #0
 800a6da:	bfbb      	ittet	lt
 800a6dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a6e0:	9303      	strlt	r3, [sp, #12]
 800a6e2:	2300      	movge	r3, #0
 800a6e4:	2201      	movlt	r2, #1
 800a6e6:	bfac      	ite	ge
 800a6e8:	6033      	strge	r3, [r6, #0]
 800a6ea:	6032      	strlt	r2, [r6, #0]
 800a6ec:	4b90      	ldr	r3, [pc, #576]	@ (800a930 <_dtoa_r+0x2b8>)
 800a6ee:	9e03      	ldr	r6, [sp, #12]
 800a6f0:	43b3      	bics	r3, r6
 800a6f2:	d110      	bne.n	800a716 <_dtoa_r+0x9e>
 800a6f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a700:	4323      	orrs	r3, r4
 800a702:	f000 84de 	beq.w	800b0c2 <_dtoa_r+0xa4a>
 800a706:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a708:	4f8a      	ldr	r7, [pc, #552]	@ (800a934 <_dtoa_r+0x2bc>)
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 84e0 	beq.w	800b0d0 <_dtoa_r+0xa58>
 800a710:	1cfb      	adds	r3, r7, #3
 800a712:	f000 bcdb 	b.w	800b0cc <_dtoa_r+0xa54>
 800a716:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a71a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a722:	d10a      	bne.n	800a73a <_dtoa_r+0xc2>
 800a724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a726:	2301      	movs	r3, #1
 800a728:	6013      	str	r3, [r2, #0]
 800a72a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a72c:	b113      	cbz	r3, 800a734 <_dtoa_r+0xbc>
 800a72e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a730:	4b81      	ldr	r3, [pc, #516]	@ (800a938 <_dtoa_r+0x2c0>)
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	4f81      	ldr	r7, [pc, #516]	@ (800a93c <_dtoa_r+0x2c4>)
 800a736:	f000 bccb 	b.w	800b0d0 <_dtoa_r+0xa58>
 800a73a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a73c:	a90f      	add	r1, sp, #60	@ 0x3c
 800a73e:	4648      	mov	r0, r9
 800a740:	eeb0 0b48 	vmov.f64	d0, d8
 800a744:	f001 f9d2 	bl	800baec <__d2b>
 800a748:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a74c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a74e:	9001      	str	r0, [sp, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d045      	beq.n	800a7e0 <_dtoa_r+0x168>
 800a754:	eeb0 7b48 	vmov.f64	d7, d8
 800a758:	ee18 1a90 	vmov	r1, s17
 800a75c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a760:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a764:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a768:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a76c:	2500      	movs	r5, #0
 800a76e:	ee07 1a90 	vmov	s15, r1
 800a772:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a776:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a910 <_dtoa_r+0x298>
 800a77a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a77e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a918 <_dtoa_r+0x2a0>
 800a782:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a786:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a920 <_dtoa_r+0x2a8>
 800a78a:	ee07 3a90 	vmov	s15, r3
 800a78e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a792:	eeb0 7b46 	vmov.f64	d7, d6
 800a796:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a79a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a79e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a6:	ee16 8a90 	vmov	r8, s13
 800a7aa:	d508      	bpl.n	800a7be <_dtoa_r+0x146>
 800a7ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a7b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b8:	bf18      	it	ne
 800a7ba:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a7be:	f1b8 0f16 	cmp.w	r8, #22
 800a7c2:	d82b      	bhi.n	800a81c <_dtoa_r+0x1a4>
 800a7c4:	495e      	ldr	r1, [pc, #376]	@ (800a940 <_dtoa_r+0x2c8>)
 800a7c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a7ca:	ed91 7b00 	vldr	d7, [r1]
 800a7ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d6:	d501      	bpl.n	800a7dc <_dtoa_r+0x164>
 800a7d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7dc:	2100      	movs	r1, #0
 800a7de:	e01e      	b.n	800a81e <_dtoa_r+0x1a6>
 800a7e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a7e8:	2920      	cmp	r1, #32
 800a7ea:	bfc1      	itttt	gt
 800a7ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a7f0:	408e      	lslgt	r6, r1
 800a7f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a7f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a7fa:	bfd6      	itet	le
 800a7fc:	f1c1 0120 	rsble	r1, r1, #32
 800a800:	4331      	orrgt	r1, r6
 800a802:	fa04 f101 	lslle.w	r1, r4, r1
 800a806:	ee07 1a90 	vmov	s15, r1
 800a80a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a80e:	3b01      	subs	r3, #1
 800a810:	ee17 1a90 	vmov	r1, s15
 800a814:	2501      	movs	r5, #1
 800a816:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a81a:	e7a8      	b.n	800a76e <_dtoa_r+0xf6>
 800a81c:	2101      	movs	r1, #1
 800a81e:	1ad2      	subs	r2, r2, r3
 800a820:	1e53      	subs	r3, r2, #1
 800a822:	9306      	str	r3, [sp, #24]
 800a824:	bf45      	ittet	mi
 800a826:	f1c2 0301 	rsbmi	r3, r2, #1
 800a82a:	9305      	strmi	r3, [sp, #20]
 800a82c:	2300      	movpl	r3, #0
 800a82e:	2300      	movmi	r3, #0
 800a830:	bf4c      	ite	mi
 800a832:	9306      	strmi	r3, [sp, #24]
 800a834:	9305      	strpl	r3, [sp, #20]
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	910c      	str	r1, [sp, #48]	@ 0x30
 800a83c:	db18      	blt.n	800a870 <_dtoa_r+0x1f8>
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a844:	4443      	add	r3, r8
 800a846:	9306      	str	r3, [sp, #24]
 800a848:	2300      	movs	r3, #0
 800a84a:	9a07      	ldr	r2, [sp, #28]
 800a84c:	2a09      	cmp	r2, #9
 800a84e:	d849      	bhi.n	800a8e4 <_dtoa_r+0x26c>
 800a850:	2a05      	cmp	r2, #5
 800a852:	bfc4      	itt	gt
 800a854:	3a04      	subgt	r2, #4
 800a856:	9207      	strgt	r2, [sp, #28]
 800a858:	9a07      	ldr	r2, [sp, #28]
 800a85a:	f1a2 0202 	sub.w	r2, r2, #2
 800a85e:	bfcc      	ite	gt
 800a860:	2400      	movgt	r4, #0
 800a862:	2401      	movle	r4, #1
 800a864:	2a03      	cmp	r2, #3
 800a866:	d848      	bhi.n	800a8fa <_dtoa_r+0x282>
 800a868:	e8df f002 	tbb	[pc, r2]
 800a86c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a870:	9b05      	ldr	r3, [sp, #20]
 800a872:	2200      	movs	r2, #0
 800a874:	eba3 0308 	sub.w	r3, r3, r8
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a87c:	f1c8 0300 	rsb	r3, r8, #0
 800a880:	e7e3      	b.n	800a84a <_dtoa_r+0x1d2>
 800a882:	2200      	movs	r2, #0
 800a884:	9208      	str	r2, [sp, #32]
 800a886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a888:	2a00      	cmp	r2, #0
 800a88a:	dc39      	bgt.n	800a900 <_dtoa_r+0x288>
 800a88c:	f04f 0b01 	mov.w	fp, #1
 800a890:	46da      	mov	sl, fp
 800a892:	465a      	mov	r2, fp
 800a894:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a898:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a89c:	2100      	movs	r1, #0
 800a89e:	2004      	movs	r0, #4
 800a8a0:	f100 0614 	add.w	r6, r0, #20
 800a8a4:	4296      	cmp	r6, r2
 800a8a6:	d930      	bls.n	800a90a <_dtoa_r+0x292>
 800a8a8:	6079      	str	r1, [r7, #4]
 800a8aa:	4648      	mov	r0, r9
 800a8ac:	9304      	str	r3, [sp, #16]
 800a8ae:	f000 fd39 	bl	800b324 <_Balloc>
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	4607      	mov	r7, r0
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d146      	bne.n	800a948 <_dtoa_r+0x2d0>
 800a8ba:	4b22      	ldr	r3, [pc, #136]	@ (800a944 <_dtoa_r+0x2cc>)
 800a8bc:	4602      	mov	r2, r0
 800a8be:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8c2:	e6f2      	b.n	800a6aa <_dtoa_r+0x32>
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	e7dd      	b.n	800a884 <_dtoa_r+0x20c>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	9208      	str	r2, [sp, #32]
 800a8cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ce:	eb08 0b02 	add.w	fp, r8, r2
 800a8d2:	f10b 0a01 	add.w	sl, fp, #1
 800a8d6:	4652      	mov	r2, sl
 800a8d8:	2a01      	cmp	r2, #1
 800a8da:	bfb8      	it	lt
 800a8dc:	2201      	movlt	r2, #1
 800a8de:	e7db      	b.n	800a898 <_dtoa_r+0x220>
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	e7f2      	b.n	800a8ca <_dtoa_r+0x252>
 800a8e4:	2401      	movs	r4, #1
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a8ec:	f04f 3bff 	mov.w	fp, #4294967295
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	46da      	mov	sl, fp
 800a8f4:	2212      	movs	r2, #18
 800a8f6:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8f8:	e7ce      	b.n	800a898 <_dtoa_r+0x220>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	9208      	str	r2, [sp, #32]
 800a8fe:	e7f5      	b.n	800a8ec <_dtoa_r+0x274>
 800a900:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a904:	46da      	mov	sl, fp
 800a906:	465a      	mov	r2, fp
 800a908:	e7c6      	b.n	800a898 <_dtoa_r+0x220>
 800a90a:	3101      	adds	r1, #1
 800a90c:	0040      	lsls	r0, r0, #1
 800a90e:	e7c7      	b.n	800a8a0 <_dtoa_r+0x228>
 800a910:	636f4361 	.word	0x636f4361
 800a914:	3fd287a7 	.word	0x3fd287a7
 800a918:	8b60c8b3 	.word	0x8b60c8b3
 800a91c:	3fc68a28 	.word	0x3fc68a28
 800a920:	509f79fb 	.word	0x509f79fb
 800a924:	3fd34413 	.word	0x3fd34413
 800a928:	0800db42 	.word	0x0800db42
 800a92c:	0800db59 	.word	0x0800db59
 800a930:	7ff00000 	.word	0x7ff00000
 800a934:	0800db3e 	.word	0x0800db3e
 800a938:	0800db0d 	.word	0x0800db0d
 800a93c:	0800db0c 	.word	0x0800db0c
 800a940:	0800dc50 	.word	0x0800dc50
 800a944:	0800dbb1 	.word	0x0800dbb1
 800a948:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a94c:	f1ba 0f0e 	cmp.w	sl, #14
 800a950:	6010      	str	r0, [r2, #0]
 800a952:	d86f      	bhi.n	800aa34 <_dtoa_r+0x3bc>
 800a954:	2c00      	cmp	r4, #0
 800a956:	d06d      	beq.n	800aa34 <_dtoa_r+0x3bc>
 800a958:	f1b8 0f00 	cmp.w	r8, #0
 800a95c:	f340 80c2 	ble.w	800aae4 <_dtoa_r+0x46c>
 800a960:	4aca      	ldr	r2, [pc, #808]	@ (800ac8c <_dtoa_r+0x614>)
 800a962:	f008 010f 	and.w	r1, r8, #15
 800a966:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a96a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a96e:	ed92 7b00 	vldr	d7, [r2]
 800a972:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a976:	f000 80a9 	beq.w	800aacc <_dtoa_r+0x454>
 800a97a:	4ac5      	ldr	r2, [pc, #788]	@ (800ac90 <_dtoa_r+0x618>)
 800a97c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a980:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a984:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a988:	f001 010f 	and.w	r1, r1, #15
 800a98c:	2203      	movs	r2, #3
 800a98e:	48c0      	ldr	r0, [pc, #768]	@ (800ac90 <_dtoa_r+0x618>)
 800a990:	2900      	cmp	r1, #0
 800a992:	f040 809d 	bne.w	800aad0 <_dtoa_r+0x458>
 800a996:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a99a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a99e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a9a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9a8:	2900      	cmp	r1, #0
 800a9aa:	f000 80c1 	beq.w	800ab30 <_dtoa_r+0x4b8>
 800a9ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a9b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ba:	f140 80b9 	bpl.w	800ab30 <_dtoa_r+0x4b8>
 800a9be:	f1ba 0f00 	cmp.w	sl, #0
 800a9c2:	f000 80b5 	beq.w	800ab30 <_dtoa_r+0x4b8>
 800a9c6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ca:	dd31      	ble.n	800aa30 <_dtoa_r+0x3b8>
 800a9cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a9d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9d8:	f108 31ff 	add.w	r1, r8, #4294967295
 800a9dc:	9104      	str	r1, [sp, #16]
 800a9de:	3201      	adds	r2, #1
 800a9e0:	465c      	mov	r4, fp
 800a9e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a9e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a9ea:	ee07 2a90 	vmov	s15, r2
 800a9ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a9f6:	ee15 2a90 	vmov	r2, s11
 800a9fa:	ec51 0b15 	vmov	r0, r1, d5
 800a9fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aa02:	2c00      	cmp	r4, #0
 800aa04:	f040 8098 	bne.w	800ab38 <_dtoa_r+0x4c0>
 800aa08:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aa0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aa10:	ec41 0b17 	vmov	d7, r0, r1
 800aa14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1c:	f300 8261 	bgt.w	800aee2 <_dtoa_r+0x86a>
 800aa20:	eeb1 7b47 	vneg.f64	d7, d7
 800aa24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2c:	f100 80f5 	bmi.w	800ac1a <_dtoa_r+0x5a2>
 800aa30:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa36:	2a00      	cmp	r2, #0
 800aa38:	f2c0 812c 	blt.w	800ac94 <_dtoa_r+0x61c>
 800aa3c:	f1b8 0f0e 	cmp.w	r8, #14
 800aa40:	f300 8128 	bgt.w	800ac94 <_dtoa_r+0x61c>
 800aa44:	4b91      	ldr	r3, [pc, #580]	@ (800ac8c <_dtoa_r+0x614>)
 800aa46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa4a:	ed93 6b00 	vldr	d6, [r3]
 800aa4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	da03      	bge.n	800aa5c <_dtoa_r+0x3e4>
 800aa54:	f1ba 0f00 	cmp.w	sl, #0
 800aa58:	f340 80d2 	ble.w	800ac00 <_dtoa_r+0x588>
 800aa5c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800aa60:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa64:	463e      	mov	r6, r7
 800aa66:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aa6a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aa6e:	ee15 3a10 	vmov	r3, s10
 800aa72:	3330      	adds	r3, #48	@ 0x30
 800aa74:	f806 3b01 	strb.w	r3, [r6], #1
 800aa78:	1bf3      	subs	r3, r6, r7
 800aa7a:	459a      	cmp	sl, r3
 800aa7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aa80:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aa84:	f040 80f8 	bne.w	800ac78 <_dtoa_r+0x600>
 800aa88:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aa8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa94:	f300 80dd 	bgt.w	800ac52 <_dtoa_r+0x5da>
 800aa98:	eeb4 7b46 	vcmp.f64	d7, d6
 800aa9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa0:	d104      	bne.n	800aaac <_dtoa_r+0x434>
 800aaa2:	ee15 3a10 	vmov	r3, s10
 800aaa6:	07db      	lsls	r3, r3, #31
 800aaa8:	f100 80d3 	bmi.w	800ac52 <_dtoa_r+0x5da>
 800aaac:	9901      	ldr	r1, [sp, #4]
 800aaae:	4648      	mov	r0, r9
 800aab0:	f000 fc78 	bl	800b3a4 <_Bfree>
 800aab4:	2300      	movs	r3, #0
 800aab6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aab8:	7033      	strb	r3, [r6, #0]
 800aaba:	f108 0301 	add.w	r3, r8, #1
 800aabe:	6013      	str	r3, [r2, #0]
 800aac0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 8304 	beq.w	800b0d0 <_dtoa_r+0xa58>
 800aac8:	601e      	str	r6, [r3, #0]
 800aaca:	e301      	b.n	800b0d0 <_dtoa_r+0xa58>
 800aacc:	2202      	movs	r2, #2
 800aace:	e75e      	b.n	800a98e <_dtoa_r+0x316>
 800aad0:	07cc      	lsls	r4, r1, #31
 800aad2:	d504      	bpl.n	800aade <_dtoa_r+0x466>
 800aad4:	ed90 6b00 	vldr	d6, [r0]
 800aad8:	3201      	adds	r2, #1
 800aada:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aade:	1049      	asrs	r1, r1, #1
 800aae0:	3008      	adds	r0, #8
 800aae2:	e755      	b.n	800a990 <_dtoa_r+0x318>
 800aae4:	d022      	beq.n	800ab2c <_dtoa_r+0x4b4>
 800aae6:	f1c8 0100 	rsb	r1, r8, #0
 800aaea:	4a68      	ldr	r2, [pc, #416]	@ (800ac8c <_dtoa_r+0x614>)
 800aaec:	f001 000f 	and.w	r0, r1, #15
 800aaf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800aaf4:	ed92 7b00 	vldr	d7, [r2]
 800aaf8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800aafc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab00:	4863      	ldr	r0, [pc, #396]	@ (800ac90 <_dtoa_r+0x618>)
 800ab02:	1109      	asrs	r1, r1, #4
 800ab04:	2400      	movs	r4, #0
 800ab06:	2202      	movs	r2, #2
 800ab08:	b929      	cbnz	r1, 800ab16 <_dtoa_r+0x49e>
 800ab0a:	2c00      	cmp	r4, #0
 800ab0c:	f43f af49 	beq.w	800a9a2 <_dtoa_r+0x32a>
 800ab10:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab14:	e745      	b.n	800a9a2 <_dtoa_r+0x32a>
 800ab16:	07ce      	lsls	r6, r1, #31
 800ab18:	d505      	bpl.n	800ab26 <_dtoa_r+0x4ae>
 800ab1a:	ed90 6b00 	vldr	d6, [r0]
 800ab1e:	3201      	adds	r2, #1
 800ab20:	2401      	movs	r4, #1
 800ab22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab26:	1049      	asrs	r1, r1, #1
 800ab28:	3008      	adds	r0, #8
 800ab2a:	e7ed      	b.n	800ab08 <_dtoa_r+0x490>
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	e738      	b.n	800a9a2 <_dtoa_r+0x32a>
 800ab30:	f8cd 8010 	str.w	r8, [sp, #16]
 800ab34:	4654      	mov	r4, sl
 800ab36:	e754      	b.n	800a9e2 <_dtoa_r+0x36a>
 800ab38:	4a54      	ldr	r2, [pc, #336]	@ (800ac8c <_dtoa_r+0x614>)
 800ab3a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ab3e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ab42:	9a08      	ldr	r2, [sp, #32]
 800ab44:	ec41 0b17 	vmov	d7, r0, r1
 800ab48:	443c      	add	r4, r7
 800ab4a:	b34a      	cbz	r2, 800aba0 <_dtoa_r+0x528>
 800ab4c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ab50:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ab54:	463e      	mov	r6, r7
 800ab56:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ab5a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ab5e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ab62:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab66:	ee14 2a90 	vmov	r2, s9
 800ab6a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab6e:	3230      	adds	r2, #48	@ 0x30
 800ab70:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab7c:	f806 2b01 	strb.w	r2, [r6], #1
 800ab80:	d438      	bmi.n	800abf4 <_dtoa_r+0x57c>
 800ab82:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ab86:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ab8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8e:	d462      	bmi.n	800ac56 <_dtoa_r+0x5de>
 800ab90:	42a6      	cmp	r6, r4
 800ab92:	f43f af4d 	beq.w	800aa30 <_dtoa_r+0x3b8>
 800ab96:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ab9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab9e:	e7e0      	b.n	800ab62 <_dtoa_r+0x4ea>
 800aba0:	4621      	mov	r1, r4
 800aba2:	463e      	mov	r6, r7
 800aba4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aba8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800abac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800abb0:	ee14 2a90 	vmov	r2, s9
 800abb4:	3230      	adds	r2, #48	@ 0x30
 800abb6:	f806 2b01 	strb.w	r2, [r6], #1
 800abba:	42a6      	cmp	r6, r4
 800abbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800abc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800abc4:	d119      	bne.n	800abfa <_dtoa_r+0x582>
 800abc6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800abca:	ee37 4b05 	vadd.f64	d4, d7, d5
 800abce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800abd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd6:	dc3e      	bgt.n	800ac56 <_dtoa_r+0x5de>
 800abd8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800abdc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800abe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe4:	f57f af24 	bpl.w	800aa30 <_dtoa_r+0x3b8>
 800abe8:	460e      	mov	r6, r1
 800abea:	3901      	subs	r1, #1
 800abec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abf0:	2b30      	cmp	r3, #48	@ 0x30
 800abf2:	d0f9      	beq.n	800abe8 <_dtoa_r+0x570>
 800abf4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abf8:	e758      	b.n	800aaac <_dtoa_r+0x434>
 800abfa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800abfe:	e7d5      	b.n	800abac <_dtoa_r+0x534>
 800ac00:	d10b      	bne.n	800ac1a <_dtoa_r+0x5a2>
 800ac02:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ac06:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac16:	f2c0 8161 	blt.w	800aedc <_dtoa_r+0x864>
 800ac1a:	2400      	movs	r4, #0
 800ac1c:	4625      	mov	r5, r4
 800ac1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac20:	43db      	mvns	r3, r3
 800ac22:	9304      	str	r3, [sp, #16]
 800ac24:	463e      	mov	r6, r7
 800ac26:	f04f 0800 	mov.w	r8, #0
 800ac2a:	4621      	mov	r1, r4
 800ac2c:	4648      	mov	r0, r9
 800ac2e:	f000 fbb9 	bl	800b3a4 <_Bfree>
 800ac32:	2d00      	cmp	r5, #0
 800ac34:	d0de      	beq.n	800abf4 <_dtoa_r+0x57c>
 800ac36:	f1b8 0f00 	cmp.w	r8, #0
 800ac3a:	d005      	beq.n	800ac48 <_dtoa_r+0x5d0>
 800ac3c:	45a8      	cmp	r8, r5
 800ac3e:	d003      	beq.n	800ac48 <_dtoa_r+0x5d0>
 800ac40:	4641      	mov	r1, r8
 800ac42:	4648      	mov	r0, r9
 800ac44:	f000 fbae 	bl	800b3a4 <_Bfree>
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4648      	mov	r0, r9
 800ac4c:	f000 fbaa 	bl	800b3a4 <_Bfree>
 800ac50:	e7d0      	b.n	800abf4 <_dtoa_r+0x57c>
 800ac52:	f8cd 8010 	str.w	r8, [sp, #16]
 800ac56:	4633      	mov	r3, r6
 800ac58:	461e      	mov	r6, r3
 800ac5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac5e:	2a39      	cmp	r2, #57	@ 0x39
 800ac60:	d106      	bne.n	800ac70 <_dtoa_r+0x5f8>
 800ac62:	429f      	cmp	r7, r3
 800ac64:	d1f8      	bne.n	800ac58 <_dtoa_r+0x5e0>
 800ac66:	9a04      	ldr	r2, [sp, #16]
 800ac68:	3201      	adds	r2, #1
 800ac6a:	9204      	str	r2, [sp, #16]
 800ac6c:	2230      	movs	r2, #48	@ 0x30
 800ac6e:	703a      	strb	r2, [r7, #0]
 800ac70:	781a      	ldrb	r2, [r3, #0]
 800ac72:	3201      	adds	r2, #1
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	e7bd      	b.n	800abf4 <_dtoa_r+0x57c>
 800ac78:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac84:	f47f aeef 	bne.w	800aa66 <_dtoa_r+0x3ee>
 800ac88:	e710      	b.n	800aaac <_dtoa_r+0x434>
 800ac8a:	bf00      	nop
 800ac8c:	0800dc50 	.word	0x0800dc50
 800ac90:	0800dc28 	.word	0x0800dc28
 800ac94:	9908      	ldr	r1, [sp, #32]
 800ac96:	2900      	cmp	r1, #0
 800ac98:	f000 80e3 	beq.w	800ae62 <_dtoa_r+0x7ea>
 800ac9c:	9907      	ldr	r1, [sp, #28]
 800ac9e:	2901      	cmp	r1, #1
 800aca0:	f300 80c8 	bgt.w	800ae34 <_dtoa_r+0x7bc>
 800aca4:	2d00      	cmp	r5, #0
 800aca6:	f000 80c1 	beq.w	800ae2c <_dtoa_r+0x7b4>
 800acaa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800acae:	9e05      	ldr	r6, [sp, #20]
 800acb0:	461c      	mov	r4, r3
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	9b05      	ldr	r3, [sp, #20]
 800acb6:	4413      	add	r3, r2
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	9b06      	ldr	r3, [sp, #24]
 800acbc:	2101      	movs	r1, #1
 800acbe:	4413      	add	r3, r2
 800acc0:	4648      	mov	r0, r9
 800acc2:	9306      	str	r3, [sp, #24]
 800acc4:	f000 fc6c 	bl	800b5a0 <__i2b>
 800acc8:	9b04      	ldr	r3, [sp, #16]
 800acca:	4605      	mov	r5, r0
 800accc:	b166      	cbz	r6, 800ace8 <_dtoa_r+0x670>
 800acce:	9a06      	ldr	r2, [sp, #24]
 800acd0:	2a00      	cmp	r2, #0
 800acd2:	dd09      	ble.n	800ace8 <_dtoa_r+0x670>
 800acd4:	42b2      	cmp	r2, r6
 800acd6:	9905      	ldr	r1, [sp, #20]
 800acd8:	bfa8      	it	ge
 800acda:	4632      	movge	r2, r6
 800acdc:	1a89      	subs	r1, r1, r2
 800acde:	9105      	str	r1, [sp, #20]
 800ace0:	9906      	ldr	r1, [sp, #24]
 800ace2:	1ab6      	subs	r6, r6, r2
 800ace4:	1a8a      	subs	r2, r1, r2
 800ace6:	9206      	str	r2, [sp, #24]
 800ace8:	b1fb      	cbz	r3, 800ad2a <_dtoa_r+0x6b2>
 800acea:	9a08      	ldr	r2, [sp, #32]
 800acec:	2a00      	cmp	r2, #0
 800acee:	f000 80bc 	beq.w	800ae6a <_dtoa_r+0x7f2>
 800acf2:	b19c      	cbz	r4, 800ad1c <_dtoa_r+0x6a4>
 800acf4:	4629      	mov	r1, r5
 800acf6:	4622      	mov	r2, r4
 800acf8:	4648      	mov	r0, r9
 800acfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acfc:	f000 fd10 	bl	800b720 <__pow5mult>
 800ad00:	9a01      	ldr	r2, [sp, #4]
 800ad02:	4601      	mov	r1, r0
 800ad04:	4605      	mov	r5, r0
 800ad06:	4648      	mov	r0, r9
 800ad08:	f000 fc60 	bl	800b5cc <__multiply>
 800ad0c:	9901      	ldr	r1, [sp, #4]
 800ad0e:	9004      	str	r0, [sp, #16]
 800ad10:	4648      	mov	r0, r9
 800ad12:	f000 fb47 	bl	800b3a4 <_Bfree>
 800ad16:	9a04      	ldr	r2, [sp, #16]
 800ad18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad1a:	9201      	str	r2, [sp, #4]
 800ad1c:	1b1a      	subs	r2, r3, r4
 800ad1e:	d004      	beq.n	800ad2a <_dtoa_r+0x6b2>
 800ad20:	9901      	ldr	r1, [sp, #4]
 800ad22:	4648      	mov	r0, r9
 800ad24:	f000 fcfc 	bl	800b720 <__pow5mult>
 800ad28:	9001      	str	r0, [sp, #4]
 800ad2a:	2101      	movs	r1, #1
 800ad2c:	4648      	mov	r0, r9
 800ad2e:	f000 fc37 	bl	800b5a0 <__i2b>
 800ad32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad34:	4604      	mov	r4, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 81d0 	beq.w	800b0dc <_dtoa_r+0xa64>
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4601      	mov	r1, r0
 800ad40:	4648      	mov	r0, r9
 800ad42:	f000 fced 	bl	800b720 <__pow5mult>
 800ad46:	9b07      	ldr	r3, [sp, #28]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	f300 8095 	bgt.w	800ae7a <_dtoa_r+0x802>
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f040 808b 	bne.w	800ae6e <_dtoa_r+0x7f6>
 800ad58:	9b03      	ldr	r3, [sp, #12]
 800ad5a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ad5e:	2a00      	cmp	r2, #0
 800ad60:	f040 8087 	bne.w	800ae72 <_dtoa_r+0x7fa>
 800ad64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ad68:	0d12      	lsrs	r2, r2, #20
 800ad6a:	0512      	lsls	r2, r2, #20
 800ad6c:	2a00      	cmp	r2, #0
 800ad6e:	f000 8082 	beq.w	800ae76 <_dtoa_r+0x7fe>
 800ad72:	9b05      	ldr	r3, [sp, #20]
 800ad74:	3301      	adds	r3, #1
 800ad76:	9305      	str	r3, [sp, #20]
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	9306      	str	r3, [sp, #24]
 800ad7e:	2301      	movs	r3, #1
 800ad80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 81af 	beq.w	800b0e8 <_dtoa_r+0xa70>
 800ad8a:	6922      	ldr	r2, [r4, #16]
 800ad8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad90:	6910      	ldr	r0, [r2, #16]
 800ad92:	f000 fbb9 	bl	800b508 <__hi0bits>
 800ad96:	f1c0 0020 	rsb	r0, r0, #32
 800ad9a:	9b06      	ldr	r3, [sp, #24]
 800ad9c:	4418      	add	r0, r3
 800ad9e:	f010 001f 	ands.w	r0, r0, #31
 800ada2:	d076      	beq.n	800ae92 <_dtoa_r+0x81a>
 800ada4:	f1c0 0220 	rsb	r2, r0, #32
 800ada8:	2a04      	cmp	r2, #4
 800adaa:	dd69      	ble.n	800ae80 <_dtoa_r+0x808>
 800adac:	9b05      	ldr	r3, [sp, #20]
 800adae:	f1c0 001c 	rsb	r0, r0, #28
 800adb2:	4403      	add	r3, r0
 800adb4:	9305      	str	r3, [sp, #20]
 800adb6:	9b06      	ldr	r3, [sp, #24]
 800adb8:	4406      	add	r6, r0
 800adba:	4403      	add	r3, r0
 800adbc:	9306      	str	r3, [sp, #24]
 800adbe:	9b05      	ldr	r3, [sp, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dd05      	ble.n	800add0 <_dtoa_r+0x758>
 800adc4:	9901      	ldr	r1, [sp, #4]
 800adc6:	461a      	mov	r2, r3
 800adc8:	4648      	mov	r0, r9
 800adca:	f000 fd03 	bl	800b7d4 <__lshift>
 800adce:	9001      	str	r0, [sp, #4]
 800add0:	9b06      	ldr	r3, [sp, #24]
 800add2:	2b00      	cmp	r3, #0
 800add4:	dd05      	ble.n	800ade2 <_dtoa_r+0x76a>
 800add6:	4621      	mov	r1, r4
 800add8:	461a      	mov	r2, r3
 800adda:	4648      	mov	r0, r9
 800addc:	f000 fcfa 	bl	800b7d4 <__lshift>
 800ade0:	4604      	mov	r4, r0
 800ade2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d056      	beq.n	800ae96 <_dtoa_r+0x81e>
 800ade8:	9801      	ldr	r0, [sp, #4]
 800adea:	4621      	mov	r1, r4
 800adec:	f000 fd5e 	bl	800b8ac <__mcmp>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	da50      	bge.n	800ae96 <_dtoa_r+0x81e>
 800adf4:	f108 33ff 	add.w	r3, r8, #4294967295
 800adf8:	9304      	str	r3, [sp, #16]
 800adfa:	9901      	ldr	r1, [sp, #4]
 800adfc:	2300      	movs	r3, #0
 800adfe:	220a      	movs	r2, #10
 800ae00:	4648      	mov	r0, r9
 800ae02:	f000 faf1 	bl	800b3e8 <__multadd>
 800ae06:	9b08      	ldr	r3, [sp, #32]
 800ae08:	9001      	str	r0, [sp, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 816e 	beq.w	800b0ec <_dtoa_r+0xa74>
 800ae10:	4629      	mov	r1, r5
 800ae12:	2300      	movs	r3, #0
 800ae14:	220a      	movs	r2, #10
 800ae16:	4648      	mov	r0, r9
 800ae18:	f000 fae6 	bl	800b3e8 <__multadd>
 800ae1c:	f1bb 0f00 	cmp.w	fp, #0
 800ae20:	4605      	mov	r5, r0
 800ae22:	dc64      	bgt.n	800aeee <_dtoa_r+0x876>
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	dc3e      	bgt.n	800aea8 <_dtoa_r+0x830>
 800ae2a:	e060      	b.n	800aeee <_dtoa_r+0x876>
 800ae2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ae32:	e73c      	b.n	800acae <_dtoa_r+0x636>
 800ae34:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	bfbf      	itttt	lt
 800ae3c:	1ae2      	sublt	r2, r4, r3
 800ae3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ae40:	189b      	addlt	r3, r3, r2
 800ae42:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ae44:	bfae      	itee	ge
 800ae46:	1b1c      	subge	r4, r3, r4
 800ae48:	4623      	movlt	r3, r4
 800ae4a:	2400      	movlt	r4, #0
 800ae4c:	f1ba 0f00 	cmp.w	sl, #0
 800ae50:	bfb5      	itete	lt
 800ae52:	9a05      	ldrlt	r2, [sp, #20]
 800ae54:	9e05      	ldrge	r6, [sp, #20]
 800ae56:	eba2 060a 	sublt.w	r6, r2, sl
 800ae5a:	4652      	movge	r2, sl
 800ae5c:	bfb8      	it	lt
 800ae5e:	2200      	movlt	r2, #0
 800ae60:	e727      	b.n	800acb2 <_dtoa_r+0x63a>
 800ae62:	9e05      	ldr	r6, [sp, #20]
 800ae64:	9d08      	ldr	r5, [sp, #32]
 800ae66:	461c      	mov	r4, r3
 800ae68:	e730      	b.n	800accc <_dtoa_r+0x654>
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	e758      	b.n	800ad20 <_dtoa_r+0x6a8>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e786      	b.n	800ad80 <_dtoa_r+0x708>
 800ae72:	9b02      	ldr	r3, [sp, #8]
 800ae74:	e784      	b.n	800ad80 <_dtoa_r+0x708>
 800ae76:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae78:	e783      	b.n	800ad82 <_dtoa_r+0x70a>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae7e:	e784      	b.n	800ad8a <_dtoa_r+0x712>
 800ae80:	d09d      	beq.n	800adbe <_dtoa_r+0x746>
 800ae82:	9b05      	ldr	r3, [sp, #20]
 800ae84:	321c      	adds	r2, #28
 800ae86:	4413      	add	r3, r2
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	9b06      	ldr	r3, [sp, #24]
 800ae8c:	4416      	add	r6, r2
 800ae8e:	4413      	add	r3, r2
 800ae90:	e794      	b.n	800adbc <_dtoa_r+0x744>
 800ae92:	4602      	mov	r2, r0
 800ae94:	e7f5      	b.n	800ae82 <_dtoa_r+0x80a>
 800ae96:	f1ba 0f00 	cmp.w	sl, #0
 800ae9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae9e:	46d3      	mov	fp, sl
 800aea0:	dc21      	bgt.n	800aee6 <_dtoa_r+0x86e>
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	dd1e      	ble.n	800aee6 <_dtoa_r+0x86e>
 800aea8:	f1bb 0f00 	cmp.w	fp, #0
 800aeac:	f47f aeb7 	bne.w	800ac1e <_dtoa_r+0x5a6>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	465b      	mov	r3, fp
 800aeb4:	2205      	movs	r2, #5
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	f000 fa96 	bl	800b3e8 <__multadd>
 800aebc:	4601      	mov	r1, r0
 800aebe:	4604      	mov	r4, r0
 800aec0:	9801      	ldr	r0, [sp, #4]
 800aec2:	f000 fcf3 	bl	800b8ac <__mcmp>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f77f aea9 	ble.w	800ac1e <_dtoa_r+0x5a6>
 800aecc:	463e      	mov	r6, r7
 800aece:	2331      	movs	r3, #49	@ 0x31
 800aed0:	f806 3b01 	strb.w	r3, [r6], #1
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	3301      	adds	r3, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	e6a4      	b.n	800ac26 <_dtoa_r+0x5ae>
 800aedc:	f8cd 8010 	str.w	r8, [sp, #16]
 800aee0:	4654      	mov	r4, sl
 800aee2:	4625      	mov	r5, r4
 800aee4:	e7f2      	b.n	800aecc <_dtoa_r+0x854>
 800aee6:	9b08      	ldr	r3, [sp, #32]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 8103 	beq.w	800b0f4 <_dtoa_r+0xa7c>
 800aeee:	2e00      	cmp	r6, #0
 800aef0:	dd05      	ble.n	800aefe <_dtoa_r+0x886>
 800aef2:	4629      	mov	r1, r5
 800aef4:	4632      	mov	r2, r6
 800aef6:	4648      	mov	r0, r9
 800aef8:	f000 fc6c 	bl	800b7d4 <__lshift>
 800aefc:	4605      	mov	r5, r0
 800aefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	d058      	beq.n	800afb6 <_dtoa_r+0x93e>
 800af04:	6869      	ldr	r1, [r5, #4]
 800af06:	4648      	mov	r0, r9
 800af08:	f000 fa0c 	bl	800b324 <_Balloc>
 800af0c:	4606      	mov	r6, r0
 800af0e:	b928      	cbnz	r0, 800af1c <_dtoa_r+0x8a4>
 800af10:	4b82      	ldr	r3, [pc, #520]	@ (800b11c <_dtoa_r+0xaa4>)
 800af12:	4602      	mov	r2, r0
 800af14:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af18:	f7ff bbc7 	b.w	800a6aa <_dtoa_r+0x32>
 800af1c:	692a      	ldr	r2, [r5, #16]
 800af1e:	3202      	adds	r2, #2
 800af20:	0092      	lsls	r2, r2, #2
 800af22:	f105 010c 	add.w	r1, r5, #12
 800af26:	300c      	adds	r0, #12
 800af28:	f001 ff1e 	bl	800cd68 <memcpy>
 800af2c:	2201      	movs	r2, #1
 800af2e:	4631      	mov	r1, r6
 800af30:	4648      	mov	r0, r9
 800af32:	f000 fc4f 	bl	800b7d4 <__lshift>
 800af36:	1c7b      	adds	r3, r7, #1
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	eb07 030b 	add.w	r3, r7, fp
 800af3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af40:	9b02      	ldr	r3, [sp, #8]
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	46a8      	mov	r8, r5
 800af48:	9308      	str	r3, [sp, #32]
 800af4a:	4605      	mov	r5, r0
 800af4c:	9b05      	ldr	r3, [sp, #20]
 800af4e:	9801      	ldr	r0, [sp, #4]
 800af50:	4621      	mov	r1, r4
 800af52:	f103 3bff 	add.w	fp, r3, #4294967295
 800af56:	f7ff fb07 	bl	800a568 <quorem>
 800af5a:	4641      	mov	r1, r8
 800af5c:	9002      	str	r0, [sp, #8]
 800af5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800af62:	9801      	ldr	r0, [sp, #4]
 800af64:	f000 fca2 	bl	800b8ac <__mcmp>
 800af68:	462a      	mov	r2, r5
 800af6a:	9006      	str	r0, [sp, #24]
 800af6c:	4621      	mov	r1, r4
 800af6e:	4648      	mov	r0, r9
 800af70:	f000 fcb8 	bl	800b8e4 <__mdiff>
 800af74:	68c2      	ldr	r2, [r0, #12]
 800af76:	4606      	mov	r6, r0
 800af78:	b9fa      	cbnz	r2, 800afba <_dtoa_r+0x942>
 800af7a:	4601      	mov	r1, r0
 800af7c:	9801      	ldr	r0, [sp, #4]
 800af7e:	f000 fc95 	bl	800b8ac <__mcmp>
 800af82:	4602      	mov	r2, r0
 800af84:	4631      	mov	r1, r6
 800af86:	4648      	mov	r0, r9
 800af88:	920a      	str	r2, [sp, #40]	@ 0x28
 800af8a:	f000 fa0b 	bl	800b3a4 <_Bfree>
 800af8e:	9b07      	ldr	r3, [sp, #28]
 800af90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af92:	9e05      	ldr	r6, [sp, #20]
 800af94:	ea43 0102 	orr.w	r1, r3, r2
 800af98:	9b08      	ldr	r3, [sp, #32]
 800af9a:	4319      	orrs	r1, r3
 800af9c:	d10f      	bne.n	800afbe <_dtoa_r+0x946>
 800af9e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800afa2:	d028      	beq.n	800aff6 <_dtoa_r+0x97e>
 800afa4:	9b06      	ldr	r3, [sp, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dd02      	ble.n	800afb0 <_dtoa_r+0x938>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800afb0:	f88b a000 	strb.w	sl, [fp]
 800afb4:	e639      	b.n	800ac2a <_dtoa_r+0x5b2>
 800afb6:	4628      	mov	r0, r5
 800afb8:	e7bd      	b.n	800af36 <_dtoa_r+0x8be>
 800afba:	2201      	movs	r2, #1
 800afbc:	e7e2      	b.n	800af84 <_dtoa_r+0x90c>
 800afbe:	9b06      	ldr	r3, [sp, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	db04      	blt.n	800afce <_dtoa_r+0x956>
 800afc4:	9907      	ldr	r1, [sp, #28]
 800afc6:	430b      	orrs	r3, r1
 800afc8:	9908      	ldr	r1, [sp, #32]
 800afca:	430b      	orrs	r3, r1
 800afcc:	d120      	bne.n	800b010 <_dtoa_r+0x998>
 800afce:	2a00      	cmp	r2, #0
 800afd0:	ddee      	ble.n	800afb0 <_dtoa_r+0x938>
 800afd2:	9901      	ldr	r1, [sp, #4]
 800afd4:	2201      	movs	r2, #1
 800afd6:	4648      	mov	r0, r9
 800afd8:	f000 fbfc 	bl	800b7d4 <__lshift>
 800afdc:	4621      	mov	r1, r4
 800afde:	9001      	str	r0, [sp, #4]
 800afe0:	f000 fc64 	bl	800b8ac <__mcmp>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	dc03      	bgt.n	800aff0 <_dtoa_r+0x978>
 800afe8:	d1e2      	bne.n	800afb0 <_dtoa_r+0x938>
 800afea:	f01a 0f01 	tst.w	sl, #1
 800afee:	d0df      	beq.n	800afb0 <_dtoa_r+0x938>
 800aff0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800aff4:	d1d9      	bne.n	800afaa <_dtoa_r+0x932>
 800aff6:	2339      	movs	r3, #57	@ 0x39
 800aff8:	f88b 3000 	strb.w	r3, [fp]
 800affc:	4633      	mov	r3, r6
 800affe:	461e      	mov	r6, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b006:	2a39      	cmp	r2, #57	@ 0x39
 800b008:	d053      	beq.n	800b0b2 <_dtoa_r+0xa3a>
 800b00a:	3201      	adds	r2, #1
 800b00c:	701a      	strb	r2, [r3, #0]
 800b00e:	e60c      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b010:	2a00      	cmp	r2, #0
 800b012:	dd07      	ble.n	800b024 <_dtoa_r+0x9ac>
 800b014:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b018:	d0ed      	beq.n	800aff6 <_dtoa_r+0x97e>
 800b01a:	f10a 0301 	add.w	r3, sl, #1
 800b01e:	f88b 3000 	strb.w	r3, [fp]
 800b022:	e602      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b024:	9b05      	ldr	r3, [sp, #20]
 800b026:	9a05      	ldr	r2, [sp, #20]
 800b028:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02e:	4293      	cmp	r3, r2
 800b030:	d029      	beq.n	800b086 <_dtoa_r+0xa0e>
 800b032:	9901      	ldr	r1, [sp, #4]
 800b034:	2300      	movs	r3, #0
 800b036:	220a      	movs	r2, #10
 800b038:	4648      	mov	r0, r9
 800b03a:	f000 f9d5 	bl	800b3e8 <__multadd>
 800b03e:	45a8      	cmp	r8, r5
 800b040:	9001      	str	r0, [sp, #4]
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	f04f 020a 	mov.w	r2, #10
 800b04a:	4641      	mov	r1, r8
 800b04c:	4648      	mov	r0, r9
 800b04e:	d107      	bne.n	800b060 <_dtoa_r+0x9e8>
 800b050:	f000 f9ca 	bl	800b3e8 <__multadd>
 800b054:	4680      	mov	r8, r0
 800b056:	4605      	mov	r5, r0
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	3301      	adds	r3, #1
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	e775      	b.n	800af4c <_dtoa_r+0x8d4>
 800b060:	f000 f9c2 	bl	800b3e8 <__multadd>
 800b064:	4629      	mov	r1, r5
 800b066:	4680      	mov	r8, r0
 800b068:	2300      	movs	r3, #0
 800b06a:	220a      	movs	r2, #10
 800b06c:	4648      	mov	r0, r9
 800b06e:	f000 f9bb 	bl	800b3e8 <__multadd>
 800b072:	4605      	mov	r5, r0
 800b074:	e7f0      	b.n	800b058 <_dtoa_r+0x9e0>
 800b076:	f1bb 0f00 	cmp.w	fp, #0
 800b07a:	bfcc      	ite	gt
 800b07c:	465e      	movgt	r6, fp
 800b07e:	2601      	movle	r6, #1
 800b080:	443e      	add	r6, r7
 800b082:	f04f 0800 	mov.w	r8, #0
 800b086:	9901      	ldr	r1, [sp, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	4648      	mov	r0, r9
 800b08c:	f000 fba2 	bl	800b7d4 <__lshift>
 800b090:	4621      	mov	r1, r4
 800b092:	9001      	str	r0, [sp, #4]
 800b094:	f000 fc0a 	bl	800b8ac <__mcmp>
 800b098:	2800      	cmp	r0, #0
 800b09a:	dcaf      	bgt.n	800affc <_dtoa_r+0x984>
 800b09c:	d102      	bne.n	800b0a4 <_dtoa_r+0xa2c>
 800b09e:	f01a 0f01 	tst.w	sl, #1
 800b0a2:	d1ab      	bne.n	800affc <_dtoa_r+0x984>
 800b0a4:	4633      	mov	r3, r6
 800b0a6:	461e      	mov	r6, r3
 800b0a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0ac:	2a30      	cmp	r2, #48	@ 0x30
 800b0ae:	d0fa      	beq.n	800b0a6 <_dtoa_r+0xa2e>
 800b0b0:	e5bb      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b0b2:	429f      	cmp	r7, r3
 800b0b4:	d1a3      	bne.n	800affe <_dtoa_r+0x986>
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	2331      	movs	r3, #49	@ 0x31
 800b0be:	703b      	strb	r3, [r7, #0]
 800b0c0:	e5b3      	b.n	800ac2a <_dtoa_r+0x5b2>
 800b0c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0c4:	4f16      	ldr	r7, [pc, #88]	@ (800b120 <_dtoa_r+0xaa8>)
 800b0c6:	b11b      	cbz	r3, 800b0d0 <_dtoa_r+0xa58>
 800b0c8:	f107 0308 	add.w	r3, r7, #8
 800b0cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	b011      	add	sp, #68	@ 0x44
 800b0d4:	ecbd 8b02 	vpop	{d8}
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	9b07      	ldr	r3, [sp, #28]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	f77f ae36 	ble.w	800ad50 <_dtoa_r+0x6d8>
 800b0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	e656      	b.n	800ad9a <_dtoa_r+0x722>
 800b0ec:	f1bb 0f00 	cmp.w	fp, #0
 800b0f0:	f77f aed7 	ble.w	800aea2 <_dtoa_r+0x82a>
 800b0f4:	463e      	mov	r6, r7
 800b0f6:	9801      	ldr	r0, [sp, #4]
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	f7ff fa35 	bl	800a568 <quorem>
 800b0fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b102:	f806 ab01 	strb.w	sl, [r6], #1
 800b106:	1bf2      	subs	r2, r6, r7
 800b108:	4593      	cmp	fp, r2
 800b10a:	ddb4      	ble.n	800b076 <_dtoa_r+0x9fe>
 800b10c:	9901      	ldr	r1, [sp, #4]
 800b10e:	2300      	movs	r3, #0
 800b110:	220a      	movs	r2, #10
 800b112:	4648      	mov	r0, r9
 800b114:	f000 f968 	bl	800b3e8 <__multadd>
 800b118:	9001      	str	r0, [sp, #4]
 800b11a:	e7ec      	b.n	800b0f6 <_dtoa_r+0xa7e>
 800b11c:	0800dbb1 	.word	0x0800dbb1
 800b120:	0800db35 	.word	0x0800db35

0800b124 <_free_r>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4605      	mov	r5, r0
 800b128:	2900      	cmp	r1, #0
 800b12a:	d041      	beq.n	800b1b0 <_free_r+0x8c>
 800b12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b130:	1f0c      	subs	r4, r1, #4
 800b132:	2b00      	cmp	r3, #0
 800b134:	bfb8      	it	lt
 800b136:	18e4      	addlt	r4, r4, r3
 800b138:	f000 f8e8 	bl	800b30c <__malloc_lock>
 800b13c:	4a1d      	ldr	r2, [pc, #116]	@ (800b1b4 <_free_r+0x90>)
 800b13e:	6813      	ldr	r3, [r2, #0]
 800b140:	b933      	cbnz	r3, 800b150 <_free_r+0x2c>
 800b142:	6063      	str	r3, [r4, #4]
 800b144:	6014      	str	r4, [r2, #0]
 800b146:	4628      	mov	r0, r5
 800b148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b14c:	f000 b8e4 	b.w	800b318 <__malloc_unlock>
 800b150:	42a3      	cmp	r3, r4
 800b152:	d908      	bls.n	800b166 <_free_r+0x42>
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	1821      	adds	r1, r4, r0
 800b158:	428b      	cmp	r3, r1
 800b15a:	bf01      	itttt	eq
 800b15c:	6819      	ldreq	r1, [r3, #0]
 800b15e:	685b      	ldreq	r3, [r3, #4]
 800b160:	1809      	addeq	r1, r1, r0
 800b162:	6021      	streq	r1, [r4, #0]
 800b164:	e7ed      	b.n	800b142 <_free_r+0x1e>
 800b166:	461a      	mov	r2, r3
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	b10b      	cbz	r3, 800b170 <_free_r+0x4c>
 800b16c:	42a3      	cmp	r3, r4
 800b16e:	d9fa      	bls.n	800b166 <_free_r+0x42>
 800b170:	6811      	ldr	r1, [r2, #0]
 800b172:	1850      	adds	r0, r2, r1
 800b174:	42a0      	cmp	r0, r4
 800b176:	d10b      	bne.n	800b190 <_free_r+0x6c>
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	4401      	add	r1, r0
 800b17c:	1850      	adds	r0, r2, r1
 800b17e:	4283      	cmp	r3, r0
 800b180:	6011      	str	r1, [r2, #0]
 800b182:	d1e0      	bne.n	800b146 <_free_r+0x22>
 800b184:	6818      	ldr	r0, [r3, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	6053      	str	r3, [r2, #4]
 800b18a:	4408      	add	r0, r1
 800b18c:	6010      	str	r0, [r2, #0]
 800b18e:	e7da      	b.n	800b146 <_free_r+0x22>
 800b190:	d902      	bls.n	800b198 <_free_r+0x74>
 800b192:	230c      	movs	r3, #12
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	e7d6      	b.n	800b146 <_free_r+0x22>
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	1821      	adds	r1, r4, r0
 800b19c:	428b      	cmp	r3, r1
 800b19e:	bf04      	itt	eq
 800b1a0:	6819      	ldreq	r1, [r3, #0]
 800b1a2:	685b      	ldreq	r3, [r3, #4]
 800b1a4:	6063      	str	r3, [r4, #4]
 800b1a6:	bf04      	itt	eq
 800b1a8:	1809      	addeq	r1, r1, r0
 800b1aa:	6021      	streq	r1, [r4, #0]
 800b1ac:	6054      	str	r4, [r2, #4]
 800b1ae:	e7ca      	b.n	800b146 <_free_r+0x22>
 800b1b0:	bd38      	pop	{r3, r4, r5, pc}
 800b1b2:	bf00      	nop
 800b1b4:	24000458 	.word	0x24000458

0800b1b8 <malloc>:
 800b1b8:	4b02      	ldr	r3, [pc, #8]	@ (800b1c4 <malloc+0xc>)
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	f000 b825 	b.w	800b20c <_malloc_r>
 800b1c2:	bf00      	nop
 800b1c4:	2400001c 	.word	0x2400001c

0800b1c8 <sbrk_aligned>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	4e0f      	ldr	r6, [pc, #60]	@ (800b208 <sbrk_aligned+0x40>)
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	6831      	ldr	r1, [r6, #0]
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	b911      	cbnz	r1, 800b1da <sbrk_aligned+0x12>
 800b1d4:	f001 fdb8 	bl	800cd48 <_sbrk_r>
 800b1d8:	6030      	str	r0, [r6, #0]
 800b1da:	4621      	mov	r1, r4
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f001 fdb3 	bl	800cd48 <_sbrk_r>
 800b1e2:	1c43      	adds	r3, r0, #1
 800b1e4:	d103      	bne.n	800b1ee <sbrk_aligned+0x26>
 800b1e6:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	bd70      	pop	{r4, r5, r6, pc}
 800b1ee:	1cc4      	adds	r4, r0, #3
 800b1f0:	f024 0403 	bic.w	r4, r4, #3
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	d0f8      	beq.n	800b1ea <sbrk_aligned+0x22>
 800b1f8:	1a21      	subs	r1, r4, r0
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f001 fda4 	bl	800cd48 <_sbrk_r>
 800b200:	3001      	adds	r0, #1
 800b202:	d1f2      	bne.n	800b1ea <sbrk_aligned+0x22>
 800b204:	e7ef      	b.n	800b1e6 <sbrk_aligned+0x1e>
 800b206:	bf00      	nop
 800b208:	24000454 	.word	0x24000454

0800b20c <_malloc_r>:
 800b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b210:	1ccd      	adds	r5, r1, #3
 800b212:	f025 0503 	bic.w	r5, r5, #3
 800b216:	3508      	adds	r5, #8
 800b218:	2d0c      	cmp	r5, #12
 800b21a:	bf38      	it	cc
 800b21c:	250c      	movcc	r5, #12
 800b21e:	2d00      	cmp	r5, #0
 800b220:	4606      	mov	r6, r0
 800b222:	db01      	blt.n	800b228 <_malloc_r+0x1c>
 800b224:	42a9      	cmp	r1, r5
 800b226:	d904      	bls.n	800b232 <_malloc_r+0x26>
 800b228:	230c      	movs	r3, #12
 800b22a:	6033      	str	r3, [r6, #0]
 800b22c:	2000      	movs	r0, #0
 800b22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b308 <_malloc_r+0xfc>
 800b236:	f000 f869 	bl	800b30c <__malloc_lock>
 800b23a:	f8d8 3000 	ldr.w	r3, [r8]
 800b23e:	461c      	mov	r4, r3
 800b240:	bb44      	cbnz	r4, 800b294 <_malloc_r+0x88>
 800b242:	4629      	mov	r1, r5
 800b244:	4630      	mov	r0, r6
 800b246:	f7ff ffbf 	bl	800b1c8 <sbrk_aligned>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	4604      	mov	r4, r0
 800b24e:	d158      	bne.n	800b302 <_malloc_r+0xf6>
 800b250:	f8d8 4000 	ldr.w	r4, [r8]
 800b254:	4627      	mov	r7, r4
 800b256:	2f00      	cmp	r7, #0
 800b258:	d143      	bne.n	800b2e2 <_malloc_r+0xd6>
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d04b      	beq.n	800b2f6 <_malloc_r+0xea>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	4639      	mov	r1, r7
 800b262:	4630      	mov	r0, r6
 800b264:	eb04 0903 	add.w	r9, r4, r3
 800b268:	f001 fd6e 	bl	800cd48 <_sbrk_r>
 800b26c:	4581      	cmp	r9, r0
 800b26e:	d142      	bne.n	800b2f6 <_malloc_r+0xea>
 800b270:	6821      	ldr	r1, [r4, #0]
 800b272:	1a6d      	subs	r5, r5, r1
 800b274:	4629      	mov	r1, r5
 800b276:	4630      	mov	r0, r6
 800b278:	f7ff ffa6 	bl	800b1c8 <sbrk_aligned>
 800b27c:	3001      	adds	r0, #1
 800b27e:	d03a      	beq.n	800b2f6 <_malloc_r+0xea>
 800b280:	6823      	ldr	r3, [r4, #0]
 800b282:	442b      	add	r3, r5
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	f8d8 3000 	ldr.w	r3, [r8]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	bb62      	cbnz	r2, 800b2e8 <_malloc_r+0xdc>
 800b28e:	f8c8 7000 	str.w	r7, [r8]
 800b292:	e00f      	b.n	800b2b4 <_malloc_r+0xa8>
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	1b52      	subs	r2, r2, r5
 800b298:	d420      	bmi.n	800b2dc <_malloc_r+0xd0>
 800b29a:	2a0b      	cmp	r2, #11
 800b29c:	d917      	bls.n	800b2ce <_malloc_r+0xc2>
 800b29e:	1961      	adds	r1, r4, r5
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	6025      	str	r5, [r4, #0]
 800b2a4:	bf18      	it	ne
 800b2a6:	6059      	strne	r1, [r3, #4]
 800b2a8:	6863      	ldr	r3, [r4, #4]
 800b2aa:	bf08      	it	eq
 800b2ac:	f8c8 1000 	streq.w	r1, [r8]
 800b2b0:	5162      	str	r2, [r4, r5]
 800b2b2:	604b      	str	r3, [r1, #4]
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 f82f 	bl	800b318 <__malloc_unlock>
 800b2ba:	f104 000b 	add.w	r0, r4, #11
 800b2be:	1d23      	adds	r3, r4, #4
 800b2c0:	f020 0007 	bic.w	r0, r0, #7
 800b2c4:	1ac2      	subs	r2, r0, r3
 800b2c6:	bf1c      	itt	ne
 800b2c8:	1a1b      	subne	r3, r3, r0
 800b2ca:	50a3      	strne	r3, [r4, r2]
 800b2cc:	e7af      	b.n	800b22e <_malloc_r+0x22>
 800b2ce:	6862      	ldr	r2, [r4, #4]
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	bf0c      	ite	eq
 800b2d4:	f8c8 2000 	streq.w	r2, [r8]
 800b2d8:	605a      	strne	r2, [r3, #4]
 800b2da:	e7eb      	b.n	800b2b4 <_malloc_r+0xa8>
 800b2dc:	4623      	mov	r3, r4
 800b2de:	6864      	ldr	r4, [r4, #4]
 800b2e0:	e7ae      	b.n	800b240 <_malloc_r+0x34>
 800b2e2:	463c      	mov	r4, r7
 800b2e4:	687f      	ldr	r7, [r7, #4]
 800b2e6:	e7b6      	b.n	800b256 <_malloc_r+0x4a>
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	d1fb      	bne.n	800b2e8 <_malloc_r+0xdc>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	6053      	str	r3, [r2, #4]
 800b2f4:	e7de      	b.n	800b2b4 <_malloc_r+0xa8>
 800b2f6:	230c      	movs	r3, #12
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f000 f80c 	bl	800b318 <__malloc_unlock>
 800b300:	e794      	b.n	800b22c <_malloc_r+0x20>
 800b302:	6005      	str	r5, [r0, #0]
 800b304:	e7d6      	b.n	800b2b4 <_malloc_r+0xa8>
 800b306:	bf00      	nop
 800b308:	24000458 	.word	0x24000458

0800b30c <__malloc_lock>:
 800b30c:	4801      	ldr	r0, [pc, #4]	@ (800b314 <__malloc_lock+0x8>)
 800b30e:	f7ff b922 	b.w	800a556 <__retarget_lock_acquire_recursive>
 800b312:	bf00      	nop
 800b314:	24000450 	.word	0x24000450

0800b318 <__malloc_unlock>:
 800b318:	4801      	ldr	r0, [pc, #4]	@ (800b320 <__malloc_unlock+0x8>)
 800b31a:	f7ff b91d 	b.w	800a558 <__retarget_lock_release_recursive>
 800b31e:	bf00      	nop
 800b320:	24000450 	.word	0x24000450

0800b324 <_Balloc>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	69c6      	ldr	r6, [r0, #28]
 800b328:	4604      	mov	r4, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	b976      	cbnz	r6, 800b34c <_Balloc+0x28>
 800b32e:	2010      	movs	r0, #16
 800b330:	f7ff ff42 	bl	800b1b8 <malloc>
 800b334:	4602      	mov	r2, r0
 800b336:	61e0      	str	r0, [r4, #28]
 800b338:	b920      	cbnz	r0, 800b344 <_Balloc+0x20>
 800b33a:	4b18      	ldr	r3, [pc, #96]	@ (800b39c <_Balloc+0x78>)
 800b33c:	4818      	ldr	r0, [pc, #96]	@ (800b3a0 <_Balloc+0x7c>)
 800b33e:	216b      	movs	r1, #107	@ 0x6b
 800b340:	f001 fd2a 	bl	800cd98 <__assert_func>
 800b344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b348:	6006      	str	r6, [r0, #0]
 800b34a:	60c6      	str	r6, [r0, #12]
 800b34c:	69e6      	ldr	r6, [r4, #28]
 800b34e:	68f3      	ldr	r3, [r6, #12]
 800b350:	b183      	cbz	r3, 800b374 <_Balloc+0x50>
 800b352:	69e3      	ldr	r3, [r4, #28]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b35a:	b9b8      	cbnz	r0, 800b38c <_Balloc+0x68>
 800b35c:	2101      	movs	r1, #1
 800b35e:	fa01 f605 	lsl.w	r6, r1, r5
 800b362:	1d72      	adds	r2, r6, #5
 800b364:	0092      	lsls	r2, r2, #2
 800b366:	4620      	mov	r0, r4
 800b368:	f001 fd34 	bl	800cdd4 <_calloc_r>
 800b36c:	b160      	cbz	r0, 800b388 <_Balloc+0x64>
 800b36e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b372:	e00e      	b.n	800b392 <_Balloc+0x6e>
 800b374:	2221      	movs	r2, #33	@ 0x21
 800b376:	2104      	movs	r1, #4
 800b378:	4620      	mov	r0, r4
 800b37a:	f001 fd2b 	bl	800cdd4 <_calloc_r>
 800b37e:	69e3      	ldr	r3, [r4, #28]
 800b380:	60f0      	str	r0, [r6, #12]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1e4      	bne.n	800b352 <_Balloc+0x2e>
 800b388:	2000      	movs	r0, #0
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	6802      	ldr	r2, [r0, #0]
 800b38e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b392:	2300      	movs	r3, #0
 800b394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b398:	e7f7      	b.n	800b38a <_Balloc+0x66>
 800b39a:	bf00      	nop
 800b39c:	0800db42 	.word	0x0800db42
 800b3a0:	0800dbc2 	.word	0x0800dbc2

0800b3a4 <_Bfree>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	69c6      	ldr	r6, [r0, #28]
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	b976      	cbnz	r6, 800b3cc <_Bfree+0x28>
 800b3ae:	2010      	movs	r0, #16
 800b3b0:	f7ff ff02 	bl	800b1b8 <malloc>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	61e8      	str	r0, [r5, #28]
 800b3b8:	b920      	cbnz	r0, 800b3c4 <_Bfree+0x20>
 800b3ba:	4b09      	ldr	r3, [pc, #36]	@ (800b3e0 <_Bfree+0x3c>)
 800b3bc:	4809      	ldr	r0, [pc, #36]	@ (800b3e4 <_Bfree+0x40>)
 800b3be:	218f      	movs	r1, #143	@ 0x8f
 800b3c0:	f001 fcea 	bl	800cd98 <__assert_func>
 800b3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3c8:	6006      	str	r6, [r0, #0]
 800b3ca:	60c6      	str	r6, [r0, #12]
 800b3cc:	b13c      	cbz	r4, 800b3de <_Bfree+0x3a>
 800b3ce:	69eb      	ldr	r3, [r5, #28]
 800b3d0:	6862      	ldr	r2, [r4, #4]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3d8:	6021      	str	r1, [r4, #0]
 800b3da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	0800db42 	.word	0x0800db42
 800b3e4:	0800dbc2 	.word	0x0800dbc2

0800b3e8 <__multadd>:
 800b3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ec:	690d      	ldr	r5, [r1, #16]
 800b3ee:	4607      	mov	r7, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	461e      	mov	r6, r3
 800b3f4:	f101 0c14 	add.w	ip, r1, #20
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	f8dc 3000 	ldr.w	r3, [ip]
 800b3fe:	b299      	uxth	r1, r3
 800b400:	fb02 6101 	mla	r1, r2, r1, r6
 800b404:	0c1e      	lsrs	r6, r3, #16
 800b406:	0c0b      	lsrs	r3, r1, #16
 800b408:	fb02 3306 	mla	r3, r2, r6, r3
 800b40c:	b289      	uxth	r1, r1
 800b40e:	3001      	adds	r0, #1
 800b410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b414:	4285      	cmp	r5, r0
 800b416:	f84c 1b04 	str.w	r1, [ip], #4
 800b41a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b41e:	dcec      	bgt.n	800b3fa <__multadd+0x12>
 800b420:	b30e      	cbz	r6, 800b466 <__multadd+0x7e>
 800b422:	68a3      	ldr	r3, [r4, #8]
 800b424:	42ab      	cmp	r3, r5
 800b426:	dc19      	bgt.n	800b45c <__multadd+0x74>
 800b428:	6861      	ldr	r1, [r4, #4]
 800b42a:	4638      	mov	r0, r7
 800b42c:	3101      	adds	r1, #1
 800b42e:	f7ff ff79 	bl	800b324 <_Balloc>
 800b432:	4680      	mov	r8, r0
 800b434:	b928      	cbnz	r0, 800b442 <__multadd+0x5a>
 800b436:	4602      	mov	r2, r0
 800b438:	4b0c      	ldr	r3, [pc, #48]	@ (800b46c <__multadd+0x84>)
 800b43a:	480d      	ldr	r0, [pc, #52]	@ (800b470 <__multadd+0x88>)
 800b43c:	21ba      	movs	r1, #186	@ 0xba
 800b43e:	f001 fcab 	bl	800cd98 <__assert_func>
 800b442:	6922      	ldr	r2, [r4, #16]
 800b444:	3202      	adds	r2, #2
 800b446:	f104 010c 	add.w	r1, r4, #12
 800b44a:	0092      	lsls	r2, r2, #2
 800b44c:	300c      	adds	r0, #12
 800b44e:	f001 fc8b 	bl	800cd68 <memcpy>
 800b452:	4621      	mov	r1, r4
 800b454:	4638      	mov	r0, r7
 800b456:	f7ff ffa5 	bl	800b3a4 <_Bfree>
 800b45a:	4644      	mov	r4, r8
 800b45c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b460:	3501      	adds	r5, #1
 800b462:	615e      	str	r6, [r3, #20]
 800b464:	6125      	str	r5, [r4, #16]
 800b466:	4620      	mov	r0, r4
 800b468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b46c:	0800dbb1 	.word	0x0800dbb1
 800b470:	0800dbc2 	.word	0x0800dbc2

0800b474 <__s2b>:
 800b474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b478:	460c      	mov	r4, r1
 800b47a:	4615      	mov	r5, r2
 800b47c:	461f      	mov	r7, r3
 800b47e:	2209      	movs	r2, #9
 800b480:	3308      	adds	r3, #8
 800b482:	4606      	mov	r6, r0
 800b484:	fb93 f3f2 	sdiv	r3, r3, r2
 800b488:	2100      	movs	r1, #0
 800b48a:	2201      	movs	r2, #1
 800b48c:	429a      	cmp	r2, r3
 800b48e:	db09      	blt.n	800b4a4 <__s2b+0x30>
 800b490:	4630      	mov	r0, r6
 800b492:	f7ff ff47 	bl	800b324 <_Balloc>
 800b496:	b940      	cbnz	r0, 800b4aa <__s2b+0x36>
 800b498:	4602      	mov	r2, r0
 800b49a:	4b19      	ldr	r3, [pc, #100]	@ (800b500 <__s2b+0x8c>)
 800b49c:	4819      	ldr	r0, [pc, #100]	@ (800b504 <__s2b+0x90>)
 800b49e:	21d3      	movs	r1, #211	@ 0xd3
 800b4a0:	f001 fc7a 	bl	800cd98 <__assert_func>
 800b4a4:	0052      	lsls	r2, r2, #1
 800b4a6:	3101      	adds	r1, #1
 800b4a8:	e7f0      	b.n	800b48c <__s2b+0x18>
 800b4aa:	9b08      	ldr	r3, [sp, #32]
 800b4ac:	6143      	str	r3, [r0, #20]
 800b4ae:	2d09      	cmp	r5, #9
 800b4b0:	f04f 0301 	mov.w	r3, #1
 800b4b4:	6103      	str	r3, [r0, #16]
 800b4b6:	dd16      	ble.n	800b4e6 <__s2b+0x72>
 800b4b8:	f104 0909 	add.w	r9, r4, #9
 800b4bc:	46c8      	mov	r8, r9
 800b4be:	442c      	add	r4, r5
 800b4c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	3b30      	subs	r3, #48	@ 0x30
 800b4c8:	220a      	movs	r2, #10
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7ff ff8c 	bl	800b3e8 <__multadd>
 800b4d0:	45a0      	cmp	r8, r4
 800b4d2:	d1f5      	bne.n	800b4c0 <__s2b+0x4c>
 800b4d4:	f1a5 0408 	sub.w	r4, r5, #8
 800b4d8:	444c      	add	r4, r9
 800b4da:	1b2d      	subs	r5, r5, r4
 800b4dc:	1963      	adds	r3, r4, r5
 800b4de:	42bb      	cmp	r3, r7
 800b4e0:	db04      	blt.n	800b4ec <__s2b+0x78>
 800b4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e6:	340a      	adds	r4, #10
 800b4e8:	2509      	movs	r5, #9
 800b4ea:	e7f6      	b.n	800b4da <__s2b+0x66>
 800b4ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4f0:	4601      	mov	r1, r0
 800b4f2:	3b30      	subs	r3, #48	@ 0x30
 800b4f4:	220a      	movs	r2, #10
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	f7ff ff76 	bl	800b3e8 <__multadd>
 800b4fc:	e7ee      	b.n	800b4dc <__s2b+0x68>
 800b4fe:	bf00      	nop
 800b500:	0800dbb1 	.word	0x0800dbb1
 800b504:	0800dbc2 	.word	0x0800dbc2

0800b508 <__hi0bits>:
 800b508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b50c:	4603      	mov	r3, r0
 800b50e:	bf36      	itet	cc
 800b510:	0403      	lslcc	r3, r0, #16
 800b512:	2000      	movcs	r0, #0
 800b514:	2010      	movcc	r0, #16
 800b516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b51a:	bf3c      	itt	cc
 800b51c:	021b      	lslcc	r3, r3, #8
 800b51e:	3008      	addcc	r0, #8
 800b520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b524:	bf3c      	itt	cc
 800b526:	011b      	lslcc	r3, r3, #4
 800b528:	3004      	addcc	r0, #4
 800b52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b52e:	bf3c      	itt	cc
 800b530:	009b      	lslcc	r3, r3, #2
 800b532:	3002      	addcc	r0, #2
 800b534:	2b00      	cmp	r3, #0
 800b536:	db05      	blt.n	800b544 <__hi0bits+0x3c>
 800b538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b53c:	f100 0001 	add.w	r0, r0, #1
 800b540:	bf08      	it	eq
 800b542:	2020      	moveq	r0, #32
 800b544:	4770      	bx	lr

0800b546 <__lo0bits>:
 800b546:	6803      	ldr	r3, [r0, #0]
 800b548:	4602      	mov	r2, r0
 800b54a:	f013 0007 	ands.w	r0, r3, #7
 800b54e:	d00b      	beq.n	800b568 <__lo0bits+0x22>
 800b550:	07d9      	lsls	r1, r3, #31
 800b552:	d421      	bmi.n	800b598 <__lo0bits+0x52>
 800b554:	0798      	lsls	r0, r3, #30
 800b556:	bf49      	itett	mi
 800b558:	085b      	lsrmi	r3, r3, #1
 800b55a:	089b      	lsrpl	r3, r3, #2
 800b55c:	2001      	movmi	r0, #1
 800b55e:	6013      	strmi	r3, [r2, #0]
 800b560:	bf5c      	itt	pl
 800b562:	6013      	strpl	r3, [r2, #0]
 800b564:	2002      	movpl	r0, #2
 800b566:	4770      	bx	lr
 800b568:	b299      	uxth	r1, r3
 800b56a:	b909      	cbnz	r1, 800b570 <__lo0bits+0x2a>
 800b56c:	0c1b      	lsrs	r3, r3, #16
 800b56e:	2010      	movs	r0, #16
 800b570:	b2d9      	uxtb	r1, r3
 800b572:	b909      	cbnz	r1, 800b578 <__lo0bits+0x32>
 800b574:	3008      	adds	r0, #8
 800b576:	0a1b      	lsrs	r3, r3, #8
 800b578:	0719      	lsls	r1, r3, #28
 800b57a:	bf04      	itt	eq
 800b57c:	091b      	lsreq	r3, r3, #4
 800b57e:	3004      	addeq	r0, #4
 800b580:	0799      	lsls	r1, r3, #30
 800b582:	bf04      	itt	eq
 800b584:	089b      	lsreq	r3, r3, #2
 800b586:	3002      	addeq	r0, #2
 800b588:	07d9      	lsls	r1, r3, #31
 800b58a:	d403      	bmi.n	800b594 <__lo0bits+0x4e>
 800b58c:	085b      	lsrs	r3, r3, #1
 800b58e:	f100 0001 	add.w	r0, r0, #1
 800b592:	d003      	beq.n	800b59c <__lo0bits+0x56>
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	4770      	bx	lr
 800b598:	2000      	movs	r0, #0
 800b59a:	4770      	bx	lr
 800b59c:	2020      	movs	r0, #32
 800b59e:	4770      	bx	lr

0800b5a0 <__i2b>:
 800b5a0:	b510      	push	{r4, lr}
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	f7ff febd 	bl	800b324 <_Balloc>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	b928      	cbnz	r0, 800b5ba <__i2b+0x1a>
 800b5ae:	4b05      	ldr	r3, [pc, #20]	@ (800b5c4 <__i2b+0x24>)
 800b5b0:	4805      	ldr	r0, [pc, #20]	@ (800b5c8 <__i2b+0x28>)
 800b5b2:	f240 1145 	movw	r1, #325	@ 0x145
 800b5b6:	f001 fbef 	bl	800cd98 <__assert_func>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	6144      	str	r4, [r0, #20]
 800b5be:	6103      	str	r3, [r0, #16]
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	bf00      	nop
 800b5c4:	0800dbb1 	.word	0x0800dbb1
 800b5c8:	0800dbc2 	.word	0x0800dbc2

0800b5cc <__multiply>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	4614      	mov	r4, r2
 800b5d2:	690a      	ldr	r2, [r1, #16]
 800b5d4:	6923      	ldr	r3, [r4, #16]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	bfa8      	it	ge
 800b5da:	4623      	movge	r3, r4
 800b5dc:	460f      	mov	r7, r1
 800b5de:	bfa4      	itt	ge
 800b5e0:	460c      	movge	r4, r1
 800b5e2:	461f      	movge	r7, r3
 800b5e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b5e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b5ec:	68a3      	ldr	r3, [r4, #8]
 800b5ee:	6861      	ldr	r1, [r4, #4]
 800b5f0:	eb0a 0609 	add.w	r6, sl, r9
 800b5f4:	42b3      	cmp	r3, r6
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	bfb8      	it	lt
 800b5fa:	3101      	addlt	r1, #1
 800b5fc:	f7ff fe92 	bl	800b324 <_Balloc>
 800b600:	b930      	cbnz	r0, 800b610 <__multiply+0x44>
 800b602:	4602      	mov	r2, r0
 800b604:	4b44      	ldr	r3, [pc, #272]	@ (800b718 <__multiply+0x14c>)
 800b606:	4845      	ldr	r0, [pc, #276]	@ (800b71c <__multiply+0x150>)
 800b608:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b60c:	f001 fbc4 	bl	800cd98 <__assert_func>
 800b610:	f100 0514 	add.w	r5, r0, #20
 800b614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b618:	462b      	mov	r3, r5
 800b61a:	2200      	movs	r2, #0
 800b61c:	4543      	cmp	r3, r8
 800b61e:	d321      	bcc.n	800b664 <__multiply+0x98>
 800b620:	f107 0114 	add.w	r1, r7, #20
 800b624:	f104 0214 	add.w	r2, r4, #20
 800b628:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b62c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b630:	9302      	str	r3, [sp, #8]
 800b632:	1b13      	subs	r3, r2, r4
 800b634:	3b15      	subs	r3, #21
 800b636:	f023 0303 	bic.w	r3, r3, #3
 800b63a:	3304      	adds	r3, #4
 800b63c:	f104 0715 	add.w	r7, r4, #21
 800b640:	42ba      	cmp	r2, r7
 800b642:	bf38      	it	cc
 800b644:	2304      	movcc	r3, #4
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	9b02      	ldr	r3, [sp, #8]
 800b64a:	9103      	str	r1, [sp, #12]
 800b64c:	428b      	cmp	r3, r1
 800b64e:	d80c      	bhi.n	800b66a <__multiply+0x9e>
 800b650:	2e00      	cmp	r6, #0
 800b652:	dd03      	ble.n	800b65c <__multiply+0x90>
 800b654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d05b      	beq.n	800b714 <__multiply+0x148>
 800b65c:	6106      	str	r6, [r0, #16]
 800b65e:	b005      	add	sp, #20
 800b660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b664:	f843 2b04 	str.w	r2, [r3], #4
 800b668:	e7d8      	b.n	800b61c <__multiply+0x50>
 800b66a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b66e:	f1ba 0f00 	cmp.w	sl, #0
 800b672:	d024      	beq.n	800b6be <__multiply+0xf2>
 800b674:	f104 0e14 	add.w	lr, r4, #20
 800b678:	46a9      	mov	r9, r5
 800b67a:	f04f 0c00 	mov.w	ip, #0
 800b67e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b682:	f8d9 3000 	ldr.w	r3, [r9]
 800b686:	fa1f fb87 	uxth.w	fp, r7
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b690:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b694:	f8d9 7000 	ldr.w	r7, [r9]
 800b698:	4463      	add	r3, ip
 800b69a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b69e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b6a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b6ac:	4572      	cmp	r2, lr
 800b6ae:	f849 3b04 	str.w	r3, [r9], #4
 800b6b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b6b6:	d8e2      	bhi.n	800b67e <__multiply+0xb2>
 800b6b8:	9b01      	ldr	r3, [sp, #4]
 800b6ba:	f845 c003 	str.w	ip, [r5, r3]
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b6c4:	3104      	adds	r1, #4
 800b6c6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ca:	d021      	beq.n	800b710 <__multiply+0x144>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	f104 0c14 	add.w	ip, r4, #20
 800b6d2:	46ae      	mov	lr, r5
 800b6d4:	f04f 0a00 	mov.w	sl, #0
 800b6d8:	f8bc b000 	ldrh.w	fp, [ip]
 800b6dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b6e0:	fb09 770b 	mla	r7, r9, fp, r7
 800b6e4:	4457      	add	r7, sl
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b6ec:	f84e 3b04 	str.w	r3, [lr], #4
 800b6f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6f8:	f8be 3000 	ldrh.w	r3, [lr]
 800b6fc:	fb09 330a 	mla	r3, r9, sl, r3
 800b700:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b704:	4562      	cmp	r2, ip
 800b706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b70a:	d8e5      	bhi.n	800b6d8 <__multiply+0x10c>
 800b70c:	9f01      	ldr	r7, [sp, #4]
 800b70e:	51eb      	str	r3, [r5, r7]
 800b710:	3504      	adds	r5, #4
 800b712:	e799      	b.n	800b648 <__multiply+0x7c>
 800b714:	3e01      	subs	r6, #1
 800b716:	e79b      	b.n	800b650 <__multiply+0x84>
 800b718:	0800dbb1 	.word	0x0800dbb1
 800b71c:	0800dbc2 	.word	0x0800dbc2

0800b720 <__pow5mult>:
 800b720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b724:	4615      	mov	r5, r2
 800b726:	f012 0203 	ands.w	r2, r2, #3
 800b72a:	4607      	mov	r7, r0
 800b72c:	460e      	mov	r6, r1
 800b72e:	d007      	beq.n	800b740 <__pow5mult+0x20>
 800b730:	4c25      	ldr	r4, [pc, #148]	@ (800b7c8 <__pow5mult+0xa8>)
 800b732:	3a01      	subs	r2, #1
 800b734:	2300      	movs	r3, #0
 800b736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b73a:	f7ff fe55 	bl	800b3e8 <__multadd>
 800b73e:	4606      	mov	r6, r0
 800b740:	10ad      	asrs	r5, r5, #2
 800b742:	d03d      	beq.n	800b7c0 <__pow5mult+0xa0>
 800b744:	69fc      	ldr	r4, [r7, #28]
 800b746:	b97c      	cbnz	r4, 800b768 <__pow5mult+0x48>
 800b748:	2010      	movs	r0, #16
 800b74a:	f7ff fd35 	bl	800b1b8 <malloc>
 800b74e:	4602      	mov	r2, r0
 800b750:	61f8      	str	r0, [r7, #28]
 800b752:	b928      	cbnz	r0, 800b760 <__pow5mult+0x40>
 800b754:	4b1d      	ldr	r3, [pc, #116]	@ (800b7cc <__pow5mult+0xac>)
 800b756:	481e      	ldr	r0, [pc, #120]	@ (800b7d0 <__pow5mult+0xb0>)
 800b758:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b75c:	f001 fb1c 	bl	800cd98 <__assert_func>
 800b760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b764:	6004      	str	r4, [r0, #0]
 800b766:	60c4      	str	r4, [r0, #12]
 800b768:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b770:	b94c      	cbnz	r4, 800b786 <__pow5mult+0x66>
 800b772:	f240 2171 	movw	r1, #625	@ 0x271
 800b776:	4638      	mov	r0, r7
 800b778:	f7ff ff12 	bl	800b5a0 <__i2b>
 800b77c:	2300      	movs	r3, #0
 800b77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b782:	4604      	mov	r4, r0
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	f04f 0900 	mov.w	r9, #0
 800b78a:	07eb      	lsls	r3, r5, #31
 800b78c:	d50a      	bpl.n	800b7a4 <__pow5mult+0x84>
 800b78e:	4631      	mov	r1, r6
 800b790:	4622      	mov	r2, r4
 800b792:	4638      	mov	r0, r7
 800b794:	f7ff ff1a 	bl	800b5cc <__multiply>
 800b798:	4631      	mov	r1, r6
 800b79a:	4680      	mov	r8, r0
 800b79c:	4638      	mov	r0, r7
 800b79e:	f7ff fe01 	bl	800b3a4 <_Bfree>
 800b7a2:	4646      	mov	r6, r8
 800b7a4:	106d      	asrs	r5, r5, #1
 800b7a6:	d00b      	beq.n	800b7c0 <__pow5mult+0xa0>
 800b7a8:	6820      	ldr	r0, [r4, #0]
 800b7aa:	b938      	cbnz	r0, 800b7bc <__pow5mult+0x9c>
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	4621      	mov	r1, r4
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f7ff ff0b 	bl	800b5cc <__multiply>
 800b7b6:	6020      	str	r0, [r4, #0]
 800b7b8:	f8c0 9000 	str.w	r9, [r0]
 800b7bc:	4604      	mov	r4, r0
 800b7be:	e7e4      	b.n	800b78a <__pow5mult+0x6a>
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0800dc1c 	.word	0x0800dc1c
 800b7cc:	0800db42 	.word	0x0800db42
 800b7d0:	0800dbc2 	.word	0x0800dbc2

0800b7d4 <__lshift>:
 800b7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d8:	460c      	mov	r4, r1
 800b7da:	6849      	ldr	r1, [r1, #4]
 800b7dc:	6923      	ldr	r3, [r4, #16]
 800b7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	4691      	mov	r9, r2
 800b7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7ec:	f108 0601 	add.w	r6, r8, #1
 800b7f0:	42b3      	cmp	r3, r6
 800b7f2:	db0b      	blt.n	800b80c <__lshift+0x38>
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f7ff fd95 	bl	800b324 <_Balloc>
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	b948      	cbnz	r0, 800b812 <__lshift+0x3e>
 800b7fe:	4602      	mov	r2, r0
 800b800:	4b28      	ldr	r3, [pc, #160]	@ (800b8a4 <__lshift+0xd0>)
 800b802:	4829      	ldr	r0, [pc, #164]	@ (800b8a8 <__lshift+0xd4>)
 800b804:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b808:	f001 fac6 	bl	800cd98 <__assert_func>
 800b80c:	3101      	adds	r1, #1
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	e7ee      	b.n	800b7f0 <__lshift+0x1c>
 800b812:	2300      	movs	r3, #0
 800b814:	f100 0114 	add.w	r1, r0, #20
 800b818:	f100 0210 	add.w	r2, r0, #16
 800b81c:	4618      	mov	r0, r3
 800b81e:	4553      	cmp	r3, sl
 800b820:	db33      	blt.n	800b88a <__lshift+0xb6>
 800b822:	6920      	ldr	r0, [r4, #16]
 800b824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b828:	f104 0314 	add.w	r3, r4, #20
 800b82c:	f019 091f 	ands.w	r9, r9, #31
 800b830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b838:	d02b      	beq.n	800b892 <__lshift+0xbe>
 800b83a:	f1c9 0e20 	rsb	lr, r9, #32
 800b83e:	468a      	mov	sl, r1
 800b840:	2200      	movs	r2, #0
 800b842:	6818      	ldr	r0, [r3, #0]
 800b844:	fa00 f009 	lsl.w	r0, r0, r9
 800b848:	4310      	orrs	r0, r2
 800b84a:	f84a 0b04 	str.w	r0, [sl], #4
 800b84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b852:	459c      	cmp	ip, r3
 800b854:	fa22 f20e 	lsr.w	r2, r2, lr
 800b858:	d8f3      	bhi.n	800b842 <__lshift+0x6e>
 800b85a:	ebac 0304 	sub.w	r3, ip, r4
 800b85e:	3b15      	subs	r3, #21
 800b860:	f023 0303 	bic.w	r3, r3, #3
 800b864:	3304      	adds	r3, #4
 800b866:	f104 0015 	add.w	r0, r4, #21
 800b86a:	4584      	cmp	ip, r0
 800b86c:	bf38      	it	cc
 800b86e:	2304      	movcc	r3, #4
 800b870:	50ca      	str	r2, [r1, r3]
 800b872:	b10a      	cbz	r2, 800b878 <__lshift+0xa4>
 800b874:	f108 0602 	add.w	r6, r8, #2
 800b878:	3e01      	subs	r6, #1
 800b87a:	4638      	mov	r0, r7
 800b87c:	612e      	str	r6, [r5, #16]
 800b87e:	4621      	mov	r1, r4
 800b880:	f7ff fd90 	bl	800b3a4 <_Bfree>
 800b884:	4628      	mov	r0, r5
 800b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b88e:	3301      	adds	r3, #1
 800b890:	e7c5      	b.n	800b81e <__lshift+0x4a>
 800b892:	3904      	subs	r1, #4
 800b894:	f853 2b04 	ldr.w	r2, [r3], #4
 800b898:	f841 2f04 	str.w	r2, [r1, #4]!
 800b89c:	459c      	cmp	ip, r3
 800b89e:	d8f9      	bhi.n	800b894 <__lshift+0xc0>
 800b8a0:	e7ea      	b.n	800b878 <__lshift+0xa4>
 800b8a2:	bf00      	nop
 800b8a4:	0800dbb1 	.word	0x0800dbb1
 800b8a8:	0800dbc2 	.word	0x0800dbc2

0800b8ac <__mcmp>:
 800b8ac:	690a      	ldr	r2, [r1, #16]
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	6900      	ldr	r0, [r0, #16]
 800b8b2:	1a80      	subs	r0, r0, r2
 800b8b4:	b530      	push	{r4, r5, lr}
 800b8b6:	d10e      	bne.n	800b8d6 <__mcmp+0x2a>
 800b8b8:	3314      	adds	r3, #20
 800b8ba:	3114      	adds	r1, #20
 800b8bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b8c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b8c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8cc:	4295      	cmp	r5, r2
 800b8ce:	d003      	beq.n	800b8d8 <__mcmp+0x2c>
 800b8d0:	d205      	bcs.n	800b8de <__mcmp+0x32>
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d6:	bd30      	pop	{r4, r5, pc}
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	d3f3      	bcc.n	800b8c4 <__mcmp+0x18>
 800b8dc:	e7fb      	b.n	800b8d6 <__mcmp+0x2a>
 800b8de:	2001      	movs	r0, #1
 800b8e0:	e7f9      	b.n	800b8d6 <__mcmp+0x2a>
	...

0800b8e4 <__mdiff>:
 800b8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	4689      	mov	r9, r1
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	4648      	mov	r0, r9
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	f7ff ffdb 	bl	800b8ac <__mcmp>
 800b8f6:	1e05      	subs	r5, r0, #0
 800b8f8:	d112      	bne.n	800b920 <__mdiff+0x3c>
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fd11 	bl	800b324 <_Balloc>
 800b902:	4602      	mov	r2, r0
 800b904:	b928      	cbnz	r0, 800b912 <__mdiff+0x2e>
 800b906:	4b3f      	ldr	r3, [pc, #252]	@ (800ba04 <__mdiff+0x120>)
 800b908:	f240 2137 	movw	r1, #567	@ 0x237
 800b90c:	483e      	ldr	r0, [pc, #248]	@ (800ba08 <__mdiff+0x124>)
 800b90e:	f001 fa43 	bl	800cd98 <__assert_func>
 800b912:	2301      	movs	r3, #1
 800b914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b918:	4610      	mov	r0, r2
 800b91a:	b003      	add	sp, #12
 800b91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b920:	bfbc      	itt	lt
 800b922:	464b      	movlt	r3, r9
 800b924:	46a1      	movlt	r9, r4
 800b926:	4630      	mov	r0, r6
 800b928:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b92c:	bfba      	itte	lt
 800b92e:	461c      	movlt	r4, r3
 800b930:	2501      	movlt	r5, #1
 800b932:	2500      	movge	r5, #0
 800b934:	f7ff fcf6 	bl	800b324 <_Balloc>
 800b938:	4602      	mov	r2, r0
 800b93a:	b918      	cbnz	r0, 800b944 <__mdiff+0x60>
 800b93c:	4b31      	ldr	r3, [pc, #196]	@ (800ba04 <__mdiff+0x120>)
 800b93e:	f240 2145 	movw	r1, #581	@ 0x245
 800b942:	e7e3      	b.n	800b90c <__mdiff+0x28>
 800b944:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b948:	6926      	ldr	r6, [r4, #16]
 800b94a:	60c5      	str	r5, [r0, #12]
 800b94c:	f109 0310 	add.w	r3, r9, #16
 800b950:	f109 0514 	add.w	r5, r9, #20
 800b954:	f104 0e14 	add.w	lr, r4, #20
 800b958:	f100 0b14 	add.w	fp, r0, #20
 800b95c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b960:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	46d9      	mov	r9, fp
 800b968:	f04f 0c00 	mov.w	ip, #0
 800b96c:	9b01      	ldr	r3, [sp, #4]
 800b96e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b972:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	fa1f f38a 	uxth.w	r3, sl
 800b97c:	4619      	mov	r1, r3
 800b97e:	b283      	uxth	r3, r0
 800b980:	1acb      	subs	r3, r1, r3
 800b982:	0c00      	lsrs	r0, r0, #16
 800b984:	4463      	add	r3, ip
 800b986:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b98a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b98e:	b29b      	uxth	r3, r3
 800b990:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b994:	4576      	cmp	r6, lr
 800b996:	f849 3b04 	str.w	r3, [r9], #4
 800b99a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b99e:	d8e5      	bhi.n	800b96c <__mdiff+0x88>
 800b9a0:	1b33      	subs	r3, r6, r4
 800b9a2:	3b15      	subs	r3, #21
 800b9a4:	f023 0303 	bic.w	r3, r3, #3
 800b9a8:	3415      	adds	r4, #21
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	42a6      	cmp	r6, r4
 800b9ae:	bf38      	it	cc
 800b9b0:	2304      	movcc	r3, #4
 800b9b2:	441d      	add	r5, r3
 800b9b4:	445b      	add	r3, fp
 800b9b6:	461e      	mov	r6, r3
 800b9b8:	462c      	mov	r4, r5
 800b9ba:	4544      	cmp	r4, r8
 800b9bc:	d30e      	bcc.n	800b9dc <__mdiff+0xf8>
 800b9be:	f108 0103 	add.w	r1, r8, #3
 800b9c2:	1b49      	subs	r1, r1, r5
 800b9c4:	f021 0103 	bic.w	r1, r1, #3
 800b9c8:	3d03      	subs	r5, #3
 800b9ca:	45a8      	cmp	r8, r5
 800b9cc:	bf38      	it	cc
 800b9ce:	2100      	movcc	r1, #0
 800b9d0:	440b      	add	r3, r1
 800b9d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9d6:	b191      	cbz	r1, 800b9fe <__mdiff+0x11a>
 800b9d8:	6117      	str	r7, [r2, #16]
 800b9da:	e79d      	b.n	800b918 <__mdiff+0x34>
 800b9dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800b9e0:	46e6      	mov	lr, ip
 800b9e2:	0c08      	lsrs	r0, r1, #16
 800b9e4:	fa1c fc81 	uxtah	ip, ip, r1
 800b9e8:	4471      	add	r1, lr
 800b9ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b9ee:	b289      	uxth	r1, r1
 800b9f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b9f4:	f846 1b04 	str.w	r1, [r6], #4
 800b9f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9fc:	e7dd      	b.n	800b9ba <__mdiff+0xd6>
 800b9fe:	3f01      	subs	r7, #1
 800ba00:	e7e7      	b.n	800b9d2 <__mdiff+0xee>
 800ba02:	bf00      	nop
 800ba04:	0800dbb1 	.word	0x0800dbb1
 800ba08:	0800dbc2 	.word	0x0800dbc2

0800ba0c <__ulp>:
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	ed8d 0b00 	vstr	d0, [sp]
 800ba12:	9a01      	ldr	r2, [sp, #4]
 800ba14:	4b0f      	ldr	r3, [pc, #60]	@ (800ba54 <__ulp+0x48>)
 800ba16:	4013      	ands	r3, r2
 800ba18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dc08      	bgt.n	800ba32 <__ulp+0x26>
 800ba20:	425b      	negs	r3, r3
 800ba22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ba26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba2a:	da04      	bge.n	800ba36 <__ulp+0x2a>
 800ba2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ba30:	4113      	asrs	r3, r2
 800ba32:	2200      	movs	r2, #0
 800ba34:	e008      	b.n	800ba48 <__ulp+0x3c>
 800ba36:	f1a2 0314 	sub.w	r3, r2, #20
 800ba3a:	2b1e      	cmp	r3, #30
 800ba3c:	bfda      	itte	le
 800ba3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ba42:	40da      	lsrle	r2, r3
 800ba44:	2201      	movgt	r2, #1
 800ba46:	2300      	movs	r3, #0
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	ec41 0b10 	vmov	d0, r0, r1
 800ba50:	b002      	add	sp, #8
 800ba52:	4770      	bx	lr
 800ba54:	7ff00000 	.word	0x7ff00000

0800ba58 <__b2d>:
 800ba58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5c:	6906      	ldr	r6, [r0, #16]
 800ba5e:	f100 0814 	add.w	r8, r0, #20
 800ba62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ba66:	1f37      	subs	r7, r6, #4
 800ba68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	f7ff fd4b 	bl	800b508 <__hi0bits>
 800ba72:	f1c0 0320 	rsb	r3, r0, #32
 800ba76:	280a      	cmp	r0, #10
 800ba78:	600b      	str	r3, [r1, #0]
 800ba7a:	491b      	ldr	r1, [pc, #108]	@ (800bae8 <__b2d+0x90>)
 800ba7c:	dc15      	bgt.n	800baaa <__b2d+0x52>
 800ba7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ba82:	fa22 f30c 	lsr.w	r3, r2, ip
 800ba86:	45b8      	cmp	r8, r7
 800ba88:	ea43 0501 	orr.w	r5, r3, r1
 800ba8c:	bf34      	ite	cc
 800ba8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba92:	2300      	movcs	r3, #0
 800ba94:	3015      	adds	r0, #21
 800ba96:	fa02 f000 	lsl.w	r0, r2, r0
 800ba9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ba9e:	4303      	orrs	r3, r0
 800baa0:	461c      	mov	r4, r3
 800baa2:	ec45 4b10 	vmov	d0, r4, r5
 800baa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baaa:	45b8      	cmp	r8, r7
 800baac:	bf3a      	itte	cc
 800baae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bab2:	f1a6 0708 	subcc.w	r7, r6, #8
 800bab6:	2300      	movcs	r3, #0
 800bab8:	380b      	subs	r0, #11
 800baba:	d012      	beq.n	800bae2 <__b2d+0x8a>
 800babc:	f1c0 0120 	rsb	r1, r0, #32
 800bac0:	fa23 f401 	lsr.w	r4, r3, r1
 800bac4:	4082      	lsls	r2, r0
 800bac6:	4322      	orrs	r2, r4
 800bac8:	4547      	cmp	r7, r8
 800baca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bace:	bf8c      	ite	hi
 800bad0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bad4:	2200      	movls	r2, #0
 800bad6:	4083      	lsls	r3, r0
 800bad8:	40ca      	lsrs	r2, r1
 800bada:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bade:	4313      	orrs	r3, r2
 800bae0:	e7de      	b.n	800baa0 <__b2d+0x48>
 800bae2:	ea42 0501 	orr.w	r5, r2, r1
 800bae6:	e7db      	b.n	800baa0 <__b2d+0x48>
 800bae8:	3ff00000 	.word	0x3ff00000

0800baec <__d2b>:
 800baec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baf0:	460f      	mov	r7, r1
 800baf2:	2101      	movs	r1, #1
 800baf4:	ec59 8b10 	vmov	r8, r9, d0
 800baf8:	4616      	mov	r6, r2
 800bafa:	f7ff fc13 	bl	800b324 <_Balloc>
 800bafe:	4604      	mov	r4, r0
 800bb00:	b930      	cbnz	r0, 800bb10 <__d2b+0x24>
 800bb02:	4602      	mov	r2, r0
 800bb04:	4b23      	ldr	r3, [pc, #140]	@ (800bb94 <__d2b+0xa8>)
 800bb06:	4824      	ldr	r0, [pc, #144]	@ (800bb98 <__d2b+0xac>)
 800bb08:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb0c:	f001 f944 	bl	800cd98 <__assert_func>
 800bb10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb18:	b10d      	cbz	r5, 800bb1e <__d2b+0x32>
 800bb1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	f1b8 0300 	subs.w	r3, r8, #0
 800bb24:	d023      	beq.n	800bb6e <__d2b+0x82>
 800bb26:	4668      	mov	r0, sp
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	f7ff fd0c 	bl	800b546 <__lo0bits>
 800bb2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb32:	b1d0      	cbz	r0, 800bb6a <__d2b+0x7e>
 800bb34:	f1c0 0320 	rsb	r3, r0, #32
 800bb38:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	40c2      	lsrs	r2, r0
 800bb40:	6163      	str	r3, [r4, #20]
 800bb42:	9201      	str	r2, [sp, #4]
 800bb44:	9b01      	ldr	r3, [sp, #4]
 800bb46:	61a3      	str	r3, [r4, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bf0c      	ite	eq
 800bb4c:	2201      	moveq	r2, #1
 800bb4e:	2202      	movne	r2, #2
 800bb50:	6122      	str	r2, [r4, #16]
 800bb52:	b1a5      	cbz	r5, 800bb7e <__d2b+0x92>
 800bb54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb58:	4405      	add	r5, r0
 800bb5a:	603d      	str	r5, [r7, #0]
 800bb5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb60:	6030      	str	r0, [r6, #0]
 800bb62:	4620      	mov	r0, r4
 800bb64:	b003      	add	sp, #12
 800bb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb6a:	6161      	str	r1, [r4, #20]
 800bb6c:	e7ea      	b.n	800bb44 <__d2b+0x58>
 800bb6e:	a801      	add	r0, sp, #4
 800bb70:	f7ff fce9 	bl	800b546 <__lo0bits>
 800bb74:	9b01      	ldr	r3, [sp, #4]
 800bb76:	6163      	str	r3, [r4, #20]
 800bb78:	3020      	adds	r0, #32
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	e7e8      	b.n	800bb50 <__d2b+0x64>
 800bb7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb86:	6038      	str	r0, [r7, #0]
 800bb88:	6918      	ldr	r0, [r3, #16]
 800bb8a:	f7ff fcbd 	bl	800b508 <__hi0bits>
 800bb8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb92:	e7e5      	b.n	800bb60 <__d2b+0x74>
 800bb94:	0800dbb1 	.word	0x0800dbb1
 800bb98:	0800dbc2 	.word	0x0800dbc2

0800bb9c <__ratio>:
 800bb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba0:	4688      	mov	r8, r1
 800bba2:	4669      	mov	r1, sp
 800bba4:	4681      	mov	r9, r0
 800bba6:	f7ff ff57 	bl	800ba58 <__b2d>
 800bbaa:	a901      	add	r1, sp, #4
 800bbac:	4640      	mov	r0, r8
 800bbae:	ec55 4b10 	vmov	r4, r5, d0
 800bbb2:	f7ff ff51 	bl	800ba58 <__b2d>
 800bbb6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bbba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bbbe:	1ad2      	subs	r2, r2, r3
 800bbc0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bbc4:	1a5b      	subs	r3, r3, r1
 800bbc6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bbca:	ec57 6b10 	vmov	r6, r7, d0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	bfd6      	itet	le
 800bbd2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bbd6:	462a      	movgt	r2, r5
 800bbd8:	463a      	movle	r2, r7
 800bbda:	46ab      	mov	fp, r5
 800bbdc:	46a2      	mov	sl, r4
 800bbde:	bfce      	itee	gt
 800bbe0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bbe4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bbe8:	ee00 3a90 	vmovle	s1, r3
 800bbec:	ec4b ab17 	vmov	d7, sl, fp
 800bbf0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bbf4:	b003      	add	sp, #12
 800bbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbfa <__copybits>:
 800bbfa:	3901      	subs	r1, #1
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	1149      	asrs	r1, r1, #5
 800bc00:	6914      	ldr	r4, [r2, #16]
 800bc02:	3101      	adds	r1, #1
 800bc04:	f102 0314 	add.w	r3, r2, #20
 800bc08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc10:	1f05      	subs	r5, r0, #4
 800bc12:	42a3      	cmp	r3, r4
 800bc14:	d30c      	bcc.n	800bc30 <__copybits+0x36>
 800bc16:	1aa3      	subs	r3, r4, r2
 800bc18:	3b11      	subs	r3, #17
 800bc1a:	f023 0303 	bic.w	r3, r3, #3
 800bc1e:	3211      	adds	r2, #17
 800bc20:	42a2      	cmp	r2, r4
 800bc22:	bf88      	it	hi
 800bc24:	2300      	movhi	r3, #0
 800bc26:	4418      	add	r0, r3
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4288      	cmp	r0, r1
 800bc2c:	d305      	bcc.n	800bc3a <__copybits+0x40>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc34:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc38:	e7eb      	b.n	800bc12 <__copybits+0x18>
 800bc3a:	f840 3b04 	str.w	r3, [r0], #4
 800bc3e:	e7f4      	b.n	800bc2a <__copybits+0x30>

0800bc40 <__any_on>:
 800bc40:	f100 0214 	add.w	r2, r0, #20
 800bc44:	6900      	ldr	r0, [r0, #16]
 800bc46:	114b      	asrs	r3, r1, #5
 800bc48:	4298      	cmp	r0, r3
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	db11      	blt.n	800bc72 <__any_on+0x32>
 800bc4e:	dd0a      	ble.n	800bc66 <__any_on+0x26>
 800bc50:	f011 011f 	ands.w	r1, r1, #31
 800bc54:	d007      	beq.n	800bc66 <__any_on+0x26>
 800bc56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc5a:	fa24 f001 	lsr.w	r0, r4, r1
 800bc5e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc62:	428c      	cmp	r4, r1
 800bc64:	d10b      	bne.n	800bc7e <__any_on+0x3e>
 800bc66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d803      	bhi.n	800bc76 <__any_on+0x36>
 800bc6e:	2000      	movs	r0, #0
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	4603      	mov	r3, r0
 800bc74:	e7f7      	b.n	800bc66 <__any_on+0x26>
 800bc76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc7a:	2900      	cmp	r1, #0
 800bc7c:	d0f5      	beq.n	800bc6a <__any_on+0x2a>
 800bc7e:	2001      	movs	r0, #1
 800bc80:	e7f6      	b.n	800bc70 <__any_on+0x30>

0800bc82 <sulp>:
 800bc82:	b570      	push	{r4, r5, r6, lr}
 800bc84:	4604      	mov	r4, r0
 800bc86:	460d      	mov	r5, r1
 800bc88:	4616      	mov	r6, r2
 800bc8a:	ec45 4b10 	vmov	d0, r4, r5
 800bc8e:	f7ff febd 	bl	800ba0c <__ulp>
 800bc92:	b17e      	cbz	r6, 800bcb4 <sulp+0x32>
 800bc94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dd09      	ble.n	800bcb4 <sulp+0x32>
 800bca0:	051b      	lsls	r3, r3, #20
 800bca2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800bca6:	2000      	movs	r0, #0
 800bca8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800bcac:	ec41 0b17 	vmov	d7, r0, r1
 800bcb0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bcb8 <_strtod_l>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	ed2d 8b0a 	vpush	{d8-d12}
 800bcc0:	b097      	sub	sp, #92	@ 0x5c
 800bcc2:	4688      	mov	r8, r1
 800bcc4:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	9212      	str	r2, [sp, #72]	@ 0x48
 800bcca:	9005      	str	r0, [sp, #20]
 800bccc:	f04f 0a00 	mov.w	sl, #0
 800bcd0:	f04f 0b00 	mov.w	fp, #0
 800bcd4:	460a      	mov	r2, r1
 800bcd6:	9211      	str	r2, [sp, #68]	@ 0x44
 800bcd8:	7811      	ldrb	r1, [r2, #0]
 800bcda:	292b      	cmp	r1, #43	@ 0x2b
 800bcdc:	d04c      	beq.n	800bd78 <_strtod_l+0xc0>
 800bcde:	d839      	bhi.n	800bd54 <_strtod_l+0x9c>
 800bce0:	290d      	cmp	r1, #13
 800bce2:	d833      	bhi.n	800bd4c <_strtod_l+0x94>
 800bce4:	2908      	cmp	r1, #8
 800bce6:	d833      	bhi.n	800bd50 <_strtod_l+0x98>
 800bce8:	2900      	cmp	r1, #0
 800bcea:	d03c      	beq.n	800bd66 <_strtod_l+0xae>
 800bcec:	2200      	movs	r2, #0
 800bcee:	9208      	str	r2, [sp, #32]
 800bcf0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800bcf2:	782a      	ldrb	r2, [r5, #0]
 800bcf4:	2a30      	cmp	r2, #48	@ 0x30
 800bcf6:	f040 80b5 	bne.w	800be64 <_strtod_l+0x1ac>
 800bcfa:	786a      	ldrb	r2, [r5, #1]
 800bcfc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd00:	2a58      	cmp	r2, #88	@ 0x58
 800bd02:	d170      	bne.n	800bde6 <_strtod_l+0x12e>
 800bd04:	9302      	str	r3, [sp, #8]
 800bd06:	9b08      	ldr	r3, [sp, #32]
 800bd08:	9301      	str	r3, [sp, #4]
 800bd0a:	ab12      	add	r3, sp, #72	@ 0x48
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	4a8b      	ldr	r2, [pc, #556]	@ (800bf3c <_strtod_l+0x284>)
 800bd10:	9805      	ldr	r0, [sp, #20]
 800bd12:	ab13      	add	r3, sp, #76	@ 0x4c
 800bd14:	a911      	add	r1, sp, #68	@ 0x44
 800bd16:	f001 f8d9 	bl	800cecc <__gethex>
 800bd1a:	f010 060f 	ands.w	r6, r0, #15
 800bd1e:	4604      	mov	r4, r0
 800bd20:	d005      	beq.n	800bd2e <_strtod_l+0x76>
 800bd22:	2e06      	cmp	r6, #6
 800bd24:	d12a      	bne.n	800bd7c <_strtod_l+0xc4>
 800bd26:	3501      	adds	r5, #1
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9511      	str	r5, [sp, #68]	@ 0x44
 800bd2c:	9308      	str	r3, [sp, #32]
 800bd2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f040 852f 	bne.w	800c794 <_strtod_l+0xadc>
 800bd36:	9b08      	ldr	r3, [sp, #32]
 800bd38:	ec4b ab10 	vmov	d0, sl, fp
 800bd3c:	b1cb      	cbz	r3, 800bd72 <_strtod_l+0xba>
 800bd3e:	eeb1 0b40 	vneg.f64	d0, d0
 800bd42:	b017      	add	sp, #92	@ 0x5c
 800bd44:	ecbd 8b0a 	vpop	{d8-d12}
 800bd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4c:	2920      	cmp	r1, #32
 800bd4e:	d1cd      	bne.n	800bcec <_strtod_l+0x34>
 800bd50:	3201      	adds	r2, #1
 800bd52:	e7c0      	b.n	800bcd6 <_strtod_l+0x1e>
 800bd54:	292d      	cmp	r1, #45	@ 0x2d
 800bd56:	d1c9      	bne.n	800bcec <_strtod_l+0x34>
 800bd58:	2101      	movs	r1, #1
 800bd5a:	9108      	str	r1, [sp, #32]
 800bd5c:	1c51      	adds	r1, r2, #1
 800bd5e:	9111      	str	r1, [sp, #68]	@ 0x44
 800bd60:	7852      	ldrb	r2, [r2, #1]
 800bd62:	2a00      	cmp	r2, #0
 800bd64:	d1c4      	bne.n	800bcf0 <_strtod_l+0x38>
 800bd66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd68:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 850f 	bne.w	800c790 <_strtod_l+0xad8>
 800bd72:	ec4b ab10 	vmov	d0, sl, fp
 800bd76:	e7e4      	b.n	800bd42 <_strtod_l+0x8a>
 800bd78:	2100      	movs	r1, #0
 800bd7a:	e7ee      	b.n	800bd5a <_strtod_l+0xa2>
 800bd7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd7e:	b13a      	cbz	r2, 800bd90 <_strtod_l+0xd8>
 800bd80:	2135      	movs	r1, #53	@ 0x35
 800bd82:	a814      	add	r0, sp, #80	@ 0x50
 800bd84:	f7ff ff39 	bl	800bbfa <__copybits>
 800bd88:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bd8a:	9805      	ldr	r0, [sp, #20]
 800bd8c:	f7ff fb0a 	bl	800b3a4 <_Bfree>
 800bd90:	1e73      	subs	r3, r6, #1
 800bd92:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	d806      	bhi.n	800bda6 <_strtod_l+0xee>
 800bd98:	e8df f003 	tbb	[pc, r3]
 800bd9c:	201d0314 	.word	0x201d0314
 800bda0:	14          	.byte	0x14
 800bda1:	00          	.byte	0x00
 800bda2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800bda6:	05e3      	lsls	r3, r4, #23
 800bda8:	bf48      	it	mi
 800bdaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bdae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdb2:	0d1b      	lsrs	r3, r3, #20
 800bdb4:	051b      	lsls	r3, r3, #20
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1b9      	bne.n	800bd2e <_strtod_l+0x76>
 800bdba:	f7fe fba1 	bl	800a500 <__errno>
 800bdbe:	2322      	movs	r3, #34	@ 0x22
 800bdc0:	6003      	str	r3, [r0, #0]
 800bdc2:	e7b4      	b.n	800bd2e <_strtod_l+0x76>
 800bdc4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800bdc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bdcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bdd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bdd4:	e7e7      	b.n	800bda6 <_strtod_l+0xee>
 800bdd6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800bf44 <_strtod_l+0x28c>
 800bdda:	e7e4      	b.n	800bda6 <_strtod_l+0xee>
 800bddc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bde0:	f04f 3aff 	mov.w	sl, #4294967295
 800bde4:	e7df      	b.n	800bda6 <_strtod_l+0xee>
 800bde6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bde8:	1c5a      	adds	r2, r3, #1
 800bdea:	9211      	str	r2, [sp, #68]	@ 0x44
 800bdec:	785b      	ldrb	r3, [r3, #1]
 800bdee:	2b30      	cmp	r3, #48	@ 0x30
 800bdf0:	d0f9      	beq.n	800bde6 <_strtod_l+0x12e>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d09b      	beq.n	800bd2e <_strtod_l+0x76>
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	2600      	movs	r6, #0
 800bdfa:	9307      	str	r3, [sp, #28]
 800bdfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800be00:	46b1      	mov	r9, r6
 800be02:	4635      	mov	r5, r6
 800be04:	220a      	movs	r2, #10
 800be06:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800be08:	7804      	ldrb	r4, [r0, #0]
 800be0a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800be0e:	b2d9      	uxtb	r1, r3
 800be10:	2909      	cmp	r1, #9
 800be12:	d929      	bls.n	800be68 <_strtod_l+0x1b0>
 800be14:	494a      	ldr	r1, [pc, #296]	@ (800bf40 <_strtod_l+0x288>)
 800be16:	2201      	movs	r2, #1
 800be18:	f000 ff84 	bl	800cd24 <strncmp>
 800be1c:	b378      	cbz	r0, 800be7e <_strtod_l+0x1c6>
 800be1e:	2000      	movs	r0, #0
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	4607      	mov	r7, r0
 800be26:	9006      	str	r0, [sp, #24]
 800be28:	2a65      	cmp	r2, #101	@ 0x65
 800be2a:	d001      	beq.n	800be30 <_strtod_l+0x178>
 800be2c:	2a45      	cmp	r2, #69	@ 0x45
 800be2e:	d117      	bne.n	800be60 <_strtod_l+0x1a8>
 800be30:	b91b      	cbnz	r3, 800be3a <_strtod_l+0x182>
 800be32:	9b07      	ldr	r3, [sp, #28]
 800be34:	4303      	orrs	r3, r0
 800be36:	d096      	beq.n	800bd66 <_strtod_l+0xae>
 800be38:	2300      	movs	r3, #0
 800be3a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800be3e:	f108 0201 	add.w	r2, r8, #1
 800be42:	9211      	str	r2, [sp, #68]	@ 0x44
 800be44:	f898 2001 	ldrb.w	r2, [r8, #1]
 800be48:	2a2b      	cmp	r2, #43	@ 0x2b
 800be4a:	d06b      	beq.n	800bf24 <_strtod_l+0x26c>
 800be4c:	2a2d      	cmp	r2, #45	@ 0x2d
 800be4e:	d071      	beq.n	800bf34 <_strtod_l+0x27c>
 800be50:	f04f 0e00 	mov.w	lr, #0
 800be54:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800be58:	2c09      	cmp	r4, #9
 800be5a:	d979      	bls.n	800bf50 <_strtod_l+0x298>
 800be5c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800be60:	2400      	movs	r4, #0
 800be62:	e094      	b.n	800bf8e <_strtod_l+0x2d6>
 800be64:	2300      	movs	r3, #0
 800be66:	e7c7      	b.n	800bdf8 <_strtod_l+0x140>
 800be68:	2d08      	cmp	r5, #8
 800be6a:	f100 0001 	add.w	r0, r0, #1
 800be6e:	bfd4      	ite	le
 800be70:	fb02 3909 	mlale	r9, r2, r9, r3
 800be74:	fb02 3606 	mlagt	r6, r2, r6, r3
 800be78:	3501      	adds	r5, #1
 800be7a:	9011      	str	r0, [sp, #68]	@ 0x44
 800be7c:	e7c3      	b.n	800be06 <_strtod_l+0x14e>
 800be7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	9211      	str	r2, [sp, #68]	@ 0x44
 800be84:	785a      	ldrb	r2, [r3, #1]
 800be86:	b375      	cbz	r5, 800bee6 <_strtod_l+0x22e>
 800be88:	4607      	mov	r7, r0
 800be8a:	462b      	mov	r3, r5
 800be8c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800be90:	2909      	cmp	r1, #9
 800be92:	d913      	bls.n	800bebc <_strtod_l+0x204>
 800be94:	2101      	movs	r1, #1
 800be96:	9106      	str	r1, [sp, #24]
 800be98:	e7c6      	b.n	800be28 <_strtod_l+0x170>
 800be9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	9211      	str	r2, [sp, #68]	@ 0x44
 800bea0:	785a      	ldrb	r2, [r3, #1]
 800bea2:	3001      	adds	r0, #1
 800bea4:	2a30      	cmp	r2, #48	@ 0x30
 800bea6:	d0f8      	beq.n	800be9a <_strtod_l+0x1e2>
 800bea8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800beac:	2b08      	cmp	r3, #8
 800beae:	f200 8476 	bhi.w	800c79e <_strtod_l+0xae6>
 800beb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800beb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800beb6:	4607      	mov	r7, r0
 800beb8:	2000      	movs	r0, #0
 800beba:	4603      	mov	r3, r0
 800bebc:	3a30      	subs	r2, #48	@ 0x30
 800bebe:	f100 0101 	add.w	r1, r0, #1
 800bec2:	d023      	beq.n	800bf0c <_strtod_l+0x254>
 800bec4:	440f      	add	r7, r1
 800bec6:	eb00 0c03 	add.w	ip, r0, r3
 800beca:	4619      	mov	r1, r3
 800becc:	240a      	movs	r4, #10
 800bece:	4561      	cmp	r1, ip
 800bed0:	d10b      	bne.n	800beea <_strtod_l+0x232>
 800bed2:	1c5c      	adds	r4, r3, #1
 800bed4:	4403      	add	r3, r0
 800bed6:	2b08      	cmp	r3, #8
 800bed8:	4404      	add	r4, r0
 800beda:	dc11      	bgt.n	800bf00 <_strtod_l+0x248>
 800bedc:	230a      	movs	r3, #10
 800bede:	fb03 2909 	mla	r9, r3, r9, r2
 800bee2:	2100      	movs	r1, #0
 800bee4:	e013      	b.n	800bf0e <_strtod_l+0x256>
 800bee6:	4628      	mov	r0, r5
 800bee8:	e7dc      	b.n	800bea4 <_strtod_l+0x1ec>
 800beea:	2908      	cmp	r1, #8
 800beec:	f101 0101 	add.w	r1, r1, #1
 800bef0:	dc02      	bgt.n	800bef8 <_strtod_l+0x240>
 800bef2:	fb04 f909 	mul.w	r9, r4, r9
 800bef6:	e7ea      	b.n	800bece <_strtod_l+0x216>
 800bef8:	2910      	cmp	r1, #16
 800befa:	bfd8      	it	le
 800befc:	4366      	mulle	r6, r4
 800befe:	e7e6      	b.n	800bece <_strtod_l+0x216>
 800bf00:	2b0f      	cmp	r3, #15
 800bf02:	dcee      	bgt.n	800bee2 <_strtod_l+0x22a>
 800bf04:	230a      	movs	r3, #10
 800bf06:	fb03 2606 	mla	r6, r3, r6, r2
 800bf0a:	e7ea      	b.n	800bee2 <_strtod_l+0x22a>
 800bf0c:	461c      	mov	r4, r3
 800bf0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf10:	1c5a      	adds	r2, r3, #1
 800bf12:	9211      	str	r2, [sp, #68]	@ 0x44
 800bf14:	785a      	ldrb	r2, [r3, #1]
 800bf16:	4608      	mov	r0, r1
 800bf18:	4623      	mov	r3, r4
 800bf1a:	e7b7      	b.n	800be8c <_strtod_l+0x1d4>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	2700      	movs	r7, #0
 800bf20:	9306      	str	r3, [sp, #24]
 800bf22:	e786      	b.n	800be32 <_strtod_l+0x17a>
 800bf24:	f04f 0e00 	mov.w	lr, #0
 800bf28:	f108 0202 	add.w	r2, r8, #2
 800bf2c:	9211      	str	r2, [sp, #68]	@ 0x44
 800bf2e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bf32:	e78f      	b.n	800be54 <_strtod_l+0x19c>
 800bf34:	f04f 0e01 	mov.w	lr, #1
 800bf38:	e7f6      	b.n	800bf28 <_strtod_l+0x270>
 800bf3a:	bf00      	nop
 800bf3c:	0800dd30 	.word	0x0800dd30
 800bf40:	0800dd18 	.word	0x0800dd18
 800bf44:	7ff00000 	.word	0x7ff00000
 800bf48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf4a:	1c54      	adds	r4, r2, #1
 800bf4c:	9411      	str	r4, [sp, #68]	@ 0x44
 800bf4e:	7852      	ldrb	r2, [r2, #1]
 800bf50:	2a30      	cmp	r2, #48	@ 0x30
 800bf52:	d0f9      	beq.n	800bf48 <_strtod_l+0x290>
 800bf54:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800bf58:	2c08      	cmp	r4, #8
 800bf5a:	d881      	bhi.n	800be60 <_strtod_l+0x1a8>
 800bf5c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800bf60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf62:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf66:	1c51      	adds	r1, r2, #1
 800bf68:	9111      	str	r1, [sp, #68]	@ 0x44
 800bf6a:	7852      	ldrb	r2, [r2, #1]
 800bf6c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800bf70:	2c09      	cmp	r4, #9
 800bf72:	d938      	bls.n	800bfe6 <_strtod_l+0x32e>
 800bf74:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800bf76:	1b0c      	subs	r4, r1, r4
 800bf78:	2c08      	cmp	r4, #8
 800bf7a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800bf7e:	dc02      	bgt.n	800bf86 <_strtod_l+0x2ce>
 800bf80:	4564      	cmp	r4, ip
 800bf82:	bfa8      	it	ge
 800bf84:	4664      	movge	r4, ip
 800bf86:	f1be 0f00 	cmp.w	lr, #0
 800bf8a:	d000      	beq.n	800bf8e <_strtod_l+0x2d6>
 800bf8c:	4264      	negs	r4, r4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d14e      	bne.n	800c030 <_strtod_l+0x378>
 800bf92:	9b07      	ldr	r3, [sp, #28]
 800bf94:	4318      	orrs	r0, r3
 800bf96:	f47f aeca 	bne.w	800bd2e <_strtod_l+0x76>
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f47f aee2 	bne.w	800bd66 <_strtod_l+0xae>
 800bfa2:	2a69      	cmp	r2, #105	@ 0x69
 800bfa4:	d027      	beq.n	800bff6 <_strtod_l+0x33e>
 800bfa6:	dc24      	bgt.n	800bff2 <_strtod_l+0x33a>
 800bfa8:	2a49      	cmp	r2, #73	@ 0x49
 800bfaa:	d024      	beq.n	800bff6 <_strtod_l+0x33e>
 800bfac:	2a4e      	cmp	r2, #78	@ 0x4e
 800bfae:	f47f aeda 	bne.w	800bd66 <_strtod_l+0xae>
 800bfb2:	4997      	ldr	r1, [pc, #604]	@ (800c210 <_strtod_l+0x558>)
 800bfb4:	a811      	add	r0, sp, #68	@ 0x44
 800bfb6:	f001 f9ab 	bl	800d310 <__match>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	f43f aed3 	beq.w	800bd66 <_strtod_l+0xae>
 800bfc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	2b28      	cmp	r3, #40	@ 0x28
 800bfc6:	d12d      	bne.n	800c024 <_strtod_l+0x36c>
 800bfc8:	4992      	ldr	r1, [pc, #584]	@ (800c214 <_strtod_l+0x55c>)
 800bfca:	aa14      	add	r2, sp, #80	@ 0x50
 800bfcc:	a811      	add	r0, sp, #68	@ 0x44
 800bfce:	f001 f9b3 	bl	800d338 <__hexnan>
 800bfd2:	2805      	cmp	r0, #5
 800bfd4:	d126      	bne.n	800c024 <_strtod_l+0x36c>
 800bfd6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bfd8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800bfdc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bfe0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bfe4:	e6a3      	b.n	800bd2e <_strtod_l+0x76>
 800bfe6:	240a      	movs	r4, #10
 800bfe8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800bfec:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800bff0:	e7b8      	b.n	800bf64 <_strtod_l+0x2ac>
 800bff2:	2a6e      	cmp	r2, #110	@ 0x6e
 800bff4:	e7db      	b.n	800bfae <_strtod_l+0x2f6>
 800bff6:	4988      	ldr	r1, [pc, #544]	@ (800c218 <_strtod_l+0x560>)
 800bff8:	a811      	add	r0, sp, #68	@ 0x44
 800bffa:	f001 f989 	bl	800d310 <__match>
 800bffe:	2800      	cmp	r0, #0
 800c000:	f43f aeb1 	beq.w	800bd66 <_strtod_l+0xae>
 800c004:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c006:	4985      	ldr	r1, [pc, #532]	@ (800c21c <_strtod_l+0x564>)
 800c008:	3b01      	subs	r3, #1
 800c00a:	a811      	add	r0, sp, #68	@ 0x44
 800c00c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c00e:	f001 f97f 	bl	800d310 <__match>
 800c012:	b910      	cbnz	r0, 800c01a <_strtod_l+0x362>
 800c014:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c016:	3301      	adds	r3, #1
 800c018:	9311      	str	r3, [sp, #68]	@ 0x44
 800c01a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c230 <_strtod_l+0x578>
 800c01e:	f04f 0a00 	mov.w	sl, #0
 800c022:	e684      	b.n	800bd2e <_strtod_l+0x76>
 800c024:	487e      	ldr	r0, [pc, #504]	@ (800c220 <_strtod_l+0x568>)
 800c026:	f000 feaf 	bl	800cd88 <nan>
 800c02a:	ec5b ab10 	vmov	sl, fp, d0
 800c02e:	e67e      	b.n	800bd2e <_strtod_l+0x76>
 800c030:	ee07 9a90 	vmov	s15, r9
 800c034:	1be2      	subs	r2, r4, r7
 800c036:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c03a:	2d00      	cmp	r5, #0
 800c03c:	bf08      	it	eq
 800c03e:	461d      	moveq	r5, r3
 800c040:	2b10      	cmp	r3, #16
 800c042:	9209      	str	r2, [sp, #36]	@ 0x24
 800c044:	461a      	mov	r2, r3
 800c046:	bfa8      	it	ge
 800c048:	2210      	movge	r2, #16
 800c04a:	2b09      	cmp	r3, #9
 800c04c:	ec5b ab17 	vmov	sl, fp, d7
 800c050:	dc15      	bgt.n	800c07e <_strtod_l+0x3c6>
 800c052:	1be1      	subs	r1, r4, r7
 800c054:	2900      	cmp	r1, #0
 800c056:	f43f ae6a 	beq.w	800bd2e <_strtod_l+0x76>
 800c05a:	eba4 0107 	sub.w	r1, r4, r7
 800c05e:	dd72      	ble.n	800c146 <_strtod_l+0x48e>
 800c060:	2916      	cmp	r1, #22
 800c062:	dc59      	bgt.n	800c118 <_strtod_l+0x460>
 800c064:	4b6f      	ldr	r3, [pc, #444]	@ (800c224 <_strtod_l+0x56c>)
 800c066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c06c:	ed93 7b00 	vldr	d7, [r3]
 800c070:	ec4b ab16 	vmov	d6, sl, fp
 800c074:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c078:	ec5b ab17 	vmov	sl, fp, d7
 800c07c:	e657      	b.n	800bd2e <_strtod_l+0x76>
 800c07e:	4969      	ldr	r1, [pc, #420]	@ (800c224 <_strtod_l+0x56c>)
 800c080:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c084:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c088:	ee06 6a90 	vmov	s13, r6
 800c08c:	2b0f      	cmp	r3, #15
 800c08e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c092:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c096:	ec5b ab16 	vmov	sl, fp, d6
 800c09a:	ddda      	ble.n	800c052 <_strtod_l+0x39a>
 800c09c:	1a9a      	subs	r2, r3, r2
 800c09e:	1be1      	subs	r1, r4, r7
 800c0a0:	440a      	add	r2, r1
 800c0a2:	2a00      	cmp	r2, #0
 800c0a4:	f340 8094 	ble.w	800c1d0 <_strtod_l+0x518>
 800c0a8:	f012 000f 	ands.w	r0, r2, #15
 800c0ac:	d00a      	beq.n	800c0c4 <_strtod_l+0x40c>
 800c0ae:	495d      	ldr	r1, [pc, #372]	@ (800c224 <_strtod_l+0x56c>)
 800c0b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c0b4:	ed91 7b00 	vldr	d7, [r1]
 800c0b8:	ec4b ab16 	vmov	d6, sl, fp
 800c0bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0c0:	ec5b ab17 	vmov	sl, fp, d7
 800c0c4:	f032 020f 	bics.w	r2, r2, #15
 800c0c8:	d073      	beq.n	800c1b2 <_strtod_l+0x4fa>
 800c0ca:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c0ce:	dd47      	ble.n	800c160 <_strtod_l+0x4a8>
 800c0d0:	2400      	movs	r4, #0
 800c0d2:	4625      	mov	r5, r4
 800c0d4:	9407      	str	r4, [sp, #28]
 800c0d6:	4626      	mov	r6, r4
 800c0d8:	9a05      	ldr	r2, [sp, #20]
 800c0da:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c230 <_strtod_l+0x578>
 800c0de:	2322      	movs	r3, #34	@ 0x22
 800c0e0:	6013      	str	r3, [r2, #0]
 800c0e2:	f04f 0a00 	mov.w	sl, #0
 800c0e6:	9b07      	ldr	r3, [sp, #28]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f43f ae20 	beq.w	800bd2e <_strtod_l+0x76>
 800c0ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c0f0:	9805      	ldr	r0, [sp, #20]
 800c0f2:	f7ff f957 	bl	800b3a4 <_Bfree>
 800c0f6:	9805      	ldr	r0, [sp, #20]
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	f7ff f953 	bl	800b3a4 <_Bfree>
 800c0fe:	9805      	ldr	r0, [sp, #20]
 800c100:	4629      	mov	r1, r5
 800c102:	f7ff f94f 	bl	800b3a4 <_Bfree>
 800c106:	9907      	ldr	r1, [sp, #28]
 800c108:	9805      	ldr	r0, [sp, #20]
 800c10a:	f7ff f94b 	bl	800b3a4 <_Bfree>
 800c10e:	9805      	ldr	r0, [sp, #20]
 800c110:	4621      	mov	r1, r4
 800c112:	f7ff f947 	bl	800b3a4 <_Bfree>
 800c116:	e60a      	b.n	800bd2e <_strtod_l+0x76>
 800c118:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c11c:	1be0      	subs	r0, r4, r7
 800c11e:	4281      	cmp	r1, r0
 800c120:	dbbc      	blt.n	800c09c <_strtod_l+0x3e4>
 800c122:	4a40      	ldr	r2, [pc, #256]	@ (800c224 <_strtod_l+0x56c>)
 800c124:	f1c3 030f 	rsb	r3, r3, #15
 800c128:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c12c:	ed91 7b00 	vldr	d7, [r1]
 800c130:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c132:	ec4b ab16 	vmov	d6, sl, fp
 800c136:	1acb      	subs	r3, r1, r3
 800c138:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c13c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c140:	ed92 6b00 	vldr	d6, [r2]
 800c144:	e796      	b.n	800c074 <_strtod_l+0x3bc>
 800c146:	3116      	adds	r1, #22
 800c148:	dba8      	blt.n	800c09c <_strtod_l+0x3e4>
 800c14a:	4b36      	ldr	r3, [pc, #216]	@ (800c224 <_strtod_l+0x56c>)
 800c14c:	1b3c      	subs	r4, r7, r4
 800c14e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c152:	ed94 7b00 	vldr	d7, [r4]
 800c156:	ec4b ab16 	vmov	d6, sl, fp
 800c15a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c15e:	e78b      	b.n	800c078 <_strtod_l+0x3c0>
 800c160:	2000      	movs	r0, #0
 800c162:	ec4b ab17 	vmov	d7, sl, fp
 800c166:	4e30      	ldr	r6, [pc, #192]	@ (800c228 <_strtod_l+0x570>)
 800c168:	1112      	asrs	r2, r2, #4
 800c16a:	4601      	mov	r1, r0
 800c16c:	2a01      	cmp	r2, #1
 800c16e:	dc23      	bgt.n	800c1b8 <_strtod_l+0x500>
 800c170:	b108      	cbz	r0, 800c176 <_strtod_l+0x4be>
 800c172:	ec5b ab17 	vmov	sl, fp, d7
 800c176:	4a2c      	ldr	r2, [pc, #176]	@ (800c228 <_strtod_l+0x570>)
 800c178:	482c      	ldr	r0, [pc, #176]	@ (800c22c <_strtod_l+0x574>)
 800c17a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c17e:	ed92 7b00 	vldr	d7, [r2]
 800c182:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c186:	ec4b ab16 	vmov	d6, sl, fp
 800c18a:	4a29      	ldr	r2, [pc, #164]	@ (800c230 <_strtod_l+0x578>)
 800c18c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c190:	ee17 1a90 	vmov	r1, s15
 800c194:	400a      	ands	r2, r1
 800c196:	4282      	cmp	r2, r0
 800c198:	ec5b ab17 	vmov	sl, fp, d7
 800c19c:	d898      	bhi.n	800c0d0 <_strtod_l+0x418>
 800c19e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c1a2:	4282      	cmp	r2, r0
 800c1a4:	bf86      	itte	hi
 800c1a6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c234 <_strtod_l+0x57c>
 800c1aa:	f04f 3aff 	movhi.w	sl, #4294967295
 800c1ae:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	9206      	str	r2, [sp, #24]
 800c1b6:	e076      	b.n	800c2a6 <_strtod_l+0x5ee>
 800c1b8:	f012 0f01 	tst.w	r2, #1
 800c1bc:	d004      	beq.n	800c1c8 <_strtod_l+0x510>
 800c1be:	ed96 6b00 	vldr	d6, [r6]
 800c1c2:	2001      	movs	r0, #1
 800c1c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c1c8:	3101      	adds	r1, #1
 800c1ca:	1052      	asrs	r2, r2, #1
 800c1cc:	3608      	adds	r6, #8
 800c1ce:	e7cd      	b.n	800c16c <_strtod_l+0x4b4>
 800c1d0:	d0ef      	beq.n	800c1b2 <_strtod_l+0x4fa>
 800c1d2:	4252      	negs	r2, r2
 800c1d4:	f012 000f 	ands.w	r0, r2, #15
 800c1d8:	d00a      	beq.n	800c1f0 <_strtod_l+0x538>
 800c1da:	4912      	ldr	r1, [pc, #72]	@ (800c224 <_strtod_l+0x56c>)
 800c1dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c1e0:	ed91 7b00 	vldr	d7, [r1]
 800c1e4:	ec4b ab16 	vmov	d6, sl, fp
 800c1e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c1ec:	ec5b ab17 	vmov	sl, fp, d7
 800c1f0:	1112      	asrs	r2, r2, #4
 800c1f2:	d0de      	beq.n	800c1b2 <_strtod_l+0x4fa>
 800c1f4:	2a1f      	cmp	r2, #31
 800c1f6:	dd1f      	ble.n	800c238 <_strtod_l+0x580>
 800c1f8:	2400      	movs	r4, #0
 800c1fa:	4625      	mov	r5, r4
 800c1fc:	9407      	str	r4, [sp, #28]
 800c1fe:	4626      	mov	r6, r4
 800c200:	9a05      	ldr	r2, [sp, #20]
 800c202:	2322      	movs	r3, #34	@ 0x22
 800c204:	f04f 0a00 	mov.w	sl, #0
 800c208:	f04f 0b00 	mov.w	fp, #0
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	e76a      	b.n	800c0e6 <_strtod_l+0x42e>
 800c210:	0800db09 	.word	0x0800db09
 800c214:	0800dd1c 	.word	0x0800dd1c
 800c218:	0800db01 	.word	0x0800db01
 800c21c:	0800db38 	.word	0x0800db38
 800c220:	0800dec5 	.word	0x0800dec5
 800c224:	0800dc50 	.word	0x0800dc50
 800c228:	0800dc28 	.word	0x0800dc28
 800c22c:	7ca00000 	.word	0x7ca00000
 800c230:	7ff00000 	.word	0x7ff00000
 800c234:	7fefffff 	.word	0x7fefffff
 800c238:	f012 0110 	ands.w	r1, r2, #16
 800c23c:	bf18      	it	ne
 800c23e:	216a      	movne	r1, #106	@ 0x6a
 800c240:	9106      	str	r1, [sp, #24]
 800c242:	ec4b ab17 	vmov	d7, sl, fp
 800c246:	49b0      	ldr	r1, [pc, #704]	@ (800c508 <_strtod_l+0x850>)
 800c248:	2000      	movs	r0, #0
 800c24a:	07d6      	lsls	r6, r2, #31
 800c24c:	d504      	bpl.n	800c258 <_strtod_l+0x5a0>
 800c24e:	ed91 6b00 	vldr	d6, [r1]
 800c252:	2001      	movs	r0, #1
 800c254:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c258:	1052      	asrs	r2, r2, #1
 800c25a:	f101 0108 	add.w	r1, r1, #8
 800c25e:	d1f4      	bne.n	800c24a <_strtod_l+0x592>
 800c260:	b108      	cbz	r0, 800c266 <_strtod_l+0x5ae>
 800c262:	ec5b ab17 	vmov	sl, fp, d7
 800c266:	9a06      	ldr	r2, [sp, #24]
 800c268:	b1b2      	cbz	r2, 800c298 <_strtod_l+0x5e0>
 800c26a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c26e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c272:	2a00      	cmp	r2, #0
 800c274:	4658      	mov	r0, fp
 800c276:	dd0f      	ble.n	800c298 <_strtod_l+0x5e0>
 800c278:	2a1f      	cmp	r2, #31
 800c27a:	dd55      	ble.n	800c328 <_strtod_l+0x670>
 800c27c:	2a34      	cmp	r2, #52	@ 0x34
 800c27e:	bfde      	ittt	le
 800c280:	f04f 32ff 	movle.w	r2, #4294967295
 800c284:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c288:	408a      	lslle	r2, r1
 800c28a:	f04f 0a00 	mov.w	sl, #0
 800c28e:	bfcc      	ite	gt
 800c290:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c294:	ea02 0b00 	andle.w	fp, r2, r0
 800c298:	ec4b ab17 	vmov	d7, sl, fp
 800c29c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a4:	d0a8      	beq.n	800c1f8 <_strtod_l+0x540>
 800c2a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2a8:	9805      	ldr	r0, [sp, #20]
 800c2aa:	f8cd 9000 	str.w	r9, [sp]
 800c2ae:	462a      	mov	r2, r5
 800c2b0:	f7ff f8e0 	bl	800b474 <__s2b>
 800c2b4:	9007      	str	r0, [sp, #28]
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f43f af0a 	beq.w	800c0d0 <_strtod_l+0x418>
 800c2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2be:	1b3f      	subs	r7, r7, r4
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	bfb4      	ite	lt
 800c2c4:	463b      	movlt	r3, r7
 800c2c6:	2300      	movge	r3, #0
 800c2c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2cc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800c4f8 <_strtod_l+0x840>
 800c2d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c2d4:	2400      	movs	r4, #0
 800c2d6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c2d8:	4625      	mov	r5, r4
 800c2da:	9b07      	ldr	r3, [sp, #28]
 800c2dc:	9805      	ldr	r0, [sp, #20]
 800c2de:	6859      	ldr	r1, [r3, #4]
 800c2e0:	f7ff f820 	bl	800b324 <_Balloc>
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	f43f aef6 	beq.w	800c0d8 <_strtod_l+0x420>
 800c2ec:	9b07      	ldr	r3, [sp, #28]
 800c2ee:	691a      	ldr	r2, [r3, #16]
 800c2f0:	ec4b ab19 	vmov	d9, sl, fp
 800c2f4:	3202      	adds	r2, #2
 800c2f6:	f103 010c 	add.w	r1, r3, #12
 800c2fa:	0092      	lsls	r2, r2, #2
 800c2fc:	300c      	adds	r0, #12
 800c2fe:	f000 fd33 	bl	800cd68 <memcpy>
 800c302:	eeb0 0b49 	vmov.f64	d0, d9
 800c306:	9805      	ldr	r0, [sp, #20]
 800c308:	aa14      	add	r2, sp, #80	@ 0x50
 800c30a:	a913      	add	r1, sp, #76	@ 0x4c
 800c30c:	f7ff fbee 	bl	800baec <__d2b>
 800c310:	9012      	str	r0, [sp, #72]	@ 0x48
 800c312:	2800      	cmp	r0, #0
 800c314:	f43f aee0 	beq.w	800c0d8 <_strtod_l+0x420>
 800c318:	9805      	ldr	r0, [sp, #20]
 800c31a:	2101      	movs	r1, #1
 800c31c:	f7ff f940 	bl	800b5a0 <__i2b>
 800c320:	4605      	mov	r5, r0
 800c322:	b940      	cbnz	r0, 800c336 <_strtod_l+0x67e>
 800c324:	2500      	movs	r5, #0
 800c326:	e6d7      	b.n	800c0d8 <_strtod_l+0x420>
 800c328:	f04f 31ff 	mov.w	r1, #4294967295
 800c32c:	fa01 f202 	lsl.w	r2, r1, r2
 800c330:	ea02 0a0a 	and.w	sl, r2, sl
 800c334:	e7b0      	b.n	800c298 <_strtod_l+0x5e0>
 800c336:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c338:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c33a:	2f00      	cmp	r7, #0
 800c33c:	bfab      	itete	ge
 800c33e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c340:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c342:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c346:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c34a:	bfac      	ite	ge
 800c34c:	eb07 0903 	addge.w	r9, r7, r3
 800c350:	eba3 0807 	sublt.w	r8, r3, r7
 800c354:	9b06      	ldr	r3, [sp, #24]
 800c356:	1aff      	subs	r7, r7, r3
 800c358:	4417      	add	r7, r2
 800c35a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c35e:	4a6b      	ldr	r2, [pc, #428]	@ (800c50c <_strtod_l+0x854>)
 800c360:	3f01      	subs	r7, #1
 800c362:	4297      	cmp	r7, r2
 800c364:	da51      	bge.n	800c40a <_strtod_l+0x752>
 800c366:	1bd1      	subs	r1, r2, r7
 800c368:	291f      	cmp	r1, #31
 800c36a:	eba3 0301 	sub.w	r3, r3, r1
 800c36e:	f04f 0201 	mov.w	r2, #1
 800c372:	dc3e      	bgt.n	800c3f2 <_strtod_l+0x73a>
 800c374:	408a      	lsls	r2, r1
 800c376:	920c      	str	r2, [sp, #48]	@ 0x30
 800c378:	2200      	movs	r2, #0
 800c37a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c37c:	eb09 0703 	add.w	r7, r9, r3
 800c380:	4498      	add	r8, r3
 800c382:	9b06      	ldr	r3, [sp, #24]
 800c384:	45b9      	cmp	r9, r7
 800c386:	4498      	add	r8, r3
 800c388:	464b      	mov	r3, r9
 800c38a:	bfa8      	it	ge
 800c38c:	463b      	movge	r3, r7
 800c38e:	4543      	cmp	r3, r8
 800c390:	bfa8      	it	ge
 800c392:	4643      	movge	r3, r8
 800c394:	2b00      	cmp	r3, #0
 800c396:	bfc2      	ittt	gt
 800c398:	1aff      	subgt	r7, r7, r3
 800c39a:	eba8 0803 	subgt.w	r8, r8, r3
 800c39e:	eba9 0903 	subgt.w	r9, r9, r3
 800c3a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	dd16      	ble.n	800c3d6 <_strtod_l+0x71e>
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	9805      	ldr	r0, [sp, #20]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	f7ff f9b7 	bl	800b720 <__pow5mult>
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d0b5      	beq.n	800c324 <_strtod_l+0x66c>
 800c3b8:	4601      	mov	r1, r0
 800c3ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3bc:	9805      	ldr	r0, [sp, #20]
 800c3be:	f7ff f905 	bl	800b5cc <__multiply>
 800c3c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f43f ae87 	beq.w	800c0d8 <_strtod_l+0x420>
 800c3ca:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c3cc:	9805      	ldr	r0, [sp, #20]
 800c3ce:	f7fe ffe9 	bl	800b3a4 <_Bfree>
 800c3d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3d4:	9312      	str	r3, [sp, #72]	@ 0x48
 800c3d6:	2f00      	cmp	r7, #0
 800c3d8:	dc1b      	bgt.n	800c412 <_strtod_l+0x75a>
 800c3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd21      	ble.n	800c424 <_strtod_l+0x76c>
 800c3e0:	4631      	mov	r1, r6
 800c3e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c3e4:	9805      	ldr	r0, [sp, #20]
 800c3e6:	f7ff f99b 	bl	800b720 <__pow5mult>
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	b9d0      	cbnz	r0, 800c424 <_strtod_l+0x76c>
 800c3ee:	2600      	movs	r6, #0
 800c3f0:	e672      	b.n	800c0d8 <_strtod_l+0x420>
 800c3f2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c3f6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c3fa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c3fe:	37e2      	adds	r7, #226	@ 0xe2
 800c400:	fa02 f107 	lsl.w	r1, r2, r7
 800c404:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c406:	920c      	str	r2, [sp, #48]	@ 0x30
 800c408:	e7b8      	b.n	800c37c <_strtod_l+0x6c4>
 800c40a:	2200      	movs	r2, #0
 800c40c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c40e:	2201      	movs	r2, #1
 800c410:	e7f9      	b.n	800c406 <_strtod_l+0x74e>
 800c412:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c414:	9805      	ldr	r0, [sp, #20]
 800c416:	463a      	mov	r2, r7
 800c418:	f7ff f9dc 	bl	800b7d4 <__lshift>
 800c41c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c41e:	2800      	cmp	r0, #0
 800c420:	d1db      	bne.n	800c3da <_strtod_l+0x722>
 800c422:	e659      	b.n	800c0d8 <_strtod_l+0x420>
 800c424:	f1b8 0f00 	cmp.w	r8, #0
 800c428:	dd07      	ble.n	800c43a <_strtod_l+0x782>
 800c42a:	4631      	mov	r1, r6
 800c42c:	9805      	ldr	r0, [sp, #20]
 800c42e:	4642      	mov	r2, r8
 800c430:	f7ff f9d0 	bl	800b7d4 <__lshift>
 800c434:	4606      	mov	r6, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	d0d9      	beq.n	800c3ee <_strtod_l+0x736>
 800c43a:	f1b9 0f00 	cmp.w	r9, #0
 800c43e:	dd08      	ble.n	800c452 <_strtod_l+0x79a>
 800c440:	4629      	mov	r1, r5
 800c442:	9805      	ldr	r0, [sp, #20]
 800c444:	464a      	mov	r2, r9
 800c446:	f7ff f9c5 	bl	800b7d4 <__lshift>
 800c44a:	4605      	mov	r5, r0
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f43f ae43 	beq.w	800c0d8 <_strtod_l+0x420>
 800c452:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c454:	9805      	ldr	r0, [sp, #20]
 800c456:	4632      	mov	r2, r6
 800c458:	f7ff fa44 	bl	800b8e4 <__mdiff>
 800c45c:	4604      	mov	r4, r0
 800c45e:	2800      	cmp	r0, #0
 800c460:	f43f ae3a 	beq.w	800c0d8 <_strtod_l+0x420>
 800c464:	2300      	movs	r3, #0
 800c466:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c46a:	60c3      	str	r3, [r0, #12]
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7ff fa1d 	bl	800b8ac <__mcmp>
 800c472:	2800      	cmp	r0, #0
 800c474:	da4e      	bge.n	800c514 <_strtod_l+0x85c>
 800c476:	ea58 080a 	orrs.w	r8, r8, sl
 800c47a:	d174      	bne.n	800c566 <_strtod_l+0x8ae>
 800c47c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c480:	2b00      	cmp	r3, #0
 800c482:	d170      	bne.n	800c566 <_strtod_l+0x8ae>
 800c484:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c488:	0d1b      	lsrs	r3, r3, #20
 800c48a:	051b      	lsls	r3, r3, #20
 800c48c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c490:	d969      	bls.n	800c566 <_strtod_l+0x8ae>
 800c492:	6963      	ldr	r3, [r4, #20]
 800c494:	b913      	cbnz	r3, 800c49c <_strtod_l+0x7e4>
 800c496:	6923      	ldr	r3, [r4, #16]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	dd64      	ble.n	800c566 <_strtod_l+0x8ae>
 800c49c:	4621      	mov	r1, r4
 800c49e:	2201      	movs	r2, #1
 800c4a0:	9805      	ldr	r0, [sp, #20]
 800c4a2:	f7ff f997 	bl	800b7d4 <__lshift>
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	f7ff f9ff 	bl	800b8ac <__mcmp>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	dd59      	ble.n	800c566 <_strtod_l+0x8ae>
 800c4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c4b6:	9a06      	ldr	r2, [sp, #24]
 800c4b8:	0d1b      	lsrs	r3, r3, #20
 800c4ba:	051b      	lsls	r3, r3, #20
 800c4bc:	2a00      	cmp	r2, #0
 800c4be:	d070      	beq.n	800c5a2 <_strtod_l+0x8ea>
 800c4c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c4c4:	d86d      	bhi.n	800c5a2 <_strtod_l+0x8ea>
 800c4c6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c4ca:	f67f ae99 	bls.w	800c200 <_strtod_l+0x548>
 800c4ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800c500 <_strtod_l+0x848>
 800c4d2:	ec4b ab16 	vmov	d6, sl, fp
 800c4d6:	4b0e      	ldr	r3, [pc, #56]	@ (800c510 <_strtod_l+0x858>)
 800c4d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c4dc:	ee17 2a90 	vmov	r2, s15
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	ec5b ab17 	vmov	sl, fp, d7
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f47f ae01 	bne.w	800c0ee <_strtod_l+0x436>
 800c4ec:	9a05      	ldr	r2, [sp, #20]
 800c4ee:	2322      	movs	r3, #34	@ 0x22
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	e5fc      	b.n	800c0ee <_strtod_l+0x436>
 800c4f4:	f3af 8000 	nop.w
 800c4f8:	ffc00000 	.word	0xffc00000
 800c4fc:	41dfffff 	.word	0x41dfffff
 800c500:	00000000 	.word	0x00000000
 800c504:	39500000 	.word	0x39500000
 800c508:	0800dd48 	.word	0x0800dd48
 800c50c:	fffffc02 	.word	0xfffffc02
 800c510:	7ff00000 	.word	0x7ff00000
 800c514:	46d9      	mov	r9, fp
 800c516:	d15d      	bne.n	800c5d4 <_strtod_l+0x91c>
 800c518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c51c:	f1b8 0f00 	cmp.w	r8, #0
 800c520:	d02a      	beq.n	800c578 <_strtod_l+0x8c0>
 800c522:	4aab      	ldr	r2, [pc, #684]	@ (800c7d0 <_strtod_l+0xb18>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d12a      	bne.n	800c57e <_strtod_l+0x8c6>
 800c528:	9b06      	ldr	r3, [sp, #24]
 800c52a:	4652      	mov	r2, sl
 800c52c:	b1fb      	cbz	r3, 800c56e <_strtod_l+0x8b6>
 800c52e:	4ba9      	ldr	r3, [pc, #676]	@ (800c7d4 <_strtod_l+0xb1c>)
 800c530:	ea0b 0303 	and.w	r3, fp, r3
 800c534:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c538:	f04f 31ff 	mov.w	r1, #4294967295
 800c53c:	d81a      	bhi.n	800c574 <_strtod_l+0x8bc>
 800c53e:	0d1b      	lsrs	r3, r3, #20
 800c540:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c544:	fa01 f303 	lsl.w	r3, r1, r3
 800c548:	429a      	cmp	r2, r3
 800c54a:	d118      	bne.n	800c57e <_strtod_l+0x8c6>
 800c54c:	4ba2      	ldr	r3, [pc, #648]	@ (800c7d8 <_strtod_l+0xb20>)
 800c54e:	4599      	cmp	r9, r3
 800c550:	d102      	bne.n	800c558 <_strtod_l+0x8a0>
 800c552:	3201      	adds	r2, #1
 800c554:	f43f adc0 	beq.w	800c0d8 <_strtod_l+0x420>
 800c558:	4b9e      	ldr	r3, [pc, #632]	@ (800c7d4 <_strtod_l+0xb1c>)
 800c55a:	ea09 0303 	and.w	r3, r9, r3
 800c55e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c562:	f04f 0a00 	mov.w	sl, #0
 800c566:	9b06      	ldr	r3, [sp, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1b0      	bne.n	800c4ce <_strtod_l+0x816>
 800c56c:	e5bf      	b.n	800c0ee <_strtod_l+0x436>
 800c56e:	f04f 33ff 	mov.w	r3, #4294967295
 800c572:	e7e9      	b.n	800c548 <_strtod_l+0x890>
 800c574:	460b      	mov	r3, r1
 800c576:	e7e7      	b.n	800c548 <_strtod_l+0x890>
 800c578:	ea53 030a 	orrs.w	r3, r3, sl
 800c57c:	d099      	beq.n	800c4b2 <_strtod_l+0x7fa>
 800c57e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c580:	b1c3      	cbz	r3, 800c5b4 <_strtod_l+0x8fc>
 800c582:	ea13 0f09 	tst.w	r3, r9
 800c586:	d0ee      	beq.n	800c566 <_strtod_l+0x8ae>
 800c588:	9a06      	ldr	r2, [sp, #24]
 800c58a:	4650      	mov	r0, sl
 800c58c:	4659      	mov	r1, fp
 800c58e:	f1b8 0f00 	cmp.w	r8, #0
 800c592:	d013      	beq.n	800c5bc <_strtod_l+0x904>
 800c594:	f7ff fb75 	bl	800bc82 <sulp>
 800c598:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c59c:	ec5b ab17 	vmov	sl, fp, d7
 800c5a0:	e7e1      	b.n	800c566 <_strtod_l+0x8ae>
 800c5a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c5a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c5aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c5ae:	f04f 3aff 	mov.w	sl, #4294967295
 800c5b2:	e7d8      	b.n	800c566 <_strtod_l+0x8ae>
 800c5b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5b6:	ea13 0f0a 	tst.w	r3, sl
 800c5ba:	e7e4      	b.n	800c586 <_strtod_l+0x8ce>
 800c5bc:	f7ff fb61 	bl	800bc82 <sulp>
 800c5c0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c5c4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5cc:	ec5b ab10 	vmov	sl, fp, d0
 800c5d0:	d1c9      	bne.n	800c566 <_strtod_l+0x8ae>
 800c5d2:	e615      	b.n	800c200 <_strtod_l+0x548>
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7ff fae0 	bl	800bb9c <__ratio>
 800c5dc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c5e0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e8:	d85d      	bhi.n	800c6a6 <_strtod_l+0x9ee>
 800c5ea:	f1b8 0f00 	cmp.w	r8, #0
 800c5ee:	d164      	bne.n	800c6ba <_strtod_l+0xa02>
 800c5f0:	f1ba 0f00 	cmp.w	sl, #0
 800c5f4:	d14b      	bne.n	800c68e <_strtod_l+0x9d6>
 800c5f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5fa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d160      	bne.n	800c6c4 <_strtod_l+0xa0c>
 800c602:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c606:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c60e:	d401      	bmi.n	800c614 <_strtod_l+0x95c>
 800c610:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c614:	eeb1 ab48 	vneg.f64	d10, d8
 800c618:	486e      	ldr	r0, [pc, #440]	@ (800c7d4 <_strtod_l+0xb1c>)
 800c61a:	4970      	ldr	r1, [pc, #448]	@ (800c7dc <_strtod_l+0xb24>)
 800c61c:	ea09 0700 	and.w	r7, r9, r0
 800c620:	428f      	cmp	r7, r1
 800c622:	ec53 2b1a 	vmov	r2, r3, d10
 800c626:	d17d      	bne.n	800c724 <_strtod_l+0xa6c>
 800c628:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c62c:	ec4b ab1c 	vmov	d12, sl, fp
 800c630:	eeb0 0b4c 	vmov.f64	d0, d12
 800c634:	f7ff f9ea 	bl	800ba0c <__ulp>
 800c638:	4866      	ldr	r0, [pc, #408]	@ (800c7d4 <_strtod_l+0xb1c>)
 800c63a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c63e:	ee1c 3a90 	vmov	r3, s25
 800c642:	4a67      	ldr	r2, [pc, #412]	@ (800c7e0 <_strtod_l+0xb28>)
 800c644:	ea03 0100 	and.w	r1, r3, r0
 800c648:	4291      	cmp	r1, r2
 800c64a:	ec5b ab1c 	vmov	sl, fp, d12
 800c64e:	d93c      	bls.n	800c6ca <_strtod_l+0xa12>
 800c650:	ee19 2a90 	vmov	r2, s19
 800c654:	4b60      	ldr	r3, [pc, #384]	@ (800c7d8 <_strtod_l+0xb20>)
 800c656:	429a      	cmp	r2, r3
 800c658:	d104      	bne.n	800c664 <_strtod_l+0x9ac>
 800c65a:	ee19 3a10 	vmov	r3, s18
 800c65e:	3301      	adds	r3, #1
 800c660:	f43f ad3a 	beq.w	800c0d8 <_strtod_l+0x420>
 800c664:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800c7d8 <_strtod_l+0xb20>
 800c668:	f04f 3aff 	mov.w	sl, #4294967295
 800c66c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c66e:	9805      	ldr	r0, [sp, #20]
 800c670:	f7fe fe98 	bl	800b3a4 <_Bfree>
 800c674:	9805      	ldr	r0, [sp, #20]
 800c676:	4631      	mov	r1, r6
 800c678:	f7fe fe94 	bl	800b3a4 <_Bfree>
 800c67c:	9805      	ldr	r0, [sp, #20]
 800c67e:	4629      	mov	r1, r5
 800c680:	f7fe fe90 	bl	800b3a4 <_Bfree>
 800c684:	9805      	ldr	r0, [sp, #20]
 800c686:	4621      	mov	r1, r4
 800c688:	f7fe fe8c 	bl	800b3a4 <_Bfree>
 800c68c:	e625      	b.n	800c2da <_strtod_l+0x622>
 800c68e:	f1ba 0f01 	cmp.w	sl, #1
 800c692:	d103      	bne.n	800c69c <_strtod_l+0x9e4>
 800c694:	f1bb 0f00 	cmp.w	fp, #0
 800c698:	f43f adb2 	beq.w	800c200 <_strtod_l+0x548>
 800c69c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c6a0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c6a4:	e7b8      	b.n	800c618 <_strtod_l+0x960>
 800c6a6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c6aa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c6ae:	f1b8 0f00 	cmp.w	r8, #0
 800c6b2:	d0af      	beq.n	800c614 <_strtod_l+0x95c>
 800c6b4:	eeb0 ab48 	vmov.f64	d10, d8
 800c6b8:	e7ae      	b.n	800c618 <_strtod_l+0x960>
 800c6ba:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c6be:	eeb0 8b4a 	vmov.f64	d8, d10
 800c6c2:	e7a9      	b.n	800c618 <_strtod_l+0x960>
 800c6c4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c6c8:	e7a6      	b.n	800c618 <_strtod_l+0x960>
 800c6ca:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c6ce:	9b06      	ldr	r3, [sp, #24]
 800c6d0:	46d9      	mov	r9, fp
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1ca      	bne.n	800c66c <_strtod_l+0x9b4>
 800c6d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c6da:	0d1b      	lsrs	r3, r3, #20
 800c6dc:	051b      	lsls	r3, r3, #20
 800c6de:	429f      	cmp	r7, r3
 800c6e0:	d1c4      	bne.n	800c66c <_strtod_l+0x9b4>
 800c6e2:	ec51 0b18 	vmov	r0, r1, d8
 800c6e6:	f7f4 f827 	bl	8000738 <__aeabi_d2lz>
 800c6ea:	f7f3 ffdf 	bl	80006ac <__aeabi_l2d>
 800c6ee:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c6f2:	ec41 0b17 	vmov	d7, r0, r1
 800c6f6:	ea49 090a 	orr.w	r9, r9, sl
 800c6fa:	ea59 0908 	orrs.w	r9, r9, r8
 800c6fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c702:	d03c      	beq.n	800c77e <_strtod_l+0xac6>
 800c704:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c7b8 <_strtod_l+0xb00>
 800c708:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c710:	f53f aced 	bmi.w	800c0ee <_strtod_l+0x436>
 800c714:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c7c0 <_strtod_l+0xb08>
 800c718:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c720:	dda4      	ble.n	800c66c <_strtod_l+0x9b4>
 800c722:	e4e4      	b.n	800c0ee <_strtod_l+0x436>
 800c724:	9906      	ldr	r1, [sp, #24]
 800c726:	b1e1      	cbz	r1, 800c762 <_strtod_l+0xaaa>
 800c728:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c72c:	d819      	bhi.n	800c762 <_strtod_l+0xaaa>
 800c72e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c736:	d811      	bhi.n	800c75c <_strtod_l+0xaa4>
 800c738:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c73c:	ee18 3a10 	vmov	r3, s16
 800c740:	2b01      	cmp	r3, #1
 800c742:	bf38      	it	cc
 800c744:	2301      	movcc	r3, #1
 800c746:	ee08 3a10 	vmov	s16, r3
 800c74a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c74e:	f1b8 0f00 	cmp.w	r8, #0
 800c752:	d111      	bne.n	800c778 <_strtod_l+0xac0>
 800c754:	eeb1 7b48 	vneg.f64	d7, d8
 800c758:	ec53 2b17 	vmov	r2, r3, d7
 800c75c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c760:	1bcb      	subs	r3, r1, r7
 800c762:	eeb0 0b49 	vmov.f64	d0, d9
 800c766:	ec43 2b1a 	vmov	d10, r2, r3
 800c76a:	f7ff f94f 	bl	800ba0c <__ulp>
 800c76e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c772:	ec5b ab19 	vmov	sl, fp, d9
 800c776:	e7aa      	b.n	800c6ce <_strtod_l+0xa16>
 800c778:	eeb0 7b48 	vmov.f64	d7, d8
 800c77c:	e7ec      	b.n	800c758 <_strtod_l+0xaa0>
 800c77e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800c7c8 <_strtod_l+0xb10>
 800c782:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78a:	f57f af6f 	bpl.w	800c66c <_strtod_l+0x9b4>
 800c78e:	e4ae      	b.n	800c0ee <_strtod_l+0x436>
 800c790:	2300      	movs	r3, #0
 800c792:	9308      	str	r3, [sp, #32]
 800c794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c796:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	f7ff bacc 	b.w	800bd36 <_strtod_l+0x7e>
 800c79e:	2a65      	cmp	r2, #101	@ 0x65
 800c7a0:	f43f abbc 	beq.w	800bf1c <_strtod_l+0x264>
 800c7a4:	2a45      	cmp	r2, #69	@ 0x45
 800c7a6:	f43f abb9 	beq.w	800bf1c <_strtod_l+0x264>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	9306      	str	r3, [sp, #24]
 800c7ae:	f7ff bbf0 	b.w	800bf92 <_strtod_l+0x2da>
 800c7b2:	bf00      	nop
 800c7b4:	f3af 8000 	nop.w
 800c7b8:	94a03595 	.word	0x94a03595
 800c7bc:	3fdfffff 	.word	0x3fdfffff
 800c7c0:	35afe535 	.word	0x35afe535
 800c7c4:	3fe00000 	.word	0x3fe00000
 800c7c8:	94a03595 	.word	0x94a03595
 800c7cc:	3fcfffff 	.word	0x3fcfffff
 800c7d0:	000fffff 	.word	0x000fffff
 800c7d4:	7ff00000 	.word	0x7ff00000
 800c7d8:	7fefffff 	.word	0x7fefffff
 800c7dc:	7fe00000 	.word	0x7fe00000
 800c7e0:	7c9fffff 	.word	0x7c9fffff

0800c7e4 <_strtod_r>:
 800c7e4:	4b01      	ldr	r3, [pc, #4]	@ (800c7ec <_strtod_r+0x8>)
 800c7e6:	f7ff ba67 	b.w	800bcb8 <_strtod_l>
 800c7ea:	bf00      	nop
 800c7ec:	2400006c 	.word	0x2400006c

0800c7f0 <_strtol_l.constprop.0>:
 800c7f0:	2b24      	cmp	r3, #36	@ 0x24
 800c7f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f6:	4686      	mov	lr, r0
 800c7f8:	4690      	mov	r8, r2
 800c7fa:	d801      	bhi.n	800c800 <_strtol_l.constprop.0+0x10>
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d106      	bne.n	800c80e <_strtol_l.constprop.0+0x1e>
 800c800:	f7fd fe7e 	bl	800a500 <__errno>
 800c804:	2316      	movs	r3, #22
 800c806:	6003      	str	r3, [r0, #0]
 800c808:	2000      	movs	r0, #0
 800c80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c80e:	4834      	ldr	r0, [pc, #208]	@ (800c8e0 <_strtol_l.constprop.0+0xf0>)
 800c810:	460d      	mov	r5, r1
 800c812:	462a      	mov	r2, r5
 800c814:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c818:	5d06      	ldrb	r6, [r0, r4]
 800c81a:	f016 0608 	ands.w	r6, r6, #8
 800c81e:	d1f8      	bne.n	800c812 <_strtol_l.constprop.0+0x22>
 800c820:	2c2d      	cmp	r4, #45	@ 0x2d
 800c822:	d12d      	bne.n	800c880 <_strtol_l.constprop.0+0x90>
 800c824:	782c      	ldrb	r4, [r5, #0]
 800c826:	2601      	movs	r6, #1
 800c828:	1c95      	adds	r5, r2, #2
 800c82a:	f033 0210 	bics.w	r2, r3, #16
 800c82e:	d109      	bne.n	800c844 <_strtol_l.constprop.0+0x54>
 800c830:	2c30      	cmp	r4, #48	@ 0x30
 800c832:	d12a      	bne.n	800c88a <_strtol_l.constprop.0+0x9a>
 800c834:	782a      	ldrb	r2, [r5, #0]
 800c836:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c83a:	2a58      	cmp	r2, #88	@ 0x58
 800c83c:	d125      	bne.n	800c88a <_strtol_l.constprop.0+0x9a>
 800c83e:	786c      	ldrb	r4, [r5, #1]
 800c840:	2310      	movs	r3, #16
 800c842:	3502      	adds	r5, #2
 800c844:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c848:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c84c:	2200      	movs	r2, #0
 800c84e:	fbbc f9f3 	udiv	r9, ip, r3
 800c852:	4610      	mov	r0, r2
 800c854:	fb03 ca19 	mls	sl, r3, r9, ip
 800c858:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c85c:	2f09      	cmp	r7, #9
 800c85e:	d81b      	bhi.n	800c898 <_strtol_l.constprop.0+0xa8>
 800c860:	463c      	mov	r4, r7
 800c862:	42a3      	cmp	r3, r4
 800c864:	dd27      	ble.n	800c8b6 <_strtol_l.constprop.0+0xc6>
 800c866:	1c57      	adds	r7, r2, #1
 800c868:	d007      	beq.n	800c87a <_strtol_l.constprop.0+0x8a>
 800c86a:	4581      	cmp	r9, r0
 800c86c:	d320      	bcc.n	800c8b0 <_strtol_l.constprop.0+0xc0>
 800c86e:	d101      	bne.n	800c874 <_strtol_l.constprop.0+0x84>
 800c870:	45a2      	cmp	sl, r4
 800c872:	db1d      	blt.n	800c8b0 <_strtol_l.constprop.0+0xc0>
 800c874:	fb00 4003 	mla	r0, r0, r3, r4
 800c878:	2201      	movs	r2, #1
 800c87a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c87e:	e7eb      	b.n	800c858 <_strtol_l.constprop.0+0x68>
 800c880:	2c2b      	cmp	r4, #43	@ 0x2b
 800c882:	bf04      	itt	eq
 800c884:	782c      	ldrbeq	r4, [r5, #0]
 800c886:	1c95      	addeq	r5, r2, #2
 800c888:	e7cf      	b.n	800c82a <_strtol_l.constprop.0+0x3a>
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1da      	bne.n	800c844 <_strtol_l.constprop.0+0x54>
 800c88e:	2c30      	cmp	r4, #48	@ 0x30
 800c890:	bf0c      	ite	eq
 800c892:	2308      	moveq	r3, #8
 800c894:	230a      	movne	r3, #10
 800c896:	e7d5      	b.n	800c844 <_strtol_l.constprop.0+0x54>
 800c898:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c89c:	2f19      	cmp	r7, #25
 800c89e:	d801      	bhi.n	800c8a4 <_strtol_l.constprop.0+0xb4>
 800c8a0:	3c37      	subs	r4, #55	@ 0x37
 800c8a2:	e7de      	b.n	800c862 <_strtol_l.constprop.0+0x72>
 800c8a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c8a8:	2f19      	cmp	r7, #25
 800c8aa:	d804      	bhi.n	800c8b6 <_strtol_l.constprop.0+0xc6>
 800c8ac:	3c57      	subs	r4, #87	@ 0x57
 800c8ae:	e7d8      	b.n	800c862 <_strtol_l.constprop.0+0x72>
 800c8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b4:	e7e1      	b.n	800c87a <_strtol_l.constprop.0+0x8a>
 800c8b6:	1c53      	adds	r3, r2, #1
 800c8b8:	d108      	bne.n	800c8cc <_strtol_l.constprop.0+0xdc>
 800c8ba:	2322      	movs	r3, #34	@ 0x22
 800c8bc:	f8ce 3000 	str.w	r3, [lr]
 800c8c0:	4660      	mov	r0, ip
 800c8c2:	f1b8 0f00 	cmp.w	r8, #0
 800c8c6:	d0a0      	beq.n	800c80a <_strtol_l.constprop.0+0x1a>
 800c8c8:	1e69      	subs	r1, r5, #1
 800c8ca:	e006      	b.n	800c8da <_strtol_l.constprop.0+0xea>
 800c8cc:	b106      	cbz	r6, 800c8d0 <_strtol_l.constprop.0+0xe0>
 800c8ce:	4240      	negs	r0, r0
 800c8d0:	f1b8 0f00 	cmp.w	r8, #0
 800c8d4:	d099      	beq.n	800c80a <_strtol_l.constprop.0+0x1a>
 800c8d6:	2a00      	cmp	r2, #0
 800c8d8:	d1f6      	bne.n	800c8c8 <_strtol_l.constprop.0+0xd8>
 800c8da:	f8c8 1000 	str.w	r1, [r8]
 800c8de:	e794      	b.n	800c80a <_strtol_l.constprop.0+0x1a>
 800c8e0:	0800dd71 	.word	0x0800dd71

0800c8e4 <_strtol_r>:
 800c8e4:	f7ff bf84 	b.w	800c7f0 <_strtol_l.constprop.0>

0800c8e8 <__ssputs_r>:
 800c8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ec:	688e      	ldr	r6, [r1, #8]
 800c8ee:	461f      	mov	r7, r3
 800c8f0:	42be      	cmp	r6, r7
 800c8f2:	680b      	ldr	r3, [r1, #0]
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	4690      	mov	r8, r2
 800c8fa:	d82d      	bhi.n	800c958 <__ssputs_r+0x70>
 800c8fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c900:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c904:	d026      	beq.n	800c954 <__ssputs_r+0x6c>
 800c906:	6965      	ldr	r5, [r4, #20]
 800c908:	6909      	ldr	r1, [r1, #16]
 800c90a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c90e:	eba3 0901 	sub.w	r9, r3, r1
 800c912:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c916:	1c7b      	adds	r3, r7, #1
 800c918:	444b      	add	r3, r9
 800c91a:	106d      	asrs	r5, r5, #1
 800c91c:	429d      	cmp	r5, r3
 800c91e:	bf38      	it	cc
 800c920:	461d      	movcc	r5, r3
 800c922:	0553      	lsls	r3, r2, #21
 800c924:	d527      	bpl.n	800c976 <__ssputs_r+0x8e>
 800c926:	4629      	mov	r1, r5
 800c928:	f7fe fc70 	bl	800b20c <_malloc_r>
 800c92c:	4606      	mov	r6, r0
 800c92e:	b360      	cbz	r0, 800c98a <__ssputs_r+0xa2>
 800c930:	6921      	ldr	r1, [r4, #16]
 800c932:	464a      	mov	r2, r9
 800c934:	f000 fa18 	bl	800cd68 <memcpy>
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c93e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c942:	81a3      	strh	r3, [r4, #12]
 800c944:	6126      	str	r6, [r4, #16]
 800c946:	6165      	str	r5, [r4, #20]
 800c948:	444e      	add	r6, r9
 800c94a:	eba5 0509 	sub.w	r5, r5, r9
 800c94e:	6026      	str	r6, [r4, #0]
 800c950:	60a5      	str	r5, [r4, #8]
 800c952:	463e      	mov	r6, r7
 800c954:	42be      	cmp	r6, r7
 800c956:	d900      	bls.n	800c95a <__ssputs_r+0x72>
 800c958:	463e      	mov	r6, r7
 800c95a:	6820      	ldr	r0, [r4, #0]
 800c95c:	4632      	mov	r2, r6
 800c95e:	4641      	mov	r1, r8
 800c960:	f000 f9c6 	bl	800ccf0 <memmove>
 800c964:	68a3      	ldr	r3, [r4, #8]
 800c966:	1b9b      	subs	r3, r3, r6
 800c968:	60a3      	str	r3, [r4, #8]
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	4433      	add	r3, r6
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	2000      	movs	r0, #0
 800c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c976:	462a      	mov	r2, r5
 800c978:	f000 fd8b 	bl	800d492 <_realloc_r>
 800c97c:	4606      	mov	r6, r0
 800c97e:	2800      	cmp	r0, #0
 800c980:	d1e0      	bne.n	800c944 <__ssputs_r+0x5c>
 800c982:	6921      	ldr	r1, [r4, #16]
 800c984:	4650      	mov	r0, sl
 800c986:	f7fe fbcd 	bl	800b124 <_free_r>
 800c98a:	230c      	movs	r3, #12
 800c98c:	f8ca 3000 	str.w	r3, [sl]
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c996:	81a3      	strh	r3, [r4, #12]
 800c998:	f04f 30ff 	mov.w	r0, #4294967295
 800c99c:	e7e9      	b.n	800c972 <__ssputs_r+0x8a>
	...

0800c9a0 <_svfiprintf_r>:
 800c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	4698      	mov	r8, r3
 800c9a6:	898b      	ldrh	r3, [r1, #12]
 800c9a8:	061b      	lsls	r3, r3, #24
 800c9aa:	b09d      	sub	sp, #116	@ 0x74
 800c9ac:	4607      	mov	r7, r0
 800c9ae:	460d      	mov	r5, r1
 800c9b0:	4614      	mov	r4, r2
 800c9b2:	d510      	bpl.n	800c9d6 <_svfiprintf_r+0x36>
 800c9b4:	690b      	ldr	r3, [r1, #16]
 800c9b6:	b973      	cbnz	r3, 800c9d6 <_svfiprintf_r+0x36>
 800c9b8:	2140      	movs	r1, #64	@ 0x40
 800c9ba:	f7fe fc27 	bl	800b20c <_malloc_r>
 800c9be:	6028      	str	r0, [r5, #0]
 800c9c0:	6128      	str	r0, [r5, #16]
 800c9c2:	b930      	cbnz	r0, 800c9d2 <_svfiprintf_r+0x32>
 800c9c4:	230c      	movs	r3, #12
 800c9c6:	603b      	str	r3, [r7, #0]
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	b01d      	add	sp, #116	@ 0x74
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	2340      	movs	r3, #64	@ 0x40
 800c9d4:	616b      	str	r3, [r5, #20]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9da:	2320      	movs	r3, #32
 800c9dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9e4:	2330      	movs	r3, #48	@ 0x30
 800c9e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb84 <_svfiprintf_r+0x1e4>
 800c9ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9ee:	f04f 0901 	mov.w	r9, #1
 800c9f2:	4623      	mov	r3, r4
 800c9f4:	469a      	mov	sl, r3
 800c9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9fa:	b10a      	cbz	r2, 800ca00 <_svfiprintf_r+0x60>
 800c9fc:	2a25      	cmp	r2, #37	@ 0x25
 800c9fe:	d1f9      	bne.n	800c9f4 <_svfiprintf_r+0x54>
 800ca00:	ebba 0b04 	subs.w	fp, sl, r4
 800ca04:	d00b      	beq.n	800ca1e <_svfiprintf_r+0x7e>
 800ca06:	465b      	mov	r3, fp
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f7ff ff6b 	bl	800c8e8 <__ssputs_r>
 800ca12:	3001      	adds	r0, #1
 800ca14:	f000 80a7 	beq.w	800cb66 <_svfiprintf_r+0x1c6>
 800ca18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca1a:	445a      	add	r2, fp
 800ca1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 809f 	beq.w	800cb66 <_svfiprintf_r+0x1c6>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca32:	f10a 0a01 	add.w	sl, sl, #1
 800ca36:	9304      	str	r3, [sp, #16]
 800ca38:	9307      	str	r3, [sp, #28]
 800ca3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca40:	4654      	mov	r4, sl
 800ca42:	2205      	movs	r2, #5
 800ca44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca48:	484e      	ldr	r0, [pc, #312]	@ (800cb84 <_svfiprintf_r+0x1e4>)
 800ca4a:	f7f3 fc49 	bl	80002e0 <memchr>
 800ca4e:	9a04      	ldr	r2, [sp, #16]
 800ca50:	b9d8      	cbnz	r0, 800ca8a <_svfiprintf_r+0xea>
 800ca52:	06d0      	lsls	r0, r2, #27
 800ca54:	bf44      	itt	mi
 800ca56:	2320      	movmi	r3, #32
 800ca58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca5c:	0711      	lsls	r1, r2, #28
 800ca5e:	bf44      	itt	mi
 800ca60:	232b      	movmi	r3, #43	@ 0x2b
 800ca62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca66:	f89a 3000 	ldrb.w	r3, [sl]
 800ca6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca6c:	d015      	beq.n	800ca9a <_svfiprintf_r+0xfa>
 800ca6e:	9a07      	ldr	r2, [sp, #28]
 800ca70:	4654      	mov	r4, sl
 800ca72:	2000      	movs	r0, #0
 800ca74:	f04f 0c0a 	mov.w	ip, #10
 800ca78:	4621      	mov	r1, r4
 800ca7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca7e:	3b30      	subs	r3, #48	@ 0x30
 800ca80:	2b09      	cmp	r3, #9
 800ca82:	d94b      	bls.n	800cb1c <_svfiprintf_r+0x17c>
 800ca84:	b1b0      	cbz	r0, 800cab4 <_svfiprintf_r+0x114>
 800ca86:	9207      	str	r2, [sp, #28]
 800ca88:	e014      	b.n	800cab4 <_svfiprintf_r+0x114>
 800ca8a:	eba0 0308 	sub.w	r3, r0, r8
 800ca8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca92:	4313      	orrs	r3, r2
 800ca94:	9304      	str	r3, [sp, #16]
 800ca96:	46a2      	mov	sl, r4
 800ca98:	e7d2      	b.n	800ca40 <_svfiprintf_r+0xa0>
 800ca9a:	9b03      	ldr	r3, [sp, #12]
 800ca9c:	1d19      	adds	r1, r3, #4
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	9103      	str	r1, [sp, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	bfbb      	ittet	lt
 800caa6:	425b      	neglt	r3, r3
 800caa8:	f042 0202 	orrlt.w	r2, r2, #2
 800caac:	9307      	strge	r3, [sp, #28]
 800caae:	9307      	strlt	r3, [sp, #28]
 800cab0:	bfb8      	it	lt
 800cab2:	9204      	strlt	r2, [sp, #16]
 800cab4:	7823      	ldrb	r3, [r4, #0]
 800cab6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cab8:	d10a      	bne.n	800cad0 <_svfiprintf_r+0x130>
 800caba:	7863      	ldrb	r3, [r4, #1]
 800cabc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cabe:	d132      	bne.n	800cb26 <_svfiprintf_r+0x186>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	1d1a      	adds	r2, r3, #4
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	9203      	str	r2, [sp, #12]
 800cac8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cacc:	3402      	adds	r4, #2
 800cace:	9305      	str	r3, [sp, #20]
 800cad0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb94 <_svfiprintf_r+0x1f4>
 800cad4:	7821      	ldrb	r1, [r4, #0]
 800cad6:	2203      	movs	r2, #3
 800cad8:	4650      	mov	r0, sl
 800cada:	f7f3 fc01 	bl	80002e0 <memchr>
 800cade:	b138      	cbz	r0, 800caf0 <_svfiprintf_r+0x150>
 800cae0:	9b04      	ldr	r3, [sp, #16]
 800cae2:	eba0 000a 	sub.w	r0, r0, sl
 800cae6:	2240      	movs	r2, #64	@ 0x40
 800cae8:	4082      	lsls	r2, r0
 800caea:	4313      	orrs	r3, r2
 800caec:	3401      	adds	r4, #1
 800caee:	9304      	str	r3, [sp, #16]
 800caf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf4:	4824      	ldr	r0, [pc, #144]	@ (800cb88 <_svfiprintf_r+0x1e8>)
 800caf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cafa:	2206      	movs	r2, #6
 800cafc:	f7f3 fbf0 	bl	80002e0 <memchr>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d036      	beq.n	800cb72 <_svfiprintf_r+0x1d2>
 800cb04:	4b21      	ldr	r3, [pc, #132]	@ (800cb8c <_svfiprintf_r+0x1ec>)
 800cb06:	bb1b      	cbnz	r3, 800cb50 <_svfiprintf_r+0x1b0>
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	3307      	adds	r3, #7
 800cb0c:	f023 0307 	bic.w	r3, r3, #7
 800cb10:	3308      	adds	r3, #8
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb16:	4433      	add	r3, r6
 800cb18:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb1a:	e76a      	b.n	800c9f2 <_svfiprintf_r+0x52>
 800cb1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb20:	460c      	mov	r4, r1
 800cb22:	2001      	movs	r0, #1
 800cb24:	e7a8      	b.n	800ca78 <_svfiprintf_r+0xd8>
 800cb26:	2300      	movs	r3, #0
 800cb28:	3401      	adds	r4, #1
 800cb2a:	9305      	str	r3, [sp, #20]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f04f 0c0a 	mov.w	ip, #10
 800cb32:	4620      	mov	r0, r4
 800cb34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb38:	3a30      	subs	r2, #48	@ 0x30
 800cb3a:	2a09      	cmp	r2, #9
 800cb3c:	d903      	bls.n	800cb46 <_svfiprintf_r+0x1a6>
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0c6      	beq.n	800cad0 <_svfiprintf_r+0x130>
 800cb42:	9105      	str	r1, [sp, #20]
 800cb44:	e7c4      	b.n	800cad0 <_svfiprintf_r+0x130>
 800cb46:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e7f0      	b.n	800cb32 <_svfiprintf_r+0x192>
 800cb50:	ab03      	add	r3, sp, #12
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	462a      	mov	r2, r5
 800cb56:	4b0e      	ldr	r3, [pc, #56]	@ (800cb90 <_svfiprintf_r+0x1f0>)
 800cb58:	a904      	add	r1, sp, #16
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f7fc fda4 	bl	80096a8 <_printf_float>
 800cb60:	1c42      	adds	r2, r0, #1
 800cb62:	4606      	mov	r6, r0
 800cb64:	d1d6      	bne.n	800cb14 <_svfiprintf_r+0x174>
 800cb66:	89ab      	ldrh	r3, [r5, #12]
 800cb68:	065b      	lsls	r3, r3, #25
 800cb6a:	f53f af2d 	bmi.w	800c9c8 <_svfiprintf_r+0x28>
 800cb6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb70:	e72c      	b.n	800c9cc <_svfiprintf_r+0x2c>
 800cb72:	ab03      	add	r3, sp, #12
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	462a      	mov	r2, r5
 800cb78:	4b05      	ldr	r3, [pc, #20]	@ (800cb90 <_svfiprintf_r+0x1f0>)
 800cb7a:	a904      	add	r1, sp, #16
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7fd f81b 	bl	8009bb8 <_printf_i>
 800cb82:	e7ed      	b.n	800cb60 <_svfiprintf_r+0x1c0>
 800cb84:	0800de71 	.word	0x0800de71
 800cb88:	0800de7b 	.word	0x0800de7b
 800cb8c:	080096a9 	.word	0x080096a9
 800cb90:	0800c8e9 	.word	0x0800c8e9
 800cb94:	0800de77 	.word	0x0800de77

0800cb98 <__sflush_r>:
 800cb98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba0:	0716      	lsls	r6, r2, #28
 800cba2:	4605      	mov	r5, r0
 800cba4:	460c      	mov	r4, r1
 800cba6:	d454      	bmi.n	800cc52 <__sflush_r+0xba>
 800cba8:	684b      	ldr	r3, [r1, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	dc02      	bgt.n	800cbb4 <__sflush_r+0x1c>
 800cbae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	dd48      	ble.n	800cc46 <__sflush_r+0xae>
 800cbb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbb6:	2e00      	cmp	r6, #0
 800cbb8:	d045      	beq.n	800cc46 <__sflush_r+0xae>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbc0:	682f      	ldr	r7, [r5, #0]
 800cbc2:	6a21      	ldr	r1, [r4, #32]
 800cbc4:	602b      	str	r3, [r5, #0]
 800cbc6:	d030      	beq.n	800cc2a <__sflush_r+0x92>
 800cbc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	0759      	lsls	r1, r3, #29
 800cbce:	d505      	bpl.n	800cbdc <__sflush_r+0x44>
 800cbd0:	6863      	ldr	r3, [r4, #4]
 800cbd2:	1ad2      	subs	r2, r2, r3
 800cbd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbd6:	b10b      	cbz	r3, 800cbdc <__sflush_r+0x44>
 800cbd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbda:	1ad2      	subs	r2, r2, r3
 800cbdc:	2300      	movs	r3, #0
 800cbde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbe0:	6a21      	ldr	r1, [r4, #32]
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	47b0      	blx	r6
 800cbe6:	1c43      	adds	r3, r0, #1
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	d106      	bne.n	800cbfa <__sflush_r+0x62>
 800cbec:	6829      	ldr	r1, [r5, #0]
 800cbee:	291d      	cmp	r1, #29
 800cbf0:	d82b      	bhi.n	800cc4a <__sflush_r+0xb2>
 800cbf2:	4a2a      	ldr	r2, [pc, #168]	@ (800cc9c <__sflush_r+0x104>)
 800cbf4:	410a      	asrs	r2, r1
 800cbf6:	07d6      	lsls	r6, r2, #31
 800cbf8:	d427      	bmi.n	800cc4a <__sflush_r+0xb2>
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	6062      	str	r2, [r4, #4]
 800cbfe:	04d9      	lsls	r1, r3, #19
 800cc00:	6922      	ldr	r2, [r4, #16]
 800cc02:	6022      	str	r2, [r4, #0]
 800cc04:	d504      	bpl.n	800cc10 <__sflush_r+0x78>
 800cc06:	1c42      	adds	r2, r0, #1
 800cc08:	d101      	bne.n	800cc0e <__sflush_r+0x76>
 800cc0a:	682b      	ldr	r3, [r5, #0]
 800cc0c:	b903      	cbnz	r3, 800cc10 <__sflush_r+0x78>
 800cc0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc12:	602f      	str	r7, [r5, #0]
 800cc14:	b1b9      	cbz	r1, 800cc46 <__sflush_r+0xae>
 800cc16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc1a:	4299      	cmp	r1, r3
 800cc1c:	d002      	beq.n	800cc24 <__sflush_r+0x8c>
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f7fe fa80 	bl	800b124 <_free_r>
 800cc24:	2300      	movs	r3, #0
 800cc26:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc28:	e00d      	b.n	800cc46 <__sflush_r+0xae>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	47b0      	blx	r6
 800cc30:	4602      	mov	r2, r0
 800cc32:	1c50      	adds	r0, r2, #1
 800cc34:	d1c9      	bne.n	800cbca <__sflush_r+0x32>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d0c6      	beq.n	800cbca <__sflush_r+0x32>
 800cc3c:	2b1d      	cmp	r3, #29
 800cc3e:	d001      	beq.n	800cc44 <__sflush_r+0xac>
 800cc40:	2b16      	cmp	r3, #22
 800cc42:	d11e      	bne.n	800cc82 <__sflush_r+0xea>
 800cc44:	602f      	str	r7, [r5, #0]
 800cc46:	2000      	movs	r0, #0
 800cc48:	e022      	b.n	800cc90 <__sflush_r+0xf8>
 800cc4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc4e:	b21b      	sxth	r3, r3
 800cc50:	e01b      	b.n	800cc8a <__sflush_r+0xf2>
 800cc52:	690f      	ldr	r7, [r1, #16]
 800cc54:	2f00      	cmp	r7, #0
 800cc56:	d0f6      	beq.n	800cc46 <__sflush_r+0xae>
 800cc58:	0793      	lsls	r3, r2, #30
 800cc5a:	680e      	ldr	r6, [r1, #0]
 800cc5c:	bf08      	it	eq
 800cc5e:	694b      	ldreq	r3, [r1, #20]
 800cc60:	600f      	str	r7, [r1, #0]
 800cc62:	bf18      	it	ne
 800cc64:	2300      	movne	r3, #0
 800cc66:	eba6 0807 	sub.w	r8, r6, r7
 800cc6a:	608b      	str	r3, [r1, #8]
 800cc6c:	f1b8 0f00 	cmp.w	r8, #0
 800cc70:	dde9      	ble.n	800cc46 <__sflush_r+0xae>
 800cc72:	6a21      	ldr	r1, [r4, #32]
 800cc74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc76:	4643      	mov	r3, r8
 800cc78:	463a      	mov	r2, r7
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	47b0      	blx	r6
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	dc08      	bgt.n	800cc94 <__sflush_r+0xfc>
 800cc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc8a:	81a3      	strh	r3, [r4, #12]
 800cc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc94:	4407      	add	r7, r0
 800cc96:	eba8 0800 	sub.w	r8, r8, r0
 800cc9a:	e7e7      	b.n	800cc6c <__sflush_r+0xd4>
 800cc9c:	dfbffffe 	.word	0xdfbffffe

0800cca0 <_fflush_r>:
 800cca0:	b538      	push	{r3, r4, r5, lr}
 800cca2:	690b      	ldr	r3, [r1, #16]
 800cca4:	4605      	mov	r5, r0
 800cca6:	460c      	mov	r4, r1
 800cca8:	b913      	cbnz	r3, 800ccb0 <_fflush_r+0x10>
 800ccaa:	2500      	movs	r5, #0
 800ccac:	4628      	mov	r0, r5
 800ccae:	bd38      	pop	{r3, r4, r5, pc}
 800ccb0:	b118      	cbz	r0, 800ccba <_fflush_r+0x1a>
 800ccb2:	6a03      	ldr	r3, [r0, #32]
 800ccb4:	b90b      	cbnz	r3, 800ccba <_fflush_r+0x1a>
 800ccb6:	f7fd fb37 	bl	800a328 <__sinit>
 800ccba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d0f3      	beq.n	800ccaa <_fflush_r+0xa>
 800ccc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ccc4:	07d0      	lsls	r0, r2, #31
 800ccc6:	d404      	bmi.n	800ccd2 <_fflush_r+0x32>
 800ccc8:	0599      	lsls	r1, r3, #22
 800ccca:	d402      	bmi.n	800ccd2 <_fflush_r+0x32>
 800cccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccce:	f7fd fc42 	bl	800a556 <__retarget_lock_acquire_recursive>
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	f7ff ff5f 	bl	800cb98 <__sflush_r>
 800ccda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccdc:	07da      	lsls	r2, r3, #31
 800ccde:	4605      	mov	r5, r0
 800cce0:	d4e4      	bmi.n	800ccac <_fflush_r+0xc>
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	059b      	lsls	r3, r3, #22
 800cce6:	d4e1      	bmi.n	800ccac <_fflush_r+0xc>
 800cce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccea:	f7fd fc35 	bl	800a558 <__retarget_lock_release_recursive>
 800ccee:	e7dd      	b.n	800ccac <_fflush_r+0xc>

0800ccf0 <memmove>:
 800ccf0:	4288      	cmp	r0, r1
 800ccf2:	b510      	push	{r4, lr}
 800ccf4:	eb01 0402 	add.w	r4, r1, r2
 800ccf8:	d902      	bls.n	800cd00 <memmove+0x10>
 800ccfa:	4284      	cmp	r4, r0
 800ccfc:	4623      	mov	r3, r4
 800ccfe:	d807      	bhi.n	800cd10 <memmove+0x20>
 800cd00:	1e43      	subs	r3, r0, #1
 800cd02:	42a1      	cmp	r1, r4
 800cd04:	d008      	beq.n	800cd18 <memmove+0x28>
 800cd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd0e:	e7f8      	b.n	800cd02 <memmove+0x12>
 800cd10:	4402      	add	r2, r0
 800cd12:	4601      	mov	r1, r0
 800cd14:	428a      	cmp	r2, r1
 800cd16:	d100      	bne.n	800cd1a <memmove+0x2a>
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd22:	e7f7      	b.n	800cd14 <memmove+0x24>

0800cd24 <strncmp>:
 800cd24:	b510      	push	{r4, lr}
 800cd26:	b16a      	cbz	r2, 800cd44 <strncmp+0x20>
 800cd28:	3901      	subs	r1, #1
 800cd2a:	1884      	adds	r4, r0, r2
 800cd2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d103      	bne.n	800cd40 <strncmp+0x1c>
 800cd38:	42a0      	cmp	r0, r4
 800cd3a:	d001      	beq.n	800cd40 <strncmp+0x1c>
 800cd3c:	2a00      	cmp	r2, #0
 800cd3e:	d1f5      	bne.n	800cd2c <strncmp+0x8>
 800cd40:	1ad0      	subs	r0, r2, r3
 800cd42:	bd10      	pop	{r4, pc}
 800cd44:	4610      	mov	r0, r2
 800cd46:	e7fc      	b.n	800cd42 <strncmp+0x1e>

0800cd48 <_sbrk_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d06      	ldr	r5, [pc, #24]	@ (800cd64 <_sbrk_r+0x1c>)
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4604      	mov	r4, r0
 800cd50:	4608      	mov	r0, r1
 800cd52:	602b      	str	r3, [r5, #0]
 800cd54:	f7f4 fab6 	bl	80012c4 <_sbrk>
 800cd58:	1c43      	adds	r3, r0, #1
 800cd5a:	d102      	bne.n	800cd62 <_sbrk_r+0x1a>
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	b103      	cbz	r3, 800cd62 <_sbrk_r+0x1a>
 800cd60:	6023      	str	r3, [r4, #0]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	2400044c 	.word	0x2400044c

0800cd68 <memcpy>:
 800cd68:	440a      	add	r2, r1
 800cd6a:	4291      	cmp	r1, r2
 800cd6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd70:	d100      	bne.n	800cd74 <memcpy+0xc>
 800cd72:	4770      	bx	lr
 800cd74:	b510      	push	{r4, lr}
 800cd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd7e:	4291      	cmp	r1, r2
 800cd80:	d1f9      	bne.n	800cd76 <memcpy+0xe>
 800cd82:	bd10      	pop	{r4, pc}
 800cd84:	0000      	movs	r0, r0
	...

0800cd88 <nan>:
 800cd88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd90 <nan+0x8>
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	00000000 	.word	0x00000000
 800cd94:	7ff80000 	.word	0x7ff80000

0800cd98 <__assert_func>:
 800cd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd9a:	4614      	mov	r4, r2
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	4b09      	ldr	r3, [pc, #36]	@ (800cdc4 <__assert_func+0x2c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4605      	mov	r5, r0
 800cda4:	68d8      	ldr	r0, [r3, #12]
 800cda6:	b954      	cbnz	r4, 800cdbe <__assert_func+0x26>
 800cda8:	4b07      	ldr	r3, [pc, #28]	@ (800cdc8 <__assert_func+0x30>)
 800cdaa:	461c      	mov	r4, r3
 800cdac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdb0:	9100      	str	r1, [sp, #0]
 800cdb2:	462b      	mov	r3, r5
 800cdb4:	4905      	ldr	r1, [pc, #20]	@ (800cdcc <__assert_func+0x34>)
 800cdb6:	f000 fba7 	bl	800d508 <fiprintf>
 800cdba:	f000 fbb7 	bl	800d52c <abort>
 800cdbe:	4b04      	ldr	r3, [pc, #16]	@ (800cdd0 <__assert_func+0x38>)
 800cdc0:	e7f4      	b.n	800cdac <__assert_func+0x14>
 800cdc2:	bf00      	nop
 800cdc4:	2400001c 	.word	0x2400001c
 800cdc8:	0800dec5 	.word	0x0800dec5
 800cdcc:	0800de97 	.word	0x0800de97
 800cdd0:	0800de8a 	.word	0x0800de8a

0800cdd4 <_calloc_r>:
 800cdd4:	b570      	push	{r4, r5, r6, lr}
 800cdd6:	fba1 5402 	umull	r5, r4, r1, r2
 800cdda:	b93c      	cbnz	r4, 800cdec <_calloc_r+0x18>
 800cddc:	4629      	mov	r1, r5
 800cdde:	f7fe fa15 	bl	800b20c <_malloc_r>
 800cde2:	4606      	mov	r6, r0
 800cde4:	b928      	cbnz	r0, 800cdf2 <_calloc_r+0x1e>
 800cde6:	2600      	movs	r6, #0
 800cde8:	4630      	mov	r0, r6
 800cdea:	bd70      	pop	{r4, r5, r6, pc}
 800cdec:	220c      	movs	r2, #12
 800cdee:	6002      	str	r2, [r0, #0]
 800cdf0:	e7f9      	b.n	800cde6 <_calloc_r+0x12>
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	f7fd fb30 	bl	800a45a <memset>
 800cdfa:	e7f5      	b.n	800cde8 <_calloc_r+0x14>

0800cdfc <rshift>:
 800cdfc:	6903      	ldr	r3, [r0, #16]
 800cdfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce0a:	f100 0414 	add.w	r4, r0, #20
 800ce0e:	dd45      	ble.n	800ce9c <rshift+0xa0>
 800ce10:	f011 011f 	ands.w	r1, r1, #31
 800ce14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ce18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ce1c:	d10c      	bne.n	800ce38 <rshift+0x3c>
 800ce1e:	f100 0710 	add.w	r7, r0, #16
 800ce22:	4629      	mov	r1, r5
 800ce24:	42b1      	cmp	r1, r6
 800ce26:	d334      	bcc.n	800ce92 <rshift+0x96>
 800ce28:	1a9b      	subs	r3, r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	1eea      	subs	r2, r5, #3
 800ce2e:	4296      	cmp	r6, r2
 800ce30:	bf38      	it	cc
 800ce32:	2300      	movcc	r3, #0
 800ce34:	4423      	add	r3, r4
 800ce36:	e015      	b.n	800ce64 <rshift+0x68>
 800ce38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce3c:	f1c1 0820 	rsb	r8, r1, #32
 800ce40:	40cf      	lsrs	r7, r1
 800ce42:	f105 0e04 	add.w	lr, r5, #4
 800ce46:	46a1      	mov	r9, r4
 800ce48:	4576      	cmp	r6, lr
 800ce4a:	46f4      	mov	ip, lr
 800ce4c:	d815      	bhi.n	800ce7a <rshift+0x7e>
 800ce4e:	1a9a      	subs	r2, r3, r2
 800ce50:	0092      	lsls	r2, r2, #2
 800ce52:	3a04      	subs	r2, #4
 800ce54:	3501      	adds	r5, #1
 800ce56:	42ae      	cmp	r6, r5
 800ce58:	bf38      	it	cc
 800ce5a:	2200      	movcc	r2, #0
 800ce5c:	18a3      	adds	r3, r4, r2
 800ce5e:	50a7      	str	r7, [r4, r2]
 800ce60:	b107      	cbz	r7, 800ce64 <rshift+0x68>
 800ce62:	3304      	adds	r3, #4
 800ce64:	1b1a      	subs	r2, r3, r4
 800ce66:	42a3      	cmp	r3, r4
 800ce68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce6c:	bf08      	it	eq
 800ce6e:	2300      	moveq	r3, #0
 800ce70:	6102      	str	r2, [r0, #16]
 800ce72:	bf08      	it	eq
 800ce74:	6143      	streq	r3, [r0, #20]
 800ce76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce7a:	f8dc c000 	ldr.w	ip, [ip]
 800ce7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce82:	ea4c 0707 	orr.w	r7, ip, r7
 800ce86:	f849 7b04 	str.w	r7, [r9], #4
 800ce8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce8e:	40cf      	lsrs	r7, r1
 800ce90:	e7da      	b.n	800ce48 <rshift+0x4c>
 800ce92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce9a:	e7c3      	b.n	800ce24 <rshift+0x28>
 800ce9c:	4623      	mov	r3, r4
 800ce9e:	e7e1      	b.n	800ce64 <rshift+0x68>

0800cea0 <__hexdig_fun>:
 800cea0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cea4:	2b09      	cmp	r3, #9
 800cea6:	d802      	bhi.n	800ceae <__hexdig_fun+0xe>
 800cea8:	3820      	subs	r0, #32
 800ceaa:	b2c0      	uxtb	r0, r0
 800ceac:	4770      	bx	lr
 800ceae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ceb2:	2b05      	cmp	r3, #5
 800ceb4:	d801      	bhi.n	800ceba <__hexdig_fun+0x1a>
 800ceb6:	3847      	subs	r0, #71	@ 0x47
 800ceb8:	e7f7      	b.n	800ceaa <__hexdig_fun+0xa>
 800ceba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cebe:	2b05      	cmp	r3, #5
 800cec0:	d801      	bhi.n	800cec6 <__hexdig_fun+0x26>
 800cec2:	3827      	subs	r0, #39	@ 0x27
 800cec4:	e7f1      	b.n	800ceaa <__hexdig_fun+0xa>
 800cec6:	2000      	movs	r0, #0
 800cec8:	4770      	bx	lr
	...

0800cecc <__gethex>:
 800cecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced0:	b085      	sub	sp, #20
 800ced2:	468a      	mov	sl, r1
 800ced4:	9302      	str	r3, [sp, #8]
 800ced6:	680b      	ldr	r3, [r1, #0]
 800ced8:	9001      	str	r0, [sp, #4]
 800ceda:	4690      	mov	r8, r2
 800cedc:	1c9c      	adds	r4, r3, #2
 800cede:	46a1      	mov	r9, r4
 800cee0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cee4:	2830      	cmp	r0, #48	@ 0x30
 800cee6:	d0fa      	beq.n	800cede <__gethex+0x12>
 800cee8:	eba9 0303 	sub.w	r3, r9, r3
 800ceec:	f1a3 0b02 	sub.w	fp, r3, #2
 800cef0:	f7ff ffd6 	bl	800cea0 <__hexdig_fun>
 800cef4:	4605      	mov	r5, r0
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d168      	bne.n	800cfcc <__gethex+0x100>
 800cefa:	49a0      	ldr	r1, [pc, #640]	@ (800d17c <__gethex+0x2b0>)
 800cefc:	2201      	movs	r2, #1
 800cefe:	4648      	mov	r0, r9
 800cf00:	f7ff ff10 	bl	800cd24 <strncmp>
 800cf04:	4607      	mov	r7, r0
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d167      	bne.n	800cfda <__gethex+0x10e>
 800cf0a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cf0e:	4626      	mov	r6, r4
 800cf10:	f7ff ffc6 	bl	800cea0 <__hexdig_fun>
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d062      	beq.n	800cfde <__gethex+0x112>
 800cf18:	4623      	mov	r3, r4
 800cf1a:	7818      	ldrb	r0, [r3, #0]
 800cf1c:	2830      	cmp	r0, #48	@ 0x30
 800cf1e:	4699      	mov	r9, r3
 800cf20:	f103 0301 	add.w	r3, r3, #1
 800cf24:	d0f9      	beq.n	800cf1a <__gethex+0x4e>
 800cf26:	f7ff ffbb 	bl	800cea0 <__hexdig_fun>
 800cf2a:	fab0 f580 	clz	r5, r0
 800cf2e:	096d      	lsrs	r5, r5, #5
 800cf30:	f04f 0b01 	mov.w	fp, #1
 800cf34:	464a      	mov	r2, r9
 800cf36:	4616      	mov	r6, r2
 800cf38:	3201      	adds	r2, #1
 800cf3a:	7830      	ldrb	r0, [r6, #0]
 800cf3c:	f7ff ffb0 	bl	800cea0 <__hexdig_fun>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d1f8      	bne.n	800cf36 <__gethex+0x6a>
 800cf44:	498d      	ldr	r1, [pc, #564]	@ (800d17c <__gethex+0x2b0>)
 800cf46:	2201      	movs	r2, #1
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7ff feeb 	bl	800cd24 <strncmp>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d13f      	bne.n	800cfd2 <__gethex+0x106>
 800cf52:	b944      	cbnz	r4, 800cf66 <__gethex+0x9a>
 800cf54:	1c74      	adds	r4, r6, #1
 800cf56:	4622      	mov	r2, r4
 800cf58:	4616      	mov	r6, r2
 800cf5a:	3201      	adds	r2, #1
 800cf5c:	7830      	ldrb	r0, [r6, #0]
 800cf5e:	f7ff ff9f 	bl	800cea0 <__hexdig_fun>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	d1f8      	bne.n	800cf58 <__gethex+0x8c>
 800cf66:	1ba4      	subs	r4, r4, r6
 800cf68:	00a7      	lsls	r7, r4, #2
 800cf6a:	7833      	ldrb	r3, [r6, #0]
 800cf6c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cf70:	2b50      	cmp	r3, #80	@ 0x50
 800cf72:	d13e      	bne.n	800cff2 <__gethex+0x126>
 800cf74:	7873      	ldrb	r3, [r6, #1]
 800cf76:	2b2b      	cmp	r3, #43	@ 0x2b
 800cf78:	d033      	beq.n	800cfe2 <__gethex+0x116>
 800cf7a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cf7c:	d034      	beq.n	800cfe8 <__gethex+0x11c>
 800cf7e:	1c71      	adds	r1, r6, #1
 800cf80:	2400      	movs	r4, #0
 800cf82:	7808      	ldrb	r0, [r1, #0]
 800cf84:	f7ff ff8c 	bl	800cea0 <__hexdig_fun>
 800cf88:	1e43      	subs	r3, r0, #1
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b18      	cmp	r3, #24
 800cf8e:	d830      	bhi.n	800cff2 <__gethex+0x126>
 800cf90:	f1a0 0210 	sub.w	r2, r0, #16
 800cf94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf98:	f7ff ff82 	bl	800cea0 <__hexdig_fun>
 800cf9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cfa0:	fa5f fc8c 	uxtb.w	ip, ip
 800cfa4:	f1bc 0f18 	cmp.w	ip, #24
 800cfa8:	f04f 030a 	mov.w	r3, #10
 800cfac:	d91e      	bls.n	800cfec <__gethex+0x120>
 800cfae:	b104      	cbz	r4, 800cfb2 <__gethex+0xe6>
 800cfb0:	4252      	negs	r2, r2
 800cfb2:	4417      	add	r7, r2
 800cfb4:	f8ca 1000 	str.w	r1, [sl]
 800cfb8:	b1ed      	cbz	r5, 800cff6 <__gethex+0x12a>
 800cfba:	f1bb 0f00 	cmp.w	fp, #0
 800cfbe:	bf0c      	ite	eq
 800cfc0:	2506      	moveq	r5, #6
 800cfc2:	2500      	movne	r5, #0
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	b005      	add	sp, #20
 800cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	2500      	movs	r5, #0
 800cfce:	462c      	mov	r4, r5
 800cfd0:	e7b0      	b.n	800cf34 <__gethex+0x68>
 800cfd2:	2c00      	cmp	r4, #0
 800cfd4:	d1c7      	bne.n	800cf66 <__gethex+0x9a>
 800cfd6:	4627      	mov	r7, r4
 800cfd8:	e7c7      	b.n	800cf6a <__gethex+0x9e>
 800cfda:	464e      	mov	r6, r9
 800cfdc:	462f      	mov	r7, r5
 800cfde:	2501      	movs	r5, #1
 800cfe0:	e7c3      	b.n	800cf6a <__gethex+0x9e>
 800cfe2:	2400      	movs	r4, #0
 800cfe4:	1cb1      	adds	r1, r6, #2
 800cfe6:	e7cc      	b.n	800cf82 <__gethex+0xb6>
 800cfe8:	2401      	movs	r4, #1
 800cfea:	e7fb      	b.n	800cfe4 <__gethex+0x118>
 800cfec:	fb03 0002 	mla	r0, r3, r2, r0
 800cff0:	e7ce      	b.n	800cf90 <__gethex+0xc4>
 800cff2:	4631      	mov	r1, r6
 800cff4:	e7de      	b.n	800cfb4 <__gethex+0xe8>
 800cff6:	eba6 0309 	sub.w	r3, r6, r9
 800cffa:	3b01      	subs	r3, #1
 800cffc:	4629      	mov	r1, r5
 800cffe:	2b07      	cmp	r3, #7
 800d000:	dc0a      	bgt.n	800d018 <__gethex+0x14c>
 800d002:	9801      	ldr	r0, [sp, #4]
 800d004:	f7fe f98e 	bl	800b324 <_Balloc>
 800d008:	4604      	mov	r4, r0
 800d00a:	b940      	cbnz	r0, 800d01e <__gethex+0x152>
 800d00c:	4b5c      	ldr	r3, [pc, #368]	@ (800d180 <__gethex+0x2b4>)
 800d00e:	4602      	mov	r2, r0
 800d010:	21e4      	movs	r1, #228	@ 0xe4
 800d012:	485c      	ldr	r0, [pc, #368]	@ (800d184 <__gethex+0x2b8>)
 800d014:	f7ff fec0 	bl	800cd98 <__assert_func>
 800d018:	3101      	adds	r1, #1
 800d01a:	105b      	asrs	r3, r3, #1
 800d01c:	e7ef      	b.n	800cffe <__gethex+0x132>
 800d01e:	f100 0a14 	add.w	sl, r0, #20
 800d022:	2300      	movs	r3, #0
 800d024:	4655      	mov	r5, sl
 800d026:	469b      	mov	fp, r3
 800d028:	45b1      	cmp	r9, r6
 800d02a:	d337      	bcc.n	800d09c <__gethex+0x1d0>
 800d02c:	f845 bb04 	str.w	fp, [r5], #4
 800d030:	eba5 050a 	sub.w	r5, r5, sl
 800d034:	10ad      	asrs	r5, r5, #2
 800d036:	6125      	str	r5, [r4, #16]
 800d038:	4658      	mov	r0, fp
 800d03a:	f7fe fa65 	bl	800b508 <__hi0bits>
 800d03e:	016d      	lsls	r5, r5, #5
 800d040:	f8d8 6000 	ldr.w	r6, [r8]
 800d044:	1a2d      	subs	r5, r5, r0
 800d046:	42b5      	cmp	r5, r6
 800d048:	dd54      	ble.n	800d0f4 <__gethex+0x228>
 800d04a:	1bad      	subs	r5, r5, r6
 800d04c:	4629      	mov	r1, r5
 800d04e:	4620      	mov	r0, r4
 800d050:	f7fe fdf6 	bl	800bc40 <__any_on>
 800d054:	4681      	mov	r9, r0
 800d056:	b178      	cbz	r0, 800d078 <__gethex+0x1ac>
 800d058:	1e6b      	subs	r3, r5, #1
 800d05a:	1159      	asrs	r1, r3, #5
 800d05c:	f003 021f 	and.w	r2, r3, #31
 800d060:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d064:	f04f 0901 	mov.w	r9, #1
 800d068:	fa09 f202 	lsl.w	r2, r9, r2
 800d06c:	420a      	tst	r2, r1
 800d06e:	d003      	beq.n	800d078 <__gethex+0x1ac>
 800d070:	454b      	cmp	r3, r9
 800d072:	dc36      	bgt.n	800d0e2 <__gethex+0x216>
 800d074:	f04f 0902 	mov.w	r9, #2
 800d078:	4629      	mov	r1, r5
 800d07a:	4620      	mov	r0, r4
 800d07c:	f7ff febe 	bl	800cdfc <rshift>
 800d080:	442f      	add	r7, r5
 800d082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d086:	42bb      	cmp	r3, r7
 800d088:	da42      	bge.n	800d110 <__gethex+0x244>
 800d08a:	9801      	ldr	r0, [sp, #4]
 800d08c:	4621      	mov	r1, r4
 800d08e:	f7fe f989 	bl	800b3a4 <_Bfree>
 800d092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d094:	2300      	movs	r3, #0
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	25a3      	movs	r5, #163	@ 0xa3
 800d09a:	e793      	b.n	800cfc4 <__gethex+0xf8>
 800d09c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d0a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d0a2:	d012      	beq.n	800d0ca <__gethex+0x1fe>
 800d0a4:	2b20      	cmp	r3, #32
 800d0a6:	d104      	bne.n	800d0b2 <__gethex+0x1e6>
 800d0a8:	f845 bb04 	str.w	fp, [r5], #4
 800d0ac:	f04f 0b00 	mov.w	fp, #0
 800d0b0:	465b      	mov	r3, fp
 800d0b2:	7830      	ldrb	r0, [r6, #0]
 800d0b4:	9303      	str	r3, [sp, #12]
 800d0b6:	f7ff fef3 	bl	800cea0 <__hexdig_fun>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	f000 000f 	and.w	r0, r0, #15
 800d0c0:	4098      	lsls	r0, r3
 800d0c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	e7ae      	b.n	800d028 <__gethex+0x15c>
 800d0ca:	45b1      	cmp	r9, r6
 800d0cc:	d8ea      	bhi.n	800d0a4 <__gethex+0x1d8>
 800d0ce:	492b      	ldr	r1, [pc, #172]	@ (800d17c <__gethex+0x2b0>)
 800d0d0:	9303      	str	r3, [sp, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f7ff fe25 	bl	800cd24 <strncmp>
 800d0da:	9b03      	ldr	r3, [sp, #12]
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d1e1      	bne.n	800d0a4 <__gethex+0x1d8>
 800d0e0:	e7a2      	b.n	800d028 <__gethex+0x15c>
 800d0e2:	1ea9      	subs	r1, r5, #2
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f7fe fdab 	bl	800bc40 <__any_on>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d0c2      	beq.n	800d074 <__gethex+0x1a8>
 800d0ee:	f04f 0903 	mov.w	r9, #3
 800d0f2:	e7c1      	b.n	800d078 <__gethex+0x1ac>
 800d0f4:	da09      	bge.n	800d10a <__gethex+0x23e>
 800d0f6:	1b75      	subs	r5, r6, r5
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	9801      	ldr	r0, [sp, #4]
 800d0fc:	462a      	mov	r2, r5
 800d0fe:	f7fe fb69 	bl	800b7d4 <__lshift>
 800d102:	1b7f      	subs	r7, r7, r5
 800d104:	4604      	mov	r4, r0
 800d106:	f100 0a14 	add.w	sl, r0, #20
 800d10a:	f04f 0900 	mov.w	r9, #0
 800d10e:	e7b8      	b.n	800d082 <__gethex+0x1b6>
 800d110:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d114:	42bd      	cmp	r5, r7
 800d116:	dd6f      	ble.n	800d1f8 <__gethex+0x32c>
 800d118:	1bed      	subs	r5, r5, r7
 800d11a:	42ae      	cmp	r6, r5
 800d11c:	dc34      	bgt.n	800d188 <__gethex+0x2bc>
 800d11e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d122:	2b02      	cmp	r3, #2
 800d124:	d022      	beq.n	800d16c <__gethex+0x2a0>
 800d126:	2b03      	cmp	r3, #3
 800d128:	d024      	beq.n	800d174 <__gethex+0x2a8>
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d115      	bne.n	800d15a <__gethex+0x28e>
 800d12e:	42ae      	cmp	r6, r5
 800d130:	d113      	bne.n	800d15a <__gethex+0x28e>
 800d132:	2e01      	cmp	r6, #1
 800d134:	d10b      	bne.n	800d14e <__gethex+0x282>
 800d136:	9a02      	ldr	r2, [sp, #8]
 800d138:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d13c:	6013      	str	r3, [r2, #0]
 800d13e:	2301      	movs	r3, #1
 800d140:	6123      	str	r3, [r4, #16]
 800d142:	f8ca 3000 	str.w	r3, [sl]
 800d146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d148:	2562      	movs	r5, #98	@ 0x62
 800d14a:	601c      	str	r4, [r3, #0]
 800d14c:	e73a      	b.n	800cfc4 <__gethex+0xf8>
 800d14e:	1e71      	subs	r1, r6, #1
 800d150:	4620      	mov	r0, r4
 800d152:	f7fe fd75 	bl	800bc40 <__any_on>
 800d156:	2800      	cmp	r0, #0
 800d158:	d1ed      	bne.n	800d136 <__gethex+0x26a>
 800d15a:	9801      	ldr	r0, [sp, #4]
 800d15c:	4621      	mov	r1, r4
 800d15e:	f7fe f921 	bl	800b3a4 <_Bfree>
 800d162:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d164:	2300      	movs	r3, #0
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	2550      	movs	r5, #80	@ 0x50
 800d16a:	e72b      	b.n	800cfc4 <__gethex+0xf8>
 800d16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1f3      	bne.n	800d15a <__gethex+0x28e>
 800d172:	e7e0      	b.n	800d136 <__gethex+0x26a>
 800d174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1dd      	bne.n	800d136 <__gethex+0x26a>
 800d17a:	e7ee      	b.n	800d15a <__gethex+0x28e>
 800d17c:	0800dd18 	.word	0x0800dd18
 800d180:	0800dbb1 	.word	0x0800dbb1
 800d184:	0800dec6 	.word	0x0800dec6
 800d188:	1e6f      	subs	r7, r5, #1
 800d18a:	f1b9 0f00 	cmp.w	r9, #0
 800d18e:	d130      	bne.n	800d1f2 <__gethex+0x326>
 800d190:	b127      	cbz	r7, 800d19c <__gethex+0x2d0>
 800d192:	4639      	mov	r1, r7
 800d194:	4620      	mov	r0, r4
 800d196:	f7fe fd53 	bl	800bc40 <__any_on>
 800d19a:	4681      	mov	r9, r0
 800d19c:	117a      	asrs	r2, r7, #5
 800d19e:	2301      	movs	r3, #1
 800d1a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d1a4:	f007 071f 	and.w	r7, r7, #31
 800d1a8:	40bb      	lsls	r3, r7
 800d1aa:	4213      	tst	r3, r2
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	bf18      	it	ne
 800d1b2:	f049 0902 	orrne.w	r9, r9, #2
 800d1b6:	f7ff fe21 	bl	800cdfc <rshift>
 800d1ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d1be:	1b76      	subs	r6, r6, r5
 800d1c0:	2502      	movs	r5, #2
 800d1c2:	f1b9 0f00 	cmp.w	r9, #0
 800d1c6:	d047      	beq.n	800d258 <__gethex+0x38c>
 800d1c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d015      	beq.n	800d1fc <__gethex+0x330>
 800d1d0:	2b03      	cmp	r3, #3
 800d1d2:	d017      	beq.n	800d204 <__gethex+0x338>
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d109      	bne.n	800d1ec <__gethex+0x320>
 800d1d8:	f019 0f02 	tst.w	r9, #2
 800d1dc:	d006      	beq.n	800d1ec <__gethex+0x320>
 800d1de:	f8da 3000 	ldr.w	r3, [sl]
 800d1e2:	ea49 0903 	orr.w	r9, r9, r3
 800d1e6:	f019 0f01 	tst.w	r9, #1
 800d1ea:	d10e      	bne.n	800d20a <__gethex+0x33e>
 800d1ec:	f045 0510 	orr.w	r5, r5, #16
 800d1f0:	e032      	b.n	800d258 <__gethex+0x38c>
 800d1f2:	f04f 0901 	mov.w	r9, #1
 800d1f6:	e7d1      	b.n	800d19c <__gethex+0x2d0>
 800d1f8:	2501      	movs	r5, #1
 800d1fa:	e7e2      	b.n	800d1c2 <__gethex+0x2f6>
 800d1fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1fe:	f1c3 0301 	rsb	r3, r3, #1
 800d202:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0f0      	beq.n	800d1ec <__gethex+0x320>
 800d20a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d20e:	f104 0314 	add.w	r3, r4, #20
 800d212:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d216:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d21a:	f04f 0c00 	mov.w	ip, #0
 800d21e:	4618      	mov	r0, r3
 800d220:	f853 2b04 	ldr.w	r2, [r3], #4
 800d224:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d228:	d01b      	beq.n	800d262 <__gethex+0x396>
 800d22a:	3201      	adds	r2, #1
 800d22c:	6002      	str	r2, [r0, #0]
 800d22e:	2d02      	cmp	r5, #2
 800d230:	f104 0314 	add.w	r3, r4, #20
 800d234:	d13c      	bne.n	800d2b0 <__gethex+0x3e4>
 800d236:	f8d8 2000 	ldr.w	r2, [r8]
 800d23a:	3a01      	subs	r2, #1
 800d23c:	42b2      	cmp	r2, r6
 800d23e:	d109      	bne.n	800d254 <__gethex+0x388>
 800d240:	1171      	asrs	r1, r6, #5
 800d242:	2201      	movs	r2, #1
 800d244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d248:	f006 061f 	and.w	r6, r6, #31
 800d24c:	fa02 f606 	lsl.w	r6, r2, r6
 800d250:	421e      	tst	r6, r3
 800d252:	d13a      	bne.n	800d2ca <__gethex+0x3fe>
 800d254:	f045 0520 	orr.w	r5, r5, #32
 800d258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d25a:	601c      	str	r4, [r3, #0]
 800d25c:	9b02      	ldr	r3, [sp, #8]
 800d25e:	601f      	str	r7, [r3, #0]
 800d260:	e6b0      	b.n	800cfc4 <__gethex+0xf8>
 800d262:	4299      	cmp	r1, r3
 800d264:	f843 cc04 	str.w	ip, [r3, #-4]
 800d268:	d8d9      	bhi.n	800d21e <__gethex+0x352>
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	459b      	cmp	fp, r3
 800d26e:	db17      	blt.n	800d2a0 <__gethex+0x3d4>
 800d270:	6861      	ldr	r1, [r4, #4]
 800d272:	9801      	ldr	r0, [sp, #4]
 800d274:	3101      	adds	r1, #1
 800d276:	f7fe f855 	bl	800b324 <_Balloc>
 800d27a:	4681      	mov	r9, r0
 800d27c:	b918      	cbnz	r0, 800d286 <__gethex+0x3ba>
 800d27e:	4b1a      	ldr	r3, [pc, #104]	@ (800d2e8 <__gethex+0x41c>)
 800d280:	4602      	mov	r2, r0
 800d282:	2184      	movs	r1, #132	@ 0x84
 800d284:	e6c5      	b.n	800d012 <__gethex+0x146>
 800d286:	6922      	ldr	r2, [r4, #16]
 800d288:	3202      	adds	r2, #2
 800d28a:	f104 010c 	add.w	r1, r4, #12
 800d28e:	0092      	lsls	r2, r2, #2
 800d290:	300c      	adds	r0, #12
 800d292:	f7ff fd69 	bl	800cd68 <memcpy>
 800d296:	4621      	mov	r1, r4
 800d298:	9801      	ldr	r0, [sp, #4]
 800d29a:	f7fe f883 	bl	800b3a4 <_Bfree>
 800d29e:	464c      	mov	r4, r9
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	1c5a      	adds	r2, r3, #1
 800d2a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2a8:	6122      	str	r2, [r4, #16]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	615a      	str	r2, [r3, #20]
 800d2ae:	e7be      	b.n	800d22e <__gethex+0x362>
 800d2b0:	6922      	ldr	r2, [r4, #16]
 800d2b2:	455a      	cmp	r2, fp
 800d2b4:	dd0b      	ble.n	800d2ce <__gethex+0x402>
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f7ff fd9f 	bl	800cdfc <rshift>
 800d2be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2c2:	3701      	adds	r7, #1
 800d2c4:	42bb      	cmp	r3, r7
 800d2c6:	f6ff aee0 	blt.w	800d08a <__gethex+0x1be>
 800d2ca:	2501      	movs	r5, #1
 800d2cc:	e7c2      	b.n	800d254 <__gethex+0x388>
 800d2ce:	f016 061f 	ands.w	r6, r6, #31
 800d2d2:	d0fa      	beq.n	800d2ca <__gethex+0x3fe>
 800d2d4:	4453      	add	r3, sl
 800d2d6:	f1c6 0620 	rsb	r6, r6, #32
 800d2da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d2de:	f7fe f913 	bl	800b508 <__hi0bits>
 800d2e2:	42b0      	cmp	r0, r6
 800d2e4:	dbe7      	blt.n	800d2b6 <__gethex+0x3ea>
 800d2e6:	e7f0      	b.n	800d2ca <__gethex+0x3fe>
 800d2e8:	0800dbb1 	.word	0x0800dbb1

0800d2ec <L_shift>:
 800d2ec:	f1c2 0208 	rsb	r2, r2, #8
 800d2f0:	0092      	lsls	r2, r2, #2
 800d2f2:	b570      	push	{r4, r5, r6, lr}
 800d2f4:	f1c2 0620 	rsb	r6, r2, #32
 800d2f8:	6843      	ldr	r3, [r0, #4]
 800d2fa:	6804      	ldr	r4, [r0, #0]
 800d2fc:	fa03 f506 	lsl.w	r5, r3, r6
 800d300:	432c      	orrs	r4, r5
 800d302:	40d3      	lsrs	r3, r2
 800d304:	6004      	str	r4, [r0, #0]
 800d306:	f840 3f04 	str.w	r3, [r0, #4]!
 800d30a:	4288      	cmp	r0, r1
 800d30c:	d3f4      	bcc.n	800d2f8 <L_shift+0xc>
 800d30e:	bd70      	pop	{r4, r5, r6, pc}

0800d310 <__match>:
 800d310:	b530      	push	{r4, r5, lr}
 800d312:	6803      	ldr	r3, [r0, #0]
 800d314:	3301      	adds	r3, #1
 800d316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d31a:	b914      	cbnz	r4, 800d322 <__match+0x12>
 800d31c:	6003      	str	r3, [r0, #0]
 800d31e:	2001      	movs	r0, #1
 800d320:	bd30      	pop	{r4, r5, pc}
 800d322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d326:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d32a:	2d19      	cmp	r5, #25
 800d32c:	bf98      	it	ls
 800d32e:	3220      	addls	r2, #32
 800d330:	42a2      	cmp	r2, r4
 800d332:	d0f0      	beq.n	800d316 <__match+0x6>
 800d334:	2000      	movs	r0, #0
 800d336:	e7f3      	b.n	800d320 <__match+0x10>

0800d338 <__hexnan>:
 800d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	680b      	ldr	r3, [r1, #0]
 800d33e:	6801      	ldr	r1, [r0, #0]
 800d340:	115e      	asrs	r6, r3, #5
 800d342:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d346:	f013 031f 	ands.w	r3, r3, #31
 800d34a:	b087      	sub	sp, #28
 800d34c:	bf18      	it	ne
 800d34e:	3604      	addne	r6, #4
 800d350:	2500      	movs	r5, #0
 800d352:	1f37      	subs	r7, r6, #4
 800d354:	4682      	mov	sl, r0
 800d356:	4690      	mov	r8, r2
 800d358:	9301      	str	r3, [sp, #4]
 800d35a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d35e:	46b9      	mov	r9, r7
 800d360:	463c      	mov	r4, r7
 800d362:	9502      	str	r5, [sp, #8]
 800d364:	46ab      	mov	fp, r5
 800d366:	784a      	ldrb	r2, [r1, #1]
 800d368:	1c4b      	adds	r3, r1, #1
 800d36a:	9303      	str	r3, [sp, #12]
 800d36c:	b342      	cbz	r2, 800d3c0 <__hexnan+0x88>
 800d36e:	4610      	mov	r0, r2
 800d370:	9105      	str	r1, [sp, #20]
 800d372:	9204      	str	r2, [sp, #16]
 800d374:	f7ff fd94 	bl	800cea0 <__hexdig_fun>
 800d378:	2800      	cmp	r0, #0
 800d37a:	d151      	bne.n	800d420 <__hexnan+0xe8>
 800d37c:	9a04      	ldr	r2, [sp, #16]
 800d37e:	9905      	ldr	r1, [sp, #20]
 800d380:	2a20      	cmp	r2, #32
 800d382:	d818      	bhi.n	800d3b6 <__hexnan+0x7e>
 800d384:	9b02      	ldr	r3, [sp, #8]
 800d386:	459b      	cmp	fp, r3
 800d388:	dd13      	ble.n	800d3b2 <__hexnan+0x7a>
 800d38a:	454c      	cmp	r4, r9
 800d38c:	d206      	bcs.n	800d39c <__hexnan+0x64>
 800d38e:	2d07      	cmp	r5, #7
 800d390:	dc04      	bgt.n	800d39c <__hexnan+0x64>
 800d392:	462a      	mov	r2, r5
 800d394:	4649      	mov	r1, r9
 800d396:	4620      	mov	r0, r4
 800d398:	f7ff ffa8 	bl	800d2ec <L_shift>
 800d39c:	4544      	cmp	r4, r8
 800d39e:	d952      	bls.n	800d446 <__hexnan+0x10e>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f1a4 0904 	sub.w	r9, r4, #4
 800d3a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3aa:	f8cd b008 	str.w	fp, [sp, #8]
 800d3ae:	464c      	mov	r4, r9
 800d3b0:	461d      	mov	r5, r3
 800d3b2:	9903      	ldr	r1, [sp, #12]
 800d3b4:	e7d7      	b.n	800d366 <__hexnan+0x2e>
 800d3b6:	2a29      	cmp	r2, #41	@ 0x29
 800d3b8:	d157      	bne.n	800d46a <__hexnan+0x132>
 800d3ba:	3102      	adds	r1, #2
 800d3bc:	f8ca 1000 	str.w	r1, [sl]
 800d3c0:	f1bb 0f00 	cmp.w	fp, #0
 800d3c4:	d051      	beq.n	800d46a <__hexnan+0x132>
 800d3c6:	454c      	cmp	r4, r9
 800d3c8:	d206      	bcs.n	800d3d8 <__hexnan+0xa0>
 800d3ca:	2d07      	cmp	r5, #7
 800d3cc:	dc04      	bgt.n	800d3d8 <__hexnan+0xa0>
 800d3ce:	462a      	mov	r2, r5
 800d3d0:	4649      	mov	r1, r9
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f7ff ff8a 	bl	800d2ec <L_shift>
 800d3d8:	4544      	cmp	r4, r8
 800d3da:	d936      	bls.n	800d44a <__hexnan+0x112>
 800d3dc:	f1a8 0204 	sub.w	r2, r8, #4
 800d3e0:	4623      	mov	r3, r4
 800d3e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d3ea:	429f      	cmp	r7, r3
 800d3ec:	d2f9      	bcs.n	800d3e2 <__hexnan+0xaa>
 800d3ee:	1b3b      	subs	r3, r7, r4
 800d3f0:	f023 0303 	bic.w	r3, r3, #3
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	3401      	adds	r4, #1
 800d3f8:	3e03      	subs	r6, #3
 800d3fa:	42b4      	cmp	r4, r6
 800d3fc:	bf88      	it	hi
 800d3fe:	2304      	movhi	r3, #4
 800d400:	4443      	add	r3, r8
 800d402:	2200      	movs	r2, #0
 800d404:	f843 2b04 	str.w	r2, [r3], #4
 800d408:	429f      	cmp	r7, r3
 800d40a:	d2fb      	bcs.n	800d404 <__hexnan+0xcc>
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	b91b      	cbnz	r3, 800d418 <__hexnan+0xe0>
 800d410:	4547      	cmp	r7, r8
 800d412:	d128      	bne.n	800d466 <__hexnan+0x12e>
 800d414:	2301      	movs	r3, #1
 800d416:	603b      	str	r3, [r7, #0]
 800d418:	2005      	movs	r0, #5
 800d41a:	b007      	add	sp, #28
 800d41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d420:	3501      	adds	r5, #1
 800d422:	2d08      	cmp	r5, #8
 800d424:	f10b 0b01 	add.w	fp, fp, #1
 800d428:	dd06      	ble.n	800d438 <__hexnan+0x100>
 800d42a:	4544      	cmp	r4, r8
 800d42c:	d9c1      	bls.n	800d3b2 <__hexnan+0x7a>
 800d42e:	2300      	movs	r3, #0
 800d430:	f844 3c04 	str.w	r3, [r4, #-4]
 800d434:	2501      	movs	r5, #1
 800d436:	3c04      	subs	r4, #4
 800d438:	6822      	ldr	r2, [r4, #0]
 800d43a:	f000 000f 	and.w	r0, r0, #15
 800d43e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d442:	6020      	str	r0, [r4, #0]
 800d444:	e7b5      	b.n	800d3b2 <__hexnan+0x7a>
 800d446:	2508      	movs	r5, #8
 800d448:	e7b3      	b.n	800d3b2 <__hexnan+0x7a>
 800d44a:	9b01      	ldr	r3, [sp, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d0dd      	beq.n	800d40c <__hexnan+0xd4>
 800d450:	f1c3 0320 	rsb	r3, r3, #32
 800d454:	f04f 32ff 	mov.w	r2, #4294967295
 800d458:	40da      	lsrs	r2, r3
 800d45a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d45e:	4013      	ands	r3, r2
 800d460:	f846 3c04 	str.w	r3, [r6, #-4]
 800d464:	e7d2      	b.n	800d40c <__hexnan+0xd4>
 800d466:	3f04      	subs	r7, #4
 800d468:	e7d0      	b.n	800d40c <__hexnan+0xd4>
 800d46a:	2004      	movs	r0, #4
 800d46c:	e7d5      	b.n	800d41a <__hexnan+0xe2>

0800d46e <__ascii_mbtowc>:
 800d46e:	b082      	sub	sp, #8
 800d470:	b901      	cbnz	r1, 800d474 <__ascii_mbtowc+0x6>
 800d472:	a901      	add	r1, sp, #4
 800d474:	b142      	cbz	r2, 800d488 <__ascii_mbtowc+0x1a>
 800d476:	b14b      	cbz	r3, 800d48c <__ascii_mbtowc+0x1e>
 800d478:	7813      	ldrb	r3, [r2, #0]
 800d47a:	600b      	str	r3, [r1, #0]
 800d47c:	7812      	ldrb	r2, [r2, #0]
 800d47e:	1e10      	subs	r0, r2, #0
 800d480:	bf18      	it	ne
 800d482:	2001      	movne	r0, #1
 800d484:	b002      	add	sp, #8
 800d486:	4770      	bx	lr
 800d488:	4610      	mov	r0, r2
 800d48a:	e7fb      	b.n	800d484 <__ascii_mbtowc+0x16>
 800d48c:	f06f 0001 	mvn.w	r0, #1
 800d490:	e7f8      	b.n	800d484 <__ascii_mbtowc+0x16>

0800d492 <_realloc_r>:
 800d492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d496:	4680      	mov	r8, r0
 800d498:	4615      	mov	r5, r2
 800d49a:	460c      	mov	r4, r1
 800d49c:	b921      	cbnz	r1, 800d4a8 <_realloc_r+0x16>
 800d49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	f7fd beb2 	b.w	800b20c <_malloc_r>
 800d4a8:	b92a      	cbnz	r2, 800d4b6 <_realloc_r+0x24>
 800d4aa:	f7fd fe3b 	bl	800b124 <_free_r>
 800d4ae:	2400      	movs	r4, #0
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4b6:	f000 f840 	bl	800d53a <_malloc_usable_size_r>
 800d4ba:	4285      	cmp	r5, r0
 800d4bc:	4606      	mov	r6, r0
 800d4be:	d802      	bhi.n	800d4c6 <_realloc_r+0x34>
 800d4c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d4c4:	d8f4      	bhi.n	800d4b0 <_realloc_r+0x1e>
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	f7fd fe9f 	bl	800b20c <_malloc_r>
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d0ec      	beq.n	800d4ae <_realloc_r+0x1c>
 800d4d4:	42b5      	cmp	r5, r6
 800d4d6:	462a      	mov	r2, r5
 800d4d8:	4621      	mov	r1, r4
 800d4da:	bf28      	it	cs
 800d4dc:	4632      	movcs	r2, r6
 800d4de:	f7ff fc43 	bl	800cd68 <memcpy>
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	4640      	mov	r0, r8
 800d4e6:	f7fd fe1d 	bl	800b124 <_free_r>
 800d4ea:	463c      	mov	r4, r7
 800d4ec:	e7e0      	b.n	800d4b0 <_realloc_r+0x1e>

0800d4ee <__ascii_wctomb>:
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	4608      	mov	r0, r1
 800d4f2:	b141      	cbz	r1, 800d506 <__ascii_wctomb+0x18>
 800d4f4:	2aff      	cmp	r2, #255	@ 0xff
 800d4f6:	d904      	bls.n	800d502 <__ascii_wctomb+0x14>
 800d4f8:	228a      	movs	r2, #138	@ 0x8a
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d500:	4770      	bx	lr
 800d502:	700a      	strb	r2, [r1, #0]
 800d504:	2001      	movs	r0, #1
 800d506:	4770      	bx	lr

0800d508 <fiprintf>:
 800d508:	b40e      	push	{r1, r2, r3}
 800d50a:	b503      	push	{r0, r1, lr}
 800d50c:	4601      	mov	r1, r0
 800d50e:	ab03      	add	r3, sp, #12
 800d510:	4805      	ldr	r0, [pc, #20]	@ (800d528 <fiprintf+0x20>)
 800d512:	f853 2b04 	ldr.w	r2, [r3], #4
 800d516:	6800      	ldr	r0, [r0, #0]
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	f000 f83f 	bl	800d59c <_vfiprintf_r>
 800d51e:	b002      	add	sp, #8
 800d520:	f85d eb04 	ldr.w	lr, [sp], #4
 800d524:	b003      	add	sp, #12
 800d526:	4770      	bx	lr
 800d528:	2400001c 	.word	0x2400001c

0800d52c <abort>:
 800d52c:	b508      	push	{r3, lr}
 800d52e:	2006      	movs	r0, #6
 800d530:	f000 fa08 	bl	800d944 <raise>
 800d534:	2001      	movs	r0, #1
 800d536:	f7f3 fe4d 	bl	80011d4 <_exit>

0800d53a <_malloc_usable_size_r>:
 800d53a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d53e:	1f18      	subs	r0, r3, #4
 800d540:	2b00      	cmp	r3, #0
 800d542:	bfbc      	itt	lt
 800d544:	580b      	ldrlt	r3, [r1, r0]
 800d546:	18c0      	addlt	r0, r0, r3
 800d548:	4770      	bx	lr

0800d54a <__sfputc_r>:
 800d54a:	6893      	ldr	r3, [r2, #8]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	b410      	push	{r4}
 800d552:	6093      	str	r3, [r2, #8]
 800d554:	da08      	bge.n	800d568 <__sfputc_r+0x1e>
 800d556:	6994      	ldr	r4, [r2, #24]
 800d558:	42a3      	cmp	r3, r4
 800d55a:	db01      	blt.n	800d560 <__sfputc_r+0x16>
 800d55c:	290a      	cmp	r1, #10
 800d55e:	d103      	bne.n	800d568 <__sfputc_r+0x1e>
 800d560:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d564:	f000 b932 	b.w	800d7cc <__swbuf_r>
 800d568:	6813      	ldr	r3, [r2, #0]
 800d56a:	1c58      	adds	r0, r3, #1
 800d56c:	6010      	str	r0, [r2, #0]
 800d56e:	7019      	strb	r1, [r3, #0]
 800d570:	4608      	mov	r0, r1
 800d572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <__sfputs_r>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	4606      	mov	r6, r0
 800d57c:	460f      	mov	r7, r1
 800d57e:	4614      	mov	r4, r2
 800d580:	18d5      	adds	r5, r2, r3
 800d582:	42ac      	cmp	r4, r5
 800d584:	d101      	bne.n	800d58a <__sfputs_r+0x12>
 800d586:	2000      	movs	r0, #0
 800d588:	e007      	b.n	800d59a <__sfputs_r+0x22>
 800d58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58e:	463a      	mov	r2, r7
 800d590:	4630      	mov	r0, r6
 800d592:	f7ff ffda 	bl	800d54a <__sfputc_r>
 800d596:	1c43      	adds	r3, r0, #1
 800d598:	d1f3      	bne.n	800d582 <__sfputs_r+0xa>
 800d59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d59c <_vfiprintf_r>:
 800d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	b09d      	sub	sp, #116	@ 0x74
 800d5a4:	4614      	mov	r4, r2
 800d5a6:	4698      	mov	r8, r3
 800d5a8:	4606      	mov	r6, r0
 800d5aa:	b118      	cbz	r0, 800d5b4 <_vfiprintf_r+0x18>
 800d5ac:	6a03      	ldr	r3, [r0, #32]
 800d5ae:	b90b      	cbnz	r3, 800d5b4 <_vfiprintf_r+0x18>
 800d5b0:	f7fc feba 	bl	800a328 <__sinit>
 800d5b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5b6:	07d9      	lsls	r1, r3, #31
 800d5b8:	d405      	bmi.n	800d5c6 <_vfiprintf_r+0x2a>
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d402      	bmi.n	800d5c6 <_vfiprintf_r+0x2a>
 800d5c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5c2:	f7fc ffc8 	bl	800a556 <__retarget_lock_acquire_recursive>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	071b      	lsls	r3, r3, #28
 800d5ca:	d501      	bpl.n	800d5d0 <_vfiprintf_r+0x34>
 800d5cc:	692b      	ldr	r3, [r5, #16]
 800d5ce:	b99b      	cbnz	r3, 800d5f8 <_vfiprintf_r+0x5c>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f000 f938 	bl	800d848 <__swsetup_r>
 800d5d8:	b170      	cbz	r0, 800d5f8 <_vfiprintf_r+0x5c>
 800d5da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5dc:	07dc      	lsls	r4, r3, #31
 800d5de:	d504      	bpl.n	800d5ea <_vfiprintf_r+0x4e>
 800d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e4:	b01d      	add	sp, #116	@ 0x74
 800d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ea:	89ab      	ldrh	r3, [r5, #12]
 800d5ec:	0598      	lsls	r0, r3, #22
 800d5ee:	d4f7      	bmi.n	800d5e0 <_vfiprintf_r+0x44>
 800d5f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5f2:	f7fc ffb1 	bl	800a558 <__retarget_lock_release_recursive>
 800d5f6:	e7f3      	b.n	800d5e0 <_vfiprintf_r+0x44>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5fc:	2320      	movs	r3, #32
 800d5fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d602:	f8cd 800c 	str.w	r8, [sp, #12]
 800d606:	2330      	movs	r3, #48	@ 0x30
 800d608:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d7b8 <_vfiprintf_r+0x21c>
 800d60c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d610:	f04f 0901 	mov.w	r9, #1
 800d614:	4623      	mov	r3, r4
 800d616:	469a      	mov	sl, r3
 800d618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61c:	b10a      	cbz	r2, 800d622 <_vfiprintf_r+0x86>
 800d61e:	2a25      	cmp	r2, #37	@ 0x25
 800d620:	d1f9      	bne.n	800d616 <_vfiprintf_r+0x7a>
 800d622:	ebba 0b04 	subs.w	fp, sl, r4
 800d626:	d00b      	beq.n	800d640 <_vfiprintf_r+0xa4>
 800d628:	465b      	mov	r3, fp
 800d62a:	4622      	mov	r2, r4
 800d62c:	4629      	mov	r1, r5
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff ffa2 	bl	800d578 <__sfputs_r>
 800d634:	3001      	adds	r0, #1
 800d636:	f000 80a7 	beq.w	800d788 <_vfiprintf_r+0x1ec>
 800d63a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d63c:	445a      	add	r2, fp
 800d63e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d640:	f89a 3000 	ldrb.w	r3, [sl]
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 809f 	beq.w	800d788 <_vfiprintf_r+0x1ec>
 800d64a:	2300      	movs	r3, #0
 800d64c:	f04f 32ff 	mov.w	r2, #4294967295
 800d650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d654:	f10a 0a01 	add.w	sl, sl, #1
 800d658:	9304      	str	r3, [sp, #16]
 800d65a:	9307      	str	r3, [sp, #28]
 800d65c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d660:	931a      	str	r3, [sp, #104]	@ 0x68
 800d662:	4654      	mov	r4, sl
 800d664:	2205      	movs	r2, #5
 800d666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d66a:	4853      	ldr	r0, [pc, #332]	@ (800d7b8 <_vfiprintf_r+0x21c>)
 800d66c:	f7f2 fe38 	bl	80002e0 <memchr>
 800d670:	9a04      	ldr	r2, [sp, #16]
 800d672:	b9d8      	cbnz	r0, 800d6ac <_vfiprintf_r+0x110>
 800d674:	06d1      	lsls	r1, r2, #27
 800d676:	bf44      	itt	mi
 800d678:	2320      	movmi	r3, #32
 800d67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d67e:	0713      	lsls	r3, r2, #28
 800d680:	bf44      	itt	mi
 800d682:	232b      	movmi	r3, #43	@ 0x2b
 800d684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d688:	f89a 3000 	ldrb.w	r3, [sl]
 800d68c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d68e:	d015      	beq.n	800d6bc <_vfiprintf_r+0x120>
 800d690:	9a07      	ldr	r2, [sp, #28]
 800d692:	4654      	mov	r4, sl
 800d694:	2000      	movs	r0, #0
 800d696:	f04f 0c0a 	mov.w	ip, #10
 800d69a:	4621      	mov	r1, r4
 800d69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6a0:	3b30      	subs	r3, #48	@ 0x30
 800d6a2:	2b09      	cmp	r3, #9
 800d6a4:	d94b      	bls.n	800d73e <_vfiprintf_r+0x1a2>
 800d6a6:	b1b0      	cbz	r0, 800d6d6 <_vfiprintf_r+0x13a>
 800d6a8:	9207      	str	r2, [sp, #28]
 800d6aa:	e014      	b.n	800d6d6 <_vfiprintf_r+0x13a>
 800d6ac:	eba0 0308 	sub.w	r3, r0, r8
 800d6b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	9304      	str	r3, [sp, #16]
 800d6b8:	46a2      	mov	sl, r4
 800d6ba:	e7d2      	b.n	800d662 <_vfiprintf_r+0xc6>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	1d19      	adds	r1, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	9103      	str	r1, [sp, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfbb      	ittet	lt
 800d6c8:	425b      	neglt	r3, r3
 800d6ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d6ce:	9307      	strge	r3, [sp, #28]
 800d6d0:	9307      	strlt	r3, [sp, #28]
 800d6d2:	bfb8      	it	lt
 800d6d4:	9204      	strlt	r2, [sp, #16]
 800d6d6:	7823      	ldrb	r3, [r4, #0]
 800d6d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6da:	d10a      	bne.n	800d6f2 <_vfiprintf_r+0x156>
 800d6dc:	7863      	ldrb	r3, [r4, #1]
 800d6de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6e0:	d132      	bne.n	800d748 <_vfiprintf_r+0x1ac>
 800d6e2:	9b03      	ldr	r3, [sp, #12]
 800d6e4:	1d1a      	adds	r2, r3, #4
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	9203      	str	r2, [sp, #12]
 800d6ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6ee:	3402      	adds	r4, #2
 800d6f0:	9305      	str	r3, [sp, #20]
 800d6f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d7c8 <_vfiprintf_r+0x22c>
 800d6f6:	7821      	ldrb	r1, [r4, #0]
 800d6f8:	2203      	movs	r2, #3
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	f7f2 fdf0 	bl	80002e0 <memchr>
 800d700:	b138      	cbz	r0, 800d712 <_vfiprintf_r+0x176>
 800d702:	9b04      	ldr	r3, [sp, #16]
 800d704:	eba0 000a 	sub.w	r0, r0, sl
 800d708:	2240      	movs	r2, #64	@ 0x40
 800d70a:	4082      	lsls	r2, r0
 800d70c:	4313      	orrs	r3, r2
 800d70e:	3401      	adds	r4, #1
 800d710:	9304      	str	r3, [sp, #16]
 800d712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d716:	4829      	ldr	r0, [pc, #164]	@ (800d7bc <_vfiprintf_r+0x220>)
 800d718:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d71c:	2206      	movs	r2, #6
 800d71e:	f7f2 fddf 	bl	80002e0 <memchr>
 800d722:	2800      	cmp	r0, #0
 800d724:	d03f      	beq.n	800d7a6 <_vfiprintf_r+0x20a>
 800d726:	4b26      	ldr	r3, [pc, #152]	@ (800d7c0 <_vfiprintf_r+0x224>)
 800d728:	bb1b      	cbnz	r3, 800d772 <_vfiprintf_r+0x1d6>
 800d72a:	9b03      	ldr	r3, [sp, #12]
 800d72c:	3307      	adds	r3, #7
 800d72e:	f023 0307 	bic.w	r3, r3, #7
 800d732:	3308      	adds	r3, #8
 800d734:	9303      	str	r3, [sp, #12]
 800d736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d738:	443b      	add	r3, r7
 800d73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d73c:	e76a      	b.n	800d614 <_vfiprintf_r+0x78>
 800d73e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d742:	460c      	mov	r4, r1
 800d744:	2001      	movs	r0, #1
 800d746:	e7a8      	b.n	800d69a <_vfiprintf_r+0xfe>
 800d748:	2300      	movs	r3, #0
 800d74a:	3401      	adds	r4, #1
 800d74c:	9305      	str	r3, [sp, #20]
 800d74e:	4619      	mov	r1, r3
 800d750:	f04f 0c0a 	mov.w	ip, #10
 800d754:	4620      	mov	r0, r4
 800d756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d75a:	3a30      	subs	r2, #48	@ 0x30
 800d75c:	2a09      	cmp	r2, #9
 800d75e:	d903      	bls.n	800d768 <_vfiprintf_r+0x1cc>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d0c6      	beq.n	800d6f2 <_vfiprintf_r+0x156>
 800d764:	9105      	str	r1, [sp, #20]
 800d766:	e7c4      	b.n	800d6f2 <_vfiprintf_r+0x156>
 800d768:	fb0c 2101 	mla	r1, ip, r1, r2
 800d76c:	4604      	mov	r4, r0
 800d76e:	2301      	movs	r3, #1
 800d770:	e7f0      	b.n	800d754 <_vfiprintf_r+0x1b8>
 800d772:	ab03      	add	r3, sp, #12
 800d774:	9300      	str	r3, [sp, #0]
 800d776:	462a      	mov	r2, r5
 800d778:	4b12      	ldr	r3, [pc, #72]	@ (800d7c4 <_vfiprintf_r+0x228>)
 800d77a:	a904      	add	r1, sp, #16
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7fb ff93 	bl	80096a8 <_printf_float>
 800d782:	4607      	mov	r7, r0
 800d784:	1c78      	adds	r0, r7, #1
 800d786:	d1d6      	bne.n	800d736 <_vfiprintf_r+0x19a>
 800d788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d78a:	07d9      	lsls	r1, r3, #31
 800d78c:	d405      	bmi.n	800d79a <_vfiprintf_r+0x1fe>
 800d78e:	89ab      	ldrh	r3, [r5, #12]
 800d790:	059a      	lsls	r2, r3, #22
 800d792:	d402      	bmi.n	800d79a <_vfiprintf_r+0x1fe>
 800d794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d796:	f7fc fedf 	bl	800a558 <__retarget_lock_release_recursive>
 800d79a:	89ab      	ldrh	r3, [r5, #12]
 800d79c:	065b      	lsls	r3, r3, #25
 800d79e:	f53f af1f 	bmi.w	800d5e0 <_vfiprintf_r+0x44>
 800d7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7a4:	e71e      	b.n	800d5e4 <_vfiprintf_r+0x48>
 800d7a6:	ab03      	add	r3, sp, #12
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	4b05      	ldr	r3, [pc, #20]	@ (800d7c4 <_vfiprintf_r+0x228>)
 800d7ae:	a904      	add	r1, sp, #16
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f7fc fa01 	bl	8009bb8 <_printf_i>
 800d7b6:	e7e4      	b.n	800d782 <_vfiprintf_r+0x1e6>
 800d7b8:	0800de71 	.word	0x0800de71
 800d7bc:	0800de7b 	.word	0x0800de7b
 800d7c0:	080096a9 	.word	0x080096a9
 800d7c4:	0800d579 	.word	0x0800d579
 800d7c8:	0800de77 	.word	0x0800de77

0800d7cc <__swbuf_r>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	460e      	mov	r6, r1
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	b118      	cbz	r0, 800d7de <__swbuf_r+0x12>
 800d7d6:	6a03      	ldr	r3, [r0, #32]
 800d7d8:	b90b      	cbnz	r3, 800d7de <__swbuf_r+0x12>
 800d7da:	f7fc fda5 	bl	800a328 <__sinit>
 800d7de:	69a3      	ldr	r3, [r4, #24]
 800d7e0:	60a3      	str	r3, [r4, #8]
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	071a      	lsls	r2, r3, #28
 800d7e6:	d501      	bpl.n	800d7ec <__swbuf_r+0x20>
 800d7e8:	6923      	ldr	r3, [r4, #16]
 800d7ea:	b943      	cbnz	r3, 800d7fe <__swbuf_r+0x32>
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f000 f82a 	bl	800d848 <__swsetup_r>
 800d7f4:	b118      	cbz	r0, 800d7fe <__swbuf_r+0x32>
 800d7f6:	f04f 37ff 	mov.w	r7, #4294967295
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	6922      	ldr	r2, [r4, #16]
 800d802:	1a98      	subs	r0, r3, r2
 800d804:	6963      	ldr	r3, [r4, #20]
 800d806:	b2f6      	uxtb	r6, r6
 800d808:	4283      	cmp	r3, r0
 800d80a:	4637      	mov	r7, r6
 800d80c:	dc05      	bgt.n	800d81a <__swbuf_r+0x4e>
 800d80e:	4621      	mov	r1, r4
 800d810:	4628      	mov	r0, r5
 800d812:	f7ff fa45 	bl	800cca0 <_fflush_r>
 800d816:	2800      	cmp	r0, #0
 800d818:	d1ed      	bne.n	800d7f6 <__swbuf_r+0x2a>
 800d81a:	68a3      	ldr	r3, [r4, #8]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	60a3      	str	r3, [r4, #8]
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	6022      	str	r2, [r4, #0]
 800d826:	701e      	strb	r6, [r3, #0]
 800d828:	6962      	ldr	r2, [r4, #20]
 800d82a:	1c43      	adds	r3, r0, #1
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d004      	beq.n	800d83a <__swbuf_r+0x6e>
 800d830:	89a3      	ldrh	r3, [r4, #12]
 800d832:	07db      	lsls	r3, r3, #31
 800d834:	d5e1      	bpl.n	800d7fa <__swbuf_r+0x2e>
 800d836:	2e0a      	cmp	r6, #10
 800d838:	d1df      	bne.n	800d7fa <__swbuf_r+0x2e>
 800d83a:	4621      	mov	r1, r4
 800d83c:	4628      	mov	r0, r5
 800d83e:	f7ff fa2f 	bl	800cca0 <_fflush_r>
 800d842:	2800      	cmp	r0, #0
 800d844:	d0d9      	beq.n	800d7fa <__swbuf_r+0x2e>
 800d846:	e7d6      	b.n	800d7f6 <__swbuf_r+0x2a>

0800d848 <__swsetup_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	4b29      	ldr	r3, [pc, #164]	@ (800d8f0 <__swsetup_r+0xa8>)
 800d84c:	4605      	mov	r5, r0
 800d84e:	6818      	ldr	r0, [r3, #0]
 800d850:	460c      	mov	r4, r1
 800d852:	b118      	cbz	r0, 800d85c <__swsetup_r+0x14>
 800d854:	6a03      	ldr	r3, [r0, #32]
 800d856:	b90b      	cbnz	r3, 800d85c <__swsetup_r+0x14>
 800d858:	f7fc fd66 	bl	800a328 <__sinit>
 800d85c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d860:	0719      	lsls	r1, r3, #28
 800d862:	d422      	bmi.n	800d8aa <__swsetup_r+0x62>
 800d864:	06da      	lsls	r2, r3, #27
 800d866:	d407      	bmi.n	800d878 <__swsetup_r+0x30>
 800d868:	2209      	movs	r2, #9
 800d86a:	602a      	str	r2, [r5, #0]
 800d86c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d870:	81a3      	strh	r3, [r4, #12]
 800d872:	f04f 30ff 	mov.w	r0, #4294967295
 800d876:	e033      	b.n	800d8e0 <__swsetup_r+0x98>
 800d878:	0758      	lsls	r0, r3, #29
 800d87a:	d512      	bpl.n	800d8a2 <__swsetup_r+0x5a>
 800d87c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d87e:	b141      	cbz	r1, 800d892 <__swsetup_r+0x4a>
 800d880:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d884:	4299      	cmp	r1, r3
 800d886:	d002      	beq.n	800d88e <__swsetup_r+0x46>
 800d888:	4628      	mov	r0, r5
 800d88a:	f7fd fc4b 	bl	800b124 <_free_r>
 800d88e:	2300      	movs	r3, #0
 800d890:	6363      	str	r3, [r4, #52]	@ 0x34
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d898:	81a3      	strh	r3, [r4, #12]
 800d89a:	2300      	movs	r3, #0
 800d89c:	6063      	str	r3, [r4, #4]
 800d89e:	6923      	ldr	r3, [r4, #16]
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	f043 0308 	orr.w	r3, r3, #8
 800d8a8:	81a3      	strh	r3, [r4, #12]
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	b94b      	cbnz	r3, 800d8c2 <__swsetup_r+0x7a>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8b8:	d003      	beq.n	800d8c2 <__swsetup_r+0x7a>
 800d8ba:	4621      	mov	r1, r4
 800d8bc:	4628      	mov	r0, r5
 800d8be:	f000 f883 	bl	800d9c8 <__smakebuf_r>
 800d8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8c6:	f013 0201 	ands.w	r2, r3, #1
 800d8ca:	d00a      	beq.n	800d8e2 <__swsetup_r+0x9a>
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	60a2      	str	r2, [r4, #8]
 800d8d0:	6962      	ldr	r2, [r4, #20]
 800d8d2:	4252      	negs	r2, r2
 800d8d4:	61a2      	str	r2, [r4, #24]
 800d8d6:	6922      	ldr	r2, [r4, #16]
 800d8d8:	b942      	cbnz	r2, 800d8ec <__swsetup_r+0xa4>
 800d8da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8de:	d1c5      	bne.n	800d86c <__swsetup_r+0x24>
 800d8e0:	bd38      	pop	{r3, r4, r5, pc}
 800d8e2:	0799      	lsls	r1, r3, #30
 800d8e4:	bf58      	it	pl
 800d8e6:	6962      	ldrpl	r2, [r4, #20]
 800d8e8:	60a2      	str	r2, [r4, #8]
 800d8ea:	e7f4      	b.n	800d8d6 <__swsetup_r+0x8e>
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	e7f7      	b.n	800d8e0 <__swsetup_r+0x98>
 800d8f0:	2400001c 	.word	0x2400001c

0800d8f4 <_raise_r>:
 800d8f4:	291f      	cmp	r1, #31
 800d8f6:	b538      	push	{r3, r4, r5, lr}
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	d904      	bls.n	800d908 <_raise_r+0x14>
 800d8fe:	2316      	movs	r3, #22
 800d900:	6003      	str	r3, [r0, #0]
 800d902:	f04f 30ff 	mov.w	r0, #4294967295
 800d906:	bd38      	pop	{r3, r4, r5, pc}
 800d908:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d90a:	b112      	cbz	r2, 800d912 <_raise_r+0x1e>
 800d90c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d910:	b94b      	cbnz	r3, 800d926 <_raise_r+0x32>
 800d912:	4628      	mov	r0, r5
 800d914:	f000 f830 	bl	800d978 <_getpid_r>
 800d918:	4622      	mov	r2, r4
 800d91a:	4601      	mov	r1, r0
 800d91c:	4628      	mov	r0, r5
 800d91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d922:	f000 b817 	b.w	800d954 <_kill_r>
 800d926:	2b01      	cmp	r3, #1
 800d928:	d00a      	beq.n	800d940 <_raise_r+0x4c>
 800d92a:	1c59      	adds	r1, r3, #1
 800d92c:	d103      	bne.n	800d936 <_raise_r+0x42>
 800d92e:	2316      	movs	r3, #22
 800d930:	6003      	str	r3, [r0, #0]
 800d932:	2001      	movs	r0, #1
 800d934:	e7e7      	b.n	800d906 <_raise_r+0x12>
 800d936:	2100      	movs	r1, #0
 800d938:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d93c:	4620      	mov	r0, r4
 800d93e:	4798      	blx	r3
 800d940:	2000      	movs	r0, #0
 800d942:	e7e0      	b.n	800d906 <_raise_r+0x12>

0800d944 <raise>:
 800d944:	4b02      	ldr	r3, [pc, #8]	@ (800d950 <raise+0xc>)
 800d946:	4601      	mov	r1, r0
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	f7ff bfd3 	b.w	800d8f4 <_raise_r>
 800d94e:	bf00      	nop
 800d950:	2400001c 	.word	0x2400001c

0800d954 <_kill_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4d07      	ldr	r5, [pc, #28]	@ (800d974 <_kill_r+0x20>)
 800d958:	2300      	movs	r3, #0
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	4611      	mov	r1, r2
 800d960:	602b      	str	r3, [r5, #0]
 800d962:	f7f3 fc27 	bl	80011b4 <_kill>
 800d966:	1c43      	adds	r3, r0, #1
 800d968:	d102      	bne.n	800d970 <_kill_r+0x1c>
 800d96a:	682b      	ldr	r3, [r5, #0]
 800d96c:	b103      	cbz	r3, 800d970 <_kill_r+0x1c>
 800d96e:	6023      	str	r3, [r4, #0]
 800d970:	bd38      	pop	{r3, r4, r5, pc}
 800d972:	bf00      	nop
 800d974:	2400044c 	.word	0x2400044c

0800d978 <_getpid_r>:
 800d978:	f7f3 bc14 	b.w	80011a4 <_getpid>

0800d97c <__swhatbuf_r>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	460c      	mov	r4, r1
 800d980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d984:	2900      	cmp	r1, #0
 800d986:	b096      	sub	sp, #88	@ 0x58
 800d988:	4615      	mov	r5, r2
 800d98a:	461e      	mov	r6, r3
 800d98c:	da0d      	bge.n	800d9aa <__swhatbuf_r+0x2e>
 800d98e:	89a3      	ldrh	r3, [r4, #12]
 800d990:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d994:	f04f 0100 	mov.w	r1, #0
 800d998:	bf14      	ite	ne
 800d99a:	2340      	movne	r3, #64	@ 0x40
 800d99c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	6031      	str	r1, [r6, #0]
 800d9a4:	602b      	str	r3, [r5, #0]
 800d9a6:	b016      	add	sp, #88	@ 0x58
 800d9a8:	bd70      	pop	{r4, r5, r6, pc}
 800d9aa:	466a      	mov	r2, sp
 800d9ac:	f000 f848 	bl	800da40 <_fstat_r>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	dbec      	blt.n	800d98e <__swhatbuf_r+0x12>
 800d9b4:	9901      	ldr	r1, [sp, #4]
 800d9b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9be:	4259      	negs	r1, r3
 800d9c0:	4159      	adcs	r1, r3
 800d9c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9c6:	e7eb      	b.n	800d9a0 <__swhatbuf_r+0x24>

0800d9c8 <__smakebuf_r>:
 800d9c8:	898b      	ldrh	r3, [r1, #12]
 800d9ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9cc:	079d      	lsls	r5, r3, #30
 800d9ce:	4606      	mov	r6, r0
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	d507      	bpl.n	800d9e4 <__smakebuf_r+0x1c>
 800d9d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	6123      	str	r3, [r4, #16]
 800d9dc:	2301      	movs	r3, #1
 800d9de:	6163      	str	r3, [r4, #20]
 800d9e0:	b003      	add	sp, #12
 800d9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e4:	ab01      	add	r3, sp, #4
 800d9e6:	466a      	mov	r2, sp
 800d9e8:	f7ff ffc8 	bl	800d97c <__swhatbuf_r>
 800d9ec:	9f00      	ldr	r7, [sp, #0]
 800d9ee:	4605      	mov	r5, r0
 800d9f0:	4639      	mov	r1, r7
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f7fd fc0a 	bl	800b20c <_malloc_r>
 800d9f8:	b948      	cbnz	r0, 800da0e <__smakebuf_r+0x46>
 800d9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9fe:	059a      	lsls	r2, r3, #22
 800da00:	d4ee      	bmi.n	800d9e0 <__smakebuf_r+0x18>
 800da02:	f023 0303 	bic.w	r3, r3, #3
 800da06:	f043 0302 	orr.w	r3, r3, #2
 800da0a:	81a3      	strh	r3, [r4, #12]
 800da0c:	e7e2      	b.n	800d9d4 <__smakebuf_r+0xc>
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	6020      	str	r0, [r4, #0]
 800da12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da16:	81a3      	strh	r3, [r4, #12]
 800da18:	9b01      	ldr	r3, [sp, #4]
 800da1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da1e:	b15b      	cbz	r3, 800da38 <__smakebuf_r+0x70>
 800da20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da24:	4630      	mov	r0, r6
 800da26:	f000 f81d 	bl	800da64 <_isatty_r>
 800da2a:	b128      	cbz	r0, 800da38 <__smakebuf_r+0x70>
 800da2c:	89a3      	ldrh	r3, [r4, #12]
 800da2e:	f023 0303 	bic.w	r3, r3, #3
 800da32:	f043 0301 	orr.w	r3, r3, #1
 800da36:	81a3      	strh	r3, [r4, #12]
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	431d      	orrs	r5, r3
 800da3c:	81a5      	strh	r5, [r4, #12]
 800da3e:	e7cf      	b.n	800d9e0 <__smakebuf_r+0x18>

0800da40 <_fstat_r>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4d07      	ldr	r5, [pc, #28]	@ (800da60 <_fstat_r+0x20>)
 800da44:	2300      	movs	r3, #0
 800da46:	4604      	mov	r4, r0
 800da48:	4608      	mov	r0, r1
 800da4a:	4611      	mov	r1, r2
 800da4c:	602b      	str	r3, [r5, #0]
 800da4e:	f7f3 fc11 	bl	8001274 <_fstat>
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	d102      	bne.n	800da5c <_fstat_r+0x1c>
 800da56:	682b      	ldr	r3, [r5, #0]
 800da58:	b103      	cbz	r3, 800da5c <_fstat_r+0x1c>
 800da5a:	6023      	str	r3, [r4, #0]
 800da5c:	bd38      	pop	{r3, r4, r5, pc}
 800da5e:	bf00      	nop
 800da60:	2400044c 	.word	0x2400044c

0800da64 <_isatty_r>:
 800da64:	b538      	push	{r3, r4, r5, lr}
 800da66:	4d06      	ldr	r5, [pc, #24]	@ (800da80 <_isatty_r+0x1c>)
 800da68:	2300      	movs	r3, #0
 800da6a:	4604      	mov	r4, r0
 800da6c:	4608      	mov	r0, r1
 800da6e:	602b      	str	r3, [r5, #0]
 800da70:	f7f3 fc10 	bl	8001294 <_isatty>
 800da74:	1c43      	adds	r3, r0, #1
 800da76:	d102      	bne.n	800da7e <_isatty_r+0x1a>
 800da78:	682b      	ldr	r3, [r5, #0]
 800da7a:	b103      	cbz	r3, 800da7e <_isatty_r+0x1a>
 800da7c:	6023      	str	r3, [r4, #0]
 800da7e:	bd38      	pop	{r3, r4, r5, pc}
 800da80:	2400044c 	.word	0x2400044c

0800da84 <_init>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	bf00      	nop
 800da88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8a:	bc08      	pop	{r3}
 800da8c:	469e      	mov	lr, r3
 800da8e:	4770      	bx	lr

0800da90 <_fini>:
 800da90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da92:	bf00      	nop
 800da94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da96:	bc08      	pop	{r3}
 800da98:	469e      	mov	lr, r3
 800da9a:	4770      	bx	lr
