
CAN_LoopBack_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af0  08005af0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af0  08005af0  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005af4  08005af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08005af8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  24000010  08005b08  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000164  08005b08  00007164  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001341d  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e9  00000000  00000000  0001a45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b10  00000000  00000000  0001d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f368  00000000  00000000  0001dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011af4  00000000  00000000  0005d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019e0b5  00000000  00000000  0006ed04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020cdb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d34  00000000  00000000  0020cdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00210b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005a4c 	.word	0x08005a4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005a4c 	.word	0x08005a4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <main+0x9c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 f99b 	bl	8000a58 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fb0d 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f835 	bl	8000794 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <main+0x9c>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <main+0x9c>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <main+0x9c>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 f98f 	bl	8001a6c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 f9a5 	bl	8001aa0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <main+0x9c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f96d 	bl	8000a58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f933 	bl	80009e8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000782:	f000 f881 	bl	8000888 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8000786:	f000 f8e3 	bl	8000950 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <main+0x96>
 800078e:	bf00      	nop
 8000790:	58024400 	.word	0x58024400

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	@ 0x70
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	224c      	movs	r2, #76	@ 0x4c
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 f918 	bl	80059d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2220      	movs	r2, #32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 f912 	bl	80059d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007b4:	2004      	movs	r0, #4
 80007b6:	f001 f987 	bl	8001ac8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <SystemClock_Config+0xec>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000880 <SystemClock_Config+0xec>)
 80007c4:	f023 0301 	bic.w	r3, r3, #1
 80007c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <SystemClock_Config+0xec>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000884 <SystemClock_Config+0xf0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000884 <SystemClock_Config+0xf0>)
 80007da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b28      	ldr	r3, [pc, #160]	@ (8000884 <SystemClock_Config+0xf0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ec:	bf00      	nop
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <SystemClock_Config+0xf0>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007fa:	d1f8      	bne.n	80007ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000800:	2301      	movs	r3, #1
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2340      	movs	r3, #64	@ 0x40
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000810:	2304      	movs	r3, #4
 8000812:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000814:	230a      	movs	r3, #10
 8000816:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000824:	230c      	movs	r3, #12
 8000826:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000828:	2302      	movs	r3, #2
 800082a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f9a1 	bl	8001b7c <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000840:	f000 f90a 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	233f      	movs	r3, #63	@ 0x3f
 8000846:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fde1 	bl	8002430 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000874:	f000 f8f0 	bl	8000a58 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3770      	adds	r7, #112	@ 0x70
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58000400 	.word	0x58000400
 8000884:	58024800 	.word	0x58024800

08000888 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800088c:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 800088e:	4a2f      	ldr	r2, [pc, #188]	@ (800094c <MX_FDCAN1_Init+0xc4>)
 8000890:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000898:	4b2b      	ldr	r3, [pc, #172]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 800089a:	2203      	movs	r2, #3
 800089c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800089e:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80008a4:	4b28      	ldr	r3, [pc, #160]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80008aa:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80008b0:	4b25      	ldr	r3, [pc, #148]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008b2:	2210      	movs	r2, #16
 80008b4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008b6:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80008bc:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008be:	2202      	movs	r2, #2
 80008c0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008da:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008dc:	2201      	movs	r2, #1
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80008f2:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008fe:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000904:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000906:	2204      	movs	r2, #4
 8000908:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000910:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000912:	2204      	movs	r2, #4
 8000914:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800091c:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000930:	2204      	movs	r2, #4
 8000932:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_FDCAN1_Init+0xc0>)
 8000936:	f000 fb85 	bl	8001044 <HAL_FDCAN_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000940:	f000 f88a 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2400002c 	.word	0x2400002c
 800094c:	4000a000 	.word	0x4000a000

08000950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000954:	4b22      	ldr	r3, [pc, #136]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	@ (80009e4 <MX_USART1_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 800099a:	f003 ff41 	bl	8004820 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f858 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 80009ac:	f004 ff49 	bl	8005842 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f000 f84f 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 80009be:	f004 ff7e 	bl	80058be <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f000 f846 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_USART1_UART_Init+0x90>)
 80009ce:	f004 feff 	bl	80057d0 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f83e 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240000cc 	.word	0x240000cc
 80009e4:	40011000 	.word	0x40011000

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_GPIO_Init+0x6c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	58024400 	.word	0x58024400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a70:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x30>)
 8000a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	58024400 	.word	0x58024400

08000a98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0be      	sub	sp, #248	@ 0xf8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	22c8      	movs	r2, #200	@ 0xc8
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 ff8d 	bl	80059d8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a39      	ldr	r2, [pc, #228]	@ (8000ba8 <HAL_FDCAN_MspInit+0x110>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d16b      	bne.n	8000ba0 <HAL_FDCAN_MspInit+0x108>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ac8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ad4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ad8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 f831 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000aec:	f7ff ffb4 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000af0:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000af2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000af6:	4a2d      	ldr	r2, [pc, #180]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000b02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	4a25      	ldr	r2, [pc, #148]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1e:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	4a1e      	ldr	r2, [pc, #120]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <HAL_FDCAN_MspInit+0x114>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB9     ------> FDCAN1_TX
    PD0     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b64:	2309      	movs	r3, #9
 8000b66:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480f      	ldr	r0, [pc, #60]	@ (8000bb0 <HAL_FDCAN_MspInit+0x118>)
 8000b72:	f000 fdcb 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b8e:	2309      	movs	r3, #9
 8000b90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <HAL_FDCAN_MspInit+0x11c>)
 8000b9c:	f000 fdb6 	bl	800170c <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000ba0:	bf00      	nop
 8000ba2:	37f8      	adds	r7, #248	@ 0xf8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	4000a000 	.word	0x4000a000
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58020400 	.word	0x58020400
 8000bb4:	58020c00 	.word	0x58020c00

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0bc      	sub	sp, #240	@ 0xf0
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	22c8      	movs	r2, #200	@ 0xc8
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fefd 	bl	80059d8 <memset>
  if(huart->Instance==USART1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a27      	ldr	r2, [pc, #156]	@ (8000c80 <HAL_UART_MspInit+0xc8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d146      	bne.n	8000c76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000be8:	f04f 0201 	mov.w	r2, #1
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 ffa2 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c0a:	f7ff ff25 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <HAL_UART_MspInit+0xcc>)
 8000c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c14:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <HAL_UART_MspInit+0xcc>)
 8000c16:	f043 0310 	orr.w	r3, r3, #16
 8000c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <HAL_UART_MspInit+0xcc>)
 8000c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_UART_MspInit+0xcc>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <HAL_UART_MspInit+0xcc>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_UART_MspInit+0xcc>)
 8000c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c64:	2307      	movs	r3, #7
 8000c66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <HAL_UART_MspInit+0xd0>)
 8000c72:	f000 fd4b 	bl	800170c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c76:	bf00      	nop
 8000c78:	37f0      	adds	r7, #240	@ 0xf0
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40011000 	.word	0x40011000
 8000c84:	58024400 	.word	0x58024400
 8000c88:	58020000 	.word	0x58020000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 f89f 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf0:	f7ff fc6a 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480c      	ldr	r0, [pc, #48]	@ (8000d28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf6:	490d      	ldr	r1, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f004 fe65 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fce9 	bl	80006f4 <main>
  bx  lr
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d2c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d30:	08005af8 	.word	0x08005af8
  ldr r2, =_sbss
 8000d34:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d38:	24000164 	.word	0x24000164

08000d3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC3_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d46:	2003      	movs	r0, #3
 8000d48:	f000 f94a 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d4c:	f001 fd26 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_Init+0x68>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	f003 030f 	and.w	r3, r3, #15
 8000d5c:	4913      	ldr	r1, [pc, #76]	@ (8000dac <HAL_Init+0x6c>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_Init+0x68>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_Init+0x6c>)
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	f003 031f 	and.w	r3, r3, #31
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <HAL_Init+0x70>)
 8000d82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d84:	4a0b      	ldr	r2, [pc, #44]	@ (8000db4 <HAL_Init+0x74>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f814 	bl	8000db8 <HAL_InitTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e002      	b.n	8000da0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9a:	f7ff fe63 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	58024400 	.word	0x58024400
 8000dac:	08005ab0 	.word	0x08005ab0
 8000db0:	24000004 	.word	0x24000004
 8000db4:	24000000 	.word	0x24000000

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_InitTick+0x60>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d101      	bne.n	8000dcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e021      	b.n	8000e10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <HAL_InitTick+0x64>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f921 	bl	800102a <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f8f9 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <HAL_InitTick+0x68>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2400000c 	.word	0x2400000c
 8000e1c:	24000000 	.word	0x24000000
 8000e20:	24000008 	.word	0x24000008

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2400000c 	.word	0x2400000c
 8000e48:	24000160 	.word	0x24000160

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	24000160 	.word	0x24000160

08000e64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetREVID+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0c1b      	lsrs	r3, r3, #16
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	5c001000 	.word	0x5c001000

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x40>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x40>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	05fa0000 	.word	0x05fa0000

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	@ (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	@ (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	@ 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff47 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff5e 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff90 	bl	8000f34 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5f 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffb2 	bl	8000f9c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b098      	sub	sp, #96	@ 0x60
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800104c:	4a84      	ldr	r2, [pc, #528]	@ (8001260 <HAL_FDCAN_Init+0x21c>)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4611      	mov	r1, r2
 8001054:	224c      	movs	r2, #76	@ 0x4c
 8001056:	4618      	mov	r0, r3
 8001058:	f004 fcea 	bl	8005a30 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e1c6      	b.n	80013f4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a7e      	ldr	r2, [pc, #504]	@ (8001264 <HAL_FDCAN_Init+0x220>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d106      	bne.n	800107e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fd00 	bl	8000a98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0210 	bic.w	r2, r2, #16
 80010a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a8:	f7ff fed0 	bl	8000e4c <HAL_GetTick>
 80010ac:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ae:	e014      	b.n	80010da <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010b0:	f7ff fecc 	bl	8000e4c <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	d90d      	bls.n	80010da <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2203      	movs	r2, #3
 80010d2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e18c      	b.n	80013f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d0e3      	beq.n	80010b0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff fea8 	bl	8000e4c <HAL_GetTick>
 80010fc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010fe:	e014      	b.n	800112a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001100:	f7ff fea4 	bl	8000e4c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90d      	bls.n	800112a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001114:	f043 0201 	orr.w	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e164      	b.n	80013f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0e3      	beq.n	8001100 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0202 	orr.w	r2, r2, #2
 8001146:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7c1b      	ldrb	r3, [r3, #16]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800115e:	619a      	str	r2, [r3, #24]
 8001160:	e007      	b.n	8001172 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699a      	ldr	r2, [r3, #24]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001170:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7c5b      	ldrb	r3, [r3, #17]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001188:	619a      	str	r2, [r3, #24]
 800118a:	e007      	b.n	800119c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800119a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7c9b      	ldrb	r3, [r3, #18]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011b2:	619a      	str	r2, [r3, #24]
 80011b4:	e007      	b.n	80011c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80011ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0210 	bic.w	r2, r2, #16
 80011fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0204 	orr.w	r2, r2, #4
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	e030      	b.n	8001278 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d02c      	beq.n	8001278 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d020      	beq.n	8001268 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001234:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0210 	orr.w	r2, r2, #16
 8001244:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d114      	bne.n	8001278 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f042 0220 	orr.w	r2, r2, #32
 800125c:	619a      	str	r2, [r3, #24]
 800125e:	e00b      	b.n	8001278 <HAL_FDCAN_Init+0x234>
 8001260:	08005a64 	.word	0x08005a64
 8001264:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	3b01      	subs	r3, #1
 800127e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	3b01      	subs	r3, #1
 8001286:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001288:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001290:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	3b01      	subs	r3, #1
 800129a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012a2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012ac:	d115      	bne.n	80012da <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b8:	3b01      	subs	r3, #1
 80012ba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012bc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	3b01      	subs	r3, #1
 80012c4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012c6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ce:	3b01      	subs	r3, #1
 80012d0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012d6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012d8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00a      	beq.n	80012f8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001300:	4413      	add	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d011      	beq.n	800132a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800130e:	f023 0107 	bic.w	r1, r3, #7
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	3360      	adds	r3, #96	@ 0x60
 800131a:	443b      	add	r3, r7
 800131c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	d011      	beq.n	8001356 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800133a:	f023 0107 	bic.w	r1, r3, #7
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	3360      	adds	r3, #96	@ 0x60
 8001346:	443b      	add	r3, r7
 8001348:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135a:	2b00      	cmp	r3, #0
 800135c:	d012      	beq.n	8001384 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001366:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	3360      	adds	r3, #96	@ 0x60
 8001372:	443b      	add	r3, r7
 8001374:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001378:	011a      	lsls	r2, r3, #4
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001388:	2b00      	cmp	r3, #0
 800138a:	d012      	beq.n	80013b2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001394:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	3360      	adds	r3, #96	@ 0x60
 80013a0:	443b      	add	r3, r7
 80013a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80013a6:	021a      	lsls	r2, r3, #8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <HAL_FDCAN_Init+0x3b8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d107      	bne.n	80013cc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f022 0203 	bic.w	r2, r2, #3
 80013ca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f80b 	bl	8001400 <FDCAN_CalcultateRamBlockAddresses>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80013f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3760      	adds	r7, #96	@ 0x60
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	4000a000 	.word	0x4000a000

08001400 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800140c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001416:	4ba7      	ldr	r3, [pc, #668]	@ (80016b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001418:	4013      	ands	r3, r2
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	0091      	lsls	r1, r2, #2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	430b      	orrs	r3, r1
 8001424:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001430:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001456:	4b97      	ldr	r3, [pc, #604]	@ (80016b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001458:	4013      	ands	r3, r2
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	0091      	lsls	r1, r2, #2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	430b      	orrs	r3, r1
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001470:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	4413      	add	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001498:	4b86      	ldr	r3, [pc, #536]	@ (80016b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800149a:	4013      	ands	r3, r2
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	0091      	lsls	r1, r2, #2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80014b2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014e0:	4b74      	ldr	r3, [pc, #464]	@ (80016b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	0091      	lsls	r1, r2, #2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80014fa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	4413      	add	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001528:	4b62      	ldr	r3, [pc, #392]	@ (80016b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800152a:	4013      	ands	r3, r2
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	0091      	lsls	r1, r2, #2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	430b      	orrs	r3, r1
 8001536:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	4413      	add	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001554:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001556:	4013      	ands	r3, r2
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	0091      	lsls	r1, r2, #2
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	430b      	orrs	r3, r1
 8001562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800156e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001576:	041a      	lsls	r2, r3, #16
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001596:	4b47      	ldr	r3, [pc, #284]	@ (80016b4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001598:	4013      	ands	r3, r2
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	0091      	lsls	r1, r2, #2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	430b      	orrs	r3, r1
 80015a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80015b0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80015cc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d4:	061a      	lsls	r2, r3, #24
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e4:	4b34      	ldr	r3, [pc, #208]	@ (80016b8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80015e6:	4413      	add	r3, r2
 80015e8:	009a      	lsls	r2, r3, #2
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	441a      	add	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	441a      	add	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001620:	441a      	add	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001638:	441a      	add	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001650:	441a      	add	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	441a      	add	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800169c:	441a      	add	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d915      	bls.n	80016dc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80016b0:	e006      	b.n	80016c0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80016b2:	bf00      	nop
 80016b4:	ffff0003 	.word	0xffff0003
 80016b8:	10002b00 	.word	0x10002b00
 80016bc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2203      	movs	r2, #3
 80016d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e010      	b.n	80016fe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e005      	b.n	80016f0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3304      	adds	r3, #4
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3f3      	bcc.n	80016e4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800171a:	4b89      	ldr	r3, [pc, #548]	@ (8001940 <HAL_GPIO_Init+0x234>)
 800171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800171e:	e194      	b.n	8001a4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8186 	beq.w	8001a44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d005      	beq.n	8001750 <HAL_GPIO_Init+0x44>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d130      	bne.n	80017b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001786:	2201      	movs	r2, #1
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f003 0201 	and.w	r2, r3, #1
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d017      	beq.n	80017ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d123      	bne.n	8001842 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	69b9      	ldr	r1, [r7, #24]
 800183e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0203 	and.w	r2, r3, #3
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 80e0 	beq.w	8001a44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	4b2f      	ldr	r3, [pc, #188]	@ (8001944 <HAL_GPIO_Init+0x238>)
 8001886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800188a:	4a2e      	ldr	r2, [pc, #184]	@ (8001944 <HAL_GPIO_Init+0x238>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001894:	4b2b      	ldr	r3, [pc, #172]	@ (8001944 <HAL_GPIO_Init+0x238>)
 8001896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <HAL_GPIO_Init+0x23c>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a20      	ldr	r2, [pc, #128]	@ (800194c <HAL_GPIO_Init+0x240>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d052      	beq.n	8001974 <HAL_GPIO_Init+0x268>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001950 <HAL_GPIO_Init+0x244>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d031      	beq.n	800193a <HAL_GPIO_Init+0x22e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <HAL_GPIO_Init+0x248>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <HAL_GPIO_Init+0x22a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001958 <HAL_GPIO_Init+0x24c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x226>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <HAL_GPIO_Init+0x250>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x222>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <HAL_GPIO_Init+0x254>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x21e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001964 <HAL_GPIO_Init+0x258>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <HAL_GPIO_Init+0x25c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a18      	ldr	r2, [pc, #96]	@ (800196c <HAL_GPIO_Init+0x260>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x212>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <HAL_GPIO_Init+0x264>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x20e>
 8001916:	2309      	movs	r3, #9
 8001918:	e02d      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800191a:	230a      	movs	r3, #10
 800191c:	e02b      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800191e:	2308      	movs	r3, #8
 8001920:	e029      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001922:	2307      	movs	r3, #7
 8001924:	e027      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001926:	2306      	movs	r3, #6
 8001928:	e025      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800192a:	2305      	movs	r3, #5
 800192c:	e023      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800192e:	2304      	movs	r3, #4
 8001930:	e021      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001932:	2303      	movs	r3, #3
 8001934:	e01f      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 8001936:	2302      	movs	r3, #2
 8001938:	e01d      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800193a:	2301      	movs	r3, #1
 800193c:	e01b      	b.n	8001976 <HAL_GPIO_Init+0x26a>
 800193e:	bf00      	nop
 8001940:	58000080 	.word	0x58000080
 8001944:	58024400 	.word	0x58024400
 8001948:	58000400 	.word	0x58000400
 800194c:	58020000 	.word	0x58020000
 8001950:	58020400 	.word	0x58020400
 8001954:	58020800 	.word	0x58020800
 8001958:	58020c00 	.word	0x58020c00
 800195c:	58021000 	.word	0x58021000
 8001960:	58021400 	.word	0x58021400
 8001964:	58021800 	.word	0x58021800
 8001968:	58021c00 	.word	0x58021c00
 800196c:	58022000 	.word	0x58022000
 8001970:	58022400 	.word	0x58022400
 8001974:	2300      	movs	r3, #0
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001986:	4938      	ldr	r1, [pc, #224]	@ (8001a68 <HAL_GPIO_Init+0x35c>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f ae63 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3724      	adds	r7, #36	@ 0x24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	58000400 	.word	0x58000400

08001a6c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a74:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <HAL_HSEM_FastTake+0x2c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3320      	adds	r3, #32
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <HAL_HSEM_FastTake+0x30>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e000      	b.n	8001a8a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	58026400 	.word	0x58026400
 8001a9c:	80000300 	.word	0x80000300

08001aa0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001aaa:	4906      	ldr	r1, [pc, #24]	@ (8001ac4 <HAL_HSEM_Release+0x24>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	58026400 	.word	0x58026400

08001ac8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ad0:	4b29      	ldr	r3, [pc, #164]	@ (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d00a      	beq.n	8001af2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001adc:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e040      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e03e      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001afa:	491f      	ldr	r1, [pc, #124]	@ (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b02:	f7ff f9a3 	bl	8000e4c <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b08:	e009      	b.n	8001b1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b0a:	f7ff f99f 	bl	8000e4c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b18:	d901      	bls.n	8001b1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e028      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b1e      	cmp	r3, #30
 8001b30:	d008      	beq.n	8001b44 <HAL_PWREx_ConfigSupply+0x7c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b36:	d005      	beq.n	8001b44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b1d      	cmp	r3, #29
 8001b3c:	d002      	beq.n	8001b44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b42:	d114      	bne.n	8001b6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b44:	f7ff f982 	bl	8000e4c <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b4a:	e009      	b.n	8001b60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b4c:	f7ff f97e 	bl	8000e4c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b5a:	d901      	bls.n	8001b60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e007      	b.n	8001b70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	58024800 	.word	0x58024800

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f000 bc48 	b.w	8002420 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8088 	beq.w	8001cae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9e:	4b99      	ldr	r3, [pc, #612]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ba8:	4b96      	ldr	r3, [pc, #600]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d007      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x48>
 8001bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb6:	2b18      	cmp	r3, #24
 8001bb8:	d111      	bne.n	8001bde <HAL_RCC_OscConfig+0x62>
 8001bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d06d      	beq.n	8001cac <HAL_RCC_OscConfig+0x130>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d169      	bne.n	8001cac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f000 bc21 	b.w	8002420 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x7a>
 8001be8:	4b86      	ldr	r3, [pc, #536]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a85      	ldr	r2, [pc, #532]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e02e      	b.n	8001c54 <HAL_RCC_OscConfig+0xd8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x9c>
 8001bfe:	4b81      	ldr	r3, [pc, #516]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a80      	ldr	r2, [pc, #512]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e01d      	b.n	8001c54 <HAL_RCC_OscConfig+0xd8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0xc0>
 8001c22:	4b78      	ldr	r3, [pc, #480]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a77      	ldr	r2, [pc, #476]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b75      	ldr	r3, [pc, #468]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a74      	ldr	r2, [pc, #464]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_OscConfig+0xd8>
 8001c3c:	4b71      	ldr	r3, [pc, #452]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a70      	ldr	r2, [pc, #448]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b6e      	ldr	r3, [pc, #440]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6d      	ldr	r2, [pc, #436]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f8f6 	bl	8000e4c <HAL_GetTick>
 8001c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff f8f2 	bl	8000e4c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e3d4      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c76:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe8>
 8001c82:	e014      	b.n	8001cae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f8e2 	bl	8000e4c <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f8de 	bl	8000e4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	@ 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e3c0      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c9e:	4b59      	ldr	r3, [pc, #356]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x110>
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80ca 	beq.w	8001e50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbc:	4b51      	ldr	r3, [pc, #324]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x166>
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	2b18      	cmp	r3, #24
 8001cd6:	d156      	bne.n	8001d86 <HAL_RCC_OscConfig+0x20a>
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d151      	bne.n	8001d86 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce2:	4b48      	ldr	r3, [pc, #288]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e392      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cfa:	4b42      	ldr	r3, [pc, #264]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0219 	bic.w	r2, r3, #25
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	493f      	ldr	r1, [pc, #252]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f89e 	bl	8000e4c <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff f89a 	bl	8000e4c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e37c      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d26:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	f7ff f897 	bl	8000e64 <HAL_GetREVID>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d817      	bhi.n	8001d70 <HAL_RCC_OscConfig+0x1f4>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b40      	cmp	r3, #64	@ 0x40
 8001d46:	d108      	bne.n	8001d5a <HAL_RCC_OscConfig+0x1de>
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d50:	4a2c      	ldr	r2, [pc, #176]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d56:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d58:	e07a      	b.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	031b      	lsls	r3, r3, #12
 8001d68:	4926      	ldr	r1, [pc, #152]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d6e:	e06f      	b.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	4921      	ldr	r1, [pc, #132]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d84:	e064      	b.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d047      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0219 	bic.w	r2, r3, #25
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	491a      	ldr	r1, [pc, #104]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f854 	bl	8000e4c <HAL_GetTick>
 8001da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff f850 	bl	8000e4c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e332      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	f7ff f84d 	bl	8000e64 <HAL_GetREVID>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d819      	bhi.n	8001e08 <HAL_RCC_OscConfig+0x28c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b40      	cmp	r3, #64	@ 0x40
 8001dda:	d108      	bne.n	8001dee <HAL_RCC_OscConfig+0x272>
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001de4:	4a07      	ldr	r2, [pc, #28]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dea:	6053      	str	r3, [r2, #4]
 8001dec:	e030      	b.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	031b      	lsls	r3, r3, #12
 8001dfc:	4901      	ldr	r1, [pc, #4]	@ (8001e04 <HAL_RCC_OscConfig+0x288>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	604b      	str	r3, [r1, #4]
 8001e02:	e025      	b.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
 8001e04:	58024400 	.word	0x58024400
 8001e08:	4b9a      	ldr	r3, [pc, #616]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	4997      	ldr	r1, [pc, #604]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e018      	b.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b95      	ldr	r3, [pc, #596]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a94      	ldr	r2, [pc, #592]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff f80f 	bl	8000e4c <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff f80b 	bl	8000e4c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e2ed      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e44:	4b8b      	ldr	r3, [pc, #556]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a9 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5e:	4b85      	ldr	r3, [pc, #532]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e68:	4b82      	ldr	r3, [pc, #520]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d007      	beq.n	8001e84 <HAL_RCC_OscConfig+0x308>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b18      	cmp	r3, #24
 8001e78:	d13a      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x374>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d135      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e84:	4b7b      	ldr	r3, [pc, #492]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x320>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b80      	cmp	r3, #128	@ 0x80
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e2c1      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e9c:	f7fe ffe2 	bl	8000e64 <HAL_GetREVID>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d817      	bhi.n	8001eda <HAL_RCC_OscConfig+0x35e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x348>
 8001eb2:	4b70      	ldr	r3, [pc, #448]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001eba:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001ebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ec0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ec2:	e075      	b.n	8001fb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	069b      	lsls	r3, r3, #26
 8001ed2:	4968      	ldr	r1, [pc, #416]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ed8:	e06a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eda:	4b66      	ldr	r3, [pc, #408]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	4962      	ldr	r1, [pc, #392]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eee:	e05f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d042      	beq.n	8001f7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5d      	ldr	r2, [pc, #372]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe ffa2 	bl	8000e4c <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f0c:	f7fe ff9e 	bl	8000e4c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e280      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f1e:	4b55      	ldr	r3, [pc, #340]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f2a:	f7fe ff9b 	bl	8000e64 <HAL_GetREVID>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d817      	bhi.n	8001f68 <HAL_RCC_OscConfig+0x3ec>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d108      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3d6>
 8001f40:	4b4c      	ldr	r3, [pc, #304]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f48:	4a4a      	ldr	r2, [pc, #296]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f4e:	6053      	str	r3, [r2, #4]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x434>
 8001f52:	4b48      	ldr	r3, [pc, #288]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	069b      	lsls	r3, r3, #26
 8001f60:	4944      	ldr	r1, [pc, #272]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
 8001f66:	e023      	b.n	8001fb0 <HAL_RCC_OscConfig+0x434>
 8001f68:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	493f      	ldr	r1, [pc, #252]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
 8001f7c:	e018      	b.n	8001fb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a3c      	ldr	r2, [pc, #240]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7fe ff5f 	bl	8000e4c <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f92:	f7fe ff5b 	bl	8000e4c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e23d      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fa4:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d036      	beq.n	800202a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d019      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7fe ff3c 	bl	8000e4c <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7fe ff38 	bl	8000e4c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e21a      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fea:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x45c>
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe ff22 	bl	8000e4c <HAL_GetTick>
 8002008:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe ff1e 	bl	8000e4c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e200      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d039      	beq.n	80020aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01c      	beq.n	8002078 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a0c      	ldr	r2, [pc, #48]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8002044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002048:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800204a:	f7fe feff 	bl	8000e4c <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002052:	f7fe fefb 	bl	8000e4c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1dd      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_RCC_OscConfig+0x4f8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x4d6>
 8002070:	e01b      	b.n	80020aa <HAL_RCC_OscConfig+0x52e>
 8002072:	bf00      	nop
 8002074:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002078:	4b9b      	ldr	r3, [pc, #620]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a9a      	ldr	r2, [pc, #616]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800207e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002082:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002084:	f7fe fee2 	bl	8000e4c <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208c:	f7fe fede 	bl	8000e4c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1c0      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800209e:	4b92      	ldr	r3, [pc, #584]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8081 	beq.w	80021ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b8:	4b8c      	ldr	r3, [pc, #560]	@ (80022ec <HAL_RCC_OscConfig+0x770>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a8b      	ldr	r2, [pc, #556]	@ (80022ec <HAL_RCC_OscConfig+0x770>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fec2 	bl	8000e4c <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7fe febe 	bl	8000e4c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1a0      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020de:	4b83      	ldr	r3, [pc, #524]	@ (80022ec <HAL_RCC_OscConfig+0x770>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x584>
 80020f2:	4b7d      	ldr	r3, [pc, #500]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f6:	4a7c      	ldr	r2, [pc, #496]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fe:	e02d      	b.n	800215c <HAL_RCC_OscConfig+0x5e0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x5a6>
 8002108:	4b77      	ldr	r3, [pc, #476]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	4a76      	ldr	r2, [pc, #472]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	@ 0x70
 8002114:	4b74      	ldr	r3, [pc, #464]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002118:	4a73      	ldr	r2, [pc, #460]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800211a:	f023 0304 	bic.w	r3, r3, #4
 800211e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002120:	e01c      	b.n	800215c <HAL_RCC_OscConfig+0x5e0>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b05      	cmp	r3, #5
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c8>
 800212a:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800212c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212e:	4a6e      	ldr	r2, [pc, #440]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6713      	str	r3, [r2, #112]	@ 0x70
 8002136:	4b6c      	ldr	r3, [pc, #432]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213a:	4a6b      	ldr	r2, [pc, #428]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	@ 0x70
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0x5e0>
 8002144:	4b68      	ldr	r3, [pc, #416]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	4a67      	ldr	r2, [pc, #412]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002150:	4b65      	ldr	r3, [pc, #404]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002154:	4a64      	ldr	r2, [pc, #400]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7fe fe72 	bl	8000e4c <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe fe6e 	bl	8000e4c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e14e      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002182:	4b59      	ldr	r3, [pc, #356]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0ee      	beq.n	800216c <HAL_RCC_OscConfig+0x5f0>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe fe5c 	bl	8000e4c <HAL_GetTick>
 8002194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fe58 	bl	8000e4c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e138      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021ae:	4b4e      	ldr	r3, [pc, #312]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1ee      	bne.n	8002198 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 812d 	beq.w	800241e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021c4:	4b48      	ldr	r3, [pc, #288]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021cc:	2b18      	cmp	r3, #24
 80021ce:	f000 80bd 	beq.w	800234c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f040 809e 	bne.w	8002318 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b42      	ldr	r3, [pc, #264]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a41      	ldr	r2, [pc, #260]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe30 	bl	8000e4c <HAL_GetTick>
 80021ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fe2c 	bl	8000e4c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e10e      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002202:	4b39      	ldr	r3, [pc, #228]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220e:	4b36      	ldr	r3, [pc, #216]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002212:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <HAL_RCC_OscConfig+0x774>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	430a      	orrs	r2, r1
 8002222:	4931      	ldr	r1, [pc, #196]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	628b      	str	r3, [r1, #40]	@ 0x28
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	3b01      	subs	r3, #1
 800222e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	3b01      	subs	r3, #1
 8002238:	025b      	lsls	r3, r3, #9
 800223a:	b29b      	uxth	r3, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002242:	3b01      	subs	r3, #1
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	3b01      	subs	r3, #1
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002258:	4923      	ldr	r1, [pc, #140]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002262:	4a21      	ldr	r2, [pc, #132]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800226a:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800226c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800226e:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <HAL_RCC_OscConfig+0x778>)
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002276:	00d2      	lsls	r2, r2, #3
 8002278:	491b      	ldr	r1, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800227e:	4b1a      	ldr	r3, [pc, #104]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	f023 020c 	bic.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4917      	ldr	r1, [pc, #92]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800228c:	4313      	orrs	r3, r2
 800228e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	f023 0202 	bic.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229c:	4912      	ldr	r1, [pc, #72]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022a2:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	4a10      	ldr	r2, [pc, #64]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022ae:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d2:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <HAL_RCC_OscConfig+0x76c>)
 80022d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fdb5 	bl	8000e4c <HAL_GetTick>
 80022e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e4:	e011      	b.n	800230a <HAL_RCC_OscConfig+0x78e>
 80022e6:	bf00      	nop
 80022e8:	58024400 	.word	0x58024400
 80022ec:	58024800 	.word	0x58024800
 80022f0:	fffffc0c 	.word	0xfffffc0c
 80022f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fda8 	bl	8000e4c <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e08a      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x77c>
 8002316:	e082      	b.n	800241e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002318:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a42      	ldr	r2, [pc, #264]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 800231e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fd92 	bl	8000e4c <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe fd8e 	bl	8000e4c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e070      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233e:	4b3a      	ldr	r3, [pc, #232]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x7b0>
 800234a:	e068      	b.n	800241e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800234c:	4b36      	ldr	r3, [pc, #216]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002352:	4b35      	ldr	r3, [pc, #212]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	2b01      	cmp	r3, #1
 800235e:	d031      	beq.n	80023c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d12a      	bne.n	80023c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800237a:	429a      	cmp	r2, r3
 800237c:	d122      	bne.n	80023c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002388:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d11a      	bne.n	80023c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0a5b      	lsrs	r3, r3, #9
 8002392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d111      	bne.n	80023c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	0e1b      	lsrs	r3, r3, #24
 80023b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e02b      	b.n	8002420 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80023c8:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 80023ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d01f      	beq.n	800241e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023ea:	f7fe fd2f 	bl	8000e4c <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023f0:	bf00      	nop
 80023f2:	f7fe fd2b 	bl	8000e4c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d0f9      	beq.n	80023f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 8002400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_RCC_OscConfig+0x8b0>)
 8002404:	4013      	ands	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	4906      	ldr	r1, [pc, #24]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 800240e:	4313      	orrs	r3, r2
 8002410:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002412:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_RCC_OscConfig+0x8ac>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3730      	adds	r7, #48	@ 0x30
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	58024400 	.word	0x58024400
 800242c:	ffff0007 	.word	0xffff0007

08002430 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e19c      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b8a      	ldr	r3, [pc, #552]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d910      	bls.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b87      	ldr	r3, [pc, #540]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 020f 	bic.w	r2, r3, #15
 800245a:	4985      	ldr	r1, [pc, #532]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b83      	ldr	r3, [pc, #524]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e184      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d010      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	4b7b      	ldr	r3, [pc, #492]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800248c:	429a      	cmp	r2, r3
 800248e:	d908      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002490:	4b78      	ldr	r3, [pc, #480]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4975      	ldr	r1, [pc, #468]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	4b70      	ldr	r3, [pc, #448]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d908      	bls.n	80024d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024be:	4b6d      	ldr	r3, [pc, #436]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	496a      	ldr	r1, [pc, #424]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	4b64      	ldr	r3, [pc, #400]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d908      	bls.n	80024fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024ec:	4b61      	ldr	r3, [pc, #388]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	495e      	ldr	r1, [pc, #376]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002516:	429a      	cmp	r2, r3
 8002518:	d908      	bls.n	800252c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800251a:	4b56      	ldr	r3, [pc, #344]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4953      	ldr	r1, [pc, #332]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002528:	4313      	orrs	r3, r2
 800252a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d010      	beq.n	800255a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	429a      	cmp	r2, r3
 8002546:	d908      	bls.n	800255a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b4a      	ldr	r3, [pc, #296]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f023 020f 	bic.w	r2, r3, #15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4947      	ldr	r1, [pc, #284]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002556:	4313      	orrs	r3, r2
 8002558:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d055      	beq.n	8002612 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	4940      	ldr	r1, [pc, #256]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002574:	4313      	orrs	r3, r2
 8002576:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d107      	bne.n	8002590 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002580:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d121      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0f6      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002598:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d115      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0ea      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025b0:	4b30      	ldr	r3, [pc, #192]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0de      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0d6      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f023 0207 	bic.w	r2, r3, #7
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4925      	ldr	r1, [pc, #148]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e2:	f7fe fc33 	bl	8000e4c <HAL_GetTick>
 80025e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ea:	f7fe fc2f 	bl	8000e4c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0be      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002600:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	429a      	cmp	r2, r3
 8002610:	d1eb      	bne.n	80025ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d010      	beq.n	8002640 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	429a      	cmp	r2, r3
 800262c:	d208      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f023 020f 	bic.w	r2, r3, #15
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	490e      	ldr	r1, [pc, #56]	@ (8002674 <HAL_RCC_ClockConfig+0x244>)
 800263c:	4313      	orrs	r3, r2
 800263e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d214      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	4906      	ldr	r1, [pc, #24]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b04      	ldr	r3, [pc, #16]	@ (8002670 <HAL_RCC_ClockConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e086      	b.n	800277e <HAL_RCC_ClockConfig+0x34e>
 8002670:	52002000 	.word	0x52002000
 8002674:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	4b3f      	ldr	r3, [pc, #252]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002690:	429a      	cmp	r2, r3
 8002692:	d208      	bcs.n	80026a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002694:	4b3c      	ldr	r3, [pc, #240]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	4939      	ldr	r1, [pc, #228]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	4b34      	ldr	r3, [pc, #208]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026be:	429a      	cmp	r2, r3
 80026c0:	d208      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	492e      	ldr	r1, [pc, #184]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d208      	bcs.n	8002702 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026f0:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4922      	ldr	r1, [pc, #136]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	4b1d      	ldr	r3, [pc, #116]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800271a:	429a      	cmp	r2, r3
 800271c:	d208      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800271e:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4917      	ldr	r1, [pc, #92]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 800272c:	4313      	orrs	r3, r2
 800272e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002730:	f000 f834 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	4912      	ldr	r1, [pc, #72]	@ (800278c <HAL_RCC_ClockConfig+0x35c>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800274e:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <HAL_RCC_ClockConfig+0x358>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <HAL_RCC_ClockConfig+0x35c>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
 8002764:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_RCC_ClockConfig+0x360>)
 8002766:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002768:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <HAL_RCC_ClockConfig+0x364>)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800276e:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_RCC_ClockConfig+0x368>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fb20 	bl	8000db8 <HAL_InitTick>
 8002778:	4603      	mov	r3, r0
 800277a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	58024400 	.word	0x58024400
 800278c:	08005ab0 	.word	0x08005ab0
 8002790:	24000004 	.word	0x24000004
 8002794:	24000000 	.word	0x24000000
 8002798:	24000008 	.word	0x24000008

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	@ 0x24
 80027a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a2:	4bb3      	ldr	r3, [pc, #716]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027aa:	2b18      	cmp	r3, #24
 80027ac:	f200 8155 	bhi.w	8002a5a <HAL_RCC_GetSysClockFreq+0x2be>
 80027b0:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	0800281d 	.word	0x0800281d
 80027bc:	08002a5b 	.word	0x08002a5b
 80027c0:	08002a5b 	.word	0x08002a5b
 80027c4:	08002a5b 	.word	0x08002a5b
 80027c8:	08002a5b 	.word	0x08002a5b
 80027cc:	08002a5b 	.word	0x08002a5b
 80027d0:	08002a5b 	.word	0x08002a5b
 80027d4:	08002a5b 	.word	0x08002a5b
 80027d8:	08002843 	.word	0x08002843
 80027dc:	08002a5b 	.word	0x08002a5b
 80027e0:	08002a5b 	.word	0x08002a5b
 80027e4:	08002a5b 	.word	0x08002a5b
 80027e8:	08002a5b 	.word	0x08002a5b
 80027ec:	08002a5b 	.word	0x08002a5b
 80027f0:	08002a5b 	.word	0x08002a5b
 80027f4:	08002a5b 	.word	0x08002a5b
 80027f8:	08002849 	.word	0x08002849
 80027fc:	08002a5b 	.word	0x08002a5b
 8002800:	08002a5b 	.word	0x08002a5b
 8002804:	08002a5b 	.word	0x08002a5b
 8002808:	08002a5b 	.word	0x08002a5b
 800280c:	08002a5b 	.word	0x08002a5b
 8002810:	08002a5b 	.word	0x08002a5b
 8002814:	08002a5b 	.word	0x08002a5b
 8002818:	0800284f 	.word	0x0800284f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800281c:	4b94      	ldr	r3, [pc, #592]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002828:	4b91      	ldr	r3, [pc, #580]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	08db      	lsrs	r3, r3, #3
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	4a90      	ldr	r2, [pc, #576]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800283a:	e111      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800283c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800283e:	61bb      	str	r3, [r7, #24]
      break;
 8002840:	e10e      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002842:	4b8d      	ldr	r3, [pc, #564]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002844:	61bb      	str	r3, [r7, #24]
      break;
 8002846:	e10b      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002848:	4b8c      	ldr	r3, [pc, #560]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800284a:	61bb      	str	r3, [r7, #24]
      break;
 800284c:	e108      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800284e:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002858:	4b85      	ldr	r3, [pc, #532]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002862:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002864:	4b82      	ldr	r3, [pc, #520]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800286e:	4b80      	ldr	r3, [pc, #512]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002872:	08db      	lsrs	r3, r3, #3
 8002874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002886:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80e1 	beq.w	8002a54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b02      	cmp	r3, #2
 8002896:	f000 8083 	beq.w	80029a0 <HAL_RCC_GetSysClockFreq+0x204>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b02      	cmp	r3, #2
 800289e:	f200 80a1 	bhi.w	80029e4 <HAL_RCC_GetSysClockFreq+0x248>
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x114>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d056      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x1c0>
 80028ae:	e099      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02d      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e6:	4b62      	ldr	r3, [pc, #392]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800290a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002916:	e087      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292a:	4b51      	ldr	r3, [pc, #324]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293a:	ed97 6a02 	vldr	s12, [r7, #8]
 800293e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800295a:	e065      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002966:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800296a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296e:	4b40      	ldr	r3, [pc, #256]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002982:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800299e:	e043      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a8c <HAL_RCC_GetSysClockFreq+0x2f0>
 80029ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029e2:	e021      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a88 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a28:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	0a5b      	lsrs	r3, r3, #9
 8002a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a32:	3301      	adds	r3, #1
 8002a34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	ee07 3a90 	vmov	s15, r3
 8002a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a4c:	ee17 3a90 	vmov	r3, s15
 8002a50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]
      break;
 8002a58:	e002      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a5c:	61bb      	str	r3, [r7, #24]
      break;
 8002a5e:	bf00      	nop
  }

  return sysclockfreq;
 8002a60:	69bb      	ldr	r3, [r7, #24]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	@ 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	58024400 	.word	0x58024400
 8002a74:	03d09000 	.word	0x03d09000
 8002a78:	003d0900 	.word	0x003d0900
 8002a7c:	017d7840 	.word	0x017d7840
 8002a80:	46000000 	.word	0x46000000
 8002a84:	4c742400 	.word	0x4c742400
 8002a88:	4a742400 	.word	0x4a742400
 8002a8c:	4bbebc20 	.word	0x4bbebc20

08002a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a96:	f7ff fe81 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	490f      	ldr	r1, [pc, #60]	@ (8002ae4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002aa8:	5ccb      	ldrb	r3, [r1, r3]
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a07      	ldr	r2, [pc, #28]	@ (8002ae8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002acc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ace:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	08005ab0 	.word	0x08005ab0
 8002ae8:	24000004 	.word	0x24000004
 8002aec:	24000000 	.word	0x24000000

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002af4:	f7ff ffcc 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4904      	ldr	r1, [pc, #16]	@ (8002b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	58024400 	.word	0x58024400
 8002b18:	08005ab0 	.word	0x08005ab0

08002b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b20:	f7ff ffb6 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	58024400 	.word	0x58024400
 8002b44:	08005ab0 	.word	0x08005ab0

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b4c:	b0cc      	sub	sp, #304	@ 0x130
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	ea54 0305 	orrs.w	r3, r4, r5
 8002b72:	d049      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b7e:	d02f      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b84:	d828      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b8a:	d01a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b90:	d822      	bhi.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9a:	d007      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b9c:	e01c      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b9e:	4bb8      	ldr	r3, [pc, #736]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	4ab7      	ldr	r2, [pc, #732]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002baa:	e01a      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fccf 	bl	8004558 <RCCEx_PLL2_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bc0:	e00f      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc6:	3328      	adds	r3, #40	@ 0x28
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fd76 	bl	80046bc <RCCEx_PLL3_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bd6:	e004      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bde:	e000      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002bea:	4ba5      	ldr	r3, [pc, #660]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf8:	4aa1      	ldr	r2, [pc, #644]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bfe:	e003      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c14:	f04f 0900 	mov.w	r9, #0
 8002c18:	ea58 0309 	orrs.w	r3, r8, r9
 8002c1c:	d047      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d82a      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c28:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c45 	.word	0x08002c45
 8002c34:	08002c53 	.word	0x08002c53
 8002c38:	08002c69 	.word	0x08002c69
 8002c3c:	08002c87 	.word	0x08002c87
 8002c40:	08002c87 	.word	0x08002c87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c44:	4b8e      	ldr	r3, [pc, #568]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	4a8d      	ldr	r2, [pc, #564]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c50:	e01a      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c56:	3308      	adds	r3, #8
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fc7c 	bl	8004558 <RCCEx_PLL2_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c66:	e00f      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c6c:	3328      	adds	r3, #40	@ 0x28
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 fd23 	bl	80046bc <RCCEx_PLL3_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c7c:	e004      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c84:	e000      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c88:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c90:	4b7b      	ldr	r3, [pc, #492]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c94:	f023 0107 	bic.w	r1, r3, #7
 8002c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9e:	4a78      	ldr	r2, [pc, #480]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ca4:	e003      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002caa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002cba:	f04f 0b00 	mov.w	fp, #0
 8002cbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8002cc2:	d04c      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cce:	d030      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd4:	d829      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cd8:	d02d      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8002cdc:	d825      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002cde:	2b80      	cmp	r3, #128	@ 0x80
 8002ce0:	d018      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ce2:	2b80      	cmp	r3, #128	@ 0x80
 8002ce4:	d821      	bhi.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002cea:	2b40      	cmp	r3, #64	@ 0x40
 8002cec:	d007      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002cee:	e01c      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf0:	4b63      	ldr	r3, [pc, #396]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	4a62      	ldr	r2, [pc, #392]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cfc:	e01c      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d02:	3308      	adds	r3, #8
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fc26 	bl	8004558 <RCCEx_PLL2_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d12:	e011      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d18:	3328      	adds	r3, #40	@ 0x28
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 fccd 	bl	80046bc <RCCEx_PLL3_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d28:	e006      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d40:	4b4f      	ldr	r3, [pc, #316]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d54:	e003      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d56:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002d6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002d74:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	d053      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d8a:	d035      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d90:	d82e      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d96:	d031      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d9c:	d828      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002da2:	d01a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002da4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002da8:	d822      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002dae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002db2:	d007      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002db4:	e01c      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002db6:	4b32      	ldr	r3, [pc, #200]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	4a31      	ldr	r2, [pc, #196]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dc2:	e01c      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dc8:	3308      	adds	r3, #8
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 fbc3 	bl	8004558 <RCCEx_PLL2_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002dd8:	e011      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dde:	3328      	adds	r3, #40	@ 0x28
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 fc6a 	bl	80046bc <RCCEx_PLL3_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dee:	e006      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002df8:	bf00      	nop
 8002dfa:	e000      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e06:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e16:	4a1a      	ldr	r2, [pc, #104]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e1c:	e003      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002e32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002e3c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002e40:	460b      	mov	r3, r1
 8002e42:	4313      	orrs	r3, r2
 8002e44:	d056      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e52:	d038      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e58:	d831      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e5e:	d034      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e60:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e64:	d82b      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e70:	d825      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e7c:	e01f      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e7e:	bf00      	nop
 8002e80:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e84:	4ba2      	ldr	r3, [pc, #648]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	4aa1      	ldr	r2, [pc, #644]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e90:	e01c      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e96:	3308      	adds	r3, #8
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f001 fb5c 	bl	8004558 <RCCEx_PLL2_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ea6:	e011      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eac:	3328      	adds	r3, #40	@ 0x28
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fc03 	bl	80046bc <RCCEx_PLL3_Config>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ebc:	e006      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ec4:	e002      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ecc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002edc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ee4:	4a8a      	ldr	r2, [pc, #552]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee6:	430b      	orrs	r3, r1
 8002ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eea:	e003      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ef0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ef4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f0a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4313      	orrs	r3, r2
 8002f12:	d03a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	2b30      	cmp	r3, #48	@ 0x30
 8002f1c:	d01f      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f1e:	2b30      	cmp	r3, #48	@ 0x30
 8002f20:	d819      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d815      	bhi.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d019      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d111      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f32:	4b77      	ldr	r3, [pc, #476]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	4a76      	ldr	r2, [pc, #472]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f3e:	e011      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f44:	3308      	adds	r3, #8
 8002f46:	2102      	movs	r1, #2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fb05 	bl	8004558 <RCCEx_PLL2_Config>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f54:	e006      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f5c:	e002      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f6c:	4b68      	ldr	r3, [pc, #416]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f70:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	4a65      	ldr	r2, [pc, #404]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f80:	e003      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fa0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	d051      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb4:	d035      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002fb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fba:	d82e      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fc0:	d031      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002fc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002fc6:	d828      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fcc:	d01a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd2:	d822      	bhi.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fdc:	d007      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002fde:	e01c      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fec:	e01c      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 faae 	bl	8004558 <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003002:	e011      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003008:	3328      	adds	r3, #40	@ 0x28
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f001 fb55 	bl	80046bc <RCCEx_PLL3_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003018:	e006      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003020:	e002      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003022:	bf00      	nop
 8003024:	e000      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003028:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003030:	4b37      	ldr	r3, [pc, #220]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003034:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003038:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800303c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800303e:	4a34      	ldr	r2, [pc, #208]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003040:	430b      	orrs	r3, r1
 8003042:	6513      	str	r3, [r2, #80]	@ 0x50
 8003044:	e003      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003046:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800304a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800304e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800305a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003064:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003068:	460b      	mov	r3, r1
 800306a:	4313      	orrs	r3, r2
 800306c:	d056      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800306e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003078:	d033      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800307a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800307e:	d82c      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003080:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003084:	d02f      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003086:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800308a:	d826      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800308c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003090:	d02b      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003092:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003096:	d820      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800309c:	d012      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800309e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030a2:	d81a      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d022      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ac:	d115      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030b2:	3308      	adds	r3, #8
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fa4e 	bl	8004558 <RCCEx_PLL2_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030c2:	e015      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c8:	3328      	adds	r3, #40	@ 0x28
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 faf5 	bl	80046bc <RCCEx_PLL3_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030d8:	e00a      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030e0:	e006      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030e2:	bf00      	nop
 80030e4:	e004      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030e6:	bf00      	nop
 80030e8:	e002      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030ea:	bf00      	nop
 80030ec:	e000      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003104:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003106:	4a02      	ldr	r2, [pc, #8]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003108:	430b      	orrs	r3, r1
 800310a:	6513      	str	r3, [r2, #80]	@ 0x50
 800310c:	e006      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800310e:	bf00      	nop
 8003110:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003118:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800311c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003128:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003132:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d055      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800313c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003144:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003148:	d033      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800314a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800314e:	d82c      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003154:	d02f      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315a:	d826      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800315c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003160:	d02b      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003162:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003166:	d820      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003168:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800316c:	d012      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800316e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003172:	d81a      	bhi.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d022      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003178:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800317c:	d115      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800317e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003182:	3308      	adds	r3, #8
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f9e6 	bl	8004558 <RCCEx_PLL2_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003192:	e015      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003198:	3328      	adds	r3, #40	@ 0x28
 800319a:	2101      	movs	r1, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f001 fa8d 	bl	80046bc <RCCEx_PLL3_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031a8:	e00a      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031b2:	bf00      	nop
 80031b4:	e004      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80031be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031c8:	4bb6      	ldr	r3, [pc, #728]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031d8:	4ab2      	ldr	r2, [pc, #712]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031da:	430b      	orrs	r3, r1
 80031dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031de:	e003      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031e4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80031e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80031f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031f8:	2300      	movs	r3, #0
 80031fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003202:	460b      	mov	r3, r1
 8003204:	4313      	orrs	r3, r2
 8003206:	d02a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800320c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320e:	2b00      	cmp	r3, #0
 8003210:	d011      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003216:	d10a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321c:	3308      	adds	r3, #8
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f001 f999 	bl	8004558 <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800322c:	e004      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003238:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003240:	4b98      	ldr	r3, [pc, #608]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003244:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800324c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324e:	4a95      	ldr	r2, [pc, #596]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003250:	430b      	orrs	r3, r1
 8003252:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003254:	e003      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800325a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800325e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800326a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003274:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003278:	460b      	mov	r3, r1
 800327a:	4313      	orrs	r3, r2
 800327c:	d037      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800327e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003288:	d00e      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800328a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800328e:	d816      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d018      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003298:	d111      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329a:	4b82      	ldr	r3, [pc, #520]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	4a81      	ldr	r2, [pc, #516]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032a6:	e00f      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ac:	3308      	adds	r3, #8
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 f951 	bl	8004558 <RCCEx_PLL2_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032bc:	e004      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032c4:	e000      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80032c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032d0:	4b74      	ldr	r3, [pc, #464]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80032d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032de:	4a71      	ldr	r2, [pc, #452]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80032fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003304:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003308:	460b      	mov	r3, r1
 800330a:	4313      	orrs	r3, r2
 800330c:	d03a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800330e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003314:	2b03      	cmp	r3, #3
 8003316:	d81d      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003318:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	0800335d 	.word	0x0800335d
 8003324:	08003331 	.word	0x08003331
 8003328:	0800333f 	.word	0x0800333f
 800332c:	0800335d 	.word	0x0800335d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003330:	4b5c      	ldr	r3, [pc, #368]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	4a5b      	ldr	r2, [pc, #364]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800333c:	e00f      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800333e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003342:	3308      	adds	r3, #8
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f001 f906 	bl	8004558 <RCCEx_PLL2_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003352:	e004      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800335c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003366:	4b4f      	ldr	r3, [pc, #316]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336a:	f023 0103 	bic.w	r1, r3, #3
 800336e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003374:	4a4b      	ldr	r2, [pc, #300]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003376:	430b      	orrs	r3, r1
 8003378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003380:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003390:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800339a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800339e:	460b      	mov	r3, r1
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f000 80a0 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a6:	4b40      	ldr	r3, [pc, #256]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a3f      	ldr	r2, [pc, #252]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b2:	f7fd fd4b 	bl	8000e4c <HAL_GetTick>
 80033b6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ba:	e00b      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033bc:	f7fd fd46 	bl	8000e4c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b64      	cmp	r3, #100	@ 0x64
 80033ca:	d903      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80033d2:	e005      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033d4:	4b34      	ldr	r3, [pc, #208]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ed      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80033e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d17a      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033e8:	4b2e      	ldr	r3, [pc, #184]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80033ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80033f4:	4053      	eors	r3, r2
 80033f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d015      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033fe:	4b29      	ldr	r3, [pc, #164]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003406:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800340a:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340e:	4a25      	ldr	r2, [pc, #148]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003414:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003416:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341a:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800341c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003420:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003422:	4a20      	ldr	r2, [pc, #128]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003424:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003428:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800342a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800342e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003436:	d118      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fd fd08 	bl	8000e4c <HAL_GetTick>
 800343c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003440:	e00d      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd fd03 	bl	8000e4c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800344c:	1ad2      	subs	r2, r2, r3
 800344e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003452:	429a      	cmp	r2, r3
 8003454:	d903      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800345c:	e005      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800345e:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0eb      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800346a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800346e:	2b00      	cmp	r3, #0
 8003470:	d130      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003476:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800347a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800347e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003482:	d115      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003484:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800348c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003490:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003494:	091a      	lsrs	r2, r3, #4
 8003496:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003498:	4013      	ands	r3, r2
 800349a:	4a02      	ldr	r2, [pc, #8]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800349c:	430b      	orrs	r3, r1
 800349e:	6113      	str	r3, [r2, #16]
 80034a0:	e00c      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
 80034a8:	58024800 	.word	0x58024800
 80034ac:	00ffffcf 	.word	0x00ffffcf
 80034b0:	4bd4      	ldr	r3, [pc, #848]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	4ad3      	ldr	r2, [pc, #844]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034ba:	6113      	str	r3, [r2, #16]
 80034bc:	4bd1      	ldr	r3, [pc, #836]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80034c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	4acd      	ldr	r2, [pc, #820]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f002 0301 	and.w	r3, r2, #1
 80034f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034f6:	2300      	movs	r3, #0
 80034f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003500:	460b      	mov	r3, r1
 8003502:	4313      	orrs	r3, r2
 8003504:	f000 808b 	beq.w	800361e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003510:	2b28      	cmp	r3, #40	@ 0x28
 8003512:	d86b      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003514:	a201      	add	r2, pc, #4	@ (adr r2, 800351c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	080035f5 	.word	0x080035f5
 8003520:	080035ed 	.word	0x080035ed
 8003524:	080035ed 	.word	0x080035ed
 8003528:	080035ed 	.word	0x080035ed
 800352c:	080035ed 	.word	0x080035ed
 8003530:	080035ed 	.word	0x080035ed
 8003534:	080035ed 	.word	0x080035ed
 8003538:	080035ed 	.word	0x080035ed
 800353c:	080035c1 	.word	0x080035c1
 8003540:	080035ed 	.word	0x080035ed
 8003544:	080035ed 	.word	0x080035ed
 8003548:	080035ed 	.word	0x080035ed
 800354c:	080035ed 	.word	0x080035ed
 8003550:	080035ed 	.word	0x080035ed
 8003554:	080035ed 	.word	0x080035ed
 8003558:	080035ed 	.word	0x080035ed
 800355c:	080035d7 	.word	0x080035d7
 8003560:	080035ed 	.word	0x080035ed
 8003564:	080035ed 	.word	0x080035ed
 8003568:	080035ed 	.word	0x080035ed
 800356c:	080035ed 	.word	0x080035ed
 8003570:	080035ed 	.word	0x080035ed
 8003574:	080035ed 	.word	0x080035ed
 8003578:	080035ed 	.word	0x080035ed
 800357c:	080035f5 	.word	0x080035f5
 8003580:	080035ed 	.word	0x080035ed
 8003584:	080035ed 	.word	0x080035ed
 8003588:	080035ed 	.word	0x080035ed
 800358c:	080035ed 	.word	0x080035ed
 8003590:	080035ed 	.word	0x080035ed
 8003594:	080035ed 	.word	0x080035ed
 8003598:	080035ed 	.word	0x080035ed
 800359c:	080035f5 	.word	0x080035f5
 80035a0:	080035ed 	.word	0x080035ed
 80035a4:	080035ed 	.word	0x080035ed
 80035a8:	080035ed 	.word	0x080035ed
 80035ac:	080035ed 	.word	0x080035ed
 80035b0:	080035ed 	.word	0x080035ed
 80035b4:	080035ed 	.word	0x080035ed
 80035b8:	080035ed 	.word	0x080035ed
 80035bc:	080035f5 	.word	0x080035f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c4:	3308      	adds	r3, #8
 80035c6:	2101      	movs	r1, #1
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 ffc5 	bl	8004558 <RCCEx_PLL2_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035d4:	e00f      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035da:	3328      	adds	r3, #40	@ 0x28
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 f86c 	bl	80046bc <RCCEx_PLL3_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035ea:	e004      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035fe:	4b81      	ldr	r3, [pc, #516]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003602:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360e:	4a7d      	ldr	r2, [pc, #500]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6553      	str	r3, [r2, #84]	@ 0x54
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003616:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800361a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800361e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f002 0302 	and.w	r3, r2, #2
 800362a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800362e:	2300      	movs	r3, #0
 8003630:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003634:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003638:	460b      	mov	r3, r1
 800363a:	4313      	orrs	r3, r2
 800363c:	d042      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800363e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003644:	2b05      	cmp	r3, #5
 8003646:	d825      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003648:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	0800369d 	.word	0x0800369d
 8003654:	08003669 	.word	0x08003669
 8003658:	0800367f 	.word	0x0800367f
 800365c:	0800369d 	.word	0x0800369d
 8003660:	0800369d 	.word	0x0800369d
 8003664:	0800369d 	.word	0x0800369d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800366c:	3308      	adds	r3, #8
 800366e:	2101      	movs	r1, #1
 8003670:	4618      	mov	r0, r3
 8003672:	f000 ff71 	bl	8004558 <RCCEx_PLL2_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800367c:	e00f      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800367e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003682:	3328      	adds	r3, #40	@ 0x28
 8003684:	2101      	movs	r1, #1
 8003686:	4618      	mov	r0, r3
 8003688:	f001 f818 	bl	80046bc <RCCEx_PLL3_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003692:	e004      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800369a:	e000      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800369c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036a6:	4b57      	ldr	r3, [pc, #348]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f023 0107 	bic.w	r1, r3, #7
 80036ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b4:	4a53      	ldr	r2, [pc, #332]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80036ba:	e003      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f002 0304 	and.w	r3, r2, #4
 80036d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80036de:	460b      	mov	r3, r1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	d044      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d825      	bhi.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80036f0:	a201      	add	r2, pc, #4	@ (adr r2, 80036f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	08003745 	.word	0x08003745
 80036fc:	08003711 	.word	0x08003711
 8003700:	08003727 	.word	0x08003727
 8003704:	08003745 	.word	0x08003745
 8003708:	08003745 	.word	0x08003745
 800370c:	08003745 	.word	0x08003745
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003714:	3308      	adds	r3, #8
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f000 ff1d 	bl	8004558 <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003724:	e00f      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003726:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372a:	3328      	adds	r3, #40	@ 0x28
 800372c:	2101      	movs	r1, #1
 800372e:	4618      	mov	r0, r3
 8003730:	f000 ffc4 	bl	80046bc <RCCEx_PLL3_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800373a:	e004      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003746:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800374e:	4b2d      	ldr	r3, [pc, #180]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003752:	f023 0107 	bic.w	r1, r3, #7
 8003756:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800375a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800375e:	4a29      	ldr	r2, [pc, #164]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6593      	str	r3, [r2, #88]	@ 0x58
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800376a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800376e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f002 0320 	and.w	r3, r2, #32
 800377a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d057      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800379a:	d035      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800379c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a0:	d82c      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a6:	d031      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ac:	d826      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037b2:	d02d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80037b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037b8:	d820      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037be:	d012      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80037c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037c4:	d81a      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d024      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80037ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037ce:	d115      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d4:	3308      	adds	r3, #8
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 febd 	bl	8004558 <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037e4:	e017      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ea:	3328      	adds	r3, #40	@ 0x28
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 ff64 	bl	80046bc <RCCEx_PLL3_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037fa:	e00c      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003802:	e008      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003804:	58024400 	.word	0x58024400
        break;
 8003808:	bf00      	nop
 800380a:	e004      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800380c:	bf00      	nop
 800380e:	e002      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003816:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800381e:	4bc2      	ldr	r3, [pc, #776]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800382e:	4abe      	ldr	r2, [pc, #760]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003830:	430b      	orrs	r3, r1
 8003832:	6553      	str	r3, [r2, #84]	@ 0x54
 8003834:	e003      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003836:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800383a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800383e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800384a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003854:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003858:	460b      	mov	r3, r1
 800385a:	4313      	orrs	r3, r2
 800385c:	d055      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800385e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003862:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003866:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800386a:	d033      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800386c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003870:	d82c      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003876:	d02f      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387c:	d826      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800387e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003882:	d02b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003888:	d820      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800388a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800388e:	d012      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003894:	d81a      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d022      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800389a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389e:	d115      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038a4:	3308      	adds	r3, #8
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fe55 	bl	8004558 <RCCEx_PLL2_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038b4:	e015      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ba:	3328      	adds	r3, #40	@ 0x28
 80038bc:	2102      	movs	r1, #2
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fefc 	bl	80046bc <RCCEx_PLL3_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038ca:	e00a      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038d2:	e006      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038d4:	bf00      	nop
 80038d6:	e004      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038d8:	bf00      	nop
 80038da:	e002      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80038e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80038f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038fa:	4a8b      	ldr	r2, [pc, #556]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003900:	e003      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003902:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003906:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800390a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003916:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003920:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d055      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800392a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800392e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003932:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003936:	d033      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003938:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800393c:	d82c      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800393e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003942:	d02f      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003948:	d826      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800394a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800394e:	d02b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003950:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003954:	d820      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800395a:	d012      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800395c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003960:	d81a      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d022      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396a:	d115      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800396c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003970:	3308      	adds	r3, #8
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fdef 	bl	8004558 <RCCEx_PLL2_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003980:	e015      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003986:	3328      	adds	r3, #40	@ 0x28
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fe96 	bl	80046bc <RCCEx_PLL3_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003996:	e00a      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800399e:	e006      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039a0:	bf00      	nop
 80039a2:	e004      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039a4:	bf00      	nop
 80039a6:	e002      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ba:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039c6:	4a58      	ldr	r2, [pc, #352]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80039d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f002 0308 	and.w	r3, r2, #8
 80039e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039ec:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80039f0:	460b      	mov	r3, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	d01e      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a08:	3328      	adds	r3, #40	@ 0x28
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fe55 	bl	80046bc <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a1e:	4b42      	ldr	r3, [pc, #264]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f002 0310 	and.w	r3, r2, #16
 8003a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a44:	2300      	movs	r3, #0
 8003a46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d01e      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a66:	3328      	adds	r3, #40	@ 0x28
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fe26 	bl	80046bc <RCCEx_PLL3_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a8c:	4a26      	ldr	r2, [pc, #152]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003a9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003aa8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d040      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ab6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003abe:	d022      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003ac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ac4:	d81b      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ace:	d00b      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003ad0:	e015      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fd3c 	bl	8004558 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ae6:	e00f      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aec:	3328      	adds	r3, #40	@ 0x28
 8003aee:	2102      	movs	r1, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fde3 	bl	80046bc <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b20:	4a01      	ldr	r2, [pc, #4]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b26:	e005      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003b28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b30:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b42:	2300      	movs	r3, #0
 8003b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	d03b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b5c:	d01f      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003b5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b62:	d818      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003b64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003b6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b6e:	d007      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003b70:	e011      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b72:	4b64      	ldr	r3, [pc, #400]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b76:	4a63      	ldr	r2, [pc, #396]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b7e:	e00f      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b84:	3328      	adds	r3, #40	@ 0x28
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fd97 	bl	80046bc <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b94:	e004      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba8:	4b56      	ldr	r3, [pc, #344]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb8:	4a52      	ldr	r2, [pc, #328]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bbe:	e003      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bc4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003bd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bda:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d031      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf2:	d007      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf6:	4b43      	ldr	r3, [pc, #268]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	4a42      	ldr	r2, [pc, #264]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c02:	e00e      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c08:	3308      	adds	r3, #8
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fca3 	bl	8004558 <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c2a:	4b36      	ldr	r3, [pc, #216]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c38:	4a32      	ldr	r2, [pc, #200]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c56:	2300      	movs	r3, #0
 8003c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4313      	orrs	r3, r2
 8003c62:	d00c      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c68:	3328      	adds	r3, #40	@ 0x28
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fd25 	bl	80046bc <RCCEx_PLL3_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003c8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c94:	460b      	mov	r3, r1
 8003c96:	4313      	orrs	r3, r2
 8003c98:	d03a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ca6:	d018      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003ca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cac:	d811      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb2:	d014      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb8:	d80b      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cfc:	4a01      	ldr	r2, [pc, #4]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d02:	e005      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003d0c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d1e:	2300      	movs	r3, #0
 8003d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d2c:	4baa      	ldr	r3, [pc, #680]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d3a:	4aa7      	ldr	r2, [pc, #668]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d4e:	2300      	movs	r3, #0
 8003d50:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d56:	460b      	mov	r3, r1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d6c:	4a9a      	ldr	r2, [pc, #616]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d80:	2300      	movs	r3, #0
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d8e:	4b92      	ldr	r3, [pc, #584]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d92:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003da2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8003db0:	2300      	movs	r3, #0
 8003db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003db8:	460b      	mov	r3, r1
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dbe:	4b86      	ldr	r3, [pc, #536]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	4a85      	ldr	r2, [pc, #532]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003dc8:	6113      	str	r3, [r2, #16]
 8003dca:	4b83      	ldr	r3, [pc, #524]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dcc:	6919      	ldr	r1, [r3, #16]
 8003dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003dd6:	4a80      	ldr	r2, [pc, #512]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dea:	2300      	movs	r3, #0
 8003dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003df8:	4b77      	ldr	r3, [pc, #476]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e06:	4a74      	ldr	r2, [pc, #464]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e28:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e38:	4a67      	ldr	r2, [pc, #412]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	2100      	movs	r1, #0
 8003e48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e54:	460b      	mov	r3, r1
 8003e56:	4313      	orrs	r3, r2
 8003e58:	d011      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fb78 	bl	8004558 <RCCEx_PLL2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003e6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003e7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	2100      	movs	r1, #0
 8003e88:	6239      	str	r1, [r7, #32]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d011      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fb58 	bl	8004558 <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003eae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003eba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	61b9      	str	r1, [r7, #24]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d011      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ede:	3308      	adds	r3, #8
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb38 	bl	8004558 <RCCEx_PLL2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003eee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003efa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	2100      	movs	r1, #0
 8003f08:	6139      	str	r1, [r7, #16]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d011      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f1e:	3328      	adds	r3, #40	@ 0x28
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fbca 	bl	80046bc <RCCEx_PLL3_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003f2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	2100      	movs	r1, #0
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f54:	460b      	mov	r3, r1
 8003f56:	4313      	orrs	r3, r2
 8003f58:	d011      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f5e:	3328      	adds	r3, #40	@ 0x28
 8003f60:	2101      	movs	r1, #1
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fbaa 	bl	80046bc <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003f6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003f7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	2100      	movs	r1, #0
 8003f88:	6039      	str	r1, [r7, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d011      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f9e:	3328      	adds	r3, #40	@ 0x28
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fb8a 	bl	80046bc <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003fae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003fba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003fbe:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd8:	58024400 	.word	0x58024400

08003fdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fe0:	f7fe fd56 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4904      	ldr	r1, [pc, #16]	@ (8004004 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	58024400 	.word	0x58024400
 8004004:	08005ab0 	.word	0x08005ab0

08004008 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	@ 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004010:	4ba1      	ldr	r3, [pc, #644]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800401a:	4b9f      	ldr	r3, [pc, #636]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	0b1b      	lsrs	r3, r3, #12
 8004020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004024:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004026:	4b9c      	ldr	r3, [pc, #624]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	091b      	lsrs	r3, r3, #4
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004032:	4b99      	ldr	r3, [pc, #612]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	08db      	lsrs	r3, r3, #3
 8004038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8111 	beq.w	8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b02      	cmp	r3, #2
 800405a:	f000 8083 	beq.w	8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b02      	cmp	r3, #2
 8004062:	f200 80a1 	bhi.w	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d056      	beq.n	8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004072:	e099      	b.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004074:	4b88      	ldr	r3, [pc, #544]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d02d      	beq.n	80040dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004080:	4b85      	ldr	r3, [pc, #532]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	4a84      	ldr	r2, [pc, #528]	@ (800429c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80040be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040da:	e087      	b.n	80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004102:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800411e:	e065      	b.n	80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800412e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004132:	4b59      	ldr	r3, [pc, #356]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004142:	ed97 6a03 	vldr	s12, [r7, #12]
 8004146:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800414a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004162:	e043      	b.n	80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b48      	ldr	r3, [pc, #288]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a03 	vldr	s12, [r7, #12]
 800418a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041a6:	e021      	b.n	80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b37      	ldr	r3, [pc, #220]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	0a5b      	lsrs	r3, r3, #9
 80041f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004206:	edd7 6a07 	vldr	s13, [r7, #28]
 800420a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800420e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004212:	ee17 2a90 	vmov	r2, s15
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800421a:	4b1f      	ldr	r3, [pc, #124]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800421c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004234:	edd7 6a07 	vldr	s13, [r7, #28]
 8004238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800423c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004240:	ee17 2a90 	vmov	r2, s15
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004248:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800425e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004262:	edd7 6a07 	vldr	s13, [r7, #28]
 8004266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426e:	ee17 2a90 	vmov	r2, s15
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004276:	e008      	b.n	800428a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
}
 800428a:	bf00      	nop
 800428c:	3724      	adds	r7, #36	@ 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	58024400 	.word	0x58024400
 800429c:	03d09000 	.word	0x03d09000
 80042a0:	46000000 	.word	0x46000000
 80042a4:	4c742400 	.word	0x4c742400
 80042a8:	4a742400 	.word	0x4a742400
 80042ac:	4bbebc20 	.word	0x4bbebc20

080042b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	@ 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042b8:	4ba1      	ldr	r3, [pc, #644]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80042c2:	4b9f      	ldr	r3, [pc, #636]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	0d1b      	lsrs	r3, r3, #20
 80042c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042ce:	4b9c      	ldr	r3, [pc, #624]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80042da:	4b99      	ldr	r3, [pc, #612]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	08db      	lsrs	r3, r3, #3
 80042e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8111 	beq.w	8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f000 8083 	beq.w	800440c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d056      	beq.n	80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800431a:	e099      	b.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800431c:	4b88      	ldr	r3, [pc, #544]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02d      	beq.n	8004384 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004328:	4b85      	ldr	r3, [pc, #532]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4a84      	ldr	r2, [pc, #528]	@ (8004544 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b7b      	ldr	r3, [pc, #492]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004382:	e087      	b.n	8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800454c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	e065      	b.n	8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b59      	ldr	r3, [pc, #356]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	e043      	b.n	8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b48      	ldr	r3, [pc, #288]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004432:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444e:	e021      	b.n	8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b37      	ldr	r3, [pc, #220]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a03 	vldr	s12, [r7, #12]
 8004476:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004492:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004494:	4b2a      	ldr	r3, [pc, #168]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	0a5b      	lsrs	r3, r3, #9
 800449a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ba:	ee17 2a90 	vmov	r2, s15
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80044c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	0c1b      	lsrs	r3, r3, #16
 80044c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044cc:	ee07 3a90 	vmov	s15, r3
 80044d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e8:	ee17 2a90 	vmov	r2, s15
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044f0:	4b13      	ldr	r3, [pc, #76]	@ (8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800450a:	edd7 6a07 	vldr	s13, [r7, #28]
 800450e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004516:	ee17 2a90 	vmov	r2, s15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800451e:	e008      	b.n	8004532 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
}
 8004532:	bf00      	nop
 8004534:	3724      	adds	r7, #36	@ 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	58024400 	.word	0x58024400
 8004544:	03d09000 	.word	0x03d09000
 8004548:	46000000 	.word	0x46000000
 800454c:	4c742400 	.word	0x4c742400
 8004550:	4a742400 	.word	0x4a742400
 8004554:	4bbebc20 	.word	0x4bbebc20

08004558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004566:	4b53      	ldr	r3, [pc, #332]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b03      	cmp	r3, #3
 8004570:	d101      	bne.n	8004576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e099      	b.n	80046aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004576:	4b4f      	ldr	r3, [pc, #316]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4e      	ldr	r2, [pc, #312]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800457c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004582:	f7fc fc63 	bl	8000e4c <HAL_GetTick>
 8004586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004588:	e008      	b.n	800459c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800458a:	f7fc fc5f 	bl	8000e4c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e086      	b.n	80046aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800459c:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045a8:	4b42      	ldr	r3, [pc, #264]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	493f      	ldr	r1, [pc, #252]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	025b      	lsls	r3, r3, #9
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	041b      	lsls	r3, r3, #16
 80045da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	061b      	lsls	r3, r3, #24
 80045e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80045ec:	4931      	ldr	r1, [pc, #196]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045f2:	4b30      	ldr	r3, [pc, #192]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	492d      	ldr	r1, [pc, #180]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004604:	4b2b      	ldr	r3, [pc, #172]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004608:	f023 0220 	bic.w	r2, r3, #32
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	4928      	ldr	r1, [pc, #160]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004616:	4b27      	ldr	r3, [pc, #156]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	4a26      	ldr	r2, [pc, #152]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800461c:	f023 0310 	bic.w	r3, r3, #16
 8004620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004622:	4b24      	ldr	r3, [pc, #144]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004626:	4b24      	ldr	r3, [pc, #144]	@ (80046b8 <RCCEx_PLL2_Config+0x160>)
 8004628:	4013      	ands	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	69d2      	ldr	r2, [r2, #28]
 800462e:	00d2      	lsls	r2, r2, #3
 8004630:	4920      	ldr	r1, [pc, #128]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004636:	4b1f      	ldr	r3, [pc, #124]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	4a1e      	ldr	r2, [pc, #120]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800463c:	f043 0310 	orr.w	r3, r3, #16
 8004640:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004648:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	4a19      	ldr	r2, [pc, #100]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800464e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004654:	e00f      	b.n	8004676 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d106      	bne.n	800466a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	4a14      	ldr	r2, [pc, #80]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004668:	e005      	b.n	8004676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800466a:	4b12      	ldr	r3, [pc, #72]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	4a11      	ldr	r2, [pc, #68]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004674:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004676:	4b0f      	ldr	r3, [pc, #60]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a0e      	ldr	r2, [pc, #56]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800467c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004682:	f7fc fbe3 	bl	8000e4c <HAL_GetTick>
 8004686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004688:	e008      	b.n	800469c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800468a:	f7fc fbdf 	bl	8000e4c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e006      	b.n	80046aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <RCCEx_PLL2_Config+0x15c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	58024400 	.word	0x58024400
 80046b8:	ffff0007 	.word	0xffff0007

080046bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046ca:	4b53      	ldr	r3, [pc, #332]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d101      	bne.n	80046da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e099      	b.n	800480e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046da:	4b4f      	ldr	r3, [pc, #316]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a4e      	ldr	r2, [pc, #312]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80046e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e6:	f7fc fbb1 	bl	8000e4c <HAL_GetTick>
 80046ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046ec:	e008      	b.n	8004700 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046ee:	f7fc fbad 	bl	8000e4c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e086      	b.n	800480e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004700:	4b45      	ldr	r3, [pc, #276]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1f0      	bne.n	80046ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800470c:	4b42      	ldr	r3, [pc, #264]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	051b      	lsls	r3, r3, #20
 800471a:	493f      	ldr	r1, [pc, #252]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 800471c:	4313      	orrs	r3, r2
 800471e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	3b01      	subs	r3, #1
 8004726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	3b01      	subs	r3, #1
 8004730:	025b      	lsls	r3, r3, #9
 8004732:	b29b      	uxth	r3, r3
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	3b01      	subs	r3, #1
 800474a:	061b      	lsls	r3, r3, #24
 800474c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004750:	4931      	ldr	r1, [pc, #196]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004756:	4b30      	ldr	r3, [pc, #192]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	492d      	ldr	r1, [pc, #180]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004764:	4313      	orrs	r3, r2
 8004766:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004768:	4b2b      	ldr	r3, [pc, #172]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	4928      	ldr	r1, [pc, #160]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800477a:	4b27      	ldr	r3, [pc, #156]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	4a26      	ldr	r2, [pc, #152]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004786:	4b24      	ldr	r3, [pc, #144]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800478a:	4b24      	ldr	r3, [pc, #144]	@ (800481c <RCCEx_PLL3_Config+0x160>)
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	69d2      	ldr	r2, [r2, #28]
 8004792:	00d2      	lsls	r2, r2, #3
 8004794:	4920      	ldr	r1, [pc, #128]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800479a:	4b1f      	ldr	r3, [pc, #124]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	4a19      	ldr	r2, [pc, #100]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047b8:	e00f      	b.n	80047da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d106      	bne.n	80047ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047c0:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	4a14      	ldr	r2, [pc, #80]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047cc:	e005      	b.n	80047da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047ce:	4b12      	ldr	r3, [pc, #72]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	4a11      	ldr	r2, [pc, #68]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047da:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a0e      	ldr	r2, [pc, #56]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e6:	f7fc fb31 	bl	8000e4c <HAL_GetTick>
 80047ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047ec:	e008      	b.n	8004800 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ee:	f7fc fb2d 	bl	8000e4c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e006      	b.n	800480e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <RCCEx_PLL3_Config+0x15c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	58024400 	.word	0x58024400
 800481c:	ffff0007 	.word	0xffff0007

08004820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e042      	b.n	80048b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fc f9b7 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2224      	movs	r2, #36	@ 0x24
 800484e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fd90 	bl	8005390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f825 	bl	80048c0 <UART_SetConfig>
 8004876:	4603      	mov	r3, r0
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e01b      	b.n	80048b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800488e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800489e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fe0f 	bl	80054d4 <UART_CheckIdleState>
 80048b6:	4603      	mov	r3, r0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c4:	b092      	sub	sp, #72	@ 0x48
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	431a      	orrs	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4bbe      	ldr	r3, [pc, #760]	@ (8004be8 <UART_SetConfig+0x328>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4ab3      	ldr	r2, [pc, #716]	@ (8004bec <UART_SetConfig+0x32c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004928:	4313      	orrs	r3, r2
 800492a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	4baf      	ldr	r3, [pc, #700]	@ (8004bf0 <UART_SetConfig+0x330>)
 8004934:	4013      	ands	r3, r2
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800493c:	430b      	orrs	r3, r1
 800493e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	f023 010f 	bic.w	r1, r3, #15
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4aa6      	ldr	r2, [pc, #664]	@ (8004bf4 <UART_SetConfig+0x334>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d177      	bne.n	8004a50 <UART_SetConfig+0x190>
 8004960:	4ba5      	ldr	r3, [pc, #660]	@ (8004bf8 <UART_SetConfig+0x338>)
 8004962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004964:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004968:	2b28      	cmp	r3, #40	@ 0x28
 800496a:	d86d      	bhi.n	8004a48 <UART_SetConfig+0x188>
 800496c:	a201      	add	r2, pc, #4	@ (adr r2, 8004974 <UART_SetConfig+0xb4>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	08004a19 	.word	0x08004a19
 8004978:	08004a49 	.word	0x08004a49
 800497c:	08004a49 	.word	0x08004a49
 8004980:	08004a49 	.word	0x08004a49
 8004984:	08004a49 	.word	0x08004a49
 8004988:	08004a49 	.word	0x08004a49
 800498c:	08004a49 	.word	0x08004a49
 8004990:	08004a49 	.word	0x08004a49
 8004994:	08004a21 	.word	0x08004a21
 8004998:	08004a49 	.word	0x08004a49
 800499c:	08004a49 	.word	0x08004a49
 80049a0:	08004a49 	.word	0x08004a49
 80049a4:	08004a49 	.word	0x08004a49
 80049a8:	08004a49 	.word	0x08004a49
 80049ac:	08004a49 	.word	0x08004a49
 80049b0:	08004a49 	.word	0x08004a49
 80049b4:	08004a29 	.word	0x08004a29
 80049b8:	08004a49 	.word	0x08004a49
 80049bc:	08004a49 	.word	0x08004a49
 80049c0:	08004a49 	.word	0x08004a49
 80049c4:	08004a49 	.word	0x08004a49
 80049c8:	08004a49 	.word	0x08004a49
 80049cc:	08004a49 	.word	0x08004a49
 80049d0:	08004a49 	.word	0x08004a49
 80049d4:	08004a31 	.word	0x08004a31
 80049d8:	08004a49 	.word	0x08004a49
 80049dc:	08004a49 	.word	0x08004a49
 80049e0:	08004a49 	.word	0x08004a49
 80049e4:	08004a49 	.word	0x08004a49
 80049e8:	08004a49 	.word	0x08004a49
 80049ec:	08004a49 	.word	0x08004a49
 80049f0:	08004a49 	.word	0x08004a49
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a49 	.word	0x08004a49
 80049fc:	08004a49 	.word	0x08004a49
 8004a00:	08004a49 	.word	0x08004a49
 8004a04:	08004a49 	.word	0x08004a49
 8004a08:	08004a49 	.word	0x08004a49
 8004a0c:	08004a49 	.word	0x08004a49
 8004a10:	08004a49 	.word	0x08004a49
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e222      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e21e      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e21a      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e216      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a38:	2320      	movs	r3, #32
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	e212      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a40:	2340      	movs	r3, #64	@ 0x40
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a46:	e20e      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4e:	e20a      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a69      	ldr	r2, [pc, #420]	@ (8004bfc <UART_SetConfig+0x33c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d130      	bne.n	8004abc <UART_SetConfig+0x1fc>
 8004a5a:	4b67      	ldr	r3, [pc, #412]	@ (8004bf8 <UART_SetConfig+0x338>)
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d826      	bhi.n	8004ab4 <UART_SetConfig+0x1f4>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <UART_SetConfig+0x1ac>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a85 	.word	0x08004a85
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	08004a95 	.word	0x08004a95
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8a:	e1ec      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a92:	e1e8      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a94:	2308      	movs	r3, #8
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e1e4      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e1e0      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e1dc      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004aac:	2340      	movs	r3, #64	@ 0x40
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e1d8      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e1d4      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a4f      	ldr	r2, [pc, #316]	@ (8004c00 <UART_SetConfig+0x340>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d130      	bne.n	8004b28 <UART_SetConfig+0x268>
 8004ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8004bf8 <UART_SetConfig+0x338>)
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d826      	bhi.n	8004b20 <UART_SetConfig+0x260>
 8004ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <UART_SetConfig+0x218>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004af1 	.word	0x08004af1
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004b01 	.word	0x08004b01
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af6:	e1b6      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004af8:	2304      	movs	r3, #4
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e1b2      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b00:	2308      	movs	r3, #8
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e1ae      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e1aa      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b10:	2320      	movs	r3, #32
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e1a6      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b18:	2340      	movs	r3, #64	@ 0x40
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e1a2      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b20:	2380      	movs	r3, #128	@ 0x80
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e19e      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a35      	ldr	r2, [pc, #212]	@ (8004c04 <UART_SetConfig+0x344>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d130      	bne.n	8004b94 <UART_SetConfig+0x2d4>
 8004b32:	4b31      	ldr	r3, [pc, #196]	@ (8004bf8 <UART_SetConfig+0x338>)
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d826      	bhi.n	8004b8c <UART_SetConfig+0x2cc>
 8004b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <UART_SetConfig+0x284>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b5d 	.word	0x08004b5d
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	08004b6d 	.word	0x08004b6d
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b62:	e180      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e17c      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e178      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e174      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e170      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b84:	2340      	movs	r3, #64	@ 0x40
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8a:	e16c      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b8c:	2380      	movs	r3, #128	@ 0x80
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b92:	e168      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1b      	ldr	r2, [pc, #108]	@ (8004c08 <UART_SetConfig+0x348>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d142      	bne.n	8004c24 <UART_SetConfig+0x364>
 8004b9e:	4b16      	ldr	r3, [pc, #88]	@ (8004bf8 <UART_SetConfig+0x338>)
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d838      	bhi.n	8004c1c <UART_SetConfig+0x35c>
 8004baa:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <UART_SetConfig+0x2f0>)
 8004bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb0:	08004bc9 	.word	0x08004bc9
 8004bb4:	08004bd1 	.word	0x08004bd1
 8004bb8:	08004bd9 	.word	0x08004bd9
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004c0d 	.word	0x08004c0d
 8004bc4:	08004c15 	.word	0x08004c15
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bce:	e14a      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd6:	e146      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bde:	e142      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004be0:	2310      	movs	r3, #16
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e13e      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004be8:	cfff69f3 	.word	0xcfff69f3
 8004bec:	58000c00 	.word	0x58000c00
 8004bf0:	11fff4ff 	.word	0x11fff4ff
 8004bf4:	40011000 	.word	0x40011000
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	40004400 	.word	0x40004400
 8004c00:	40004800 	.word	0x40004800
 8004c04:	40004c00 	.word	0x40004c00
 8004c08:	40005000 	.word	0x40005000
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c12:	e128      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004c14:	2340      	movs	r3, #64	@ 0x40
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1a:	e124      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004c1c:	2380      	movs	r3, #128	@ 0x80
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c22:	e120      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4acb      	ldr	r2, [pc, #812]	@ (8004f58 <UART_SetConfig+0x698>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d176      	bne.n	8004d1c <UART_SetConfig+0x45c>
 8004c2e:	4bcb      	ldr	r3, [pc, #812]	@ (8004f5c <UART_SetConfig+0x69c>)
 8004c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c36:	2b28      	cmp	r3, #40	@ 0x28
 8004c38:	d86c      	bhi.n	8004d14 <UART_SetConfig+0x454>
 8004c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <UART_SetConfig+0x380>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004ce5 	.word	0x08004ce5
 8004c44:	08004d15 	.word	0x08004d15
 8004c48:	08004d15 	.word	0x08004d15
 8004c4c:	08004d15 	.word	0x08004d15
 8004c50:	08004d15 	.word	0x08004d15
 8004c54:	08004d15 	.word	0x08004d15
 8004c58:	08004d15 	.word	0x08004d15
 8004c5c:	08004d15 	.word	0x08004d15
 8004c60:	08004ced 	.word	0x08004ced
 8004c64:	08004d15 	.word	0x08004d15
 8004c68:	08004d15 	.word	0x08004d15
 8004c6c:	08004d15 	.word	0x08004d15
 8004c70:	08004d15 	.word	0x08004d15
 8004c74:	08004d15 	.word	0x08004d15
 8004c78:	08004d15 	.word	0x08004d15
 8004c7c:	08004d15 	.word	0x08004d15
 8004c80:	08004cf5 	.word	0x08004cf5
 8004c84:	08004d15 	.word	0x08004d15
 8004c88:	08004d15 	.word	0x08004d15
 8004c8c:	08004d15 	.word	0x08004d15
 8004c90:	08004d15 	.word	0x08004d15
 8004c94:	08004d15 	.word	0x08004d15
 8004c98:	08004d15 	.word	0x08004d15
 8004c9c:	08004d15 	.word	0x08004d15
 8004ca0:	08004cfd 	.word	0x08004cfd
 8004ca4:	08004d15 	.word	0x08004d15
 8004ca8:	08004d15 	.word	0x08004d15
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004d15 	.word	0x08004d15
 8004cb4:	08004d15 	.word	0x08004d15
 8004cb8:	08004d15 	.word	0x08004d15
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d05 	.word	0x08004d05
 8004cc4:	08004d15 	.word	0x08004d15
 8004cc8:	08004d15 	.word	0x08004d15
 8004ccc:	08004d15 	.word	0x08004d15
 8004cd0:	08004d15 	.word	0x08004d15
 8004cd4:	08004d15 	.word	0x08004d15
 8004cd8:	08004d15 	.word	0x08004d15
 8004cdc:	08004d15 	.word	0x08004d15
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cea:	e0bc      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf2:	e0b8      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfa:	e0b4      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d02:	e0b0      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d04:	2320      	movs	r3, #32
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0a:	e0ac      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d0c:	2340      	movs	r3, #64	@ 0x40
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d12:	e0a8      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e0a4      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a8f      	ldr	r2, [pc, #572]	@ (8004f60 <UART_SetConfig+0x6a0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d130      	bne.n	8004d88 <UART_SetConfig+0x4c8>
 8004d26:	4b8d      	ldr	r3, [pc, #564]	@ (8004f5c <UART_SetConfig+0x69c>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d826      	bhi.n	8004d80 <UART_SetConfig+0x4c0>
 8004d32:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <UART_SetConfig+0x478>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d51 	.word	0x08004d51
 8004d3c:	08004d59 	.word	0x08004d59
 8004d40:	08004d61 	.word	0x08004d61
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d56:	e086      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5e:	e082      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d60:	2308      	movs	r3, #8
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d66:	e07e      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	e07a      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d70:	2320      	movs	r3, #32
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e076      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d78:	2340      	movs	r3, #64	@ 0x40
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e072      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e06e      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a75      	ldr	r2, [pc, #468]	@ (8004f64 <UART_SetConfig+0x6a4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d130      	bne.n	8004df4 <UART_SetConfig+0x534>
 8004d92:	4b72      	ldr	r3, [pc, #456]	@ (8004f5c <UART_SetConfig+0x69c>)
 8004d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d826      	bhi.n	8004dec <UART_SetConfig+0x52c>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <UART_SetConfig+0x4e4>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dbd 	.word	0x08004dbd
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	08004dcd 	.word	0x08004dcd
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc2:	e050      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dca:	e04c      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd2:	e048      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dda:	e044      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004ddc:	2320      	movs	r3, #32
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e040      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004de4:	2340      	movs	r3, #64	@ 0x40
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dea:	e03c      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df2:	e038      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a5b      	ldr	r2, [pc, #364]	@ (8004f68 <UART_SetConfig+0x6a8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d130      	bne.n	8004e60 <UART_SetConfig+0x5a0>
 8004dfe:	4b57      	ldr	r3, [pc, #348]	@ (8004f5c <UART_SetConfig+0x69c>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d826      	bhi.n	8004e58 <UART_SetConfig+0x598>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <UART_SetConfig+0x550>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e29 	.word	0x08004e29
 8004e14:	08004e31 	.word	0x08004e31
 8004e18:	08004e39 	.word	0x08004e39
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2e:	e01a      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e36:	e016      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e3e:	e012      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e46:	e00e      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004e48:	2320      	movs	r3, #32
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e4e:	e00a      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004e50:	2340      	movs	r3, #64	@ 0x40
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e56:	e006      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e5e:	e002      	b.n	8004e66 <UART_SetConfig+0x5a6>
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f68 <UART_SetConfig+0x6a8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f040 80f8 	bne.w	8005062 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	dc46      	bgt.n	8004f08 <UART_SetConfig+0x648>
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	f2c0 8082 	blt.w	8004f84 <UART_SetConfig+0x6c4>
 8004e80:	3b02      	subs	r3, #2
 8004e82:	2b1e      	cmp	r3, #30
 8004e84:	d87e      	bhi.n	8004f84 <UART_SetConfig+0x6c4>
 8004e86:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <UART_SetConfig+0x5cc>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004f0f 	.word	0x08004f0f
 8004e90:	08004f85 	.word	0x08004f85
 8004e94:	08004f17 	.word	0x08004f17
 8004e98:	08004f85 	.word	0x08004f85
 8004e9c:	08004f85 	.word	0x08004f85
 8004ea0:	08004f85 	.word	0x08004f85
 8004ea4:	08004f27 	.word	0x08004f27
 8004ea8:	08004f85 	.word	0x08004f85
 8004eac:	08004f85 	.word	0x08004f85
 8004eb0:	08004f85 	.word	0x08004f85
 8004eb4:	08004f85 	.word	0x08004f85
 8004eb8:	08004f85 	.word	0x08004f85
 8004ebc:	08004f85 	.word	0x08004f85
 8004ec0:	08004f85 	.word	0x08004f85
 8004ec4:	08004f37 	.word	0x08004f37
 8004ec8:	08004f85 	.word	0x08004f85
 8004ecc:	08004f85 	.word	0x08004f85
 8004ed0:	08004f85 	.word	0x08004f85
 8004ed4:	08004f85 	.word	0x08004f85
 8004ed8:	08004f85 	.word	0x08004f85
 8004edc:	08004f85 	.word	0x08004f85
 8004ee0:	08004f85 	.word	0x08004f85
 8004ee4:	08004f85 	.word	0x08004f85
 8004ee8:	08004f85 	.word	0x08004f85
 8004eec:	08004f85 	.word	0x08004f85
 8004ef0:	08004f85 	.word	0x08004f85
 8004ef4:	08004f85 	.word	0x08004f85
 8004ef8:	08004f85 	.word	0x08004f85
 8004efc:	08004f85 	.word	0x08004f85
 8004f00:	08004f85 	.word	0x08004f85
 8004f04:	08004f77 	.word	0x08004f77
 8004f08:	2b40      	cmp	r3, #64	@ 0x40
 8004f0a:	d037      	beq.n	8004f7c <UART_SetConfig+0x6bc>
 8004f0c:	e03a      	b.n	8004f84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f0e:	f7ff f865 	bl	8003fdc <HAL_RCCEx_GetD3PCLK1Freq>
 8004f12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f14:	e03c      	b.n	8004f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff f874 	bl	8004008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f24:	e034      	b.n	8004f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f26:	f107 0318 	add.w	r3, r7, #24
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff f9c0 	bl	80042b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f34:	e02c      	b.n	8004f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f36:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <UART_SetConfig+0x69c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <UART_SetConfig+0x69c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	08db      	lsrs	r3, r3, #3
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	4a07      	ldr	r2, [pc, #28]	@ (8004f6c <UART_SetConfig+0x6ac>)
 8004f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f54:	e01c      	b.n	8004f90 <UART_SetConfig+0x6d0>
 8004f56:	bf00      	nop
 8004f58:	40011400 	.word	0x40011400
 8004f5c:	58024400 	.word	0x58024400
 8004f60:	40007800 	.word	0x40007800
 8004f64:	40007c00 	.word	0x40007c00
 8004f68:	58000c00 	.word	0x58000c00
 8004f6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f70:	4b9d      	ldr	r3, [pc, #628]	@ (80051e8 <UART_SetConfig+0x928>)
 8004f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f74:	e00c      	b.n	8004f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f76:	4b9d      	ldr	r3, [pc, #628]	@ (80051ec <UART_SetConfig+0x92c>)
 8004f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f7a:	e009      	b.n	8004f90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f82:	e005      	b.n	8004f90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 81de 	beq.w	8005354 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	4a94      	ldr	r2, [pc, #592]	@ (80051f0 <UART_SetConfig+0x930>)
 8004f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004faa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4413      	add	r3, r2
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d305      	bcc.n	8004fc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d903      	bls.n	8004fd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004fce:	e1c1      	b.n	8005354 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	60fa      	str	r2, [r7, #12]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	4a84      	ldr	r2, [pc, #528]	@ (80051f0 <UART_SetConfig+0x930>)
 8004fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ff2:	f7fb f971 	bl	80002d8 <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	020b      	lsls	r3, r1, #8
 8005008:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800500c:	0202      	lsls	r2, r0, #8
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	6849      	ldr	r1, [r1, #4]
 8005012:	0849      	lsrs	r1, r1, #1
 8005014:	2000      	movs	r0, #0
 8005016:	460c      	mov	r4, r1
 8005018:	4605      	mov	r5, r0
 800501a:	eb12 0804 	adds.w	r8, r2, r4
 800501e:	eb43 0905 	adc.w	r9, r3, r5
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	469a      	mov	sl, r3
 800502a:	4693      	mov	fp, r2
 800502c:	4652      	mov	r2, sl
 800502e:	465b      	mov	r3, fp
 8005030:	4640      	mov	r0, r8
 8005032:	4649      	mov	r1, r9
 8005034:	f7fb f950 	bl	80002d8 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4613      	mov	r3, r2
 800503e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005046:	d308      	bcc.n	800505a <UART_SetConfig+0x79a>
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800504e:	d204      	bcs.n	800505a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005056:	60da      	str	r2, [r3, #12]
 8005058:	e17c      	b.n	8005354 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005060:	e178      	b.n	8005354 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800506a:	f040 80c5 	bne.w	80051f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800506e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005072:	2b20      	cmp	r3, #32
 8005074:	dc48      	bgt.n	8005108 <UART_SetConfig+0x848>
 8005076:	2b00      	cmp	r3, #0
 8005078:	db7b      	blt.n	8005172 <UART_SetConfig+0x8b2>
 800507a:	2b20      	cmp	r3, #32
 800507c:	d879      	bhi.n	8005172 <UART_SetConfig+0x8b2>
 800507e:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <UART_SetConfig+0x7c4>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	0800510f 	.word	0x0800510f
 8005088:	08005117 	.word	0x08005117
 800508c:	08005173 	.word	0x08005173
 8005090:	08005173 	.word	0x08005173
 8005094:	0800511f 	.word	0x0800511f
 8005098:	08005173 	.word	0x08005173
 800509c:	08005173 	.word	0x08005173
 80050a0:	08005173 	.word	0x08005173
 80050a4:	0800512f 	.word	0x0800512f
 80050a8:	08005173 	.word	0x08005173
 80050ac:	08005173 	.word	0x08005173
 80050b0:	08005173 	.word	0x08005173
 80050b4:	08005173 	.word	0x08005173
 80050b8:	08005173 	.word	0x08005173
 80050bc:	08005173 	.word	0x08005173
 80050c0:	08005173 	.word	0x08005173
 80050c4:	0800513f 	.word	0x0800513f
 80050c8:	08005173 	.word	0x08005173
 80050cc:	08005173 	.word	0x08005173
 80050d0:	08005173 	.word	0x08005173
 80050d4:	08005173 	.word	0x08005173
 80050d8:	08005173 	.word	0x08005173
 80050dc:	08005173 	.word	0x08005173
 80050e0:	08005173 	.word	0x08005173
 80050e4:	08005173 	.word	0x08005173
 80050e8:	08005173 	.word	0x08005173
 80050ec:	08005173 	.word	0x08005173
 80050f0:	08005173 	.word	0x08005173
 80050f4:	08005173 	.word	0x08005173
 80050f8:	08005173 	.word	0x08005173
 80050fc:	08005173 	.word	0x08005173
 8005100:	08005173 	.word	0x08005173
 8005104:	08005165 	.word	0x08005165
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	d02e      	beq.n	800516a <UART_SetConfig+0x8aa>
 800510c:	e031      	b.n	8005172 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800510e:	f7fd fcef 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8005112:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005114:	e033      	b.n	800517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005116:	f7fd fd01 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 800511a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800511c:	e02f      	b.n	800517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800511e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe ff70 	bl	8004008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800512c:	e027      	b.n	800517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800512e:	f107 0318 	add.w	r3, r7, #24
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f8bc 	bl	80042b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800513c:	e01f      	b.n	800517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800513e:	4b2d      	ldr	r3, [pc, #180]	@ (80051f4 <UART_SetConfig+0x934>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d009      	beq.n	800515e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800514a:	4b2a      	ldr	r3, [pc, #168]	@ (80051f4 <UART_SetConfig+0x934>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	08db      	lsrs	r3, r3, #3
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	4a24      	ldr	r2, [pc, #144]	@ (80051e8 <UART_SetConfig+0x928>)
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800515c:	e00f      	b.n	800517e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800515e:	4b22      	ldr	r3, [pc, #136]	@ (80051e8 <UART_SetConfig+0x928>)
 8005160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005162:	e00c      	b.n	800517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005164:	4b21      	ldr	r3, [pc, #132]	@ (80051ec <UART_SetConfig+0x92c>)
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005168:	e009      	b.n	800517e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005170:	e005      	b.n	800517e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800517c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800517e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80e7 	beq.w	8005354 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <UART_SetConfig+0x930>)
 800518c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005190:	461a      	mov	r2, r3
 8005192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005194:	fbb3 f3f2 	udiv	r3, r3, r2
 8005198:	005a      	lsls	r2, r3, #1
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	441a      	add	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	d916      	bls.n	80051e0 <UART_SetConfig+0x920>
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b8:	d212      	bcs.n	80051e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f023 030f 	bic.w	r3, r3, #15
 80051c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80051d2:	4313      	orrs	r3, r2
 80051d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	e0b9      	b.n	8005354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80051e6:	e0b5      	b.n	8005354 <UART_SetConfig+0xa94>
 80051e8:	03d09000 	.word	0x03d09000
 80051ec:	003d0900 	.word	0x003d0900
 80051f0:	08005ac0 	.word	0x08005ac0
 80051f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	dc49      	bgt.n	8005294 <UART_SetConfig+0x9d4>
 8005200:	2b00      	cmp	r3, #0
 8005202:	db7c      	blt.n	80052fe <UART_SetConfig+0xa3e>
 8005204:	2b20      	cmp	r3, #32
 8005206:	d87a      	bhi.n	80052fe <UART_SetConfig+0xa3e>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <UART_SetConfig+0x950>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	0800529b 	.word	0x0800529b
 8005214:	080052a3 	.word	0x080052a3
 8005218:	080052ff 	.word	0x080052ff
 800521c:	080052ff 	.word	0x080052ff
 8005220:	080052ab 	.word	0x080052ab
 8005224:	080052ff 	.word	0x080052ff
 8005228:	080052ff 	.word	0x080052ff
 800522c:	080052ff 	.word	0x080052ff
 8005230:	080052bb 	.word	0x080052bb
 8005234:	080052ff 	.word	0x080052ff
 8005238:	080052ff 	.word	0x080052ff
 800523c:	080052ff 	.word	0x080052ff
 8005240:	080052ff 	.word	0x080052ff
 8005244:	080052ff 	.word	0x080052ff
 8005248:	080052ff 	.word	0x080052ff
 800524c:	080052ff 	.word	0x080052ff
 8005250:	080052cb 	.word	0x080052cb
 8005254:	080052ff 	.word	0x080052ff
 8005258:	080052ff 	.word	0x080052ff
 800525c:	080052ff 	.word	0x080052ff
 8005260:	080052ff 	.word	0x080052ff
 8005264:	080052ff 	.word	0x080052ff
 8005268:	080052ff 	.word	0x080052ff
 800526c:	080052ff 	.word	0x080052ff
 8005270:	080052ff 	.word	0x080052ff
 8005274:	080052ff 	.word	0x080052ff
 8005278:	080052ff 	.word	0x080052ff
 800527c:	080052ff 	.word	0x080052ff
 8005280:	080052ff 	.word	0x080052ff
 8005284:	080052ff 	.word	0x080052ff
 8005288:	080052ff 	.word	0x080052ff
 800528c:	080052ff 	.word	0x080052ff
 8005290:	080052f1 	.word	0x080052f1
 8005294:	2b40      	cmp	r3, #64	@ 0x40
 8005296:	d02e      	beq.n	80052f6 <UART_SetConfig+0xa36>
 8005298:	e031      	b.n	80052fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529a:	f7fd fc29 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 800529e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052a0:	e033      	b.n	800530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a2:	f7fd fc3b 	bl	8002b1c <HAL_RCC_GetPCLK2Freq>
 80052a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052a8:	e02f      	b.n	800530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe feaa 	bl	8004008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052b8:	e027      	b.n	800530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ba:	f107 0318 	add.w	r3, r7, #24
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe fff6 	bl	80042b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052c8:	e01f      	b.n	800530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005380 <UART_SetConfig+0xac0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005380 <UART_SetConfig+0xac0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	08db      	lsrs	r3, r3, #3
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	4a28      	ldr	r2, [pc, #160]	@ (8005384 <UART_SetConfig+0xac4>)
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052e8:	e00f      	b.n	800530a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80052ea:	4b26      	ldr	r3, [pc, #152]	@ (8005384 <UART_SetConfig+0xac4>)
 80052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052ee:	e00c      	b.n	800530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <UART_SetConfig+0xac8>)
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052f4:	e009      	b.n	800530a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052fc:	e005      	b.n	800530a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005308:	bf00      	nop
    }

    if (pclk != 0U)
 800530a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d021      	beq.n	8005354 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <UART_SetConfig+0xacc>)
 8005316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800531a:	461a      	mov	r2, r3
 800531c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	441a      	add	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005332:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	2b0f      	cmp	r3, #15
 8005338:	d909      	bls.n	800534e <UART_SetConfig+0xa8e>
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005340:	d205      	bcs.n	800534e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	b29a      	uxth	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e002      	b.n	8005354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2201      	movs	r2, #1
 8005358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2201      	movs	r2, #1
 8005360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2200      	movs	r2, #0
 8005368:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005370:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005374:	4618      	mov	r0, r3
 8005376:	3748      	adds	r7, #72	@ 0x48
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537e:	bf00      	nop
 8005380:	58024400 	.word	0x58024400
 8005384:	03d09000 	.word	0x03d09000
 8005388:	003d0900 	.word	0x003d0900
 800538c:	08005ac0 	.word	0x08005ac0

08005390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01a      	beq.n	80054a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800548e:	d10a      	bne.n	80054a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  }
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b098      	sub	sp, #96	@ 0x60
 80054d8:	af02      	add	r7, sp, #8
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054e4:	f7fb fcb2 	bl	8000e4c <HAL_GetTick>
 80054e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d12f      	bne.n	8005558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005500:	2200      	movs	r2, #0
 8005502:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f88e 	bl	8005628 <UART_WaitOnFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d022      	beq.n	8005558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005526:	653b      	str	r3, [r7, #80]	@ 0x50
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005530:	647b      	str	r3, [r7, #68]	@ 0x44
 8005532:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e6      	bne.n	8005512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e063      	b.n	8005620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d149      	bne.n	80055fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005566:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800556e:	2200      	movs	r2, #0
 8005570:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f857 	bl	8005628 <UART_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d03c      	beq.n	80055fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	623b      	str	r3, [r7, #32]
   return(result);
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800559e:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e6      	bne.n	8005580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3308      	adds	r3, #8
 80055d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055d2:	61fa      	str	r2, [r7, #28]
 80055d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	69b9      	ldr	r1, [r7, #24]
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	617b      	str	r3, [r7, #20]
   return(result);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e5      	bne.n	80055b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e012      	b.n	8005620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3758      	adds	r7, #88	@ 0x58
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005638:	e04f      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d04b      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fb fc03 	bl	8000e4c <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <UART_WaitOnFlagUntilTimeout+0x30>
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e04e      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d037      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xb2>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b80      	cmp	r3, #128	@ 0x80
 800566e:	d034      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xb2>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b40      	cmp	r3, #64	@ 0x40
 8005674:	d031      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b08      	cmp	r3, #8
 8005682:	d110      	bne.n	80056a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2208      	movs	r2, #8
 800568a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f839 	bl	8005704 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2208      	movs	r2, #8
 8005696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e029      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b4:	d111      	bne.n	80056da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f81f 	bl	8005704 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e00f      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d0a0      	beq.n	800563a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b095      	sub	sp, #84	@ 0x54
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572a:	643b      	str	r3, [r7, #64]	@ 0x40
 800572c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005730:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e6      	bne.n	800570c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	61fb      	str	r3, [r7, #28]
   return(result);
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	4b1e      	ldr	r3, [pc, #120]	@ (80057cc <UART_EndRxTransfer+0xc8>)
 8005752:	4013      	ands	r3, r2
 8005754:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800575e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005776:	2b01      	cmp	r3, #1
 8005778:	d118      	bne.n	80057ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	60bb      	str	r3, [r7, #8]
   return(result);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	6979      	ldr	r1, [r7, #20]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	e841 2300 	strex	r3, r2, [r1]
 80057a4:	613b      	str	r3, [r7, #16]
   return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e6      	bne.n	800577a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057c0:	bf00      	nop
 80057c2:	3754      	adds	r7, #84	@ 0x54
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	effffffe 	.word	0xeffffffe

080057d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e027      	b.n	8005836 <HAL_UARTEx_DisableFifoMode+0x66>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2224      	movs	r2, #36	@ 0x24
 80057f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005814:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005856:	2302      	movs	r3, #2
 8005858:	e02d      	b.n	80058b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2224      	movs	r2, #36	@ 0x24
 8005866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f850 	bl	800593c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e02d      	b.n	8005932 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2224      	movs	r2, #36	@ 0x24
 80058e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f812 	bl	800593c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005948:	2b00      	cmp	r3, #0
 800594a:	d108      	bne.n	800595e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800595c:	e031      	b.n	80059c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800595e:	2310      	movs	r3, #16
 8005960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005962:	2310      	movs	r3, #16
 8005964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	0e5b      	lsrs	r3, r3, #25
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	0f5b      	lsrs	r3, r3, #29
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	7b3a      	ldrb	r2, [r7, #12]
 800598a:	4911      	ldr	r1, [pc, #68]	@ (80059d0 <UARTEx_SetNbDataToProcess+0x94>)
 800598c:	5c8a      	ldrb	r2, [r1, r2]
 800598e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005992:	7b3a      	ldrb	r2, [r7, #12]
 8005994:	490f      	ldr	r1, [pc, #60]	@ (80059d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005998:	fb93 f3f2 	sdiv	r3, r3, r2
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	7b7a      	ldrb	r2, [r7, #13]
 80059a8:	4909      	ldr	r1, [pc, #36]	@ (80059d0 <UARTEx_SetNbDataToProcess+0x94>)
 80059aa:	5c8a      	ldrb	r2, [r1, r2]
 80059ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059b0:	7b7a      	ldrb	r2, [r7, #13]
 80059b2:	4908      	ldr	r1, [pc, #32]	@ (80059d4 <UARTEx_SetNbDataToProcess+0x98>)
 80059b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	08005ad8 	.word	0x08005ad8
 80059d4:	08005ae0 	.word	0x08005ae0

080059d8 <memset>:
 80059d8:	4402      	add	r2, r0
 80059da:	4603      	mov	r3, r0
 80059dc:	4293      	cmp	r3, r2
 80059de:	d100      	bne.n	80059e2 <memset+0xa>
 80059e0:	4770      	bx	lr
 80059e2:	f803 1b01 	strb.w	r1, [r3], #1
 80059e6:	e7f9      	b.n	80059dc <memset+0x4>

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	@ (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 f826 	bl	8005a4c <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08005af0 	.word	0x08005af0
 8005a24:	08005af0 	.word	0x08005af0
 8005a28:	08005af0 	.word	0x08005af0
 8005a2c:	08005af4 	.word	0x08005af4

08005a30 <memcpy>:
 8005a30:	440a      	add	r2, r1
 8005a32:	4291      	cmp	r1, r2
 8005a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a38:	d100      	bne.n	8005a3c <memcpy+0xc>
 8005a3a:	4770      	bx	lr
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a46:	4291      	cmp	r1, r2
 8005a48:	d1f9      	bne.n	8005a3e <memcpy+0xe>
 8005a4a:	bd10      	pop	{r4, pc}

08005a4c <_init>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr

08005a58 <_fini>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr
