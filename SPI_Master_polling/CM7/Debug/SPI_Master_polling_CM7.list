
SPI_Master_polling_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005cf8  08005cf8  00006cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d3c  08005d3c  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005d3c  08005d3c  00006d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d44  08005d44  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d44  08005d44  00006d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08005d4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  24000014  08005d60  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000150  08005d60  00007150  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115dd  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000215f  00000000  00000000  0001861f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  0001a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d3  00000000  00000000  0001b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee61  00000000  00000000  0001be1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011773  00000000  00000000  0005ac7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001985c4  00000000  00000000  0006c3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002049b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000353c  00000000  00000000  002049f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00207f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005ce0 	.word	0x08005ce0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08005ce0 	.word	0x08005ce0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <main+0xe8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	60fa      	str	r2, [r7, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 f9a9 	bl	8000a74 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fb1b 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f863 	bl	80007f0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <main+0xe8>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a2a      	ldr	r2, [pc, #168]	@ (80007dc <main+0xe8>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <main+0xe8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fe5d 	bl	8001408 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f000 fe73 	bl	800143c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <main+0xe8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	60fa      	str	r2, [r7, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f97b 	bl	8000a74 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f941 	bl	8000a04 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000782:	f000 f89d 	bl	80008c0 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8000786:	f000 f8f1 	bl	800096c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_SPI_Transmit(&hspi5, arr, sizeof(arr), HAL_MAX_DELAY) == HAL_OK)
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	2204      	movs	r2, #4
 8000790:	4913      	ldr	r1, [pc, #76]	@ (80007e0 <main+0xec>)
 8000792:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <main+0xf0>)
 8000794:	f003 fe36 	bl	8004404 <HAL_SPI_Transmit>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f5      	bne.n	800078a <main+0x96>
	  {
	      // Send feedback for each transmitted byte
	      for (uint8_t i = 0; i < sizeof(arr); i++)
 800079e:	2300      	movs	r3, #0
 80007a0:	72fb      	strb	r3, [r7, #11]
 80007a2:	e00b      	b.n	80007bc <main+0xc8>
	      {

	          // Send the actual byte from the array
	          HAL_UART_Transmit(&huart1, &arr[i], 1, HAL_MAX_DELAY);
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <main+0xec>)
 80007a8:	1899      	adds	r1, r3, r2
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	2201      	movs	r2, #1
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <main+0xf4>)
 80007b2:	f004 f94e 	bl	8004a52 <HAL_UART_Transmit>
	      for (uint8_t i = 0; i < sizeof(arr); i++)
 80007b6:	7afb      	ldrb	r3, [r7, #11]
 80007b8:	3301      	adds	r3, #1
 80007ba:	72fb      	strb	r3, [r7, #11]
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d9f0      	bls.n	80007a4 <main+0xb0>
	      }
	      // Send message over UART
	      	          HAL_UART_Transmit(&huart1, (uint8_t *)"Data sent\n", 10, HAL_MAX_DELAY);
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	220a      	movs	r2, #10
 80007c8:	4908      	ldr	r1, [pc, #32]	@ (80007ec <main+0xf8>)
 80007ca:	4807      	ldr	r0, [pc, #28]	@ (80007e8 <main+0xf4>)
 80007cc:	f004 f941 	bl	8004a52 <HAL_UART_Transmit>

	      HAL_Delay(500);
 80007d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d4:	f000 fb54 	bl	8000e80 <HAL_Delay>
	  if (HAL_SPI_Transmit(&hspi5, arr, sizeof(arr), HAL_MAX_DELAY) == HAL_OK)
 80007d8:	e7d7      	b.n	800078a <main+0x96>
 80007da:	bf00      	nop
 80007dc:	58024400 	.word	0x58024400
 80007e0:	24000008 	.word	0x24000008
 80007e4:	24000030 	.word	0x24000030
 80007e8:	240000b8 	.word	0x240000b8
 80007ec:	08005cf8 	.word	0x08005cf8

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09c      	sub	sp, #112	@ 0x70
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fa42 	bl	8005c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2220      	movs	r2, #32
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f005 fa3c 	bl	8005c88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000810:	2004      	movs	r0, #4
 8000812:	f000 fe27 	bl	8001464 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <SystemClock_Config+0xc8>)
 800081c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081e:	4a26      	ldr	r2, [pc, #152]	@ (80008b8 <SystemClock_Config+0xc8>)
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <SystemClock_Config+0xc8>)
 8000828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <SystemClock_Config+0xcc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a21      	ldr	r2, [pc, #132]	@ (80008bc <SystemClock_Config+0xcc>)
 8000836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <SystemClock_Config+0xcc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000848:	bf00      	nop
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <SystemClock_Config+0xcc>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000856:	d1f8      	bne.n	800084a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800085c:	2301      	movs	r3, #1
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2340      	movs	r3, #64	@ 0x40
 8000862:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fe53 	bl	8001518 <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000878:	f000 f8fc 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	233f      	movs	r3, #63	@ 0x3f
 800087e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000888:	2309      	movs	r3, #9
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fa93 	bl	8001dcc <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008ac:	f000 f8e2 	bl	8000a74 <Error_Handler>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3770      	adds	r7, #112	@ 0x70
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	58000400 	.word	0x58000400
 80008bc:	58024800 	.word	0x58024800

080008c0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008c4:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008c6:	4a28      	ldr	r2, [pc, #160]	@ (8000968 <MX_SPI5_Init+0xa8>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008da:	2207      	movs	r2, #7
 80008dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80008f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80008f8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_SPI5_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_SPI5_Init+0xa4>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000912:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000914:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_SPI5_Init+0xa4>)
 800091c:	2200      	movs	r2, #0
 800091e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000922:	2200      	movs	r2, #0
 8000924:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000928:	2200      	movs	r2, #0
 800092a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800092c:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <MX_SPI5_Init+0xa4>)
 800092e:	2200      	movs	r2, #0
 8000930:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000934:	2200      	movs	r2, #0
 8000936:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <MX_SPI5_Init+0xa4>)
 800093a:	2200      	movs	r2, #0
 800093c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000940:	2200      	movs	r2, #0
 8000942:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <MX_SPI5_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_SPI5_Init+0xa4>)
 8000952:	f003 fc33 	bl	80041bc <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 800095c:	f000 f88a 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000030 	.word	0x24000030
 8000968:	40015000 	.word	0x40015000

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	@ (8000a00 <MX_USART1_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 80009b6:	f003 fffc 	bl	80049b2 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f858 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 80009c8:	f005 f893 	bl	8005af2 <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f84f 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 80009da:	f005 f8c8 	bl	8005b6e <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f846 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_USART1_UART_Init+0x90>)
 80009ea:	f005 f849 	bl	8005a80 <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f83e 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	240000b8 	.word	0x240000b8
 8000a00:	40011000 	.word	0x40011000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a38:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4c:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_GPIO_Init+0x6c>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	58024400 	.word	0x58024400

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_MspInit+0x30>)
 8000a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a8c:	4a08      	ldr	r2, [pc, #32]	@ (8000ab0 <HAL_MspInit+0x30>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x30>)
 8000a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	58024400 	.word	0x58024400

08000ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0be      	sub	sp, #248	@ 0xf8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	22c8      	movs	r2, #200	@ 0xc8
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 f8d7 	bl	8005c88 <memset>
  if(hspi->Instance==SPI5)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a39      	ldr	r2, [pc, #228]	@ (8000bc4 <HAL_SPI_MspInit+0x110>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d16a      	bne.n	8000bba <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8000ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fcf2 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000b06:	f7ff ffb5 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b10:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b28:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2e:	4a26      	ldr	r2, [pc, #152]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b38:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b46:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b82:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4810      	ldr	r0, [pc, #64]	@ (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b8a:	f000 fa8d 	bl	80010a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000b8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000ba8:	2305      	movs	r3, #5
 8000baa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <HAL_SPI_MspInit+0x11c>)
 8000bb6:	f000 fa77 	bl	80010a8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	37f8      	adds	r7, #248	@ 0xf8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40015000 	.word	0x40015000
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58022800 	.word	0x58022800
 8000bd0:	58022400 	.word	0x58022400

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b0bc      	sub	sp, #240	@ 0xf0
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	22c8      	movs	r2, #200	@ 0xc8
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f005 f847 	bl	8005c88 <memset>
  if(huart->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a27      	ldr	r2, [pc, #156]	@ (8000c9c <HAL_UART_MspInit+0xc8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d146      	bne.n	8000c92 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c04:	f04f 0201 	mov.w	r2, #1
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fc62 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c26:	f7ff ff25 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_UART_MspInit+0xcc>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_UART_MspInit+0xd0>)
 8000c8e:	f000 fa0b 	bl	80010a8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	37f0      	adds	r7, #240	@ 0xf0
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	58020000 	.word	0x58020000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfe:	f000 f89f 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d0c:	f7ff fc5c 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 ffaf 	bl	8005c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fcdb 	bl	80006f4 <main>
  bx  lr
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d48:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000d4c:	08005d4c 	.word	0x08005d4c
  ldr r2, =_sbss
 8000d50:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000d54:	24000150 	.word	0x24000150

08000d58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC3_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f96e 	bl	8001044 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d68:	f001 f9e6 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_Init+0x68>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	f003 030f 	and.w	r3, r3, #15
 8000d78:	4913      	ldr	r1, [pc, #76]	@ (8000dc8 <HAL_Init+0x6c>)
 8000d7a:	5ccb      	ldrb	r3, [r1, r3]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <HAL_Init+0x68>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <HAL_Init+0x6c>)
 8000d90:	5cd3      	ldrb	r3, [r2, r3]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <HAL_Init+0x70>)
 8000d9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000da0:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <HAL_Init+0x74>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f814 	bl	8000dd4 <HAL_InitTick>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e002      	b.n	8000dbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000db6:	f7ff fe63 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	08005d04 	.word	0x08005d04
 8000dcc:	24000004 	.word	0x24000004
 8000dd0:	24000000 	.word	0x24000000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_InitTick+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e021      	b.n	8000e2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <HAL_InitTick+0x64>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_InitTick+0x60>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f945 	bl	800108e <HAL_SYSTICK_Config>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00e      	b.n	8000e2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d80a      	bhi.n	8000e2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f91d 	bl	800105a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e20:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <HAL_InitTick+0x68>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	24000010 	.word	0x24000010
 8000e38:	24000000 	.word	0x24000000
 8000e3c:	2400000c 	.word	0x2400000c

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	24000010 	.word	0x24000010
 8000e64:	2400014c 	.word	0x2400014c

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2400014c 	.word	0x2400014c

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	24000010 	.word	0x24000010

08000ec8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_GetREVID+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0c1b      	lsrs	r3, r3, #16
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	5c001000 	.word	0x5c001000

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <__NVIC_SetPriorityGrouping+0x40>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	05fa0000 	.word	0x05fa0000

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001010:	d301      	bcc.n	8001016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001012:	2301      	movs	r3, #1
 8001014:	e00f      	b.n	8001036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <SysTick_Config+0x40>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101e:	210f      	movs	r1, #15
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f7ff ff8e 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <SysTick_Config+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102e:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <SysTick_Config+0x40>)
 8001030:	2207      	movs	r2, #7
 8001032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff47 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff5e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff90 	bl	8000f98 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5f 	bl	8000f44 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffb2 	bl	8001000 <SysTick_Config>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010b6:	4b89      	ldr	r3, [pc, #548]	@ (80012dc <HAL_GPIO_Init+0x234>)
 80010b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ba:	e194      	b.n	80013e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8186 	beq.w	80013e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d005      	beq.n	80010ec <HAL_GPIO_Init+0x44>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d130      	bne.n	800114e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001122:	2201      	movs	r2, #1
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f003 0201 	and.w	r2, r3, #1
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b03      	cmp	r3, #3
 8001158:	d017      	beq.n	800118a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d123      	bne.n	80011de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	69b9      	ldr	r1, [r7, #24]
 80011da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0203 	and.w	r2, r3, #3
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80e0 	beq.w	80013e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001220:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <HAL_GPIO_Init+0x238>)
 8001222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001226:	4a2e      	ldr	r2, [pc, #184]	@ (80012e0 <HAL_GPIO_Init+0x238>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001230:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <HAL_GPIO_Init+0x238>)
 8001232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123e:	4a29      	ldr	r2, [pc, #164]	@ (80012e4 <HAL_GPIO_Init+0x23c>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <HAL_GPIO_Init+0x240>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d052      	beq.n	8001310 <HAL_GPIO_Init+0x268>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a1f      	ldr	r2, [pc, #124]	@ (80012ec <HAL_GPIO_Init+0x244>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d031      	beq.n	80012d6 <HAL_GPIO_Init+0x22e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a1e      	ldr	r2, [pc, #120]	@ (80012f0 <HAL_GPIO_Init+0x248>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d02b      	beq.n	80012d2 <HAL_GPIO_Init+0x22a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a1d      	ldr	r2, [pc, #116]	@ (80012f4 <HAL_GPIO_Init+0x24c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x226>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <HAL_GPIO_Init+0x250>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x222>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <HAL_GPIO_Init+0x254>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x21e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a1a      	ldr	r2, [pc, #104]	@ (8001300 <HAL_GPIO_Init+0x258>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x21a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a19      	ldr	r2, [pc, #100]	@ (8001304 <HAL_GPIO_Init+0x25c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x216>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <HAL_GPIO_Init+0x260>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x212>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_GPIO_Init+0x264>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x20e>
 80012b2:	2309      	movs	r3, #9
 80012b4:	e02d      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012b6:	230a      	movs	r3, #10
 80012b8:	e02b      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012ba:	2308      	movs	r3, #8
 80012bc:	e029      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012be:	2307      	movs	r3, #7
 80012c0:	e027      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e025      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e023      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e021      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e01f      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e01d      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e01b      	b.n	8001312 <HAL_GPIO_Init+0x26a>
 80012da:	bf00      	nop
 80012dc:	58000080 	.word	0x58000080
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58000400 	.word	0x58000400
 80012e8:	58020000 	.word	0x58020000
 80012ec:	58020400 	.word	0x58020400
 80012f0:	58020800 	.word	0x58020800
 80012f4:	58020c00 	.word	0x58020c00
 80012f8:	58021000 	.word	0x58021000
 80012fc:	58021400 	.word	0x58021400
 8001300:	58021800 	.word	0x58021800
 8001304:	58021c00 	.word	0x58021c00
 8001308:	58022000 	.word	0x58022000
 800130c:	58022400 	.word	0x58022400
 8001310:	2300      	movs	r3, #0
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001322:	4938      	ldr	r1, [pc, #224]	@ (8001404 <HAL_GPIO_Init+0x35c>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001356:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	3301      	adds	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f47f ae63 	bne.w	80010bc <HAL_GPIO_Init+0x14>
  }
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	3724      	adds	r7, #36	@ 0x24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	58000400 	.word	0x58000400

08001408 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001410:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <HAL_HSEM_FastTake+0x2c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3320      	adds	r3, #32
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	4a07      	ldr	r2, [pc, #28]	@ (8001438 <HAL_HSEM_FastTake+0x30>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	e000      	b.n	8001426 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	58026400 	.word	0x58026400
 8001438:	80000300 	.word	0x80000300

0800143c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001446:	4906      	ldr	r1, [pc, #24]	@ (8001460 <HAL_HSEM_Release+0x24>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	58026400 	.word	0x58026400

08001464 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_PWREx_ConfigSupply+0xb0>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	2b06      	cmp	r3, #6
 8001476:	d00a      	beq.n	800148e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <HAL_PWREx_ConfigSupply+0xb0>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	429a      	cmp	r2, r3
 8001484:	d001      	beq.n	800148a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e040      	b.n	800150c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e03e      	b.n	800150c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <HAL_PWREx_ConfigSupply+0xb0>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001496:	491f      	ldr	r1, [pc, #124]	@ (8001514 <HAL_PWREx_ConfigSupply+0xb0>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800149e:	f7ff fce3 	bl	8000e68 <HAL_GetTick>
 80014a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014a4:	e009      	b.n	80014ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014a6:	f7ff fcdf 	bl	8000e68 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014b4:	d901      	bls.n	80014ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e028      	b.n	800150c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_PWREx_ConfigSupply+0xb0>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014c6:	d1ee      	bne.n	80014a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b1e      	cmp	r3, #30
 80014cc:	d008      	beq.n	80014e0 <HAL_PWREx_ConfigSupply+0x7c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80014d2:	d005      	beq.n	80014e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b1d      	cmp	r3, #29
 80014d8:	d002      	beq.n	80014e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80014de:	d114      	bne.n	800150a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014e0:	f7ff fcc2 	bl	8000e68 <HAL_GetTick>
 80014e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014e6:	e009      	b.n	80014fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014e8:	f7ff fcbe 	bl	8000e68 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014f6:	d901      	bls.n	80014fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e007      	b.n	800150c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <HAL_PWREx_ConfigSupply+0xb0>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001508:	d1ee      	bne.n	80014e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	58024800 	.word	0x58024800

08001518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	@ 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f000 bc48 	b.w	8001dbc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8088 	beq.w	800164a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b99      	ldr	r3, [pc, #612]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001544:	4b96      	ldr	r3, [pc, #600]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800154a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154c:	2b10      	cmp	r3, #16
 800154e:	d007      	beq.n	8001560 <HAL_RCC_OscConfig+0x48>
 8001550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001552:	2b18      	cmp	r3, #24
 8001554:	d111      	bne.n	800157a <HAL_RCC_OscConfig+0x62>
 8001556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d10c      	bne.n	800157a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b8f      	ldr	r3, [pc, #572]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d06d      	beq.n	8001648 <HAL_RCC_OscConfig+0x130>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d169      	bne.n	8001648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	f000 bc21 	b.w	8001dbc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x7a>
 8001584:	4b86      	ldr	r3, [pc, #536]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a85      	ldr	r2, [pc, #532]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e02e      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x9c>
 800159a:	4b81      	ldr	r3, [pc, #516]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a80      	ldr	r2, [pc, #512]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b7e      	ldr	r3, [pc, #504]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7d      	ldr	r2, [pc, #500]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015be:	4b78      	ldr	r3, [pc, #480]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a77      	ldr	r2, [pc, #476]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b75      	ldr	r3, [pc, #468]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a74      	ldr	r2, [pc, #464]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xd8>
 80015d8:	4b71      	ldr	r3, [pc, #452]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a70      	ldr	r2, [pc, #448]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b6e      	ldr	r3, [pc, #440]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6d      	ldr	r2, [pc, #436]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc36 	bl	8000e68 <HAL_GetTick>
 80015fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fc32 	bl	8000e68 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	@ 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e3d4      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001612:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fc22 	bl	8000e68 <HAL_GetTick>
 8001624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fc1e 	bl	8000e68 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	@ 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e3c0      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163a:	4b59      	ldr	r3, [pc, #356]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x110>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80ca 	beq.w	80017ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001658:	4b51      	ldr	r3, [pc, #324]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001660:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001662:	4b4f      	ldr	r3, [pc, #316]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001666:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_RCC_OscConfig+0x166>
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	2b18      	cmp	r3, #24
 8001672:	d156      	bne.n	8001722 <HAL_RCC_OscConfig+0x20a>
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d151      	bne.n	8001722 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167e:	4b48      	ldr	r3, [pc, #288]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e392      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001696:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0219 	bic.w	r2, r3, #25
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	493f      	ldr	r1, [pc, #252]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fbde 	bl	8000e68 <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fbda 	bl	8000e68 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e37c      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	f7ff fbfb 	bl	8000ec8 <HAL_GetREVID>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016d8:	4293      	cmp	r3, r2
 80016da:	d817      	bhi.n	800170c <HAL_RCC_OscConfig+0x1f4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2b40      	cmp	r3, #64	@ 0x40
 80016e2:	d108      	bne.n	80016f6 <HAL_RCC_OscConfig+0x1de>
 80016e4:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80016ec:	4a2c      	ldr	r2, [pc, #176]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80016ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f4:	e07a      	b.n	80017ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	031b      	lsls	r3, r3, #12
 8001704:	4926      	ldr	r1, [pc, #152]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170a:	e06f      	b.n	80017ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	4921      	ldr	r1, [pc, #132]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001720:	e064      	b.n	80017ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d047      	beq.n	80017ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800172a:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 0219 	bic.w	r2, r3, #25
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	491a      	ldr	r1, [pc, #104]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fb94 	bl	8000e68 <HAL_GetTick>
 8001740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fb90 	bl	8000e68 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e332      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	f7ff fbb1 	bl	8000ec8 <HAL_GetREVID>
 8001766:	4603      	mov	r3, r0
 8001768:	f241 0203 	movw	r2, #4099	@ 0x1003
 800176c:	4293      	cmp	r3, r2
 800176e:	d819      	bhi.n	80017a4 <HAL_RCC_OscConfig+0x28c>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b40      	cmp	r3, #64	@ 0x40
 8001776:	d108      	bne.n	800178a <HAL_RCC_OscConfig+0x272>
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001780:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 8001782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001786:	6053      	str	r3, [r2, #4]
 8001788:	e030      	b.n	80017ec <HAL_RCC_OscConfig+0x2d4>
 800178a:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	031b      	lsls	r3, r3, #12
 8001798:	4901      	ldr	r1, [pc, #4]	@ (80017a0 <HAL_RCC_OscConfig+0x288>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
 800179e:	e025      	b.n	80017ec <HAL_RCC_OscConfig+0x2d4>
 80017a0:	58024400 	.word	0x58024400
 80017a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	4997      	ldr	r1, [pc, #604]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e018      	b.n	80017ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b95      	ldr	r3, [pc, #596]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a94      	ldr	r2, [pc, #592]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb4f 	bl	8000e68 <HAL_GetTick>
 80017ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fb4b 	bl	8000e68 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e2ed      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a9 	beq.w	800194c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fa:	4b85      	ldr	r3, [pc, #532]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001802:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001804:	4b82      	ldr	r3, [pc, #520]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d007      	beq.n	8001820 <HAL_RCC_OscConfig+0x308>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b18      	cmp	r3, #24
 8001814:	d13a      	bne.n	800188c <HAL_RCC_OscConfig+0x374>
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d135      	bne.n	800188c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001820:	4b7b      	ldr	r3, [pc, #492]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x320>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b80      	cmp	r3, #128	@ 0x80
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e2c1      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001838:	f7ff fb46 	bl	8000ec8 <HAL_GetREVID>
 800183c:	4603      	mov	r3, r0
 800183e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001842:	4293      	cmp	r3, r2
 8001844:	d817      	bhi.n	8001876 <HAL_RCC_OscConfig+0x35e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	2b20      	cmp	r3, #32
 800184c:	d108      	bne.n	8001860 <HAL_RCC_OscConfig+0x348>
 800184e:	4b70      	ldr	r3, [pc, #448]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001856:	4a6e      	ldr	r2, [pc, #440]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800185c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800185e:	e075      	b.n	800194c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001860:	4b6b      	ldr	r3, [pc, #428]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	069b      	lsls	r3, r3, #26
 800186e:	4968      	ldr	r1, [pc, #416]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001874:	e06a      	b.n	800194c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001876:	4b66      	ldr	r3, [pc, #408]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	061b      	lsls	r3, r3, #24
 8001884:	4962      	ldr	r1, [pc, #392]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	4313      	orrs	r3, r2
 8001888:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800188a:	e05f      	b.n	800194c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d042      	beq.n	800191a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001894:	4b5e      	ldr	r3, [pc, #376]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5d      	ldr	r2, [pc, #372]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fae2 	bl	8000e68 <HAL_GetTick>
 80018a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018a8:	f7ff fade 	bl	8000e68 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e280      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018ba:	4b55      	ldr	r3, [pc, #340]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018c6:	f7ff faff 	bl	8000ec8 <HAL_GetREVID>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d817      	bhi.n	8001904 <HAL_RCC_OscConfig+0x3ec>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	2b20      	cmp	r3, #32
 80018da:	d108      	bne.n	80018ee <HAL_RCC_OscConfig+0x3d6>
 80018dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80018e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80018e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018ea:	6053      	str	r3, [r2, #4]
 80018ec:	e02e      	b.n	800194c <HAL_RCC_OscConfig+0x434>
 80018ee:	4b48      	ldr	r3, [pc, #288]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	069b      	lsls	r3, r3, #26
 80018fc:	4944      	ldr	r1, [pc, #272]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]
 8001902:	e023      	b.n	800194c <HAL_RCC_OscConfig+0x434>
 8001904:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	493f      	ldr	r1, [pc, #252]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
 8001918:	e018      	b.n	800194c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a3c      	ldr	r2, [pc, #240]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff fa9f 	bl	8000e68 <HAL_GetTick>
 800192a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800192e:	f7ff fa9b 	bl	8000e68 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e23d      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001940:	4b33      	ldr	r3, [pc, #204]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d036      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d019      	beq.n	8001994 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001960:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001964:	4a2a      	ldr	r2, [pc, #168]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff fa7c 	bl	8000e68 <HAL_GetTick>
 8001970:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fa78 	bl	8000e68 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e21a      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x45c>
 8001992:	e018      	b.n	80019c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001994:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001998:	4a1d      	ldr	r2, [pc, #116]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa62 	bl	8000e68 <HAL_GetTick>
 80019a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa5e 	bl	8000e68 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e200      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80019bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d039      	beq.n	8001a46 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa3f 	bl	8000e68 <HAL_GetTick>
 80019ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ee:	f7ff fa3b 	bl	8000e68 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1dd      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x4d6>
 8001a0c:	e01b      	b.n	8001a46 <HAL_RCC_OscConfig+0x52e>
 8001a0e:	bf00      	nop
 8001a10:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a14:	4b9b      	ldr	r3, [pc, #620]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a9a      	ldr	r2, [pc, #616]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fa22 	bl	8000e68 <HAL_GetTick>
 8001a24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a28:	f7ff fa1e 	bl	8000e68 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1c0      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a3a:	4b92      	ldr	r3, [pc, #584]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8081 	beq.w	8001b56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a54:	4b8c      	ldr	r3, [pc, #560]	@ (8001c88 <HAL_RCC_OscConfig+0x770>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a8b      	ldr	r2, [pc, #556]	@ (8001c88 <HAL_RCC_OscConfig+0x770>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a60:	f7ff fa02 	bl	8000e68 <HAL_GetTick>
 8001a64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a68:	f7ff f9fe 	bl	8000e68 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1a0      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a7a:	4b83      	ldr	r3, [pc, #524]	@ (8001c88 <HAL_RCC_OscConfig+0x770>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x584>
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a92:	4a7c      	ldr	r2, [pc, #496]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a9a:	e02d      	b.n	8001af8 <HAL_RCC_OscConfig+0x5e0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x5a6>
 8001aa4:	4b77      	ldr	r3, [pc, #476]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa8:	4a76      	ldr	r2, [pc, #472]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab0:	4b74      	ldr	r3, [pc, #464]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab4:	4a73      	ldr	r2, [pc, #460]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x5e0>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c8>
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	4a6e      	ldr	r2, [pc, #440]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad2:	4b6c      	ldr	r3, [pc, #432]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0x5e0>
 8001ae0:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae4:	4a67      	ldr	r2, [pc, #412]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aec:	4b65      	ldr	r3, [pc, #404]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	4a64      	ldr	r2, [pc, #400]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f9b2 	bl	8000e68 <HAL_GetTick>
 8001b04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff f9ae 	bl	8000e68 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e14e      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b1e:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ee      	beq.n	8001b08 <HAL_RCC_OscConfig+0x5f0>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f99c 	bl	8000e68 <HAL_GetTick>
 8001b30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f998 	bl	8000e68 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e138      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b4a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 812d 	beq.w	8001dba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b60:	4b48      	ldr	r3, [pc, #288]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b68:	2b18      	cmp	r3, #24
 8001b6a:	f000 80bd 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	f040 809e 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b78:	4b42      	ldr	r3, [pc, #264]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a41      	ldr	r2, [pc, #260]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001b7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f970 	bl	8000e68 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f96c 	bl	8000e68 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e10e      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b9e:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001baa:	4b36      	ldr	r3, [pc, #216]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001bac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bae:	4b37      	ldr	r3, [pc, #220]	@ (8001c8c <HAL_RCC_OscConfig+0x774>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4931      	ldr	r1, [pc, #196]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	025b      	lsls	r3, r3, #9
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bde:	3b01      	subs	r3, #1
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bec:	3b01      	subs	r3, #1
 8001bee:	061b      	lsls	r3, r3, #24
 8001bf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001bf4:	4923      	ldr	r1, [pc, #140]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001bfa:	4b22      	ldr	r3, [pc, #136]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfe:	4a21      	ldr	r2, [pc, #132]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c06:	4b1f      	ldr	r3, [pc, #124]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_RCC_OscConfig+0x778>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c12:	00d2      	lsls	r2, r2, #3
 8001c14:	491b      	ldr	r1, [pc, #108]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	f023 020c 	bic.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4917      	ldr	r1, [pc, #92]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	f023 0202 	bic.w	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	4912      	ldr	r1, [pc, #72]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_RCC_OscConfig+0x76c>)
 8001c74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f8f5 	bl	8000e68 <HAL_GetTick>
 8001c7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c80:	e011      	b.n	8001ca6 <HAL_RCC_OscConfig+0x78e>
 8001c82:	bf00      	nop
 8001c84:	58024400 	.word	0x58024400
 8001c88:	58024800 	.word	0x58024800
 8001c8c:	fffffc0c 	.word	0xfffffc0c
 8001c90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f8e8 	bl	8000e68 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e08a      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x77c>
 8001cb2:	e082      	b.n	8001dba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a42      	ldr	r2, [pc, #264]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f8d2 	bl	8000e68 <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f8ce 	bl	8000e68 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e070      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cda:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x7b0>
 8001ce6:	e068      	b.n	8001dba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ce8:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cee:	4b35      	ldr	r3, [pc, #212]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d031      	beq.n	8001d60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0203 	and.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d12a      	bne.n	8001d60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d122      	bne.n	8001d60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d11a      	bne.n	8001d60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	0a5b      	lsrs	r3, r3, #9
 8001d2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d111      	bne.n	8001d60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d108      	bne.n	8001d60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0e1b      	lsrs	r3, r3, #24
 8001d52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e02b      	b.n	8001dbc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d01f      	beq.n	8001dba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7e:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d86:	f7ff f86f 	bl	8000e68 <HAL_GetTick>
 8001d8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d8c:	bf00      	nop
 8001d8e:	f7ff f86b 	bl	8000e68 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d0f9      	beq.n	8001d8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <HAL_RCC_OscConfig+0x8b0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001da6:	00d2      	lsls	r2, r2, #3
 8001da8:	4906      	ldr	r1, [pc, #24]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db2:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_RCC_OscConfig+0x8ac>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3730      	adds	r7, #48	@ 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	ffff0007 	.word	0xffff0007

08001dcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e19c      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b8a      	ldr	r3, [pc, #552]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d910      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b87      	ldr	r3, [pc, #540]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 020f 	bic.w	r2, r3, #15
 8001df6:	4985      	ldr	r1, [pc, #532]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b83      	ldr	r3, [pc, #524]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e184      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d010      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	4b7b      	ldr	r3, [pc, #492]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d908      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e2c:	4b78      	ldr	r3, [pc, #480]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	4975      	ldr	r1, [pc, #468]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	4b70      	ldr	r3, [pc, #448]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d908      	bls.n	8001e6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	496a      	ldr	r1, [pc, #424]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	4b64      	ldr	r3, [pc, #400]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d908      	bls.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e88:	4b61      	ldr	r3, [pc, #388]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	495e      	ldr	r1, [pc, #376]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d010      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	4b59      	ldr	r3, [pc, #356]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d908      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001eb6:	4b56      	ldr	r3, [pc, #344]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4953      	ldr	r1, [pc, #332]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d908      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f023 020f 	bic.w	r2, r3, #15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4947      	ldr	r1, [pc, #284]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d055      	beq.n	8001fae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f02:	4b43      	ldr	r3, [pc, #268]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4940      	ldr	r1, [pc, #256]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d121      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0f6      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d107      	bne.n	8001f44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f34:	4b36      	ldr	r3, [pc, #216]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d115      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0ea      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f4c:	4b30      	ldr	r3, [pc, #192]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0de      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0d6      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6c:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f023 0207 	bic.w	r2, r3, #7
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4925      	ldr	r1, [pc, #148]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f7e:	f7fe ff73 	bl	8000e68 <HAL_GetTick>
 8001f82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f86:	f7fe ff6f 	bl	8000e68 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0be      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d1eb      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d208      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fca:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	490e      	ldr	r1, [pc, #56]	@ (8002010 <HAL_RCC_ClockConfig+0x244>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d214      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 020f 	bic.w	r2, r3, #15
 8001ff2:	4906      	ldr	r1, [pc, #24]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b04      	ldr	r3, [pc, #16]	@ (800200c <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e086      	b.n	800211a <HAL_RCC_ClockConfig+0x34e>
 800200c:	52002000 	.word	0x52002000
 8002010:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	4b3f      	ldr	r3, [pc, #252]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800202c:	429a      	cmp	r2, r3
 800202e:	d208      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002030:	4b3c      	ldr	r3, [pc, #240]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	4939      	ldr	r1, [pc, #228]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 800203e:	4313      	orrs	r3, r2
 8002040:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	4b34      	ldr	r3, [pc, #208]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800205a:	429a      	cmp	r2, r3
 800205c:	d208      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800205e:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	492e      	ldr	r1, [pc, #184]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 800206c:	4313      	orrs	r3, r2
 800206e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002088:	429a      	cmp	r2, r3
 800208a:	d208      	bcs.n	800209e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4922      	ldr	r1, [pc, #136]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 800209a:	4313      	orrs	r3, r2
 800209c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d208      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4917      	ldr	r1, [pc, #92]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020cc:	f000 f834 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b14      	ldr	r3, [pc, #80]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	4912      	ldr	r1, [pc, #72]	@ (8002128 <HAL_RCC_ClockConfig+0x35c>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_RCC_ClockConfig+0x358>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <HAL_RCC_ClockConfig+0x35c>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002100:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <HAL_RCC_ClockConfig+0x360>)
 8002102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002104:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_RCC_ClockConfig+0x364>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_RCC_ClockConfig+0x368>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fe60 	bl	8000dd4 <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	58024400 	.word	0x58024400
 8002128:	08005d04 	.word	0x08005d04
 800212c:	24000004 	.word	0x24000004
 8002130:	24000000 	.word	0x24000000
 8002134:	2400000c 	.word	0x2400000c

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	@ 0x24
 800213c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213e:	4bb3      	ldr	r3, [pc, #716]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002146:	2b18      	cmp	r3, #24
 8002148:	f200 8155 	bhi.w	80023f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800214c:	a201      	add	r2, pc, #4	@ (adr r2, 8002154 <HAL_RCC_GetSysClockFreq+0x1c>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	080021b9 	.word	0x080021b9
 8002158:	080023f7 	.word	0x080023f7
 800215c:	080023f7 	.word	0x080023f7
 8002160:	080023f7 	.word	0x080023f7
 8002164:	080023f7 	.word	0x080023f7
 8002168:	080023f7 	.word	0x080023f7
 800216c:	080023f7 	.word	0x080023f7
 8002170:	080023f7 	.word	0x080023f7
 8002174:	080021df 	.word	0x080021df
 8002178:	080023f7 	.word	0x080023f7
 800217c:	080023f7 	.word	0x080023f7
 8002180:	080023f7 	.word	0x080023f7
 8002184:	080023f7 	.word	0x080023f7
 8002188:	080023f7 	.word	0x080023f7
 800218c:	080023f7 	.word	0x080023f7
 8002190:	080023f7 	.word	0x080023f7
 8002194:	080021e5 	.word	0x080021e5
 8002198:	080023f7 	.word	0x080023f7
 800219c:	080023f7 	.word	0x080023f7
 80021a0:	080023f7 	.word	0x080023f7
 80021a4:	080023f7 	.word	0x080023f7
 80021a8:	080023f7 	.word	0x080023f7
 80021ac:	080023f7 	.word	0x080023f7
 80021b0:	080023f7 	.word	0x080023f7
 80021b4:	080021eb 	.word	0x080021eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021b8:	4b94      	ldr	r3, [pc, #592]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021c4:	4b91      	ldr	r3, [pc, #580]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	4a90      	ldr	r2, [pc, #576]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021d6:	e111      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021da:	61bb      	str	r3, [r7, #24]
      break;
 80021dc:	e10e      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021de:	4b8d      	ldr	r3, [pc, #564]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021e0:	61bb      	str	r3, [r7, #24]
      break;
 80021e2:	e10b      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021e6:	61bb      	str	r3, [r7, #24]
      break;
 80021e8:	e108      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021ea:	4b88      	ldr	r3, [pc, #544]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021f4:	4b85      	ldr	r3, [pc, #532]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002200:	4b82      	ldr	r3, [pc, #520]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800220a:	4b80      	ldr	r3, [pc, #512]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	08db      	lsrs	r3, r3, #3
 8002210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002222:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80e1 	beq.w	80023f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f000 8083 	beq.w	800233c <HAL_RCC_GetSysClockFreq+0x204>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b02      	cmp	r3, #2
 800223a:	f200 80a1 	bhi.w	8002380 <HAL_RCC_GetSysClockFreq+0x248>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x114>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d056      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800224a:	e099      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800224c:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02d      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002258:	4b6c      	ldr	r3, [pc, #432]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	4a6b      	ldr	r2, [pc, #428]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002282:	4b62      	ldr	r3, [pc, #392]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002292:	ed97 6a02 	vldr	s12, [r7, #8]
 8002296:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 800229a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022b2:	e087      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002420 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c6:	4b51      	ldr	r3, [pc, #324]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022f6:	e065      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002302:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002424 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800230a:	4b40      	ldr	r3, [pc, #256]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800231a:	ed97 6a02 	vldr	s12, [r7, #8]
 800231e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800232a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800232e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800233a:	e043      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002428 <HAL_RCC_GetSysClockFreq+0x2f0>
 800234a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234e:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800235e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002362:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800236a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800236e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800237e:	e021      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002424 <HAL_RCC_GetSysClockFreq+0x2ec>
 800238e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2e4>
 80023aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	0a5b      	lsrs	r3, r3, #9
 80023ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023ce:	3301      	adds	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80023e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e8:	ee17 3a90 	vmov	r3, s15
 80023ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023ee:	e005      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
      break;
 80023f4:	e002      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023f6:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023f8:	61bb      	str	r3, [r7, #24]
      break;
 80023fa:	bf00      	nop
  }

  return sysclockfreq;
 80023fc:	69bb      	ldr	r3, [r7, #24]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	58024400 	.word	0x58024400
 8002410:	03d09000 	.word	0x03d09000
 8002414:	003d0900 	.word	0x003d0900
 8002418:	017d7840 	.word	0x017d7840
 800241c:	46000000 	.word	0x46000000
 8002420:	4c742400 	.word	0x4c742400
 8002424:	4a742400 	.word	0x4a742400
 8002428:	4bbebc20 	.word	0x4bbebc20

0800242c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002432:	f7ff fe81 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_RCC_GetHCLKFreq+0x50>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490f      	ldr	r1, [pc, #60]	@ (8002480 <HAL_RCC_GetHCLKFreq+0x54>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002450:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <HAL_RCC_GetHCLKFreq+0x50>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	4a09      	ldr	r2, [pc, #36]	@ (8002480 <HAL_RCC_GetHCLKFreq+0x54>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <HAL_RCC_GetHCLKFreq+0x58>)
 8002468:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800246a:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <HAL_RCC_GetHCLKFreq+0x5c>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <HAL_RCC_GetHCLKFreq+0x58>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	58024400 	.word	0x58024400
 8002480:	08005d04 	.word	0x08005d04
 8002484:	24000004 	.word	0x24000004
 8002488:	24000000 	.word	0x24000000

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002490:	f7ff ffcc 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4904      	ldr	r1, [pc, #16]	@ (80024b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	58024400 	.word	0x58024400
 80024b4:	08005d04 	.word	0x08005d04

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80024bc:	f7ff ffb6 	bl	800242c <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4904      	ldr	r1, [pc, #16]	@ (80024e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	58024400 	.word	0x58024400
 80024e0:	08005d04 	.word	0x08005d04

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	b0cc      	sub	sp, #304	@ 0x130
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002508:	2500      	movs	r5, #0
 800250a:	ea54 0305 	orrs.w	r3, r4, r5
 800250e:	d049      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002516:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800251a:	d02f      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800251c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002520:	d828      	bhi.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002522:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002526:	d01a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800252c:	d822      	bhi.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002536:	d007      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002538:	e01c      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800253a:	4bb8      	ldr	r3, [pc, #736]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253e:	4ab7      	ldr	r2, [pc, #732]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002546:	e01a      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800254c:	3308      	adds	r3, #8
 800254e:	2102      	movs	r1, #2
 8002550:	4618      	mov	r0, r3
 8002552:	f001 fccf 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002556:	4603      	mov	r3, r0
 8002558:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800255c:	e00f      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800255e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002562:	3328      	adds	r3, #40	@ 0x28
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f001 fd76 	bl	8004058 <RCCEx_PLL3_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002572:	e004      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800257a:	e000      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800257c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800257e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002586:	4ba5      	ldr	r3, [pc, #660]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800258e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002594:	4aa1      	ldr	r2, [pc, #644]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002596:	430b      	orrs	r3, r1
 8002598:	6513      	str	r3, [r2, #80]	@ 0x50
 800259a:	e003      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80025b0:	f04f 0900 	mov.w	r9, #0
 80025b4:	ea58 0309 	orrs.w	r3, r8, r9
 80025b8:	d047      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80025ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d82a      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80025c4:	a201      	add	r2, pc, #4	@ (adr r2, 80025cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	080025e1 	.word	0x080025e1
 80025d0:	080025ef 	.word	0x080025ef
 80025d4:	08002605 	.word	0x08002605
 80025d8:	08002623 	.word	0x08002623
 80025dc:	08002623 	.word	0x08002623
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e0:	4b8e      	ldr	r3, [pc, #568]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	4a8d      	ldr	r2, [pc, #564]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025ec:	e01a      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025f2:	3308      	adds	r3, #8
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 fc7c 	bl	8003ef4 <RCCEx_PLL2_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002602:	e00f      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002608:	3328      	adds	r3, #40	@ 0x28
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f001 fd23 	bl	8004058 <RCCEx_PLL3_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002618:	e004      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002620:	e000      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002624:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800262c:	4b7b      	ldr	r3, [pc, #492]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800262e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002630:	f023 0107 	bic.w	r1, r3, #7
 8002634:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263a:	4a78      	ldr	r2, [pc, #480]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800263c:	430b      	orrs	r3, r1
 800263e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002640:	e003      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002642:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002646:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800264a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002656:	f04f 0b00 	mov.w	fp, #0
 800265a:	ea5a 030b 	orrs.w	r3, sl, fp
 800265e:	d04c      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800266a:	d030      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800266c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002670:	d829      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002672:	2bc0      	cmp	r3, #192	@ 0xc0
 8002674:	d02d      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002676:	2bc0      	cmp	r3, #192	@ 0xc0
 8002678:	d825      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800267a:	2b80      	cmp	r3, #128	@ 0x80
 800267c:	d018      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800267e:	2b80      	cmp	r3, #128	@ 0x80
 8002680:	d821      	bhi.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002686:	2b40      	cmp	r3, #64	@ 0x40
 8002688:	d007      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800268a:	e01c      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268c:	4b63      	ldr	r3, [pc, #396]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	4a62      	ldr	r2, [pc, #392]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002698:	e01c      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800269a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800269e:	3308      	adds	r3, #8
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fc26 	bl	8003ef4 <RCCEx_PLL2_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026ae:	e011      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026b4:	3328      	adds	r3, #40	@ 0x28
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fccd 	bl	8004058 <RCCEx_PLL3_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026c4:	e006      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80026cc:	e002      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80026dc:	4b4f      	ldr	r3, [pc, #316]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80026e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	4a4c      	ldr	r2, [pc, #304]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ec:	430b      	orrs	r3, r1
 80026ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80026f0:	e003      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002706:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002710:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002714:	460b      	mov	r3, r1
 8002716:	4313      	orrs	r3, r2
 8002718:	d053      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800271a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800271e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002722:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002726:	d035      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002728:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800272c:	d82e      	bhi.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800272e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002732:	d031      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002734:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002738:	d828      	bhi.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800273a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800273e:	d01a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002744:	d822      	bhi.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800274a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800274e:	d007      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002750:	e01c      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002752:	4b32      	ldr	r3, [pc, #200]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	4a31      	ldr	r2, [pc, #196]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800275e:	e01c      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002760:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002764:	3308      	adds	r3, #8
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fbc3 	bl	8003ef4 <RCCEx_PLL2_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002774:	e011      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002776:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800277a:	3328      	adds	r3, #40	@ 0x28
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f001 fc6a 	bl	8004058 <RCCEx_PLL3_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800278a:	e006      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002792:	e002      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002794:	bf00      	nop
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800279a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10b      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027a2:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80027aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80027b2:	4a1a      	ldr	r2, [pc, #104]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b8:	e003      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80027ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80027dc:	460b      	mov	r3, r1
 80027de:	4313      	orrs	r3, r2
 80027e0:	d056      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80027e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ee:	d038      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80027f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027f4:	d831      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027fa:	d034      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80027fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002800:	d82b      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002802:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002806:	d01d      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002808:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800280c:	d825      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002812:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002818:	e01f      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800281a:	bf00      	nop
 800281c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002820:	4ba2      	ldr	r3, [pc, #648]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	4aa1      	ldr	r2, [pc, #644]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800282a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800282c:	e01c      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800282e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002832:	3308      	adds	r3, #8
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f001 fb5c 	bl	8003ef4 <RCCEx_PLL2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002842:	e011      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002844:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002848:	3328      	adds	r3, #40	@ 0x28
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fc03 	bl	8004058 <RCCEx_PLL3_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002858:	e006      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002860:	e002      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002868:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002870:	4b8e      	ldr	r3, [pc, #568]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800287c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002880:	4a8a      	ldr	r2, [pc, #552]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002882:	430b      	orrs	r3, r1
 8002884:	6593      	str	r3, [r2, #88]	@ 0x58
 8002886:	e003      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800288c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800289c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028a6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80028aa:	460b      	mov	r3, r1
 80028ac:	4313      	orrs	r3, r2
 80028ae:	d03a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80028b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	2b30      	cmp	r3, #48	@ 0x30
 80028b8:	d01f      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80028ba:	2b30      	cmp	r3, #48	@ 0x30
 80028bc:	d819      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d00c      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d815      	bhi.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d019      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d111      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ce:	4b77      	ldr	r3, [pc, #476]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d2:	4a76      	ldr	r2, [pc, #472]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028da:	e011      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028e0:	3308      	adds	r3, #8
 80028e2:	2102      	movs	r1, #2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 fb05 	bl	8003ef4 <RCCEx_PLL2_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028f0:	e006      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028f8:	e002      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002900:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002908:	4b68      	ldr	r3, [pc, #416]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002916:	4a65      	ldr	r2, [pc, #404]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002918:	430b      	orrs	r3, r1
 800291a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291c:	e003      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002922:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002926:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002932:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800293c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002940:	460b      	mov	r3, r1
 8002942:	4313      	orrs	r3, r2
 8002944:	d051      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002946:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800294a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800294c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002950:	d035      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002956:	d82e      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800295c:	d031      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800295e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002962:	d828      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002968:	d01a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296e:	d822      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002978:	d007      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800297a:	e01c      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800297c:	4b4b      	ldr	r3, [pc, #300]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	4a4a      	ldr	r2, [pc, #296]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002988:	e01c      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800298a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800298e:	3308      	adds	r3, #8
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f001 faae 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800299e:	e011      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029a4:	3328      	adds	r3, #40	@ 0x28
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 fb55 	bl	8004058 <RCCEx_PLL3_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029b4:	e006      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80029bc:	e002      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029cc:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80029d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029da:	4a34      	ldr	r2, [pc, #208]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029dc:	430b      	orrs	r3, r1
 80029de:	6513      	str	r3, [r2, #80]	@ 0x50
 80029e0:	e003      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80029f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4313      	orrs	r3, r2
 8002a08:	d056      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a14:	d033      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a1a:	d82c      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a20:	d02f      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a26:	d826      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a2c:	d02b      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002a2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a32:	d820      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a38:	d012      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a3e:	d81a      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d022      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a48:	d115      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a4e:	3308      	adds	r3, #8
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 fa4e 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a5e:	e015      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a64:	3328      	adds	r3, #40	@ 0x28
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 faf5 	bl	8004058 <RCCEx_PLL3_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a74:	e00a      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a7c:	e006      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a7e:	bf00      	nop
 8002a80:	e004      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a82:	bf00      	nop
 8002a84:	e002      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10d      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aa2:	4a02      	ldr	r2, [pc, #8]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aa8:	e006      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002aaa:	bf00      	nop
 8002aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ab4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ab8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002ac4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ace:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	d055      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae4:	d033      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aea:	d82c      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af0:	d02f      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af6:	d826      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002af8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002afc:	d02b      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002afe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b02:	d820      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b08:	d012      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0e:	d81a      	bhi.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d022      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b18:	d115      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b1e:	3308      	adds	r3, #8
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 f9e6 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b2e:	e015      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b34:	3328      	adds	r3, #40	@ 0x28
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f001 fa8d 	bl	8004058 <RCCEx_PLL3_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b44:	e00a      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b4e:	bf00      	nop
 8002b50:	e004      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b64:	4bb6      	ldr	r3, [pc, #728]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b74:	4ab2      	ldr	r2, [pc, #712]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b76:	430b      	orrs	r3, r1
 8002b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7a:	e003      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b9a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	d02a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d011      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bb2:	d10a      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb8:	3308      	adds	r3, #8
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 f999 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002bc8:	e004      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002bdc:	4b98      	ldr	r3, [pc, #608]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bea:	4a95      	ldr	r2, [pc, #596]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bec:	430b      	orrs	r3, r1
 8002bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf0:	e003      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bf6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c10:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c14:	460b      	mov	r3, r1
 8002c16:	4313      	orrs	r3, r2
 8002c18:	d037      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c24:	d00e      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c2a:	d816      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d018      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c34:	d111      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c36:	4b82      	ldr	r3, [pc, #520]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	4a81      	ldr	r2, [pc, #516]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c42:	e00f      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c48:	3308      	adds	r3, #8
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f951 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c58:	e004      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c60:	e000      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c6c:	4b74      	ldr	r3, [pc, #464]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002c74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7a:	4a71      	ldr	r2, [pc, #452]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c80:	e003      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002c96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ca0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	d03a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002caa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d81d      	bhi.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002cf9 	.word	0x08002cf9
 8002cc0:	08002ccd 	.word	0x08002ccd
 8002cc4:	08002cdb 	.word	0x08002cdb
 8002cc8:	08002cf9 	.word	0x08002cf9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	4a5b      	ldr	r2, [pc, #364]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cd8:	e00f      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cde:	3308      	adds	r3, #8
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 f906 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cee:	e004      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002cf6:	e000      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d02:	4b4f      	ldr	r3, [pc, #316]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d06:	f023 0103 	bic.w	r1, r3, #3
 8002d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d10:	4a4b      	ldr	r2, [pc, #300]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d12:	430b      	orrs	r3, r1
 8002d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d16:	e003      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d36:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f000 80a0 	beq.w	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d42:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3f      	ldr	r2, [pc, #252]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d4e:	f7fe f88b 	bl	8000e68 <HAL_GetTick>
 8002d52:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d56:	e00b      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fe f886 	bl	8000e68 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b64      	cmp	r3, #100	@ 0x64
 8002d66:	d903      	bls.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d6e:	e005      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d70:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ed      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002d7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d17a      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d84:	4b2e      	ldr	r3, [pc, #184]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d90:	4053      	eors	r3, r2
 8002d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002da6:	4b26      	ldr	r3, [pc, #152]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a25      	ldr	r2, [pc, #148]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002db2:	4b23      	ldr	r3, [pc, #140]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002dbe:	4a20      	ldr	r2, [pc, #128]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002dc4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd2:	d118      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f848 	bl	8000e68 <HAL_GetTick>
 8002dd8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ddc:	e00d      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fe f843 	bl	8000e68 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002de8:	1ad2      	subs	r2, r2, r3
 8002dea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d903      	bls.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002df8:	e005      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0eb      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d130      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e1e:	d115      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002e20:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e30:	091a      	lsrs	r2, r3, #4
 8002e32:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	4a02      	ldr	r2, [pc, #8]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6113      	str	r3, [r2, #16]
 8002e3c:	e00c      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002e3e:	bf00      	nop
 8002e40:	58024400 	.word	0x58024400
 8002e44:	58024800 	.word	0x58024800
 8002e48:	00ffffcf 	.word	0x00ffffcf
 8002e4c:	4bd4      	ldr	r3, [pc, #848]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4ad3      	ldr	r2, [pc, #844]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e56:	6113      	str	r3, [r2, #16]
 8002e58:	4bd1      	ldr	r3, [pc, #836]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e5a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	4acd      	ldr	r2, [pc, #820]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6e:	e008      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e74:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002e78:	e003      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f002 0301 	and.w	r3, r2, #1
 8002e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f000 808b 	beq.w	8002fba <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eac:	2b28      	cmp	r3, #40	@ 0x28
 8002eae:	d86b      	bhi.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002f91 	.word	0x08002f91
 8002ebc:	08002f89 	.word	0x08002f89
 8002ec0:	08002f89 	.word	0x08002f89
 8002ec4:	08002f89 	.word	0x08002f89
 8002ec8:	08002f89 	.word	0x08002f89
 8002ecc:	08002f89 	.word	0x08002f89
 8002ed0:	08002f89 	.word	0x08002f89
 8002ed4:	08002f89 	.word	0x08002f89
 8002ed8:	08002f5d 	.word	0x08002f5d
 8002edc:	08002f89 	.word	0x08002f89
 8002ee0:	08002f89 	.word	0x08002f89
 8002ee4:	08002f89 	.word	0x08002f89
 8002ee8:	08002f89 	.word	0x08002f89
 8002eec:	08002f89 	.word	0x08002f89
 8002ef0:	08002f89 	.word	0x08002f89
 8002ef4:	08002f89 	.word	0x08002f89
 8002ef8:	08002f73 	.word	0x08002f73
 8002efc:	08002f89 	.word	0x08002f89
 8002f00:	08002f89 	.word	0x08002f89
 8002f04:	08002f89 	.word	0x08002f89
 8002f08:	08002f89 	.word	0x08002f89
 8002f0c:	08002f89 	.word	0x08002f89
 8002f10:	08002f89 	.word	0x08002f89
 8002f14:	08002f89 	.word	0x08002f89
 8002f18:	08002f91 	.word	0x08002f91
 8002f1c:	08002f89 	.word	0x08002f89
 8002f20:	08002f89 	.word	0x08002f89
 8002f24:	08002f89 	.word	0x08002f89
 8002f28:	08002f89 	.word	0x08002f89
 8002f2c:	08002f89 	.word	0x08002f89
 8002f30:	08002f89 	.word	0x08002f89
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	08002f91 	.word	0x08002f91
 8002f3c:	08002f89 	.word	0x08002f89
 8002f40:	08002f89 	.word	0x08002f89
 8002f44:	08002f89 	.word	0x08002f89
 8002f48:	08002f89 	.word	0x08002f89
 8002f4c:	08002f89 	.word	0x08002f89
 8002f50:	08002f89 	.word	0x08002f89
 8002f54:	08002f89 	.word	0x08002f89
 8002f58:	08002f91 	.word	0x08002f91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f60:	3308      	adds	r3, #8
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 ffc5 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f70:	e00f      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f76:	3328      	adds	r3, #40	@ 0x28
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 f86c 	bl	8004058 <RCCEx_PLL3_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f9a:	4b81      	ldr	r3, [pc, #516]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002faa:	4a7d      	ldr	r2, [pc, #500]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fb0:	e003      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f002 0302 	and.w	r3, r2, #2
 8002fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002fd0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	d042      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d825      	bhi.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08003039 	.word	0x08003039
 8002ff0:	08003005 	.word	0x08003005
 8002ff4:	0800301b 	.word	0x0800301b
 8002ff8:	08003039 	.word	0x08003039
 8002ffc:	08003039 	.word	0x08003039
 8003000:	08003039 	.word	0x08003039
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003008:	3308      	adds	r3, #8
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ff71 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003018:	e00f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800301a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800301e:	3328      	adds	r3, #40	@ 0x28
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f001 f818 	bl	8004058 <RCCEx_PLL3_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800302e:	e004      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003042:	4b57      	ldr	r3, [pc, #348]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003046:	f023 0107 	bic.w	r1, r3, #7
 800304a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800304e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003050:	4a53      	ldr	r2, [pc, #332]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003052:	430b      	orrs	r3, r1
 8003054:	6553      	str	r3, [r2, #84]	@ 0x54
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800305c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f002 0304 	and.w	r3, r2, #4
 800306c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003076:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d044      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003084:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003088:	2b05      	cmp	r3, #5
 800308a:	d825      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 800308c:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030e1 	.word	0x080030e1
 8003098:	080030ad 	.word	0x080030ad
 800309c:	080030c3 	.word	0x080030c3
 80030a0:	080030e1 	.word	0x080030e1
 80030a4:	080030e1 	.word	0x080030e1
 80030a8:	080030e1 	.word	0x080030e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030b0:	3308      	adds	r3, #8
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ff1d 	bl	8003ef4 <RCCEx_PLL2_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030c0:	e00f      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030c6:	3328      	adds	r3, #40	@ 0x28
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ffc4 	bl	8004058 <RCCEx_PLL3_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030d6:	e004      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80030e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ea:	4b2d      	ldr	r3, [pc, #180]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f023 0107 	bic.w	r1, r3, #7
 80030f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030fa:	4a29      	ldr	r2, [pc, #164]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003106:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800310a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f002 0320 	and.w	r3, r2, #32
 8003116:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003124:	460b      	mov	r3, r1
 8003126:	4313      	orrs	r3, r2
 8003128:	d057      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800312a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003136:	d035      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800313c:	d82c      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003142:	d031      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003148:	d826      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800314a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800314e:	d02d      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003150:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003154:	d820      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800315a:	d012      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800315c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003160:	d81a      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d024      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800316a:	d115      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800316c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003170:	3308      	adds	r3, #8
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f000 febd 	bl	8003ef4 <RCCEx_PLL2_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003180:	e017      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003186:	3328      	adds	r3, #40	@ 0x28
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 ff64 	bl	8004058 <RCCEx_PLL3_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003196:	e00c      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800319e:	e008      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80031a0:	58024400 	.word	0x58024400
        break;
 80031a4:	bf00      	nop
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ba:	4bc2      	ldr	r3, [pc, #776]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ca:	4abe      	ldr	r2, [pc, #760]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80031d0:	e003      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80031e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4313      	orrs	r3, r2
 80031f8:	d055      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003202:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003206:	d033      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003208:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800320c:	d82c      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003212:	d02f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003218:	d826      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800321a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800321e:	d02b      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003220:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003224:	d820      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800322a:	d012      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800322c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003230:	d81a      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d022      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323a:	d115      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800323c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003240:	3308      	adds	r3, #8
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fe55 	bl	8003ef4 <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003250:	e015      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003256:	3328      	adds	r3, #40	@ 0x28
 8003258:	2102      	movs	r1, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fefc 	bl	8004058 <RCCEx_PLL3_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003266:	e00a      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800326e:	e006      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003270:	bf00      	nop
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003286:	4b8f      	ldr	r3, [pc, #572]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800328e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003292:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003296:	4a8b      	ldr	r2, [pc, #556]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003298:	430b      	orrs	r3, r1
 800329a:	6593      	str	r3, [r2, #88]	@ 0x58
 800329c:	e003      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80032b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032bc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80032c0:	460b      	mov	r3, r1
 80032c2:	4313      	orrs	r3, r2
 80032c4:	d055      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032d2:	d033      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80032d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032d8:	d82c      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032de:	d02f      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80032e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e4:	d826      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032ea:	d02b      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80032ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032f0:	d820      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032f6:	d012      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80032f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fc:	d81a      	bhi.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d022      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003306:	d115      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800330c:	3308      	adds	r3, #8
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fdef 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800331c:	e015      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800331e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003322:	3328      	adds	r3, #40	@ 0x28
 8003324:	2102      	movs	r1, #2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fe96 	bl	8004058 <RCCEx_PLL3_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003332:	e00a      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800333a:	e006      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800333c:	bf00      	nop
 800333e:	e004      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003340:	bf00      	nop
 8003342:	e002      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10b      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003352:	4b5c      	ldr	r3, [pc, #368]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800335a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800335e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003362:	4a58      	ldr	r2, [pc, #352]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003364:	430b      	orrs	r3, r1
 8003366:	6593      	str	r3, [r2, #88]	@ 0x58
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800336e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f002 0308 	and.w	r3, r2, #8
 800337e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003388:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800338c:	460b      	mov	r3, r1
 800338e:	4313      	orrs	r3, r2
 8003390:	d01e      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339e:	d10c      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033a4:	3328      	adds	r3, #40	@ 0x28
 80033a6:	2102      	movs	r1, #2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fe55 	bl	8004058 <RCCEx_PLL3_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033ba:	4b42      	ldr	r3, [pc, #264]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	4a3e      	ldr	r2, [pc, #248]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f002 0310 	and.w	r3, r2, #16
 80033dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80033ea:	460b      	mov	r3, r1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d01e      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003402:	3328      	adds	r3, #40	@ 0x28
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fe26 	bl	8004058 <RCCEx_PLL3_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003418:	4b2a      	ldr	r3, [pc, #168]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003420:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003424:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003428:	4a26      	ldr	r2, [pc, #152]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800342a:	430b      	orrs	r3, r1
 800342c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800342e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800343a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003444:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d040      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800344e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003456:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800345a:	d022      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800345c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003460:	d81b      	bhi.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346a:	d00b      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800346c:	e015      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800346e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003472:	3308      	adds	r3, #8
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fd3c 	bl	8003ef4 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003482:	e00f      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003484:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003488:	3328      	adds	r3, #40	@ 0x28
 800348a:	2102      	movs	r1, #2
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fde3 	bl	8004058 <RCCEx_PLL3_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80034a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034bc:	4a01      	ldr	r2, [pc, #4]	@ (80034c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80034c2:	e005      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80034c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034de:	2300      	movs	r3, #0
 80034e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80034e6:	460b      	mov	r3, r1
 80034e8:	4313      	orrs	r3, r2
 80034ea:	d03b      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034f8:	d01f      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80034fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034fe:	d818      	bhi.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003504:	d003      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800350a:	d007      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800350c:	e011      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350e:	4b64      	ldr	r3, [pc, #400]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	4a63      	ldr	r2, [pc, #396]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800351a:	e00f      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800351c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003520:	3328      	adds	r3, #40	@ 0x28
 8003522:	2101      	movs	r1, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fd97 	bl	8004058 <RCCEx_PLL3_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003530:	e004      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003544:	4b56      	ldr	r3, [pc, #344]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003548:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800354c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003554:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003556:	430b      	orrs	r3, r1
 8003558:	6553      	str	r3, [r2, #84]	@ 0x54
 800355a:	e003      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003560:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003564:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003570:	673b      	str	r3, [r7, #112]	@ 0x70
 8003572:	2300      	movs	r3, #0
 8003574:	677b      	str	r3, [r7, #116]	@ 0x74
 8003576:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800357a:	460b      	mov	r3, r1
 800357c:	4313      	orrs	r3, r2
 800357e:	d031      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003580:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358e:	d007      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003590:	e011      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003592:	4b43      	ldr	r3, [pc, #268]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003596:	4a42      	ldr	r2, [pc, #264]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800359e:	e00e      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035a4:	3308      	adds	r3, #8
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fca3 	bl	8003ef4 <RCCEx_PLL2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035b4:	e003      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035c6:	4b36      	ldr	r3, [pc, #216]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d4:	4a32      	ldr	r2, [pc, #200]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80035f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035f2:	2300      	movs	r3, #0
 80035f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80035fa:	460b      	mov	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	d00c      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003600:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003604:	3328      	adds	r3, #40	@ 0x28
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fd25 	bl	8004058 <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800361a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003626:	663b      	str	r3, [r7, #96]	@ 0x60
 8003628:	2300      	movs	r3, #0
 800362a:	667b      	str	r3, [r7, #100]	@ 0x64
 800362c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003630:	460b      	mov	r3, r1
 8003632:	4313      	orrs	r3, r2
 8003634:	d03a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003642:	d018      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003648:	d811      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800364e:	d014      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003654:	d80b      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d011      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800365a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800365e:	d106      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	4a0e      	ldr	r2, [pc, #56]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800366a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800366c:	e008      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003674:	e004      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003676:	bf00      	nop
 8003678:	e002      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800367e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003680:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10d      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800368a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003698:	4a01      	ldr	r2, [pc, #4]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800369a:	430b      	orrs	r3, r1
 800369c:	6553      	str	r3, [r2, #84]	@ 0x54
 800369e:	e005      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80036a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036ba:	2300      	movs	r3, #0
 80036bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036c8:	4baa      	ldr	r3, [pc, #680]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80036d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d6:	4aa7      	ldr	r2, [pc, #668]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80036e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ea:	2300      	movs	r3, #0
 80036ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80036ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036f8:	4b9e      	ldr	r3, [pc, #632]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003704:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003708:	4a9a      	ldr	r2, [pc, #616]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800370e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800371c:	2300      	movs	r3, #0
 800371e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003720:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372a:	4b92      	ldr	r3, [pc, #584]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800372c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003738:	4a8e      	ldr	r2, [pc, #568]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800373a:	430b      	orrs	r3, r1
 800373c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800373e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800374a:	643b      	str	r3, [r7, #64]	@ 0x40
 800374c:	2300      	movs	r3, #0
 800374e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003750:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800375a:	4b86      	ldr	r3, [pc, #536]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	4a85      	ldr	r2, [pc, #532]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003760:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003764:	6113      	str	r3, [r2, #16]
 8003766:	4b83      	ldr	r3, [pc, #524]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003772:	4a80      	ldr	r2, [pc, #512]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003774:	430b      	orrs	r3, r1
 8003776:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003784:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003786:	2300      	movs	r3, #0
 8003788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800378a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003794:	4b77      	ldr	r3, [pc, #476]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003798:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800379c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	4a74      	ldr	r2, [pc, #464]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037a4:	430b      	orrs	r3, r1
 80037a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037be:	460b      	mov	r3, r1
 80037c0:	4313      	orrs	r3, r2
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80037cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d4:	4a67      	ldr	r2, [pc, #412]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037d6:	430b      	orrs	r3, r1
 80037d8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	2100      	movs	r1, #0
 80037e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037f0:	460b      	mov	r3, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	d011      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037fa:	3308      	adds	r3, #8
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fb78 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800380a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003816:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800381a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	2100      	movs	r1, #0
 8003824:	6239      	str	r1, [r7, #32]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
 800382c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003830:	460b      	mov	r3, r1
 8003832:	4313      	orrs	r3, r2
 8003834:	d011      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800383a:	3308      	adds	r3, #8
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fb58 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800384a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003852:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003856:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800385a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	2100      	movs	r1, #0
 8003864:	61b9      	str	r1, [r7, #24]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003870:	460b      	mov	r3, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	d011      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003876:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800387a:	3308      	adds	r3, #8
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fb38 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800388a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003896:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800389a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	2100      	movs	r1, #0
 80038a4:	6139      	str	r1, [r7, #16]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038b0:	460b      	mov	r3, r1
 80038b2:	4313      	orrs	r3, r2
 80038b4:	d011      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ba:	3328      	adds	r3, #40	@ 0x28
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fbca 	bl	8004058 <RCCEx_PLL3_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80038ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	2100      	movs	r1, #0
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d011      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038fa:	3328      	adds	r3, #40	@ 0x28
 80038fc:	2101      	movs	r1, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fbaa 	bl	8004058 <RCCEx_PLL3_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800390a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003912:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003916:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800391a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	2100      	movs	r1, #0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003930:	460b      	mov	r3, r1
 8003932:	4313      	orrs	r3, r2
 8003934:	d011      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800393a:	3328      	adds	r3, #40	@ 0x28
 800393c:	2102      	movs	r1, #2
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fb8a 	bl	8004058 <RCCEx_PLL3_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800394a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003956:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800395a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800396e:	46bd      	mov	sp, r7
 8003970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003974:	58024400 	.word	0x58024400

08003978 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800397c:	f7fe fd56 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4904      	ldr	r1, [pc, #16]	@ (80039a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	58024400 	.word	0x58024400
 80039a0:	08005d04 	.word	0x08005d04

080039a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	@ 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039b6:	4b9f      	ldr	r3, [pc, #636]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	0b1b      	lsrs	r3, r3, #12
 80039bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039ce:	4b99      	ldr	r3, [pc, #612]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d2:	08db      	lsrs	r3, r3, #3
 80039d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8111 	beq.w	8003c14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	f000 8083 	beq.w	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	f200 80a1 	bhi.w	8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d056      	beq.n	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a0e:	e099      	b.n	8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a10:	4b88      	ldr	r3, [pc, #544]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d02d      	beq.n	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a1c:	4b85      	ldr	r3, [pc, #532]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	08db      	lsrs	r3, r3, #3
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	4a84      	ldr	r2, [pc, #528]	@ (8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a46:	4b7b      	ldr	r3, [pc, #492]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a76:	e087      	b.n	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aba:	e065      	b.n	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b59      	ldr	r3, [pc, #356]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003afe:	e043      	b.n	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b12:	4b48      	ldr	r3, [pc, #288]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b42:	e021      	b.n	8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b37      	ldr	r3, [pc, #220]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bae:	ee17 2a90 	vmov	r2, s15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	0c1b      	lsrs	r3, r3, #16
 8003bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bdc:	ee17 2a90 	vmov	r2, s15
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003be4:	4b13      	ldr	r3, [pc, #76]	@ (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	0e1b      	lsrs	r3, r3, #24
 8003bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c0a:	ee17 2a90 	vmov	r2, s15
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c12:	e008      	b.n	8003c26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
}
 8003c26:	bf00      	nop
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
 8003c38:	03d09000 	.word	0x03d09000
 8003c3c:	46000000 	.word	0x46000000
 8003c40:	4c742400 	.word	0x4c742400
 8003c44:	4a742400 	.word	0x4a742400
 8003c48:	4bbebc20 	.word	0x4bbebc20

08003c4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	@ 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c54:	4ba1      	ldr	r3, [pc, #644]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c5e:	4b9f      	ldr	r3, [pc, #636]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	0d1b      	lsrs	r3, r3, #20
 8003c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c6a:	4b9c      	ldr	r3, [pc, #624]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c76:	4b99      	ldr	r3, [pc, #612]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8111 	beq.w	8003ebc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f000 8083 	beq.w	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f200 80a1 	bhi.w	8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d056      	beq.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cb6:	e099      	b.n	8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb8:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d02d      	beq.n	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cc4:	4b85      	ldr	r3, [pc, #532]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	4a84      	ldr	r2, [pc, #528]	@ (8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b7b      	ldr	r3, [pc, #492]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d1e:	e087      	b.n	8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b6a      	ldr	r3, [pc, #424]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d62:	e065      	b.n	8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b59      	ldr	r3, [pc, #356]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003da6:	e043      	b.n	8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b48      	ldr	r3, [pc, #288]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dea:	e021      	b.n	8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e30:	4b2a      	ldr	r3, [pc, #168]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	0a5b      	lsrs	r3, r3, #9
 8003e36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e56:	ee17 2a90 	vmov	r2, s15
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e68:	ee07 3a90 	vmov	s15, r3
 8003e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e78:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e84:	ee17 2a90 	vmov	r2, s15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e8c:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	0e1b      	lsrs	r3, r3, #24
 8003e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ea6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eb2:	ee17 2a90 	vmov	r2, s15
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003eba:	e008      	b.n	8003ece <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
}
 8003ece:	bf00      	nop
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	03d09000 	.word	0x03d09000
 8003ee4:	46000000 	.word	0x46000000
 8003ee8:	4c742400 	.word	0x4c742400
 8003eec:	4a742400 	.word	0x4a742400
 8003ef0:	4bbebc20 	.word	0x4bbebc20

08003ef4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f02:	4b53      	ldr	r3, [pc, #332]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d101      	bne.n	8003f12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e099      	b.n	8004046 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f12:	4b4f      	ldr	r3, [pc, #316]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4e      	ldr	r2, [pc, #312]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f18:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1e:	f7fc ffa3 	bl	8000e68 <HAL_GetTick>
 8003f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f26:	f7fc ff9f 	bl	8000e68 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e086      	b.n	8004046 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f38:	4b45      	ldr	r3, [pc, #276]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f44:	4b42      	ldr	r3, [pc, #264]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	031b      	lsls	r3, r3, #12
 8003f52:	493f      	ldr	r1, [pc, #252]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	025b      	lsls	r3, r3, #9
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f88:	4931      	ldr	r1, [pc, #196]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f8e:	4b30      	ldr	r3, [pc, #192]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	492d      	ldr	r1, [pc, #180]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	f023 0220 	bic.w	r2, r3, #32
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	4928      	ldr	r1, [pc, #160]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fb2:	4b27      	ldr	r3, [pc, #156]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	4a26      	ldr	r2, [pc, #152]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	f023 0310 	bic.w	r3, r3, #16
 8003fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc2:	4b24      	ldr	r3, [pc, #144]	@ (8004054 <RCCEx_PLL2_Config+0x160>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	69d2      	ldr	r2, [r2, #28]
 8003fca:	00d2      	lsls	r2, r2, #3
 8003fcc:	4920      	ldr	r1, [pc, #128]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
 8003fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a19      	ldr	r2, [pc, #100]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ff0:	e00f      	b.n	8004012 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ff8:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffc:	4a14      	ldr	r2, [pc, #80]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004002:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004004:	e005      	b.n	8004012 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004006:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8004008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400a:	4a11      	ldr	r2, [pc, #68]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 800400c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004010:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004012:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a0e      	ldr	r2, [pc, #56]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 8004018:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800401c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401e:	f7fc ff23 	bl	8000e68 <HAL_GetTick>
 8004022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004024:	e008      	b.n	8004038 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004026:	f7fc ff1f 	bl	8000e68 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e006      	b.n	8004046 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004038:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <RCCEx_PLL2_Config+0x15c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	58024400 	.word	0x58024400
 8004054:	ffff0007 	.word	0xffff0007

08004058 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004066:	4b53      	ldr	r3, [pc, #332]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b03      	cmp	r3, #3
 8004070:	d101      	bne.n	8004076 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e099      	b.n	80041aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004076:	4b4f      	ldr	r3, [pc, #316]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a4e      	ldr	r2, [pc, #312]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800407c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004082:	f7fc fef1 	bl	8000e68 <HAL_GetTick>
 8004086:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004088:	e008      	b.n	800409c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800408a:	f7fc feed 	bl	8000e68 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e086      	b.n	80041aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800409c:	4b45      	ldr	r3, [pc, #276]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040a8:	4b42      	ldr	r3, [pc, #264]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	051b      	lsls	r3, r3, #20
 80040b6:	493f      	ldr	r1, [pc, #252]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	025b      	lsls	r3, r3, #9
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040ec:	4931      	ldr	r1, [pc, #196]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040f2:	4b30      	ldr	r3, [pc, #192]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	492d      	ldr	r1, [pc, #180]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004104:	4b2b      	ldr	r3, [pc, #172]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4928      	ldr	r1, [pc, #160]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004116:	4b27      	ldr	r3, [pc, #156]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	4a26      	ldr	r2, [pc, #152]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800411c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004120:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <RCCEx_PLL3_Config+0x160>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	69d2      	ldr	r2, [r2, #28]
 800412e:	00d2      	lsls	r2, r2, #3
 8004130:	4920      	ldr	r1, [pc, #128]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004136:	4b1f      	ldr	r3, [pc, #124]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	4a1e      	ldr	r2, [pc, #120]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004140:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004148:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800414e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004152:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004154:	e00f      	b.n	8004176 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800415c:	4b15      	ldr	r3, [pc, #84]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004162:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004166:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004168:	e005      	b.n	8004176 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800416a:	4b12      	ldr	r3, [pc, #72]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	4a11      	ldr	r2, [pc, #68]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004174:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004176:	4b0f      	ldr	r3, [pc, #60]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a0e      	ldr	r2, [pc, #56]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004182:	f7fc fe71 	bl	8000e68 <HAL_GetTick>
 8004186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004188:	e008      	b.n	800419c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800418a:	f7fc fe6d 	bl	8000e68 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e006      	b.n	80041aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800419c:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	58024400 	.word	0x58024400
 80041b8:	ffff0007 	.word	0xffff0007

080041bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e10f      	b.n	80043ee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a87      	ldr	r2, [pc, #540]	@ (80043f8 <HAL_SPI_Init+0x23c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <HAL_SPI_Init+0x42>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a86      	ldr	r2, [pc, #536]	@ (80043fc <HAL_SPI_Init+0x240>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00a      	beq.n	80041fe <HAL_SPI_Init+0x42>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a84      	ldr	r2, [pc, #528]	@ (8004400 <HAL_SPI_Init+0x244>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d005      	beq.n	80041fe <HAL_SPI_Init+0x42>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	d901      	bls.n	80041fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0f7      	b.n	80043ee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fbbc 	bl	800497c <SPI_GetPacketSize>
 8004204:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7b      	ldr	r2, [pc, #492]	@ (80043f8 <HAL_SPI_Init+0x23c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00c      	beq.n	800422a <HAL_SPI_Init+0x6e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a79      	ldr	r2, [pc, #484]	@ (80043fc <HAL_SPI_Init+0x240>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <HAL_SPI_Init+0x6e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a78      	ldr	r2, [pc, #480]	@ (8004400 <HAL_SPI_Init+0x244>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d002      	beq.n	800422a <HAL_SPI_Init+0x6e>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d811      	bhi.n	800424e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800422e:	4a72      	ldr	r2, [pc, #456]	@ (80043f8 <HAL_SPI_Init+0x23c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a70      	ldr	r2, [pc, #448]	@ (80043fc <HAL_SPI_Init+0x240>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_SPI_Init+0x8c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6f      	ldr	r2, [pc, #444]	@ (8004400 <HAL_SPI_Init+0x244>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d104      	bne.n	8004252 <HAL_SPI_Init+0x96>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b10      	cmp	r3, #16
 800424c:	d901      	bls.n	8004252 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0cd      	b.n	80043ee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc fc24 	bl	8000ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800428e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004298:	d119      	bne.n	80042ce <HAL_SPI_Init+0x112>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a2:	d103      	bne.n	80042ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10c      	bne.n	80042ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80042b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042bc:	d107      	bne.n	80042ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00f      	beq.n	80042fa <HAL_SPI_Init+0x13e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d90b      	bls.n	80042fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e007      	b.n	800430a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004308:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	431a      	orrs	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431c:	ea42 0103 	orr.w	r1, r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436a:	ea42 0103 	orr.w	r1, r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d113      	bne.n	80043aa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004394:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40013000 	.word	0x40013000
 80043fc:	40003800 	.word	0x40003800
 8004400:	40003c00 	.word	0x40003c00

08004404 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3320      	adds	r3, #32
 800441a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800441c:	f7fc fd24 	bl	8000e68 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
 8004430:	e1d1      	b.n	80047d6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_SPI_Transmit+0x3a>
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e1c9      	b.n	80047d6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_SPI_Transmit+0x4c>
 800444c:	2302      	movs	r3, #2
 800444e:	e1c2      	b.n	80047d6 <HAL_SPI_Transmit+0x3d2>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2203      	movs	r2, #3
 800445c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	88fa      	ldrh	r2, [r7, #6]
 800447a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80044a8:	d108      	bne.n	80044bc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	e009      	b.n	80044d0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80044ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4b96      	ldr	r3, [pc, #600]	@ (8004730 <HAL_SPI_Transmit+0x32c>)
 80044d8:	4013      	ands	r3, r2
 80044da:	88f9      	ldrh	r1, [r7, #6]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fc:	d107      	bne.n	800450e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d947      	bls.n	80045a6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004516:	e03f      	b.n	8004598 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d114      	bne.n	8004550 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800454e:	e023      	b.n	8004598 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004550:	f7fc fc8a 	bl	8000e68 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d803      	bhi.n	8004568 <HAL_SPI_Transmit+0x164>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004566:	d102      	bne.n	800456e <HAL_SPI_Transmit+0x16a>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d114      	bne.n	8004598 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f936 	bl	80047e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e11e      	b.n	80047d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1b9      	bne.n	8004518 <HAL_SPI_Transmit+0x114>
 80045a4:	e0f1      	b.n	800478a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b07      	cmp	r3, #7
 80045ac:	f240 80e6 	bls.w	800477c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80045b0:	e05d      	b.n	800466e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d132      	bne.n	8004626 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d918      	bls.n	80045fe <HAL_SPI_Transmit+0x1fa>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d014      	beq.n	80045fe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b02      	subs	r3, #2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80045fc:	e037      	b.n	800466e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004624:	e023      	b.n	800466e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004626:	f7fc fc1f 	bl	8000e68 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d803      	bhi.n	800463e <HAL_SPI_Transmit+0x23a>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d102      	bne.n	8004644 <HAL_SPI_Transmit+0x240>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d114      	bne.n	800466e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f8cb 	bl	80047e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004650:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0b3      	b.n	80047d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d19b      	bne.n	80045b2 <HAL_SPI_Transmit+0x1ae>
 800467a:	e086      	b.n	800478a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d154      	bne.n	8004734 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b03      	cmp	r3, #3
 8004694:	d918      	bls.n	80046c8 <HAL_SPI_Transmit+0x2c4>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d914      	bls.n	80046c8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ae:	1d1a      	adds	r2, r3, #4
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b04      	subs	r3, #4
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80046c6:	e059      	b.n	800477c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d917      	bls.n	8004704 <HAL_SPI_Transmit+0x300>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	881a      	ldrh	r2, [r3, #0]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b02      	subs	r3, #2
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004702:	e03b      	b.n	800477c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3320      	adds	r3, #32
 800470e:	7812      	ldrb	r2, [r2, #0]
 8004710:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800472e:	e025      	b.n	800477c <HAL_SPI_Transmit+0x378>
 8004730:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004734:	f7fc fb98 	bl	8000e68 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d803      	bhi.n	800474c <HAL_SPI_Transmit+0x348>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d102      	bne.n	8004752 <HAL_SPI_Transmit+0x34e>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d114      	bne.n	800477c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f844 	bl	80047e0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800475e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e02c      	b.n	80047d6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	f47f af79 	bne.w	800467c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2200      	movs	r2, #0
 8004792:	2108      	movs	r1, #8
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f8c3 	bl	8004920 <SPI_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f815 	bl	80047e0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop

080047e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0210 	orr.w	r2, r2, #16
 800480e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6919      	ldr	r1, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b3c      	ldr	r3, [pc, #240]	@ (800491c <SPI_CloseTransfer+0x13c>)
 800482c:	400b      	ands	r3, r1
 800482e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800483e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b04      	cmp	r3, #4
 800484a:	d014      	beq.n	8004876 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00f      	beq.n	8004876 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800485c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0220 	orr.w	r2, r2, #32
 8004874:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b03      	cmp	r3, #3
 8004880:	d014      	beq.n	80048ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00f      	beq.n	80048ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00f      	beq.n	80048d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048bc:	f043 0201 	orr.w	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00f      	beq.n	8004900 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e6:	f043 0208 	orr.w	r2, r3, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	fffffc90 	.word	0xfffffc90

08004920 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	4613      	mov	r3, r2
 800492e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004930:	e010      	b.n	8004954 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004932:	f7fc fa99 	bl	8000e68 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d803      	bhi.n	800494a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d102      	bne.n	8004950 <SPI_WaitOnFlagUntilTimeout+0x30>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e00f      	b.n	8004974 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	429a      	cmp	r2, r3
 8004970:	d0df      	beq.n	8004932 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	3307      	adds	r3, #7
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e042      	b.n	8004a4a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fc f8fc 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2224      	movs	r2, #36	@ 0x24
 80049e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fe1f 	bl	8005640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8b4 	bl	8004b70 <UART_SetConfig>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e01b      	b.n	8004a4a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0201 	orr.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fe9e 	bl	8005784 <UART_CheckIdleState>
 8004a48:	4603      	mov	r3, r0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b08a      	sub	sp, #40	@ 0x28
 8004a56:	af02      	add	r7, sp, #8
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d17b      	bne.n	8004b64 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_UART_Transmit+0x26>
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e074      	b.n	8004b66 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2221      	movs	r2, #33	@ 0x21
 8004a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a8c:	f7fc f9ec 	bl	8000e68 <HAL_GetTick>
 8004a90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aaa:	d108      	bne.n	8004abe <HAL_UART_Transmit+0x6c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	e003      	b.n	8004ac6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ac6:	e030      	b.n	8004b2a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2180      	movs	r1, #128	@ 0x80
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 ff00 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e03d      	b.n	8004b66 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004afe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	3302      	adds	r3, #2
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e007      	b.n	8004b18 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	781a      	ldrb	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3301      	adds	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1c8      	bne.n	8004ac8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2140      	movs	r1, #64	@ 0x40
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fec9 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e006      	b.n	8004b66 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b092      	sub	sp, #72	@ 0x48
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4bbe      	ldr	r3, [pc, #760]	@ (8004e98 <UART_SetConfig+0x328>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4ab3      	ldr	r2, [pc, #716]	@ (8004e9c <UART_SetConfig+0x32c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	4baf      	ldr	r3, [pc, #700]	@ (8004ea0 <UART_SetConfig+0x330>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	f023 010f 	bic.w	r1, r3, #15
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4aa6      	ldr	r2, [pc, #664]	@ (8004ea4 <UART_SetConfig+0x334>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d177      	bne.n	8004d00 <UART_SetConfig+0x190>
 8004c10:	4ba5      	ldr	r3, [pc, #660]	@ (8004ea8 <UART_SetConfig+0x338>)
 8004c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c18:	2b28      	cmp	r3, #40	@ 0x28
 8004c1a:	d86d      	bhi.n	8004cf8 <UART_SetConfig+0x188>
 8004c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <UART_SetConfig+0xb4>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004cc9 	.word	0x08004cc9
 8004c28:	08004cf9 	.word	0x08004cf9
 8004c2c:	08004cf9 	.word	0x08004cf9
 8004c30:	08004cf9 	.word	0x08004cf9
 8004c34:	08004cf9 	.word	0x08004cf9
 8004c38:	08004cf9 	.word	0x08004cf9
 8004c3c:	08004cf9 	.word	0x08004cf9
 8004c40:	08004cf9 	.word	0x08004cf9
 8004c44:	08004cd1 	.word	0x08004cd1
 8004c48:	08004cf9 	.word	0x08004cf9
 8004c4c:	08004cf9 	.word	0x08004cf9
 8004c50:	08004cf9 	.word	0x08004cf9
 8004c54:	08004cf9 	.word	0x08004cf9
 8004c58:	08004cf9 	.word	0x08004cf9
 8004c5c:	08004cf9 	.word	0x08004cf9
 8004c60:	08004cf9 	.word	0x08004cf9
 8004c64:	08004cd9 	.word	0x08004cd9
 8004c68:	08004cf9 	.word	0x08004cf9
 8004c6c:	08004cf9 	.word	0x08004cf9
 8004c70:	08004cf9 	.word	0x08004cf9
 8004c74:	08004cf9 	.word	0x08004cf9
 8004c78:	08004cf9 	.word	0x08004cf9
 8004c7c:	08004cf9 	.word	0x08004cf9
 8004c80:	08004cf9 	.word	0x08004cf9
 8004c84:	08004ce1 	.word	0x08004ce1
 8004c88:	08004cf9 	.word	0x08004cf9
 8004c8c:	08004cf9 	.word	0x08004cf9
 8004c90:	08004cf9 	.word	0x08004cf9
 8004c94:	08004cf9 	.word	0x08004cf9
 8004c98:	08004cf9 	.word	0x08004cf9
 8004c9c:	08004cf9 	.word	0x08004cf9
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004ce9 	.word	0x08004ce9
 8004ca8:	08004cf9 	.word	0x08004cf9
 8004cac:	08004cf9 	.word	0x08004cf9
 8004cb0:	08004cf9 	.word	0x08004cf9
 8004cb4:	08004cf9 	.word	0x08004cf9
 8004cb8:	08004cf9 	.word	0x08004cf9
 8004cbc:	08004cf9 	.word	0x08004cf9
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e222      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e21e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e21a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce6:	e216      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ce8:	2320      	movs	r3, #32
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cee:	e212      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cf0:	2340      	movs	r3, #64	@ 0x40
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf6:	e20e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004cf8:	2380      	movs	r3, #128	@ 0x80
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfe:	e20a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a69      	ldr	r2, [pc, #420]	@ (8004eac <UART_SetConfig+0x33c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d130      	bne.n	8004d6c <UART_SetConfig+0x1fc>
 8004d0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ea8 <UART_SetConfig+0x338>)
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d826      	bhi.n	8004d64 <UART_SetConfig+0x1f4>
 8004d16:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <UART_SetConfig+0x1ac>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d35 	.word	0x08004d35
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5d 	.word	0x08004d5d
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e1ec      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e1e8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	e1e4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d52:	e1e0      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d54:	2320      	movs	r3, #32
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5a:	e1dc      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d5c:	2340      	movs	r3, #64	@ 0x40
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d62:	e1d8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6a:	e1d4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a4f      	ldr	r2, [pc, #316]	@ (8004eb0 <UART_SetConfig+0x340>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d130      	bne.n	8004dd8 <UART_SetConfig+0x268>
 8004d76:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea8 <UART_SetConfig+0x338>)
 8004d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d826      	bhi.n	8004dd0 <UART_SetConfig+0x260>
 8004d82:	a201      	add	r2, pc, #4	@ (adr r2, 8004d88 <UART_SetConfig+0x218>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004da9 	.word	0x08004da9
 8004d90:	08004db1 	.word	0x08004db1
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e1b6      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dae:	e1b2      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db6:	e1ae      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dbe:	e1aa      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc6:	e1a6      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dc8:	2340      	movs	r3, #64	@ 0x40
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dce:	e1a2      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dd0:	2380      	movs	r3, #128	@ 0x80
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd6:	e19e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a35      	ldr	r2, [pc, #212]	@ (8004eb4 <UART_SetConfig+0x344>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d130      	bne.n	8004e44 <UART_SetConfig+0x2d4>
 8004de2:	4b31      	ldr	r3, [pc, #196]	@ (8004ea8 <UART_SetConfig+0x338>)
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d826      	bhi.n	8004e3c <UART_SetConfig+0x2cc>
 8004dee:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <UART_SetConfig+0x284>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	08004e1d 	.word	0x08004e1d
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e12:	e180      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1a:	e17c      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e22:	e178      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2a:	e174      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e32:	e170      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e34:	2340      	movs	r3, #64	@ 0x40
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e3a:	e16c      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e3c:	2380      	movs	r3, #128	@ 0x80
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e42:	e168      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb8 <UART_SetConfig+0x348>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d142      	bne.n	8004ed4 <UART_SetConfig+0x364>
 8004e4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ea8 <UART_SetConfig+0x338>)
 8004e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d838      	bhi.n	8004ecc <UART_SetConfig+0x35c>
 8004e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <UART_SetConfig+0x2f0>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e79 	.word	0x08004e79
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	08004e89 	.word	0x08004e89
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004ebd 	.word	0x08004ebd
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e7e:	e14a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e80:	2304      	movs	r3, #4
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e86:	e146      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8e:	e142      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e90:	2310      	movs	r3, #16
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e96:	e13e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004e98:	cfff69f3 	.word	0xcfff69f3
 8004e9c:	58000c00 	.word	0x58000c00
 8004ea0:	11fff4ff 	.word	0x11fff4ff
 8004ea4:	40011000 	.word	0x40011000
 8004ea8:	58024400 	.word	0x58024400
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	40004800 	.word	0x40004800
 8004eb4:	40004c00 	.word	0x40004c00
 8004eb8:	40005000 	.word	0x40005000
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec2:	e128      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ec4:	2340      	movs	r3, #64	@ 0x40
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eca:	e124      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed2:	e120      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4acb      	ldr	r2, [pc, #812]	@ (8005208 <UART_SetConfig+0x698>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d176      	bne.n	8004fcc <UART_SetConfig+0x45c>
 8004ede:	4bcb      	ldr	r3, [pc, #812]	@ (800520c <UART_SetConfig+0x69c>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ee6:	2b28      	cmp	r3, #40	@ 0x28
 8004ee8:	d86c      	bhi.n	8004fc4 <UART_SetConfig+0x454>
 8004eea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <UART_SetConfig+0x380>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f95 	.word	0x08004f95
 8004ef4:	08004fc5 	.word	0x08004fc5
 8004ef8:	08004fc5 	.word	0x08004fc5
 8004efc:	08004fc5 	.word	0x08004fc5
 8004f00:	08004fc5 	.word	0x08004fc5
 8004f04:	08004fc5 	.word	0x08004fc5
 8004f08:	08004fc5 	.word	0x08004fc5
 8004f0c:	08004fc5 	.word	0x08004fc5
 8004f10:	08004f9d 	.word	0x08004f9d
 8004f14:	08004fc5 	.word	0x08004fc5
 8004f18:	08004fc5 	.word	0x08004fc5
 8004f1c:	08004fc5 	.word	0x08004fc5
 8004f20:	08004fc5 	.word	0x08004fc5
 8004f24:	08004fc5 	.word	0x08004fc5
 8004f28:	08004fc5 	.word	0x08004fc5
 8004f2c:	08004fc5 	.word	0x08004fc5
 8004f30:	08004fa5 	.word	0x08004fa5
 8004f34:	08004fc5 	.word	0x08004fc5
 8004f38:	08004fc5 	.word	0x08004fc5
 8004f3c:	08004fc5 	.word	0x08004fc5
 8004f40:	08004fc5 	.word	0x08004fc5
 8004f44:	08004fc5 	.word	0x08004fc5
 8004f48:	08004fc5 	.word	0x08004fc5
 8004f4c:	08004fc5 	.word	0x08004fc5
 8004f50:	08004fad 	.word	0x08004fad
 8004f54:	08004fc5 	.word	0x08004fc5
 8004f58:	08004fc5 	.word	0x08004fc5
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004fc5 	.word	0x08004fc5
 8004f64:	08004fc5 	.word	0x08004fc5
 8004f68:	08004fc5 	.word	0x08004fc5
 8004f6c:	08004fc5 	.word	0x08004fc5
 8004f70:	08004fb5 	.word	0x08004fb5
 8004f74:	08004fc5 	.word	0x08004fc5
 8004f78:	08004fc5 	.word	0x08004fc5
 8004f7c:	08004fc5 	.word	0x08004fc5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fc5 	.word	0x08004fc5
 8004f8c:	08004fc5 	.word	0x08004fc5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e0bc      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e0b8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e0b4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb2:	e0b0      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fba:	e0ac      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fbc:	2340      	movs	r3, #64	@ 0x40
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	e0a8      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fca:	e0a4      	b.n	8005116 <UART_SetConfig+0x5a6>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a8f      	ldr	r2, [pc, #572]	@ (8005210 <UART_SetConfig+0x6a0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d130      	bne.n	8005038 <UART_SetConfig+0x4c8>
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800520c <UART_SetConfig+0x69c>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d826      	bhi.n	8005030 <UART_SetConfig+0x4c0>
 8004fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <UART_SetConfig+0x478>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08005009 	.word	0x08005009
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	2300      	movs	r3, #0
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e086      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e082      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005016:	e07e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501e:	e07a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005020:	2320      	movs	r3, #32
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005026:	e076      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005028:	2340      	movs	r3, #64	@ 0x40
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e072      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e06e      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a75      	ldr	r2, [pc, #468]	@ (8005214 <UART_SetConfig+0x6a4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d130      	bne.n	80050a4 <UART_SetConfig+0x534>
 8005042:	4b72      	ldr	r3, [pc, #456]	@ (800520c <UART_SetConfig+0x69c>)
 8005044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b05      	cmp	r3, #5
 800504c:	d826      	bhi.n	800509c <UART_SetConfig+0x52c>
 800504e:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0x4e4>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e050      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e04c      	b.n	8005116 <UART_SetConfig+0x5a6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e048      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e044      	b.n	8005116 <UART_SetConfig+0x5a6>
 800508c:	2320      	movs	r3, #32
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e040      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005094:	2340      	movs	r3, #64	@ 0x40
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e03c      	b.n	8005116 <UART_SetConfig+0x5a6>
 800509c:	2380      	movs	r3, #128	@ 0x80
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e038      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005218 <UART_SetConfig+0x6a8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d130      	bne.n	8005110 <UART_SetConfig+0x5a0>
 80050ae:	4b57      	ldr	r3, [pc, #348]	@ (800520c <UART_SetConfig+0x69c>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b05      	cmp	r3, #5
 80050b8:	d826      	bhi.n	8005108 <UART_SetConfig+0x598>
 80050ba:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <UART_SetConfig+0x550>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d9 	.word	0x080050d9
 80050c4:	080050e1 	.word	0x080050e1
 80050c8:	080050e9 	.word	0x080050e9
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	2302      	movs	r3, #2
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e01a      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050e0:	2304      	movs	r3, #4
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e016      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050e8:	2308      	movs	r3, #8
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e012      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e00e      	b.n	8005116 <UART_SetConfig+0x5a6>
 80050f8:	2320      	movs	r3, #32
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e00a      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005100:	2340      	movs	r3, #64	@ 0x40
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e006      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e002      	b.n	8005116 <UART_SetConfig+0x5a6>
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3f      	ldr	r2, [pc, #252]	@ (8005218 <UART_SetConfig+0x6a8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	f040 80f8 	bne.w	8005312 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005122:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005126:	2b20      	cmp	r3, #32
 8005128:	dc46      	bgt.n	80051b8 <UART_SetConfig+0x648>
 800512a:	2b02      	cmp	r3, #2
 800512c:	f2c0 8082 	blt.w	8005234 <UART_SetConfig+0x6c4>
 8005130:	3b02      	subs	r3, #2
 8005132:	2b1e      	cmp	r3, #30
 8005134:	d87e      	bhi.n	8005234 <UART_SetConfig+0x6c4>
 8005136:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <UART_SetConfig+0x5cc>)
 8005138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513c:	080051bf 	.word	0x080051bf
 8005140:	08005235 	.word	0x08005235
 8005144:	080051c7 	.word	0x080051c7
 8005148:	08005235 	.word	0x08005235
 800514c:	08005235 	.word	0x08005235
 8005150:	08005235 	.word	0x08005235
 8005154:	080051d7 	.word	0x080051d7
 8005158:	08005235 	.word	0x08005235
 800515c:	08005235 	.word	0x08005235
 8005160:	08005235 	.word	0x08005235
 8005164:	08005235 	.word	0x08005235
 8005168:	08005235 	.word	0x08005235
 800516c:	08005235 	.word	0x08005235
 8005170:	08005235 	.word	0x08005235
 8005174:	080051e7 	.word	0x080051e7
 8005178:	08005235 	.word	0x08005235
 800517c:	08005235 	.word	0x08005235
 8005180:	08005235 	.word	0x08005235
 8005184:	08005235 	.word	0x08005235
 8005188:	08005235 	.word	0x08005235
 800518c:	08005235 	.word	0x08005235
 8005190:	08005235 	.word	0x08005235
 8005194:	08005235 	.word	0x08005235
 8005198:	08005235 	.word	0x08005235
 800519c:	08005235 	.word	0x08005235
 80051a0:	08005235 	.word	0x08005235
 80051a4:	08005235 	.word	0x08005235
 80051a8:	08005235 	.word	0x08005235
 80051ac:	08005235 	.word	0x08005235
 80051b0:	08005235 	.word	0x08005235
 80051b4:	08005227 	.word	0x08005227
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d037      	beq.n	800522c <UART_SetConfig+0x6bc>
 80051bc:	e03a      	b.n	8005234 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80051be:	f7fe fbdb 	bl	8003978 <HAL_RCCEx_GetD3PCLK1Freq>
 80051c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051c4:	e03c      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fbea 	bl	80039a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051d4:	e034      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d6:	f107 0318 	add.w	r3, r7, #24
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fd36 	bl	8003c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051e4:	e02c      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e6:	4b09      	ldr	r3, [pc, #36]	@ (800520c <UART_SetConfig+0x69c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <UART_SetConfig+0x69c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	08db      	lsrs	r3, r3, #3
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	4a07      	ldr	r2, [pc, #28]	@ (800521c <UART_SetConfig+0x6ac>)
 80051fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005204:	e01c      	b.n	8005240 <UART_SetConfig+0x6d0>
 8005206:	bf00      	nop
 8005208:	40011400 	.word	0x40011400
 800520c:	58024400 	.word	0x58024400
 8005210:	40007800 	.word	0x40007800
 8005214:	40007c00 	.word	0x40007c00
 8005218:	58000c00 	.word	0x58000c00
 800521c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005220:	4b9d      	ldr	r3, [pc, #628]	@ (8005498 <UART_SetConfig+0x928>)
 8005222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005224:	e00c      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005226:	4b9d      	ldr	r3, [pc, #628]	@ (800549c <UART_SetConfig+0x92c>)
 8005228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800522a:	e009      	b.n	8005240 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005232:	e005      	b.n	8005240 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800523e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 81de 	beq.w	8005604 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	4a94      	ldr	r2, [pc, #592]	@ (80054a0 <UART_SetConfig+0x930>)
 800524e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005252:	461a      	mov	r2, r3
 8005254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005256:	fbb3 f3f2 	udiv	r3, r3, r2
 800525a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4413      	add	r3, r2
 8005266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005268:	429a      	cmp	r2, r3
 800526a:	d305      	bcc.n	8005278 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005274:	429a      	cmp	r2, r3
 8005276:	d903      	bls.n	8005280 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800527e:	e1c1      	b.n	8005604 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005282:	2200      	movs	r2, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	60fa      	str	r2, [r7, #12]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	4a84      	ldr	r2, [pc, #528]	@ (80054a0 <UART_SetConfig+0x930>)
 800528e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005292:	b29b      	uxth	r3, r3
 8005294:	2200      	movs	r2, #0
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052a2:	f7fb f819 	bl	80002d8 <__aeabi_uldivmod>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	020b      	lsls	r3, r1, #8
 80052b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052bc:	0202      	lsls	r2, r0, #8
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	6849      	ldr	r1, [r1, #4]
 80052c2:	0849      	lsrs	r1, r1, #1
 80052c4:	2000      	movs	r0, #0
 80052c6:	460c      	mov	r4, r1
 80052c8:	4605      	mov	r5, r0
 80052ca:	eb12 0804 	adds.w	r8, r2, r4
 80052ce:	eb43 0905 	adc.w	r9, r3, r5
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	469a      	mov	sl, r3
 80052da:	4693      	mov	fp, r2
 80052dc:	4652      	mov	r2, sl
 80052de:	465b      	mov	r3, fp
 80052e0:	4640      	mov	r0, r8
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fa fff8 	bl	80002d8 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4613      	mov	r3, r2
 80052ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052f6:	d308      	bcc.n	800530a <UART_SetConfig+0x79a>
 80052f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052fe:	d204      	bcs.n	800530a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005306:	60da      	str	r2, [r3, #12]
 8005308:	e17c      	b.n	8005604 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005310:	e178      	b.n	8005604 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800531a:	f040 80c5 	bne.w	80054a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800531e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005322:	2b20      	cmp	r3, #32
 8005324:	dc48      	bgt.n	80053b8 <UART_SetConfig+0x848>
 8005326:	2b00      	cmp	r3, #0
 8005328:	db7b      	blt.n	8005422 <UART_SetConfig+0x8b2>
 800532a:	2b20      	cmp	r3, #32
 800532c:	d879      	bhi.n	8005422 <UART_SetConfig+0x8b2>
 800532e:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0x7c4>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	080053bf 	.word	0x080053bf
 8005338:	080053c7 	.word	0x080053c7
 800533c:	08005423 	.word	0x08005423
 8005340:	08005423 	.word	0x08005423
 8005344:	080053cf 	.word	0x080053cf
 8005348:	08005423 	.word	0x08005423
 800534c:	08005423 	.word	0x08005423
 8005350:	08005423 	.word	0x08005423
 8005354:	080053df 	.word	0x080053df
 8005358:	08005423 	.word	0x08005423
 800535c:	08005423 	.word	0x08005423
 8005360:	08005423 	.word	0x08005423
 8005364:	08005423 	.word	0x08005423
 8005368:	08005423 	.word	0x08005423
 800536c:	08005423 	.word	0x08005423
 8005370:	08005423 	.word	0x08005423
 8005374:	080053ef 	.word	0x080053ef
 8005378:	08005423 	.word	0x08005423
 800537c:	08005423 	.word	0x08005423
 8005380:	08005423 	.word	0x08005423
 8005384:	08005423 	.word	0x08005423
 8005388:	08005423 	.word	0x08005423
 800538c:	08005423 	.word	0x08005423
 8005390:	08005423 	.word	0x08005423
 8005394:	08005423 	.word	0x08005423
 8005398:	08005423 	.word	0x08005423
 800539c:	08005423 	.word	0x08005423
 80053a0:	08005423 	.word	0x08005423
 80053a4:	08005423 	.word	0x08005423
 80053a8:	08005423 	.word	0x08005423
 80053ac:	08005423 	.word	0x08005423
 80053b0:	08005423 	.word	0x08005423
 80053b4:	08005415 	.word	0x08005415
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d02e      	beq.n	800541a <UART_SetConfig+0x8aa>
 80053bc:	e031      	b.n	8005422 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053be:	f7fd f865 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 80053c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053c4:	e033      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c6:	f7fd f877 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 80053ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053cc:	e02f      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fae6 	bl	80039a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053dc:	e027      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053de:	f107 0318 	add.w	r3, r7, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fc32 	bl	8003c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053ec:	e01f      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ee:	4b2d      	ldr	r3, [pc, #180]	@ (80054a4 <UART_SetConfig+0x934>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053fa:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <UART_SetConfig+0x934>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	4a24      	ldr	r2, [pc, #144]	@ (8005498 <UART_SetConfig+0x928>)
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800540c:	e00f      	b.n	800542e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800540e:	4b22      	ldr	r3, [pc, #136]	@ (8005498 <UART_SetConfig+0x928>)
 8005410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005412:	e00c      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005414:	4b21      	ldr	r3, [pc, #132]	@ (800549c <UART_SetConfig+0x92c>)
 8005416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005418:	e009      	b.n	800542e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800542c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800542e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80e7 	beq.w	8005604 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	4a19      	ldr	r2, [pc, #100]	@ (80054a0 <UART_SetConfig+0x930>)
 800543c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005440:	461a      	mov	r2, r3
 8005442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005444:	fbb3 f3f2 	udiv	r3, r3, r2
 8005448:	005a      	lsls	r2, r3, #1
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	441a      	add	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	2b0f      	cmp	r3, #15
 8005460:	d916      	bls.n	8005490 <UART_SetConfig+0x920>
 8005462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005468:	d212      	bcs.n	8005490 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546c:	b29b      	uxth	r3, r3
 800546e:	f023 030f 	bic.w	r3, r3, #15
 8005472:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	b29b      	uxth	r3, r3
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	b29a      	uxth	r2, r3
 8005480:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005482:	4313      	orrs	r3, r2
 8005484:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	e0b9      	b.n	8005604 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005496:	e0b5      	b.n	8005604 <UART_SetConfig+0xa94>
 8005498:	03d09000 	.word	0x03d09000
 800549c:	003d0900 	.word	0x003d0900
 80054a0:	08005d14 	.word	0x08005d14
 80054a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80054a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	dc49      	bgt.n	8005544 <UART_SetConfig+0x9d4>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db7c      	blt.n	80055ae <UART_SetConfig+0xa3e>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d87a      	bhi.n	80055ae <UART_SetConfig+0xa3e>
 80054b8:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0x950>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	0800554b 	.word	0x0800554b
 80054c4:	08005553 	.word	0x08005553
 80054c8:	080055af 	.word	0x080055af
 80054cc:	080055af 	.word	0x080055af
 80054d0:	0800555b 	.word	0x0800555b
 80054d4:	080055af 	.word	0x080055af
 80054d8:	080055af 	.word	0x080055af
 80054dc:	080055af 	.word	0x080055af
 80054e0:	0800556b 	.word	0x0800556b
 80054e4:	080055af 	.word	0x080055af
 80054e8:	080055af 	.word	0x080055af
 80054ec:	080055af 	.word	0x080055af
 80054f0:	080055af 	.word	0x080055af
 80054f4:	080055af 	.word	0x080055af
 80054f8:	080055af 	.word	0x080055af
 80054fc:	080055af 	.word	0x080055af
 8005500:	0800557b 	.word	0x0800557b
 8005504:	080055af 	.word	0x080055af
 8005508:	080055af 	.word	0x080055af
 800550c:	080055af 	.word	0x080055af
 8005510:	080055af 	.word	0x080055af
 8005514:	080055af 	.word	0x080055af
 8005518:	080055af 	.word	0x080055af
 800551c:	080055af 	.word	0x080055af
 8005520:	080055af 	.word	0x080055af
 8005524:	080055af 	.word	0x080055af
 8005528:	080055af 	.word	0x080055af
 800552c:	080055af 	.word	0x080055af
 8005530:	080055af 	.word	0x080055af
 8005534:	080055af 	.word	0x080055af
 8005538:	080055af 	.word	0x080055af
 800553c:	080055af 	.word	0x080055af
 8005540:	080055a1 	.word	0x080055a1
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	d02e      	beq.n	80055a6 <UART_SetConfig+0xa36>
 8005548:	e031      	b.n	80055ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800554a:	f7fc ff9f 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 800554e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005550:	e033      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005552:	f7fc ffb1 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 8005556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005558:	e02f      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fa20 	bl	80039a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005568:	e027      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556a:	f107 0318 	add.w	r3, r7, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7fe fb6c 	bl	8003c4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005578:	e01f      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800557a:	4b2d      	ldr	r3, [pc, #180]	@ (8005630 <UART_SetConfig+0xac0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005586:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <UART_SetConfig+0xac0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	4a28      	ldr	r2, [pc, #160]	@ (8005634 <UART_SetConfig+0xac4>)
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005598:	e00f      	b.n	80055ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800559a:	4b26      	ldr	r3, [pc, #152]	@ (8005634 <UART_SetConfig+0xac4>)
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800559e:	e00c      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055a0:	4b25      	ldr	r3, [pc, #148]	@ (8005638 <UART_SetConfig+0xac8>)
 80055a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055a4:	e009      	b.n	80055ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ac:	e005      	b.n	80055ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055b8:	bf00      	nop
    }

    if (pclk != 0U)
 80055ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d021      	beq.n	8005604 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <UART_SetConfig+0xacc>)
 80055c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	441a      	add	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e6:	2b0f      	cmp	r3, #15
 80055e8:	d909      	bls.n	80055fe <UART_SetConfig+0xa8e>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f0:	d205      	bcs.n	80055fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e002      	b.n	8005604 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2201      	movs	r2, #1
 8005608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2201      	movs	r2, #1
 8005610:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005620:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005624:	4618      	mov	r0, r3
 8005626:	3748      	adds	r7, #72	@ 0x48
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562e:	bf00      	nop
 8005630:	58024400 	.word	0x58024400
 8005634:	03d09000 	.word	0x03d09000
 8005638:	003d0900 	.word	0x003d0900
 800563c:	08005d14 	.word	0x08005d14

08005640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800573e:	d10a      	bne.n	8005756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b098      	sub	sp, #96	@ 0x60
 8005788:	af02      	add	r7, sp, #8
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005794:	f7fb fb68 	bl	8000e68 <HAL_GetTick>
 8005798:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d12f      	bne.n	8005808 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b0:	2200      	movs	r2, #0
 80057b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f88e 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d022      	beq.n	8005808 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e6      	bne.n	80057c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e063      	b.n	80058d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d149      	bne.n	80058aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005816:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800581e:	2200      	movs	r2, #0
 8005820:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f857 	bl	80058d8 <UART_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d03c      	beq.n	80058aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	623b      	str	r3, [r7, #32]
   return(result);
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800584e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005850:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	60fb      	str	r3, [r7, #12]
   return(result);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005882:	61fa      	str	r2, [r7, #28]
 8005884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	617b      	str	r3, [r7, #20]
   return(result);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e012      	b.n	80058d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3758      	adds	r7, #88	@ 0x58
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e8:	e04f      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d04b      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f2:	f7fb fab9 	bl	8000e68 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <UART_WaitOnFlagUntilTimeout+0x30>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e04e      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d037      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b80      	cmp	r3, #128	@ 0x80
 800591e:	d034      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b40      	cmp	r3, #64	@ 0x40
 8005924:	d031      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b08      	cmp	r3, #8
 8005932:	d110      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2208      	movs	r2, #8
 800593a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f839 	bl	80059b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2208      	movs	r2, #8
 8005946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e029      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005964:	d111      	bne.n	800598a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800596e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f81f 	bl	80059b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e00f      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d0a0      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b095      	sub	sp, #84	@ 0x54
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059da:	643b      	str	r3, [r7, #64]	@ 0x40
 80059dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e6      	bne.n	80059bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3308      	adds	r3, #8
 80059f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	4b1e      	ldr	r3, [pc, #120]	@ (8005a7c <UART_EndRxTransfer+0xc8>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e5      	bne.n	80059ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d118      	bne.n	8005a5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f023 0310 	bic.w	r3, r3, #16
 8005a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6979      	ldr	r1, [r7, #20]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	613b      	str	r3, [r7, #16]
   return(result);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e6      	bne.n	8005a2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a70:	bf00      	nop
 8005a72:	3754      	adds	r7, #84	@ 0x54
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	effffffe 	.word	0xeffffffe

08005a80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e027      	b.n	8005ae6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2224      	movs	r2, #36	@ 0x24
 8005aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ac4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e02d      	b.n	8005b66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2224      	movs	r2, #36	@ 0x24
 8005b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0201 	bic.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f850 	bl	8005bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e02d      	b.n	8005be2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2224      	movs	r2, #36	@ 0x24
 8005b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f812 	bl	8005bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c0c:	e031      	b.n	8005c72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c0e:	2310      	movs	r3, #16
 8005c10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c12:	2310      	movs	r3, #16
 8005c14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	0e5b      	lsrs	r3, r3, #25
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	0f5b      	lsrs	r3, r3, #29
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	7b3a      	ldrb	r2, [r7, #12]
 8005c3a:	4911      	ldr	r1, [pc, #68]	@ (8005c80 <UARTEx_SetNbDataToProcess+0x94>)
 8005c3c:	5c8a      	ldrb	r2, [r1, r2]
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c42:	7b3a      	ldrb	r2, [r7, #12]
 8005c44:	490f      	ldr	r1, [pc, #60]	@ (8005c84 <UARTEx_SetNbDataToProcess+0x98>)
 8005c46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c48:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	7b7a      	ldrb	r2, [r7, #13]
 8005c58:	4909      	ldr	r1, [pc, #36]	@ (8005c80 <UARTEx_SetNbDataToProcess+0x94>)
 8005c5a:	5c8a      	ldrb	r2, [r1, r2]
 8005c5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c60:	7b7a      	ldrb	r2, [r7, #13]
 8005c62:	4908      	ldr	r1, [pc, #32]	@ (8005c84 <UARTEx_SetNbDataToProcess+0x98>)
 8005c64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c66:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	08005d2c 	.word	0x08005d2c
 8005c84:	08005d34 	.word	0x08005d34

08005c88 <memset>:
 8005c88:	4402      	add	r2, r0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memset+0xa>
 8005c90:	4770      	bx	lr
 8005c92:	f803 1b01 	strb.w	r1, [r3], #1
 8005c96:	e7f9      	b.n	8005c8c <memset+0x4>

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd0 <__libc_init_array+0x38>)
 8005c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd4 <__libc_init_array+0x3c>)
 8005c9e:	1b64      	subs	r4, r4, r5
 8005ca0:	10a4      	asrs	r4, r4, #2
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8005cd8 <__libc_init_array+0x40>)
 8005caa:	4c0c      	ldr	r4, [pc, #48]	@ (8005cdc <__libc_init_array+0x44>)
 8005cac:	f000 f818 	bl	8005ce0 <_init>
 8005cb0:	1b64      	subs	r4, r4, r5
 8005cb2:	10a4      	asrs	r4, r4, #2
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08005d44 	.word	0x08005d44
 8005cd4:	08005d44 	.word	0x08005d44
 8005cd8:	08005d44 	.word	0x08005d44
 8005cdc:	08005d48 	.word	0x08005d48

08005ce0 <_init>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	bf00      	nop
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr

08005cec <_fini>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr
