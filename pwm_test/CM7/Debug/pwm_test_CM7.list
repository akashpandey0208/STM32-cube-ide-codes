
pwm_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000951c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080097bc  080097bc  0000a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800984c  0800984c  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  0800984c  0800984c  0000a84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009854  08009854  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009854  08009854  0000a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009858  08009858  0000a858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  24000000  0800985c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  24000060  080098bc  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000328  080098bc  0000b328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001946e  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a80  00000000  00000000  000244fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00026f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001032  00000000  00000000  00028440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041d34  00000000  00000000  00029472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2f5  00000000  00000000  0006b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b5549  00000000  00000000  0008549b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023a9e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f24  00000000  00000000  0023aa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0024094c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080097a4 	.word	0x080097a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	080097a4 	.word	0x080097a4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b48      	ldr	r3, [pc, #288]	@ (80008dc <main+0x130>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f000 fabd 	bl	8000d54 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fcb3 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f88f 	bl	8000900 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b3e      	ldr	r3, [pc, #248]	@ (80008dc <main+0x130>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a3c      	ldr	r2, [pc, #240]	@ (80008dc <main+0x130>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b3a      	ldr	r3, [pc, #232]	@ (80008dc <main+0x130>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f002 fcf1 	bl	80031e8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f002 fd07 	bl	800321c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b31      	ldr	r3, [pc, #196]	@ (80008dc <main+0x130>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f000 fa8f 	bl	8000d54 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 fa3d 	bl	8000cb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800083a:	f000 f8db 	bl	80009f4 <MX_ADC1_Init>
  MX_TIM8_Init();
 800083e:	f000 f95d 	bl	8000afc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000842:	f000 f9eb 	bl	8000c1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2 );
 8000846:	2104      	movs	r1, #4
 8000848:	4825      	ldr	r0, [pc, #148]	@ (80008e0 <main+0x134>)
 800084a:	f006 fad1 	bl	8006df0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800084e:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <main+0x138>)
 8000850:	f001 f924 	bl	8001a9c <HAL_ADC_Start>

	  	     if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000854:	2164      	movs	r1, #100	@ 0x64
 8000856:	4823      	ldr	r0, [pc, #140]	@ (80008e4 <main+0x138>)
 8000858:	f001 fa1e 	bl	8001c98 <HAL_ADC_PollForConversion>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f5      	bne.n	800084e <main+0xa2>
	  	         adcValue = HAL_ADC_GetValue(&hadc1);
 8000862:	4820      	ldr	r0, [pc, #128]	@ (80008e4 <main+0x138>)
 8000864:	f001 fb0c 	bl	8001e80 <HAL_ADC_GetValue>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <main+0x13c>)
 800086e:	801a      	strh	r2, [r3, #0]
//	  	       dutyCycle = (adcValue *(htim8.Init.Period+1) ) / 65535;
	  	         dutyCycle = (adcValue * 65535)/65535;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <main+0x13c>)
 8000872:	881a      	ldrh	r2, [r3, #0]
 8000874:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <main+0x140>)
 8000876:	801a      	strh	r2, [r3, #0]

	  	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, adcValue);
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <main+0x13c>)
 800087a:	881a      	ldrh	r2, [r3, #0]
 800087c:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <main+0x134>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	639a      	str	r2, [r3, #56]	@ 0x38

	  	     sprintf(uart_buffer,"adcValue : %u\r\n",adcValue);
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <main+0x13c>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	4919      	ldr	r1, [pc, #100]	@ (80008f0 <main+0x144>)
 800088a:	481a      	ldr	r0, [pc, #104]	@ (80008f4 <main+0x148>)
 800088c:	f008 faea 	bl	8008e64 <siprintf>
	  	     HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000890:	4818      	ldr	r0, [pc, #96]	@ (80008f4 <main+0x148>)
 8000892:	f7ff fd25 	bl	80002e0 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29a      	uxth	r2, r3
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	4915      	ldr	r1, [pc, #84]	@ (80008f4 <main+0x148>)
 80008a0:	4815      	ldr	r0, [pc, #84]	@ (80008f8 <main+0x14c>)
 80008a2:	f007 f9c5 	bl	8007c30 <HAL_UART_Transmit>
	  sprintf(uart_buffer,"DutyCycle : %u\r\n",dutyCycle);
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <main+0x140>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4913      	ldr	r1, [pc, #76]	@ (80008fc <main+0x150>)
 80008ae:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <main+0x148>)
 80008b0:	f008 fad8 	bl	8008e64 <siprintf>
	  	  	     HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <main+0x148>)
 80008b6:	f7ff fd13 	bl	80002e0 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	490c      	ldr	r1, [pc, #48]	@ (80008f4 <main+0x148>)
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <main+0x14c>)
 80008c6:	f007 f9b3 	bl	8007c30 <HAL_UART_Transmit>
	  	  	 HAL_ADC_Stop(&hadc1);
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <main+0x138>)
 80008cc:	f001 f9b0 	bl	8001c30 <HAL_ADC_Stop>
	  	  	     HAL_Delay(2000);
 80008d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008d4:	f000 fcc8 	bl	8001268 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80008d8:	e7b9      	b.n	800084e <main+0xa2>
 80008da:	bf00      	nop
 80008dc:	58024400 	.word	0x58024400
 80008e0:	240000e0 	.word	0x240000e0
 80008e4:	2400007c 	.word	0x2400007c
 80008e8:	240001c0 	.word	0x240001c0
 80008ec:	240001c2 	.word	0x240001c2
 80008f0:	080097bc 	.word	0x080097bc
 80008f4:	240001c4 	.word	0x240001c4
 80008f8:	2400012c 	.word	0x2400012c
 80008fc:	080097cc 	.word	0x080097cc

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	@ 0x70
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090a:	224c      	movs	r2, #76	@ 0x4c
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fac8 	bl	8008ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2220      	movs	r2, #32
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f008 fac2 	bl	8008ea4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000920:	2004      	movs	r0, #4
 8000922:	f002 fc8f 	bl	8003244 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b30      	ldr	r3, [pc, #192]	@ (80009ec <SystemClock_Config+0xec>)
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	4a2f      	ldr	r2, [pc, #188]	@ (80009ec <SystemClock_Config+0xec>)
 8000930:	f023 0301 	bic.w	r3, r3, #1
 8000934:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000936:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <SystemClock_Config+0xec>)
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	4b2b      	ldr	r3, [pc, #172]	@ (80009f0 <SystemClock_Config+0xf0>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a2a      	ldr	r2, [pc, #168]	@ (80009f0 <SystemClock_Config+0xf0>)
 8000946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <SystemClock_Config+0xf0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000958:	bf00      	nop
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <SystemClock_Config+0xf0>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000966:	d1f8      	bne.n	800095a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000968:	2301      	movs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800097a:	2305      	movs	r3, #5
 800097c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800097e:	23a0      	movs	r3, #160	@ 0xa0
 8000980:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000986:	2305      	movs	r3, #5
 8000988:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800098e:	2308      	movs	r3, #8
 8000990:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000992:	2300      	movs	r3, #0
 8000994:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fcaa 	bl	80032f8 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009aa:	f000 f9d3 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	233f      	movs	r3, #63	@ 0x3f
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2303      	movs	r3, #3
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ba:	2308      	movs	r3, #8
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c2:	2340      	movs	r3, #64	@ 0x40
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2102      	movs	r1, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 f8e9 	bl	8003bac <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009e0:	f000 f9b8 	bl	8000d54 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3770      	adds	r7, #112	@ 0x70
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024800 	.word	0x58024800

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a18:	4b35      	ldr	r3, [pc, #212]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a1a:	4a36      	ldr	r2, [pc, #216]	@ (8000af4 <MX_ADC1_Init+0x100>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a24:	4b32      	ldr	r3, [pc, #200]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a2a:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a48:	4b29      	ldr	r3, [pc, #164]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a54:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a5a:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a6e:	4820      	ldr	r0, [pc, #128]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a70:	f000 fe72 	bl	8001758 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a7a:	f000 f96b 	bl	8000d54 <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a86:	2208      	movs	r2, #8
 8000a88:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a8a:	4819      	ldr	r0, [pc, #100]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000a8c:	f000 fe64 	bl	8001758 <HAL_ADC_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a96:	f000 f95d 	bl	8000d54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4812      	ldr	r0, [pc, #72]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000aa6:	f002 f82d 	bl	8002b04 <HAL_ADCEx_MultiModeConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000ab0:	f000 f950 	bl	8000d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_ADC1_Init+0x104>)
 8000ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000abc:	2307      	movs	r3, #7
 8000abe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ac4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <MX_ADC1_Init+0xfc>)
 8000ad8:	f001 f9e0 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8000ae2:	f000 f937 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	@ 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2400007c 	.word	0x2400007c
 8000af4:	40022000 	.word	0x40022000
 8000af8:	04300002 	.word	0x04300002

08000afc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b096      	sub	sp, #88	@ 0x58
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	222c      	movs	r2, #44	@ 0x2c
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f008 f9bb 	bl	8008ea4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b2e:	4b39      	ldr	r3, [pc, #228]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b30:	4a39      	ldr	r2, [pc, #228]	@ (8000c18 <MX_TIM8_Init+0x11c>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000b34:	4b37      	ldr	r3, [pc, #220]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b36      	ldr	r3, [pc, #216]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000b40:	4b34      	ldr	r3, [pc, #208]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b46:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b32      	ldr	r3, [pc, #200]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b4e:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b5a:	482e      	ldr	r0, [pc, #184]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b5c:	f006 f8f0 	bl	8006d40 <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 f8f5 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b76:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4825      	ldr	r0, [pc, #148]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000b7e:	f006 fefb 	bl	8007978 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000b88:	f000 f8e4 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8c:	2360      	movs	r3, #96	@ 0x60
 8000b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bac:	2204      	movs	r2, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4818      	ldr	r0, [pc, #96]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000bb2:	f006 fa2b 	bl	800700c <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bbc:	f000 f8ca 	bl	8000d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000bf6:	f006 ff4d 	bl	8007a94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000c00:	f000 f8a8 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c04:	4803      	ldr	r0, [pc, #12]	@ (8000c14 <MX_TIM8_Init+0x118>)
 8000c06:	f000 f947 	bl	8000e98 <HAL_TIM_MspPostInit>

}
 8000c0a:	bf00      	nop
 8000c0c:	3758      	adds	r7, #88	@ 0x58
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	240000e0 	.word	0x240000e0
 8000c18:	40010400 	.word	0x40010400

08000c1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c20:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c22:	4a23      	ldr	r2, [pc, #140]	@ (8000cb0 <MX_USART1_UART_Init+0x94>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c26:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c64:	4811      	ldr	r0, [pc, #68]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c66:	f006 ff93 	bl	8007b90 <HAL_UART_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c70:	f000 f870 	bl	8000d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	480d      	ldr	r0, [pc, #52]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c78:	f008 f829 	bl	8008cce <HAL_UARTEx_SetTxFifoThreshold>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f000 f867 	bl	8000d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4808      	ldr	r0, [pc, #32]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c8a:	f008 f85e 	bl	8008d4a <HAL_UARTEx_SetRxFifoThreshold>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c94:	f000 f85e 	bl	8000d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_USART1_UART_Init+0x90>)
 8000c9a:	f007 ffdf 	bl	8008c5c <HAL_UARTEx_DisableFifoMode>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f000 f856 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2400012c 	.word	0x2400012c
 8000cb0:	40011000 	.word	0x40011000

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 030c 	add.w	r3, r7, #12
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cca:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	4a17      	ldr	r2, [pc, #92]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d16:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_GPIO_Init+0x98>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d34:	2303      	movs	r3, #3
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_GPIO_Init+0x9c>)
 8000d40:	f002 f8a2 	bl	8002e88 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d44:	bf00      	nop
 8000d46:	3720      	adds	r7, #32
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58022400 	.word	0x58022400

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <Error_Handler+0x8>

08000d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_MspInit+0x30>)
 8000d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d6c:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_MspInit+0x30>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b6      	sub	sp, #216	@ 0xd8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	22c8      	movs	r2, #200	@ 0xc8
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f008 f87d 	bl	8008ea4 <memset>
  if(hadc->Instance==ADC1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a27      	ldr	r2, [pc, #156]	@ (8000e4c <HAL_ADC_MspInit+0xb8>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d146      	bne.n	8000e42 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000db4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dd4:	23c0      	movs	r3, #192	@ 0xc0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fa6a 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000df6:	f7ff ffad 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_ADC_MspInit+0xbc>)
 8000dfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e00:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <HAL_ADC_MspInit+0xbc>)
 8000e02:	f043 0320 	orr.w	r3, r3, #32
 8000e06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_ADC_MspInit+0xbc>)
 8000e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <HAL_ADC_MspInit+0xbc>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e50 <HAL_ADC_MspInit+0xbc>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <HAL_ADC_MspInit+0xbc>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000e36:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000e3a:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000e3e:	f000 fa43 	bl	80012c8 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e42:	bf00      	nop
 8000e44:	37d8      	adds	r7, #216	@ 0xd8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	58024400 	.word	0x58024400

08000e54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10e      	bne.n	8000e84 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x40>)
 8000e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e6c:	4a09      	ldr	r2, [pc, #36]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x40>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x40>)
 8000e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40010400 	.word	0x40010400
 8000e94:	58024400 	.word	0x58024400

08000e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a22      	ldr	r2, [pc, #136]	@ (8000f40 <HAL_TIM_MspPostInit+0xa8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d13d      	bne.n	8000f36 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000eba:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <HAL_TIM_MspPostInit+0xac>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	4a20      	ldr	r2, [pc, #128]	@ (8000f44 <HAL_TIM_MspPostInit+0xac>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <HAL_TIM_MspPostInit+0xac>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <HAL_TIM_MspPostInit+0xac>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	4a19      	ldr	r2, [pc, #100]	@ (8000f44 <HAL_TIM_MspPostInit+0xac>)
 8000ee0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <HAL_TIM_MspPostInit+0xac>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PI6     ------> TIM8_CH2
    PJ7     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ef6:	2340      	movs	r3, #64	@ 0x40
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f06:	2303      	movs	r3, #3
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <HAL_TIM_MspPostInit+0xb0>)
 8000f12:	f001 ffb9 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f26:	2303      	movs	r3, #3
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <HAL_TIM_MspPostInit+0xb4>)
 8000f32:	f001 ffa9 	bl	8002e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	@ 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40010400 	.word	0x40010400
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58022000 	.word	0x58022000
 8000f4c:	58022400 	.word	0x58022400

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b0bc      	sub	sp, #240	@ 0xf0
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	22c8      	movs	r2, #200	@ 0xc8
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 ff97 	bl	8008ea4 <memset>
  if(huart->Instance==USART1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a27      	ldr	r2, [pc, #156]	@ (8001018 <HAL_UART_MspInit+0xc8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d146      	bne.n	800100e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f80:	f04f 0201 	mov.w	r2, #1
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 f994 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fa2:	f7ff fed7 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fac:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_UART_MspInit+0xcc>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000fe2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <HAL_UART_MspInit+0xd0>)
 800100a:	f001 ff3d 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800100e:	bf00      	nop
 8001010:	37f0      	adds	r7, #240	@ 0xf0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40011000 	.word	0x40011000
 800101c:	58024400 	.word	0x58024400
 8001020:	58020000 	.word	0x58020000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <MemManage_Handler+0x4>

0800103c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <UsageFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 f8d5 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	@ (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f007 fefe 	bl	8008eb4 <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	@ (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24080000 	.word	0x24080000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	240001d8 	.word	0x240001d8
 80010ec:	24000328 	.word	0x24000328

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001128 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f4:	f7ff fac4 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f007 fecf 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff fb43 	bl	80007ac <main>
  bx  lr
 8001126:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800112c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001130:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001134:	0800985c 	.word	0x0800985c
  ldr r2, =_sbss
 8001138:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 800113c:	24000328 	.word	0x24000328

08001140 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC3_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114a:	2003      	movs	r0, #3
 800114c:	f001 fe6a 	bl	8002e24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001150:	f002 fee2 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8001154:	4602      	mov	r2, r0
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	4913      	ldr	r1, [pc, #76]	@ (80011b0 <HAL_Init+0x6c>)
 8001162:	5ccb      	ldrb	r3, [r1, r3]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_Init+0x68>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <HAL_Init+0x6c>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
 800117a:	f003 031f 	and.w	r3, r3, #31
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_Init+0x70>)
 8001186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001188:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <HAL_Init+0x74>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f814 	bl	80011bc <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e002      	b.n	80011a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800119e:	f7ff fddf 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	58024400 	.word	0x58024400
 80011b0:	080097e0 	.word	0x080097e0
 80011b4:	24000004 	.word	0x24000004
 80011b8:	24000000 	.word	0x24000000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_InitTick+0x60>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e021      	b.n	8001214 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_InitTick+0x64>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_InitTick+0x60>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fe41 	bl	8002e6e <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00e      	b.n	8001214 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d80a      	bhi.n	8001212 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f001 fe19 	bl	8002e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001208:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_InitTick+0x68>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2400000c 	.word	0x2400000c
 8001220:	24000000 	.word	0x24000000
 8001224:	24000008 	.word	0x24000008

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2400000c 	.word	0x2400000c
 800124c:	240001dc 	.word	0x240001dc

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	240001dc 	.word	0x240001dc

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2400000c 	.word	0x2400000c

080012b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <HAL_GetREVID+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0c1b      	lsrs	r3, r3, #16
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	5c001000 	.word	0x5c001000

080012c8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	43db      	mvns	r3, r3
 80012da:	401a      	ands	r2, r3
 80012dc:	4904      	ldr	r1, [pc, #16]	@ (80012f0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	58000400 	.word	0x58000400

080012f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	609a      	str	r2, [r3, #8]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3360      	adds	r3, #96	@ 0x60
 800136e:	461a      	mov	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	430b      	orrs	r3, r1
 800138a:	431a      	orrs	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	611a      	str	r2, [r3, #16]
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3360      	adds	r3, #96	@ 0x60
 80013de:	461a      	mov	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	601a      	str	r2, [r3, #0]
  }
}
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800142a:	b480      	push	{r7}
 800142c:	b087      	sub	sp, #28
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3330      	adds	r3, #48	@ 0x30
 800143a:	461a      	mov	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	4413      	add	r3, r2
 8001448:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	211f      	movs	r1, #31
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	401a      	ands	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	0e9b      	lsrs	r3, r3, #26
 8001462:	f003 011f 	and.w	r1, r3, #31
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	431a      	orrs	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001476:	bf00      	nop
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001482:	b480      	push	{r7}
 8001484:	b087      	sub	sp, #28
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3314      	adds	r3, #20
 8001492:	461a      	mov	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	0e5b      	lsrs	r3, r3, #25
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	4413      	add	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	0d1b      	lsrs	r3, r3, #20
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	2107      	movs	r1, #7
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	0d1b      	lsrs	r3, r3, #20
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	431a      	orrs	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0318 	and.w	r3, r3, #24
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <LL_ADC_SetChannelSingleDiff+0x44>)
 80014fc:	40d9      	lsrs	r1, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	400b      	ands	r3, r1
 8001502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001506:	431a      	orrs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	000fffff 	.word	0x000fffff

08001520 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 031f 	and.w	r3, r3, #31
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001566:	4013      	ands	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6093      	str	r3, [r2, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	5fffffc0 	.word	0x5fffffc0

0800157c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800158c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001590:	d101      	bne.n	8001596 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	6fffffc0 	.word	0x6fffffc0

080015cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <LL_ADC_Enable+0x24>)
 8001602:	4013      	ands	r3, r2
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	7fffffc0 	.word	0x7fffffc0

0800161c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <LL_ADC_Disable+0x24>)
 800162a:	4013      	ands	r3, r2
 800162c:	f043 0202 	orr.w	r2, r3, #2
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	7fffffc0 	.word	0x7fffffc0

08001644 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <LL_ADC_IsEnabled+0x18>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <LL_ADC_IsEnabled+0x1a>
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsDisableOngoing+0x18>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsDisableOngoing+0x1a>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <LL_ADC_REG_StartConversion+0x24>)
 800169e:	4013      	ands	r3, r2
 80016a0:	f043 0204 	orr.w	r2, r3, #4
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	7fffffc0 	.word	0x7fffffc0

080016b8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <LL_ADC_REG_StopConversion+0x24>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	f043 0210 	orr.w	r2, r3, #16
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	7fffffc0 	.word	0x7fffffc0

080016e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d101      	bne.n	80016f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <LL_ADC_INJ_StopConversion+0x24>)
 8001716:	4013      	ands	r3, r2
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	7fffffc0 	.word	0x7fffffc0

08001730 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b08      	cmp	r3, #8
 8001742:	d101      	bne.n	8001748 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e18f      	b.n	8001a92 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800177c:	2b00      	cmp	r3, #0
 800177e:	d109      	bne.n	8001794 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fb07 	bl	8000d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff feef 	bl	800157c <LL_ADC_IsDeepPowerDownEnabled>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fed5 	bl	8001558 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff0a 	bl	80015cc <LL_ADC_IsInternalRegulatorEnabled>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d114      	bne.n	80017e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff feee 	bl	80015a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017c8:	4b87      	ldr	r3, [pc, #540]	@ (80019e8 <HAL_ADC_Init+0x290>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	4a87      	ldr	r2, [pc, #540]	@ (80019ec <HAL_ADC_Init+0x294>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	3301      	adds	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017da:	e002      	b.n	80017e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	3b01      	subs	r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f9      	bne.n	80017dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff feed 	bl	80015cc <LL_ADC_IsInternalRegulatorEnabled>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10d      	bne.n	8001814 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fc:	f043 0210 	orr.w	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff61 	bl	80016e0 <LL_ADC_REG_IsConversionOngoing>
 800181e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 8129 	bne.w	8001a80 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 8125 	bne.w	8001a80 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800183e:	f043 0202 	orr.w	r2, r3, #2
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fefa 	bl	8001644 <LL_ADC_IsEnabled>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d136      	bne.n	80018c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a65      	ldr	r2, [pc, #404]	@ (80019f0 <HAL_ADC_Init+0x298>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d004      	beq.n	800186a <HAL_ADC_Init+0x112>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a63      	ldr	r2, [pc, #396]	@ (80019f4 <HAL_ADC_Init+0x29c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10e      	bne.n	8001888 <HAL_ADC_Init+0x130>
 800186a:	4861      	ldr	r0, [pc, #388]	@ (80019f0 <HAL_ADC_Init+0x298>)
 800186c:	f7ff feea 	bl	8001644 <LL_ADC_IsEnabled>
 8001870:	4604      	mov	r4, r0
 8001872:	4860      	ldr	r0, [pc, #384]	@ (80019f4 <HAL_ADC_Init+0x29c>)
 8001874:	f7ff fee6 	bl	8001644 <LL_ADC_IsEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	4323      	orrs	r3, r4
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e008      	b.n	800189a <HAL_ADC_Init+0x142>
 8001888:	485b      	ldr	r0, [pc, #364]	@ (80019f8 <HAL_ADC_Init+0x2a0>)
 800188a:	f7ff fedb 	bl	8001644 <LL_ADC_IsEnabled>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d012      	beq.n	80018c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a53      	ldr	r2, [pc, #332]	@ (80019f0 <HAL_ADC_Init+0x298>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d004      	beq.n	80018b2 <HAL_ADC_Init+0x15a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a51      	ldr	r2, [pc, #324]	@ (80019f4 <HAL_ADC_Init+0x29c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x15e>
 80018b2:	4a52      	ldr	r2, [pc, #328]	@ (80019fc <HAL_ADC_Init+0x2a4>)
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_Init+0x160>
 80018b6:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_ADC_Init+0x2a8>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4619      	mov	r1, r3
 80018be:	4610      	mov	r0, r2
 80018c0:	f7ff fd18 	bl	80012f4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80018c4:	f7ff fcf4 	bl	80012b0 <HAL_GetREVID>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d914      	bls.n	80018fc <HAL_ADC_Init+0x1a4>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d110      	bne.n	80018fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7d5b      	ldrb	r3, [r3, #21]
 80018de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80018ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7f1b      	ldrb	r3, [r3, #28]
 80018f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80018f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018f4:	f043 030c 	orr.w	r3, r3, #12
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	e00d      	b.n	8001918 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7d5b      	ldrb	r3, [r3, #21]
 8001900:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001906:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800190c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7f1b      	ldrb	r3, [r3, #28]
 8001912:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7f1b      	ldrb	r3, [r3, #28]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d106      	bne.n	800192e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	3b01      	subs	r3, #1
 8001926:	045b      	lsls	r3, r3, #17
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001942:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <HAL_ADC_Init+0x2ac>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	69b9      	ldr	r1, [r7, #24]
 800195a:	430b      	orrs	r3, r1
 800195c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff febc 	bl	80016e0 <LL_ADC_REG_IsConversionOngoing>
 8001968:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fede 	bl	8001730 <LL_ADC_INJ_IsConversionOngoing>
 8001974:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d15f      	bne.n	8001a3c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d15c      	bne.n	8001a3c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <HAL_ADC_Init+0x2b0>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d130      	bne.n	8001a10 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_ADC_Init+0x2b4>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019c2:	3a01      	subs	r2, #1
 80019c4:	0411      	lsls	r1, r2, #16
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019d6:	430a      	orrs	r2, r1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	e01c      	b.n	8001a20 <HAL_ADC_Init+0x2c8>
 80019e6:	bf00      	nop
 80019e8:	24000000 	.word	0x24000000
 80019ec:	053e2d63 	.word	0x053e2d63
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40022100 	.word	0x40022100
 80019f8:	58026000 	.word	0x58026000
 80019fc:	40022300 	.word	0x40022300
 8001a00:	58026300 	.word	0x58026300
 8001a04:	fff0c003 	.word	0xfff0c003
 8001a08:	ffffbffc 	.word	0xffffbffc
 8001a0c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0201 	bic.w	r2, r2, #1
 8001a1e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 ff32 	bl	80028a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10c      	bne.n	8001a5e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f023 010f 	bic.w	r1, r3, #15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	1e5a      	subs	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a5c:	e007      	b.n	8001a6e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020f 	bic.w	r2, r2, #15
 8001a6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a7e:	e007      	b.n	8001a90 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	@ 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop

08001a9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5c      	ldr	r2, [pc, #368]	@ (8001c1c <HAL_ADC_Start+0x180>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d004      	beq.n	8001ab8 <HAL_ADC_Start+0x1c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8001c20 <HAL_ADC_Start+0x184>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_Start+0x20>
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c24 <HAL_ADC_Start+0x188>)
 8001aba:	e000      	b.n	8001abe <HAL_ADC_Start+0x22>
 8001abc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <HAL_ADC_Start+0x18c>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fd2e 	bl	8001520 <LL_ADC_GetMultimode>
 8001ac4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fe08 	bl	80016e0 <LL_ADC_REG_IsConversionOngoing>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 809a 	bne.w	8001c0c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Start+0x4a>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e095      	b.n	8001c12 <HAL_ADC_Start+0x176>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fdec 	bl	80026cc <ADC_Enable>
 8001af4:	4603      	mov	r3, r0
 8001af6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 8081 	bne.w	8001c02 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b04:	4b49      	ldr	r3, [pc, #292]	@ (8001c2c <HAL_ADC_Start+0x190>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a42      	ldr	r2, [pc, #264]	@ (8001c20 <HAL_ADC_Start+0x184>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d002      	beq.n	8001b20 <HAL_ADC_Start+0x84>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	e000      	b.n	8001b22 <HAL_ADC_Start+0x86>
 8001b20:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <HAL_ADC_Start+0x180>)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d002      	beq.n	8001b30 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	f023 0206 	bic.w	r2, r3, #6
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b56:	e002      	b.n	8001b5e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	221c      	movs	r2, #28
 8001b64:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_ADC_Start+0x184>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d002      	beq.n	8001b7e <HAL_ADC_Start+0xe2>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_Start+0xe4>
 8001b7e:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <HAL_ADC_Start+0x180>)
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d008      	beq.n	8001b9a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d002      	beq.n	8001b9a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b09      	cmp	r3, #9
 8001b98:	d114      	bne.n	8001bc4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fd67 	bl	8001690 <LL_ADC_REG_StartConversion>
 8001bc2:	e025      	b.n	8001c10 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <HAL_ADC_Start+0x184>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d002      	beq.n	8001be0 <HAL_ADC_Start+0x144>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_Start+0x146>
 8001be0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <HAL_ADC_Start+0x180>)
 8001be2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00f      	beq.n	8001c10 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bf8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c00:	e006      	b.n	8001c10 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001c0a:	e001      	b.n	8001c10 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	40022100 	.word	0x40022100
 8001c24:	40022300 	.word	0x40022300
 8001c28:	58026300 	.word	0x58026300
 8001c2c:	fffff0fe 	.word	0xfffff0fe

08001c30 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Stop+0x16>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e021      	b.n	8001c8a <HAL_ADC_Stop+0x5a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001c4e:	2103      	movs	r1, #3
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fc7f 	bl	8002554 <ADC_ConversionStop>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fdbd 	bl	80027e0 <ADC_Disable>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001c74:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <HAL_ADC_Stop+0x64>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	ffffeefe 	.word	0xffffeefe

08001c98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a72      	ldr	r2, [pc, #456]	@ (8001e70 <HAL_ADC_PollForConversion+0x1d8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_PollForConversion+0x1e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a70      	ldr	r2, [pc, #448]	@ (8001e74 <HAL_ADC_PollForConversion+0x1dc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_PollForConversion+0x22>
 8001cb6:	4b70      	ldr	r3, [pc, #448]	@ (8001e78 <HAL_ADC_PollForConversion+0x1e0>)
 8001cb8:	e000      	b.n	8001cbc <HAL_ADC_PollForConversion+0x24>
 8001cba:	4b70      	ldr	r3, [pc, #448]	@ (8001e7c <HAL_ADC_PollForConversion+0x1e4>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fc2f 	bl	8001520 <LL_ADC_GetMultimode>
 8001cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d102      	bne.n	8001cd2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	e037      	b.n	8001d42 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d002      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d111      	bne.n	8001d08 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf6:	f043 0220 	orr.w	r2, r3, #32
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0b1      	b.n	8001e66 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d02:	2304      	movs	r3, #4
 8001d04:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d06:	e01c      	b.n	8001d42 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a58      	ldr	r2, [pc, #352]	@ (8001e70 <HAL_ADC_PollForConversion+0x1d8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_ADC_PollForConversion+0x84>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a57      	ldr	r2, [pc, #348]	@ (8001e74 <HAL_ADC_PollForConversion+0x1dc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_PollForConversion+0x88>
 8001d1c:	4b56      	ldr	r3, [pc, #344]	@ (8001e78 <HAL_ADC_PollForConversion+0x1e0>)
 8001d1e:	e000      	b.n	8001d22 <HAL_ADC_PollForConversion+0x8a>
 8001d20:	4b56      	ldr	r3, [pc, #344]	@ (8001e7c <HAL_ADC_PollForConversion+0x1e4>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fc0a 	bl	800153c <LL_ADC_GetMultiDMATransfer>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d32:	f043 0220 	orr.w	r2, r3, #32
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e093      	b.n	8001e66 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d3e:	2304      	movs	r3, #4
 8001d40:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d42:	f7ff fa85 	bl	8001250 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d48:	e021      	b.n	8001d8e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d01d      	beq.n	8001d8e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d52:	f7ff fa7d 	bl	8001250 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <HAL_ADC_PollForConversion+0xd0>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d112      	bne.n	8001d8e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10b      	bne.n	8001d8e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7a:	f043 0204 	orr.w	r2, r3, #4
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e06b      	b.n	8001e66 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0d6      	beq.n	8001d4a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fb29 	bl	8001404 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01c      	beq.n	8001df2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7d5b      	ldrb	r3, [r3, #21]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d118      	bne.n	8001df2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d111      	bne.n	8001df2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e74 <HAL_ADC_PollForConversion+0x1dc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d002      	beq.n	8001e02 <HAL_ADC_PollForConversion+0x16a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	e000      	b.n	8001e04 <HAL_ADC_PollForConversion+0x16c>
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_ADC_PollForConversion+0x1d8>)
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d008      	beq.n	8001e1e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d002      	beq.n	8001e1e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d104      	bne.n	8001e28 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	e00c      	b.n	8001e42 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <HAL_ADC_PollForConversion+0x1dc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d002      	beq.n	8001e38 <HAL_ADC_PollForConversion+0x1a0>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e000      	b.n	8001e3a <HAL_ADC_PollForConversion+0x1a2>
 8001e38:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <HAL_ADC_PollForConversion+0x1d8>)
 8001e3a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d104      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e008      	b.n	8001e64 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d103      	bne.n	8001e64 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	220c      	movs	r2, #12
 8001e62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40022100 	.word	0x40022100
 8001e78:	40022300 	.word	0x40022300
 8001e7c:	58026300 	.word	0x58026300

08001e80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b0a1      	sub	sp, #132	@ 0x84
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_ADC_ConfigChannel+0x1b0>)
 8001eb6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x2a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e32e      	b.n	8002524 <HAL_ADC_ConfigChannel+0x688>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc04 	bl	80016e0 <LL_ADC_REG_IsConversionOngoing>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8313 	bne.w	8002506 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db2c      	blt.n	8001f42 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d108      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x6a>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2201      	movs	r2, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	e016      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x98>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f16:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e003      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2201      	movs	r2, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	69d1      	ldr	r1, [r2, #28]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff fa6b 	bl	800142a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fbc1 	bl	80016e0 <LL_ADC_REG_IsConversionOngoing>
 8001f5e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fbe3 	bl	8001730 <LL_ADC_INJ_IsConversionOngoing>
 8001f6a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80b8 	bne.w	80020e4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 80b4 	bne.w	80020e4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f7ff fa7a 	bl	8001482 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f8e:	4b30      	ldr	r3, [pc, #192]	@ (8002050 <HAL_ADC_ConfigChannel+0x1b4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001f96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x118>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	e01d      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x154>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x13e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	e00a      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x154>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d02c      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6919      	ldr	r1, [r3, #16]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002008:	f7ff f9a8 	bl	800135c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6919      	ldr	r1, [r3, #16]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	7e5b      	ldrb	r3, [r3, #25]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x186>
 800201c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002020:	e000      	b.n	8002024 <HAL_ADC_ConfigChannel+0x188>
 8002022:	2300      	movs	r3, #0
 8002024:	461a      	mov	r2, r3
 8002026:	f7ff f9d2 	bl	80013ce <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6919      	ldr	r1, [r3, #16]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	7e1b      	ldrb	r3, [r3, #24]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1a4>
 800203a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800203e:	e000      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1a6>
 8002040:	2300      	movs	r3, #0
 8002042:	461a      	mov	r2, r3
 8002044:	f7ff f9aa 	bl	800139c <LL_ADC_SetDataRightShift>
 8002048:	e04c      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x248>
 800204a:	bf00      	nop
 800204c:	47ff0000 	.word	0x47ff0000
 8002050:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	069b      	lsls	r3, r3, #26
 8002064:	429a      	cmp	r2, r3
 8002066:	d107      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002076:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800207e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	429a      	cmp	r2, r3
 800208a:	d107      	bne.n	800209c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800209a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	069b      	lsls	r3, r3, #26
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d107      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020be:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	069b      	lsls	r3, r3, #26
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020e2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff faab 	bl	8001644 <LL_ADC_IsEnabled>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 8211 	bne.w	8002518 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	461a      	mov	r2, r3
 8002104:	f7ff f9e8 	bl	80014d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4aa1      	ldr	r2, [pc, #644]	@ (8002394 <HAL_ADC_ConfigChannel+0x4f8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	f040 812e 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_ADC_ConfigChannel+0x2a0>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0e9b      	lsrs	r3, r3, #26
 800212a:	3301      	adds	r3, #1
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2b09      	cmp	r3, #9
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e019      	b.n	8002170 <HAL_ADC_ConfigChannel+0x2d4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800214a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800214e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2b09      	cmp	r3, #9
 8002168:	bf94      	ite	ls
 800216a:	2301      	movls	r3, #1
 800216c:	2300      	movhi	r3, #0
 800216e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002170:	2b00      	cmp	r3, #0
 8002172:	d079      	beq.n	8002268 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x2f4>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0e9b      	lsrs	r3, r3, #26
 8002186:	3301      	adds	r3, #1
 8002188:	069b      	lsls	r3, r3, #26
 800218a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800218e:	e015      	b.n	80021bc <HAL_ADC_ConfigChannel+0x320>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800219e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80021a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80021ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	069b      	lsls	r3, r3, #26
 80021b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x340>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	3301      	adds	r3, #1
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	e017      	b.n	800220c <HAL_ADC_ConfigChannel+0x370>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80021ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80021ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80021f4:	2320      	movs	r3, #32
 80021f6:	e003      	b.n	8002200 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80021f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	3301      	adds	r3, #1
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	ea42 0103 	orr.w	r1, r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x396>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	3301      	adds	r3, #1
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	051b      	lsls	r3, r3, #20
 8002230:	e018      	b.n	8002264 <HAL_ADC_ConfigChannel+0x3c8>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002242:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e003      	b.n	8002256 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800224e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002264:	430b      	orrs	r3, r1
 8002266:	e07e      	b.n	8002366 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x3e8>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	3301      	adds	r3, #1
 800227c:	069b      	lsls	r3, r3, #26
 800227e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002282:	e015      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x414>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800229c:	2320      	movs	r3, #32
 800229e:	e003      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80022a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	069b      	lsls	r3, r3, #26
 80022ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x434>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0e9b      	lsrs	r3, r3, #26
 80022c2:	3301      	adds	r3, #1
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	e017      	b.n	8002300 <HAL_ADC_ConfigChannel+0x464>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	61bb      	str	r3, [r7, #24]
  return result;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	ea42 0103 	orr.w	r1, r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_ADC_ConfigChannel+0x490>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	3b1e      	subs	r3, #30
 8002324:	051b      	lsls	r3, r3, #20
 8002326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800232a:	e01b      	b.n	8002364 <HAL_ADC_ConfigChannel+0x4c8>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	60fb      	str	r3, [r7, #12]
  return result;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	051b      	lsls	r3, r3, #20
 8002360:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002364:	430b      	orrs	r3, r1
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	6892      	ldr	r2, [r2, #8]
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff f889 	bl	8001482 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f280 80cf 	bge.w	8002518 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a06      	ldr	r2, [pc, #24]	@ (8002398 <HAL_ADC_ConfigChannel+0x4fc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_ADC_ConfigChannel+0x4f2>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <HAL_ADC_ConfigChannel+0x500>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10a      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x508>
 800238e:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <HAL_ADC_ConfigChannel+0x504>)
 8002390:	e009      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x50a>
 8002392:	bf00      	nop
 8002394:	47ff0000 	.word	0x47ff0000
 8002398:	40022000 	.word	0x40022000
 800239c:	40022100 	.word	0x40022100
 80023a0:	40022300 	.word	0x40022300
 80023a4:	4b61      	ldr	r3, [pc, #388]	@ (800252c <HAL_ADC_ConfigChannel+0x690>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe ffca 	bl	8001340 <LL_ADC_GetCommonPathInternalCh>
 80023ac:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002530 <HAL_ADC_ConfigChannel+0x694>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d004      	beq.n	80023c2 <HAL_ADC_ConfigChannel+0x526>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_ADC_ConfigChannel+0x698>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x544>
 80023c2:	485b      	ldr	r0, [pc, #364]	@ (8002530 <HAL_ADC_ConfigChannel+0x694>)
 80023c4:	f7ff f93e 	bl	8001644 <LL_ADC_IsEnabled>
 80023c8:	4604      	mov	r4, r0
 80023ca:	485a      	ldr	r0, [pc, #360]	@ (8002534 <HAL_ADC_ConfigChannel+0x698>)
 80023cc:	f7ff f93a 	bl	8001644 <LL_ADC_IsEnabled>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4323      	orrs	r3, r4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	e008      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x556>
 80023e0:	4855      	ldr	r0, [pc, #340]	@ (8002538 <HAL_ADC_ConfigChannel+0x69c>)
 80023e2:	f7ff f92f 	bl	8001644 <LL_ADC_IsEnabled>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07d      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a50      	ldr	r2, [pc, #320]	@ (800253c <HAL_ADC_ConfigChannel+0x6a0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d130      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x5c6>
 8002400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d12b      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a4a      	ldr	r2, [pc, #296]	@ (8002538 <HAL_ADC_ConfigChannel+0x69c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	f040 8081 	bne.w	8002518 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a45      	ldr	r2, [pc, #276]	@ (8002530 <HAL_ADC_ConfigChannel+0x694>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_ADC_ConfigChannel+0x58e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a43      	ldr	r2, [pc, #268]	@ (8002534 <HAL_ADC_ConfigChannel+0x698>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x592>
 800242a:	4a45      	ldr	r2, [pc, #276]	@ (8002540 <HAL_ADC_ConfigChannel+0x6a4>)
 800242c:	e000      	b.n	8002430 <HAL_ADC_ConfigChannel+0x594>
 800242e:	4a3f      	ldr	r2, [pc, #252]	@ (800252c <HAL_ADC_ConfigChannel+0x690>)
 8002430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002432:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002436:	4619      	mov	r1, r3
 8002438:	4610      	mov	r0, r2
 800243a:	f7fe ff6e 	bl	800131a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800243e:	4b41      	ldr	r3, [pc, #260]	@ (8002544 <HAL_ADC_ConfigChannel+0x6a8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	4a40      	ldr	r2, [pc, #256]	@ (8002548 <HAL_ADC_ConfigChannel+0x6ac>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	3301      	adds	r3, #1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002452:	e002      	b.n	800245a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3b01      	subs	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002460:	e05a      	b.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a39      	ldr	r2, [pc, #228]	@ (800254c <HAL_ADC_ConfigChannel+0x6b0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d11e      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x60e>
 800246c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800246e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d119      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a2f      	ldr	r2, [pc, #188]	@ (8002538 <HAL_ADC_ConfigChannel+0x69c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d14b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2a      	ldr	r2, [pc, #168]	@ (8002530 <HAL_ADC_ConfigChannel+0x694>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x5f8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a29      	ldr	r2, [pc, #164]	@ (8002534 <HAL_ADC_ConfigChannel+0x698>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x5fc>
 8002494:	4a2a      	ldr	r2, [pc, #168]	@ (8002540 <HAL_ADC_ConfigChannel+0x6a4>)
 8002496:	e000      	b.n	800249a <HAL_ADC_ConfigChannel+0x5fe>
 8002498:	4a24      	ldr	r2, [pc, #144]	@ (800252c <HAL_ADC_ConfigChannel+0x690>)
 800249a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800249c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7fe ff39 	bl	800131a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a8:	e036      	b.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_ADC_ConfigChannel+0x6b4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d131      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
 80024b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d12c      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_ADC_ConfigChannel+0x69c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d127      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a18      	ldr	r2, [pc, #96]	@ (8002530 <HAL_ADC_ConfigChannel+0x694>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x640>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <HAL_ADC_ConfigChannel+0x698>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x644>
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_ADC_ConfigChannel+0x6a4>)
 80024de:	e000      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x646>
 80024e0:	4a12      	ldr	r2, [pc, #72]	@ (800252c <HAL_ADC_ConfigChannel+0x690>)
 80024e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7fe ff15 	bl	800131a <LL_ADC_SetCommonPathInternalCh>
 80024f0:	e012      	b.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	f043 0220 	orr.w	r2, r3, #32
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002504:	e008      	b.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250a:	f043 0220 	orr.w	r2, r3, #32
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002520:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002524:	4618      	mov	r0, r3
 8002526:	3784      	adds	r7, #132	@ 0x84
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	58026300 	.word	0x58026300
 8002530:	40022000 	.word	0x40022000
 8002534:	40022100 	.word	0x40022100
 8002538:	58026000 	.word	0x58026000
 800253c:	cb840000 	.word	0xcb840000
 8002540:	40022300 	.word	0x40022300
 8002544:	24000000 	.word	0x24000000
 8002548:	053e2d63 	.word	0x053e2d63
 800254c:	c7520000 	.word	0xc7520000
 8002550:	cfb80000 	.word	0xcfb80000

08002554 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f8b8 	bl	80016e0 <LL_ADC_REG_IsConversionOngoing>
 8002570:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f8da 	bl	8001730 <LL_ADC_INJ_IsConversionOngoing>
 800257c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8098 	beq.w	80026bc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d02a      	beq.n	80025f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7d5b      	ldrb	r3, [r3, #21]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d126      	bne.n	80025f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7d1b      	ldrb	r3, [r3, #20]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d122      	bne.n	80025f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025ae:	e014      	b.n	80025da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4a45      	ldr	r2, [pc, #276]	@ (80026c8 <ADC_ConversionStop+0x174>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d90d      	bls.n	80025d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025bc:	f043 0210 	orr.w	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e074      	b.n	80026be <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3301      	adds	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e4:	2b40      	cmp	r3, #64	@ 0x40
 80025e6:	d1e3      	bne.n	80025b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2240      	movs	r2, #64	@ 0x40
 80025ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d014      	beq.n	8002620 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f870 	bl	80016e0 <LL_ADC_REG_IsConversionOngoing>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f82d 	bl	800166a <LL_ADC_IsDisableOngoing>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d104      	bne.n	8002620 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f84c 	bl	80016b8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d014      	beq.n	8002650 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f880 	bl	8001730 <LL_ADC_INJ_IsConversionOngoing>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f815 	bl	800166a <LL_ADC_IsDisableOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f85c 	bl	8001708 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d005      	beq.n	8002662 <ADC_ConversionStop+0x10e>
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d105      	bne.n	8002668 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800265c:	230c      	movs	r3, #12
 800265e:	617b      	str	r3, [r7, #20]
        break;
 8002660:	e005      	b.n	800266e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002662:	2308      	movs	r3, #8
 8002664:	617b      	str	r3, [r7, #20]
        break;
 8002666:	e002      	b.n	800266e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002668:	2304      	movs	r3, #4
 800266a:	617b      	str	r3, [r7, #20]
        break;
 800266c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800266e:	f7fe fdef 	bl	8001250 <HAL_GetTick>
 8002672:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002674:	e01b      	b.n	80026ae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002676:	f7fe fdeb 	bl	8001250 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b05      	cmp	r3, #5
 8002682:	d914      	bls.n	80026ae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e007      	b.n	80026be <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1dc      	bne.n	8002676 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	000cdbff 	.word	0x000cdbff

080026cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe ffb3 	bl	8001644 <LL_ADC_IsEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d16e      	bne.n	80027c2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <ADC_Enable+0x100>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e05a      	b.n	80027c4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe ff6e 	bl	80015f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002718:	f7fe fd9a 	bl	8001250 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2b      	ldr	r2, [pc, #172]	@ (80027d0 <ADC_Enable+0x104>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <ADC_Enable+0x66>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a29      	ldr	r2, [pc, #164]	@ (80027d4 <ADC_Enable+0x108>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <ADC_Enable+0x6a>
 8002732:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <ADC_Enable+0x10c>)
 8002734:	e000      	b.n	8002738 <ADC_Enable+0x6c>
 8002736:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <ADC_Enable+0x110>)
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fef1 	bl	8001520 <LL_ADC_GetMultimode>
 800273e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	@ (80027d4 <ADC_Enable+0x108>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d002      	beq.n	8002750 <ADC_Enable+0x84>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e000      	b.n	8002752 <ADC_Enable+0x86>
 8002750:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <ADC_Enable+0x104>)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	4293      	cmp	r3, r2
 8002758:	d02c      	beq.n	80027b4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d130      	bne.n	80027c2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002760:	e028      	b.n	80027b4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe ff6c 	bl	8001644 <LL_ADC_IsEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe ff3c 	bl	80015f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800277c:	f7fe fd68 	bl	8001250 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d914      	bls.n	80027b4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d00d      	beq.n	80027b4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279c:	f043 0210 	orr.w	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e007      	b.n	80027c4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d1cf      	bne.n	8002762 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	8000003f 	.word	0x8000003f
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40022100 	.word	0x40022100
 80027d8:	40022300 	.word	0x40022300
 80027dc:	58026300 	.word	0x58026300

080027e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe ff3c 	bl	800166a <LL_ADC_IsDisableOngoing>
 80027f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe ff23 	bl	8001644 <LL_ADC_IsEnabled>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d047      	beq.n	8002894 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d144      	bne.n	8002894 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030d 	and.w	r3, r3, #13
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fefd 	bl	800161c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2203      	movs	r2, #3
 8002828:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800282a:	f7fe fd11 	bl	8001250 <HAL_GetTick>
 800282e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002830:	e029      	b.n	8002886 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	f043 0210 	orr.w	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e023      	b.n	8002896 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800284e:	f7fe fcff 	bl	8001250 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d914      	bls.n	8002886 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	f043 0210 	orr.w	r2, r3, #16
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1dc      	bne.n	800284e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a7a      	ldr	r2, [pc, #488]	@ (8002a98 <ADC_ConfigureBoostMode+0x1f8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <ADC_ConfigureBoostMode+0x1c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a79      	ldr	r2, [pc, #484]	@ (8002a9c <ADC_ConfigureBoostMode+0x1fc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d109      	bne.n	80028d0 <ADC_ConfigureBoostMode+0x30>
 80028bc:	4b78      	ldr	r3, [pc, #480]	@ (8002aa0 <ADC_ConfigureBoostMode+0x200>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e008      	b.n	80028e2 <ADC_ConfigureBoostMode+0x42>
 80028d0:	4b74      	ldr	r3, [pc, #464]	@ (8002aa4 <ADC_ConfigureBoostMode+0x204>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01c      	beq.n	8002920 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028e6:	f001 fc91 	bl	800420c <HAL_RCC_GetHCLKFreq>
 80028ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028f4:	d010      	beq.n	8002918 <ADC_ConfigureBoostMode+0x78>
 80028f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028fa:	d873      	bhi.n	80029e4 <ADC_ConfigureBoostMode+0x144>
 80028fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002900:	d002      	beq.n	8002908 <ADC_ConfigureBoostMode+0x68>
 8002902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002906:	d16d      	bne.n	80029e4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	60fb      	str	r3, [r7, #12]
        break;
 8002916:	e068      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
        break;
 800291e:	e064      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002920:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002924:	f04f 0100 	mov.w	r1, #0
 8002928:	f002 ff16 	bl	8005758 <HAL_RCCEx_GetPeriphCLKFreq>
 800292c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002936:	d051      	beq.n	80029dc <ADC_ConfigureBoostMode+0x13c>
 8002938:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800293c:	d854      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 800293e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002942:	d047      	beq.n	80029d4 <ADC_ConfigureBoostMode+0x134>
 8002944:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002948:	d84e      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 800294a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800294e:	d03d      	beq.n	80029cc <ADC_ConfigureBoostMode+0x12c>
 8002950:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002954:	d848      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 8002956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800295a:	d033      	beq.n	80029c4 <ADC_ConfigureBoostMode+0x124>
 800295c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002960:	d842      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 8002962:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002966:	d029      	beq.n	80029bc <ADC_ConfigureBoostMode+0x11c>
 8002968:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800296c:	d83c      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 800296e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002972:	d01a      	beq.n	80029aa <ADC_ConfigureBoostMode+0x10a>
 8002974:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002978:	d836      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 800297a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800297e:	d014      	beq.n	80029aa <ADC_ConfigureBoostMode+0x10a>
 8002980:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002984:	d830      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 8002986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800298a:	d00e      	beq.n	80029aa <ADC_ConfigureBoostMode+0x10a>
 800298c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002990:	d82a      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 8002992:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002996:	d008      	beq.n	80029aa <ADC_ConfigureBoostMode+0x10a>
 8002998:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800299c:	d824      	bhi.n	80029e8 <ADC_ConfigureBoostMode+0x148>
 800299e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029a2:	d002      	beq.n	80029aa <ADC_ConfigureBoostMode+0x10a>
 80029a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029a8:	d11e      	bne.n	80029e8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0c9b      	lsrs	r3, r3, #18
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	60fb      	str	r3, [r7, #12]
        break;
 80029ba:	e016      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]
        break;
 80029c2:	e012      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	60fb      	str	r3, [r7, #12]
        break;
 80029ca:	e00e      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	60fb      	str	r3, [r7, #12]
        break;
 80029d2:	e00a      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	09db      	lsrs	r3, r3, #7
 80029d8:	60fb      	str	r3, [r7, #12]
        break;
 80029da:	e006      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	60fb      	str	r3, [r7, #12]
        break;
 80029e2:	e002      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
        break;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80029e8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80029ea:	f7fe fc61 	bl	80012b0 <HAL_GetREVID>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d815      	bhi.n	8002a24 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa8 <ADC_ConfigureBoostMode+0x208>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d908      	bls.n	8002a12 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a0e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a10:	e03e      	b.n	8002a90 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	e035      	b.n	8002a90 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002aac <ADC_ConfigureBoostMode+0x20c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d808      	bhi.n	8002a44 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002a40:	609a      	str	r2, [r3, #8]
}
 8002a42:	e025      	b.n	8002a90 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <ADC_ConfigureBoostMode+0x210>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d80a      	bhi.n	8002a62 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	e016      	b.n	8002a90 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <ADC_ConfigureBoostMode+0x214>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d80a      	bhi.n	8002a80 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a7c:	609a      	str	r2, [r3, #8]
}
 8002a7e:	e007      	b.n	8002a90 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022100 	.word	0x40022100
 8002aa0:	40022300 	.word	0x40022300
 8002aa4:	58026300 	.word	0x58026300
 8002aa8:	01312d00 	.word	0x01312d00
 8002aac:	005f5e10 	.word	0x005f5e10
 8002ab0:	00bebc20 	.word	0x00bebc20
 8002ab4:	017d7840 	.word	0x017d7840

08002ab8 <LL_ADC_IsEnabled>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <LL_ADC_IsEnabled+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_ADC_IsEnabled+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_IsConversionOngoing>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b09f      	sub	sp, #124	@ 0x7c
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0be      	b.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d102      	bne.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	e001      	b.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e09d      	b.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ffb9 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8002b6c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffb3 	bl	8002ade <LL_ADC_REG_IsConversionOngoing>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d17f      	bne.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d17c      	bne.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a47      	ldr	r2, [pc, #284]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a46      	ldr	r2, [pc, #280]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d101      	bne.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002b98:	4b45      	ldr	r3, [pc, #276]	@ (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002b9a:	e000      	b.n	8002b9e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002b9c:	4b45      	ldr	r3, [pc, #276]	@ (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d039      	beq.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a38      	ldr	r2, [pc, #224]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10e      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002bce:	4836      	ldr	r0, [pc, #216]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bd0:	f7ff ff72 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	4835      	ldr	r0, [pc, #212]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bd8:	f7ff ff6e 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4323      	orrs	r3, r4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	e008      	b.n	8002bfe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002bec:	4832      	ldr	r0, [pc, #200]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002bee:	f7ff ff63 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d047      	beq.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	6811      	ldr	r1, [r2, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	431a      	orrs	r2, r3
 8002c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c18:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1a:	e03a      	b.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c26:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1d      	ldr	r2, [pc, #116]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10e      	bne.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002c3c:	481a      	ldr	r0, [pc, #104]	@ (8002ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c3e:	f7ff ff3b 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002c42:	4604      	mov	r4, r0
 8002c44:	4819      	ldr	r0, [pc, #100]	@ (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c46:	f7ff ff37 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4323      	orrs	r3, r4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e008      	b.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c5a:	4817      	ldr	r0, [pc, #92]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c5c:	f7ff ff2c 	bl	8002ab8 <LL_ADC_IsEnabled>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c7a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7c:	e009      	b.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c90:	e000      	b.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c92:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c9c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	377c      	adds	r7, #124	@ 0x7c
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd90      	pop	{r4, r7, pc}
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	40022100 	.word	0x40022100
 8002cb0:	40022300 	.word	0x40022300
 8002cb4:	58026300 	.word	0x58026300
 8002cb8:	58026000 	.word	0x58026000
 8002cbc:	fffff0e0 	.word	0xfffff0e0

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	05fa0000 	.word	0x05fa0000

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	@ (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	@ (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	@ (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df0:	d301      	bcc.n	8002df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00f      	b.n	8002e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <SysTick_Config+0x40>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfe:	210f      	movs	r1, #15
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	f7ff ff8e 	bl	8002d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <SysTick_Config+0x40>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <SysTick_Config+0x40>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010

08002e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff47 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e48:	f7ff ff5e 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff ff90 	bl	8002d78 <NVIC_EncodePriority>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff5f 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ffb2 	bl	8002de0 <SysTick_Config>
 8002e7c:	4603      	mov	r3, r0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	@ 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e96:	4b89      	ldr	r3, [pc, #548]	@ (80030bc <HAL_GPIO_Init+0x234>)
 8002e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e9a:	e194      	b.n	80031c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8186 	beq.w	80031c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d005      	beq.n	8002ecc <HAL_GPIO_Init+0x44>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d130      	bne.n	8002f2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f02:	2201      	movs	r2, #1
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 0201 	and.w	r2, r3, #1
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d017      	beq.n	8002f6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d123      	bne.n	8002fbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	08da      	lsrs	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3208      	adds	r2, #8
 8002f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	08da      	lsrs	r2, r3, #3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3208      	adds	r2, #8
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0203 	and.w	r2, r3, #3
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80e0 	beq.w	80031c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003000:	4b2f      	ldr	r3, [pc, #188]	@ (80030c0 <HAL_GPIO_Init+0x238>)
 8003002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003006:	4a2e      	ldr	r2, [pc, #184]	@ (80030c0 <HAL_GPIO_Init+0x238>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <HAL_GPIO_Init+0x238>)
 8003012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800301e:	4a29      	ldr	r2, [pc, #164]	@ (80030c4 <HAL_GPIO_Init+0x23c>)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	3302      	adds	r3, #2
 8003026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	220f      	movs	r2, #15
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a20      	ldr	r2, [pc, #128]	@ (80030c8 <HAL_GPIO_Init+0x240>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d052      	beq.n	80030f0 <HAL_GPIO_Init+0x268>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <HAL_GPIO_Init+0x244>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d031      	beq.n	80030b6 <HAL_GPIO_Init+0x22e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_GPIO_Init+0x248>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d02b      	beq.n	80030b2 <HAL_GPIO_Init+0x22a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1d      	ldr	r2, [pc, #116]	@ (80030d4 <HAL_GPIO_Init+0x24c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d025      	beq.n	80030ae <HAL_GPIO_Init+0x226>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a1c      	ldr	r2, [pc, #112]	@ (80030d8 <HAL_GPIO_Init+0x250>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01f      	beq.n	80030aa <HAL_GPIO_Init+0x222>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_GPIO_Init+0x254>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d019      	beq.n	80030a6 <HAL_GPIO_Init+0x21e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1a      	ldr	r2, [pc, #104]	@ (80030e0 <HAL_GPIO_Init+0x258>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_GPIO_Init+0x21a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <HAL_GPIO_Init+0x25c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00d      	beq.n	800309e <HAL_GPIO_Init+0x216>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <HAL_GPIO_Init+0x260>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x212>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <HAL_GPIO_Init+0x264>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_GPIO_Init+0x20e>
 8003092:	2309      	movs	r3, #9
 8003094:	e02d      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 8003096:	230a      	movs	r3, #10
 8003098:	e02b      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 800309a:	2308      	movs	r3, #8
 800309c:	e029      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 800309e:	2307      	movs	r3, #7
 80030a0:	e027      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 80030a2:	2306      	movs	r3, #6
 80030a4:	e025      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 80030a6:	2305      	movs	r3, #5
 80030a8:	e023      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 80030aa:	2304      	movs	r3, #4
 80030ac:	e021      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 80030ae:	2303      	movs	r3, #3
 80030b0:	e01f      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e01d      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01b      	b.n	80030f2 <HAL_GPIO_Init+0x26a>
 80030ba:	bf00      	nop
 80030bc:	58000080 	.word	0x58000080
 80030c0:	58024400 	.word	0x58024400
 80030c4:	58000400 	.word	0x58000400
 80030c8:	58020000 	.word	0x58020000
 80030cc:	58020400 	.word	0x58020400
 80030d0:	58020800 	.word	0x58020800
 80030d4:	58020c00 	.word	0x58020c00
 80030d8:	58021000 	.word	0x58021000
 80030dc:	58021400 	.word	0x58021400
 80030e0:	58021800 	.word	0x58021800
 80030e4:	58021c00 	.word	0x58021c00
 80030e8:	58022000 	.word	0x58022000
 80030ec:	58022400 	.word	0x58022400
 80030f0:	2300      	movs	r3, #0
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	f002 0203 	and.w	r2, r2, #3
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	4093      	lsls	r3, r2
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003102:	4938      	ldr	r1, [pc, #224]	@ (80031e4 <HAL_GPIO_Init+0x35c>)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003164:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	3301      	adds	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f ae63 	bne.w	8002e9c <HAL_GPIO_Init+0x14>
  }
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	3724      	adds	r7, #36	@ 0x24
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	58000400 	.word	0x58000400

080031e8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80031f0:	4a08      	ldr	r2, [pc, #32]	@ (8003214 <HAL_HSEM_FastTake+0x2c>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3320      	adds	r3, #32
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	4a07      	ldr	r2, [pc, #28]	@ (8003218 <HAL_HSEM_FastTake+0x30>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	58026400 	.word	0x58026400
 8003218:	80000300 	.word	0x80000300

0800321c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003226:	4906      	ldr	r1, [pc, #24]	@ (8003240 <HAL_HSEM_Release+0x24>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	58026400 	.word	0x58026400

08003244 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800324c:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	2b06      	cmp	r3, #6
 8003256:	d00a      	beq.n	800326e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003258:	4b26      	ldr	r3, [pc, #152]	@ (80032f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e040      	b.n	80032ec <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e03e      	b.n	80032ec <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800326e:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003276:	491f      	ldr	r1, [pc, #124]	@ (80032f4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4313      	orrs	r3, r2
 800327c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800327e:	f7fd ffe7 	bl	8001250 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003284:	e009      	b.n	800329a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003286:	f7fd ffe3 	bl	8001250 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003294:	d901      	bls.n	800329a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e028      	b.n	80032ec <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800329a:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <HAL_PWREx_ConfigSupply+0xb0>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a6:	d1ee      	bne.n	8003286 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b1e      	cmp	r3, #30
 80032ac:	d008      	beq.n	80032c0 <HAL_PWREx_ConfigSupply+0x7c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80032b2:	d005      	beq.n	80032c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b1d      	cmp	r3, #29
 80032b8:	d002      	beq.n	80032c0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b2d      	cmp	r3, #45	@ 0x2d
 80032be:	d114      	bne.n	80032ea <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80032c0:	f7fd ffc6 	bl	8001250 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032c6:	e009      	b.n	80032dc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032c8:	f7fd ffc2 	bl	8001250 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032d6:	d901      	bls.n	80032dc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_PWREx_ConfigSupply+0xb0>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e8:	d1ee      	bne.n	80032c8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	58024800 	.word	0x58024800

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	@ 0x30
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d102      	bne.n	800330c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f000 bc48 	b.w	8003b9c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8088 	beq.w	800342a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b99      	ldr	r3, [pc, #612]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003324:	4b96      	ldr	r3, [pc, #600]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800332a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800332c:	2b10      	cmp	r3, #16
 800332e:	d007      	beq.n	8003340 <HAL_RCC_OscConfig+0x48>
 8003330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003332:	2b18      	cmp	r3, #24
 8003334:	d111      	bne.n	800335a <HAL_RCC_OscConfig+0x62>
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	4b8f      	ldr	r3, [pc, #572]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d06d      	beq.n	8003428 <HAL_RCC_OscConfig+0x130>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d169      	bne.n	8003428 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f000 bc21 	b.w	8003b9c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x7a>
 8003364:	4b86      	ldr	r3, [pc, #536]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a85      	ldr	r2, [pc, #532]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e02e      	b.n	80033d0 <HAL_RCC_OscConfig+0xd8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x9c>
 800337a:	4b81      	ldr	r3, [pc, #516]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a80      	ldr	r2, [pc, #512]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b7e      	ldr	r3, [pc, #504]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7d      	ldr	r2, [pc, #500]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800338c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xd8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0xc0>
 800339e:	4b78      	ldr	r3, [pc, #480]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a77      	ldr	r2, [pc, #476]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b75      	ldr	r3, [pc, #468]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a74      	ldr	r2, [pc, #464]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xd8>
 80033b8:	4b71      	ldr	r3, [pc, #452]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a70      	ldr	r2, [pc, #448]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4b6e      	ldr	r3, [pc, #440]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6d      	ldr	r2, [pc, #436]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd ff3a 	bl	8001250 <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fd ff36 	bl	8001250 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e3d4      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033f2:	4b63      	ldr	r3, [pc, #396]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe8>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd ff26 	bl	8001250 <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fd ff22 	bl	8001250 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	@ 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e3c0      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800341a:	4b59      	ldr	r3, [pc, #356]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x110>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80ca 	beq.w	80035cc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003438:	4b51      	ldr	r3, [pc, #324]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003440:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003442:	4b4f      	ldr	r3, [pc, #316]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_RCC_OscConfig+0x166>
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2b18      	cmp	r3, #24
 8003452:	d156      	bne.n	8003502 <HAL_RCC_OscConfig+0x20a>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d151      	bne.n	8003502 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345e:	4b48      	ldr	r3, [pc, #288]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x17e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e392      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003476:	4b42      	ldr	r3, [pc, #264]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 0219 	bic.w	r2, r3, #25
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	493f      	ldr	r1, [pc, #252]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fd fee2 	bl	8001250 <HAL_GetTick>
 800348c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003490:	f7fd fede 	bl	8001250 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e37c      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a2:	4b37      	ldr	r3, [pc, #220]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	f7fd feff 	bl	80012b0 <HAL_GetREVID>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d817      	bhi.n	80034ec <HAL_RCC_OscConfig+0x1f4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	d108      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1de>
 80034c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d4:	e07a      	b.n	80035cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	031b      	lsls	r3, r3, #12
 80034e4:	4926      	ldr	r1, [pc, #152]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ea:	e06f      	b.n	80035cc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b24      	ldr	r3, [pc, #144]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	4921      	ldr	r1, [pc, #132]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003500:	e064      	b.n	80035cc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d047      	beq.n	800359a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800350a:	4b1d      	ldr	r3, [pc, #116]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 0219 	bic.w	r2, r3, #25
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	491a      	ldr	r1, [pc, #104]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fe98 	bl	8001250 <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003524:	f7fd fe94 	bl	8001250 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e332      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003536:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	f7fd feb5 	bl	80012b0 <HAL_GetREVID>
 8003546:	4603      	mov	r3, r0
 8003548:	f241 0203 	movw	r2, #4099	@ 0x1003
 800354c:	4293      	cmp	r3, r2
 800354e:	d819      	bhi.n	8003584 <HAL_RCC_OscConfig+0x28c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b40      	cmp	r3, #64	@ 0x40
 8003556:	d108      	bne.n	800356a <HAL_RCC_OscConfig+0x272>
 8003558:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003560:	4a07      	ldr	r2, [pc, #28]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003566:	6053      	str	r3, [r2, #4]
 8003568:	e030      	b.n	80035cc <HAL_RCC_OscConfig+0x2d4>
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	031b      	lsls	r3, r3, #12
 8003578:	4901      	ldr	r1, [pc, #4]	@ (8003580 <HAL_RCC_OscConfig+0x288>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
 800357e:	e025      	b.n	80035cc <HAL_RCC_OscConfig+0x2d4>
 8003580:	58024400 	.word	0x58024400
 8003584:	4b9a      	ldr	r3, [pc, #616]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	4997      	ldr	r1, [pc, #604]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
 8003598:	e018      	b.n	80035cc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b95      	ldr	r3, [pc, #596]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a94      	ldr	r2, [pc, #592]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fd fe53 	bl	8001250 <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fd fe4f 	bl	8001250 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e2ed      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035c0:	4b8b      	ldr	r3, [pc, #556]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a9 	beq.w	800372c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035da:	4b85      	ldr	r3, [pc, #532]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035e4:	4b82      	ldr	r3, [pc, #520]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d007      	beq.n	8003600 <HAL_RCC_OscConfig+0x308>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b18      	cmp	r3, #24
 80035f4:	d13a      	bne.n	800366c <HAL_RCC_OscConfig+0x374>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d135      	bne.n	800366c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003600:	4b7b      	ldr	r3, [pc, #492]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_OscConfig+0x320>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	2b80      	cmp	r3, #128	@ 0x80
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e2c1      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003618:	f7fd fe4a 	bl	80012b0 <HAL_GetREVID>
 800361c:	4603      	mov	r3, r0
 800361e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003622:	4293      	cmp	r3, r2
 8003624:	d817      	bhi.n	8003656 <HAL_RCC_OscConfig+0x35e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	2b20      	cmp	r3, #32
 800362c:	d108      	bne.n	8003640 <HAL_RCC_OscConfig+0x348>
 800362e:	4b70      	ldr	r3, [pc, #448]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003636:	4a6e      	ldr	r2, [pc, #440]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003638:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800363c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800363e:	e075      	b.n	800372c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003640:	4b6b      	ldr	r3, [pc, #428]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	069b      	lsls	r3, r3, #26
 800364e:	4968      	ldr	r1, [pc, #416]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003654:	e06a      	b.n	800372c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003656:	4b66      	ldr	r3, [pc, #408]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	061b      	lsls	r3, r3, #24
 8003664:	4962      	ldr	r1, [pc, #392]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800366a:	e05f      	b.n	800372c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d042      	beq.n	80036fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003674:	4b5e      	ldr	r3, [pc, #376]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5d      	ldr	r2, [pc, #372]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 800367a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fd fde6 	bl	8001250 <HAL_GetTick>
 8003684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003688:	f7fd fde2 	bl	8001250 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e280      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800369a:	4b55      	ldr	r3, [pc, #340]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036a6:	f7fd fe03 	bl	80012b0 <HAL_GetREVID>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d817      	bhi.n	80036e4 <HAL_RCC_OscConfig+0x3ec>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d108      	bne.n	80036ce <HAL_RCC_OscConfig+0x3d6>
 80036bc:	4b4c      	ldr	r3, [pc, #304]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80036c4:	4a4a      	ldr	r2, [pc, #296]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80036c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036ca:	6053      	str	r3, [r2, #4]
 80036cc:	e02e      	b.n	800372c <HAL_RCC_OscConfig+0x434>
 80036ce:	4b48      	ldr	r3, [pc, #288]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	069b      	lsls	r3, r3, #26
 80036dc:	4944      	ldr	r1, [pc, #272]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	604b      	str	r3, [r1, #4]
 80036e2:	e023      	b.n	800372c <HAL_RCC_OscConfig+0x434>
 80036e4:	4b42      	ldr	r3, [pc, #264]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	493f      	ldr	r1, [pc, #252]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
 80036f8:	e018      	b.n	800372c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036fa:	4b3d      	ldr	r3, [pc, #244]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3c      	ldr	r2, [pc, #240]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd fda3 	bl	8001250 <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800370e:	f7fd fd9f 	bl	8001250 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e23d      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003720:	4b33      	ldr	r3, [pc, #204]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d036      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d019      	beq.n	8003774 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003740:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003744:	4a2a      	ldr	r2, [pc, #168]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd fd80 	bl	8001250 <HAL_GetTick>
 8003750:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003754:	f7fd fd7c 	bl	8001250 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e21a      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003766:	4b22      	ldr	r3, [pc, #136]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x45c>
 8003772:	e018      	b.n	80037a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003774:	4b1e      	ldr	r3, [pc, #120]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 8003776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003778:	4a1d      	ldr	r2, [pc, #116]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fd66 	bl	8001250 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003788:	f7fd fd62 	bl	8001250 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e200      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800379a:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 800379c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d039      	beq.n	8003826 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037ba:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a0c      	ldr	r2, [pc, #48]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80037c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037c6:	f7fd fd43 	bl	8001250 <HAL_GetTick>
 80037ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ce:	f7fd fd3f 	bl	8001250 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1dd      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <HAL_RCC_OscConfig+0x4f8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x4d6>
 80037ec:	e01b      	b.n	8003826 <HAL_RCC_OscConfig+0x52e>
 80037ee:	bf00      	nop
 80037f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a9a      	ldr	r2, [pc, #616]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80037fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003800:	f7fd fd26 	bl	8001250 <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003808:	f7fd fd22 	bl	8001250 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1c0      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800381a:	4b92      	ldr	r3, [pc, #584]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8081 	beq.w	8003936 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003834:	4b8c      	ldr	r3, [pc, #560]	@ (8003a68 <HAL_RCC_OscConfig+0x770>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a8b      	ldr	r2, [pc, #556]	@ (8003a68 <HAL_RCC_OscConfig+0x770>)
 800383a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003840:	f7fd fd06 	bl	8001250 <HAL_GetTick>
 8003844:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fd fd02 	bl	8001250 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1a0      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800385a:	4b83      	ldr	r3, [pc, #524]	@ (8003a68 <HAL_RCC_OscConfig+0x770>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d106      	bne.n	800387c <HAL_RCC_OscConfig+0x584>
 800386e:	4b7d      	ldr	r3, [pc, #500]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a7c      	ldr	r2, [pc, #496]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	e02d      	b.n	80038d8 <HAL_RCC_OscConfig+0x5e0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10c      	bne.n	800389e <HAL_RCC_OscConfig+0x5a6>
 8003884:	4b77      	ldr	r3, [pc, #476]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003888:	4a76      	ldr	r2, [pc, #472]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003890:	4b74      	ldr	r3, [pc, #464]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003894:	4a73      	ldr	r2, [pc, #460]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003896:	f023 0304 	bic.w	r3, r3, #4
 800389a:	6713      	str	r3, [r2, #112]	@ 0x70
 800389c:	e01c      	b.n	80038d8 <HAL_RCC_OscConfig+0x5e0>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b05      	cmp	r3, #5
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5c8>
 80038a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	f043 0304 	orr.w	r3, r3, #4
 80038b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b6:	4a6b      	ldr	r2, [pc, #428]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0x5e0>
 80038c0:	4b68      	ldr	r3, [pc, #416]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c4:	4a67      	ldr	r2, [pc, #412]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80038cc:	4b65      	ldr	r3, [pc, #404]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d0:	4a64      	ldr	r2, [pc, #400]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80038d2:	f023 0304 	bic.w	r3, r3, #4
 80038d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d015      	beq.n	800390c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fd fcb6 	bl	8001250 <HAL_GetTick>
 80038e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fd fcb2 	bl	8001250 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e14e      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038fe:	4b59      	ldr	r3, [pc, #356]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0ee      	beq.n	80038e8 <HAL_RCC_OscConfig+0x5f0>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fca0 	bl	8001250 <HAL_GetTick>
 8003910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fd fc9c 	bl	8001250 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e138      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800392a:	4b4e      	ldr	r3, [pc, #312]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ee      	bne.n	8003914 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 812d 	beq.w	8003b9a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003940:	4b48      	ldr	r3, [pc, #288]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003948:	2b18      	cmp	r3, #24
 800394a:	f000 80bd 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	2b02      	cmp	r3, #2
 8003954:	f040 809e 	bne.w	8003a94 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003958:	4b42      	ldr	r3, [pc, #264]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a41      	ldr	r2, [pc, #260]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 800395e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd fc74 	bl	8001250 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd fc70 	bl	8001250 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e10e      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800397e:	4b39      	ldr	r3, [pc, #228]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398a:	4b36      	ldr	r3, [pc, #216]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 800398c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800398e:	4b37      	ldr	r3, [pc, #220]	@ (8003a6c <HAL_RCC_OscConfig+0x774>)
 8003990:	4013      	ands	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	430a      	orrs	r2, r1
 800399e:	4931      	ldr	r1, [pc, #196]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	3b01      	subs	r3, #1
 80039aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b2:	3b01      	subs	r3, #1
 80039b4:	025b      	lsls	r3, r3, #9
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039be:	3b01      	subs	r3, #1
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039cc:	3b01      	subs	r3, #1
 80039ce:	061b      	lsls	r3, r3, #24
 80039d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80039d4:	4923      	ldr	r1, [pc, #140]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80039da:	4b22      	ldr	r3, [pc, #136]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	4a21      	ldr	r2, [pc, #132]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80039e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80039e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ea:	4b21      	ldr	r3, [pc, #132]	@ (8003a70 <HAL_RCC_OscConfig+0x778>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80039f2:	00d2      	lsls	r2, r2, #3
 80039f4:	491b      	ldr	r1, [pc, #108]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	4917      	ldr	r1, [pc, #92]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a0c:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	f023 0202 	bic.w	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	4912      	ldr	r1, [pc, #72]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a1e:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a22:	4a10      	ldr	r2, [pc, #64]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a36:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a42:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	4a07      	ldr	r2, [pc, #28]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a04      	ldr	r2, [pc, #16]	@ (8003a64 <HAL_RCC_OscConfig+0x76c>)
 8003a54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fbf9 	bl	8001250 <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a60:	e011      	b.n	8003a86 <HAL_RCC_OscConfig+0x78e>
 8003a62:	bf00      	nop
 8003a64:	58024400 	.word	0x58024400
 8003a68:	58024800 	.word	0x58024800
 8003a6c:	fffffc0c 	.word	0xfffffc0c
 8003a70:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fbec 	bl	8001250 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e08a      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a86:	4b47      	ldr	r3, [pc, #284]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x77c>
 8003a92:	e082      	b.n	8003b9a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a94:	4b43      	ldr	r3, [pc, #268]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a42      	ldr	r2, [pc, #264]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003a9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fbd6 	bl	8001250 <HAL_GetTick>
 8003aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd fbd2 	bl	8001250 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e070      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x7b0>
 8003ac6:	e068      	b.n	8003b9a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ac8:	4b36      	ldr	r3, [pc, #216]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ace:	4b35      	ldr	r3, [pc, #212]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d031      	beq.n	8003b40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0203 	and.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d12a      	bne.n	8003b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d122      	bne.n	8003b40 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b04:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d11a      	bne.n	8003b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	0a5b      	lsrs	r3, r3, #9
 8003b0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b16:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d108      	bne.n	8003b40 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	0e1b      	lsrs	r3, r3, #24
 8003b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e02b      	b.n	8003b9c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b44:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b48:	08db      	lsrs	r3, r3, #3
 8003b4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b4e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d01f      	beq.n	8003b9a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	4a11      	ldr	r2, [pc, #68]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b66:	f7fd fb73 	bl	8001250 <HAL_GetTick>
 8003b6a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b6c:	bf00      	nop
 8003b6e:	f7fd fb6f 	bl	8001250 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d0f9      	beq.n	8003b6e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <HAL_RCC_OscConfig+0x8b0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b86:	00d2      	lsls	r2, r2, #3
 8003b88:	4906      	ldr	r1, [pc, #24]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b92:	4a04      	ldr	r2, [pc, #16]	@ (8003ba4 <HAL_RCC_OscConfig+0x8ac>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3730      	adds	r7, #48	@ 0x30
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	ffff0007 	.word	0xffff0007

08003bac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e19c      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b8a      	ldr	r3, [pc, #552]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d910      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b87      	ldr	r3, [pc, #540]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 020f 	bic.w	r2, r3, #15
 8003bd6:	4985      	ldr	r1, [pc, #532]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b83      	ldr	r3, [pc, #524]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e184      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	4b7b      	ldr	r3, [pc, #492]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d908      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c0c:	4b78      	ldr	r3, [pc, #480]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	4975      	ldr	r1, [pc, #468]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d010      	beq.n	8003c4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	4b70      	ldr	r3, [pc, #448]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d908      	bls.n	8003c4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	496a      	ldr	r1, [pc, #424]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	4b64      	ldr	r3, [pc, #400]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d908      	bls.n	8003c7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c68:	4b61      	ldr	r3, [pc, #388]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	495e      	ldr	r1, [pc, #376]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	4b59      	ldr	r3, [pc, #356]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d908      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c96:	4b56      	ldr	r3, [pc, #344]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	4953      	ldr	r1, [pc, #332]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d908      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f023 020f 	bic.w	r2, r3, #15
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4947      	ldr	r1, [pc, #284]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d055      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ce2:	4b43      	ldr	r3, [pc, #268]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4940      	ldr	r1, [pc, #256]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d121      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0f6      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d14:	4b36      	ldr	r3, [pc, #216]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d115      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0ea      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d2c:	4b30      	ldr	r3, [pc, #192]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0de      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0d6      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4c:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f023 0207 	bic.w	r2, r3, #7
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4925      	ldr	r1, [pc, #148]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5e:	f7fd fa77 	bl	8001250 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d66:	f7fd fa73 	bl	8001250 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0be      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d1eb      	bne.n	8003d66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d208      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003daa:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f023 020f 	bic.w	r2, r3, #15
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	490e      	ldr	r1, [pc, #56]	@ (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d214      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 020f 	bic.w	r2, r3, #15
 8003dd2:	4906      	ldr	r1, [pc, #24]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b04      	ldr	r3, [pc, #16]	@ (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e086      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
 8003dec:	52002000 	.word	0x52002000
 8003df0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	4b3f      	ldr	r3, [pc, #252]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d208      	bcs.n	8003e22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e10:	4b3c      	ldr	r3, [pc, #240]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	4939      	ldr	r1, [pc, #228]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d010      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d208      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e3e:	4b31      	ldr	r3, [pc, #196]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	492e      	ldr	r1, [pc, #184]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	4b28      	ldr	r3, [pc, #160]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d208      	bcs.n	8003e7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e6c:	4b25      	ldr	r3, [pc, #148]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	4922      	ldr	r1, [pc, #136]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d208      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4917      	ldr	r1, [pc, #92]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eac:	f000 f834 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b14      	ldr	r3, [pc, #80]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	4912      	ldr	r1, [pc, #72]	@ (8003f08 <HAL_RCC_ClockConfig+0x35c>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eca:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8003f08 <HAL_RCC_ClockConfig+0x35c>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f0c <HAL_RCC_ClockConfig+0x360>)
 8003ee2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f10 <HAL_RCC_ClockConfig+0x364>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <HAL_RCC_ClockConfig+0x368>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd f964 	bl	80011bc <HAL_InitTick>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	58024400 	.word	0x58024400
 8003f08:	080097e0 	.word	0x080097e0
 8003f0c:	24000004 	.word	0x24000004
 8003f10:	24000000 	.word	0x24000000
 8003f14:	24000008 	.word	0x24000008

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f1e:	4bb3      	ldr	r3, [pc, #716]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f26:	2b18      	cmp	r3, #24
 8003f28:	f200 8155 	bhi.w	80041d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f99 	.word	0x08003f99
 8003f38:	080041d7 	.word	0x080041d7
 8003f3c:	080041d7 	.word	0x080041d7
 8003f40:	080041d7 	.word	0x080041d7
 8003f44:	080041d7 	.word	0x080041d7
 8003f48:	080041d7 	.word	0x080041d7
 8003f4c:	080041d7 	.word	0x080041d7
 8003f50:	080041d7 	.word	0x080041d7
 8003f54:	08003fbf 	.word	0x08003fbf
 8003f58:	080041d7 	.word	0x080041d7
 8003f5c:	080041d7 	.word	0x080041d7
 8003f60:	080041d7 	.word	0x080041d7
 8003f64:	080041d7 	.word	0x080041d7
 8003f68:	080041d7 	.word	0x080041d7
 8003f6c:	080041d7 	.word	0x080041d7
 8003f70:	080041d7 	.word	0x080041d7
 8003f74:	08003fc5 	.word	0x08003fc5
 8003f78:	080041d7 	.word	0x080041d7
 8003f7c:	080041d7 	.word	0x080041d7
 8003f80:	080041d7 	.word	0x080041d7
 8003f84:	080041d7 	.word	0x080041d7
 8003f88:	080041d7 	.word	0x080041d7
 8003f8c:	080041d7 	.word	0x080041d7
 8003f90:	080041d7 	.word	0x080041d7
 8003f94:	08003fcb 	.word	0x08003fcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f98:	4b94      	ldr	r3, [pc, #592]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fa4:	4b91      	ldr	r3, [pc, #580]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	4a90      	ldr	r2, [pc, #576]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003fb6:	e111      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fba:	61bb      	str	r3, [r7, #24]
      break;
 8003fbc:	e10e      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fc0:	61bb      	str	r3, [r7, #24]
      break;
 8003fc2:	e10b      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fc6:	61bb      	str	r3, [r7, #24]
      break;
 8003fc8:	e108      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fca:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003fd4:	4b85      	ldr	r3, [pc, #532]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fe0:	4b82      	ldr	r3, [pc, #520]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003fea:	4b80      	ldr	r3, [pc, #512]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fee:	08db      	lsrs	r3, r3, #3
 8003ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80e1 	beq.w	80041d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b02      	cmp	r3, #2
 8004012:	f000 8083 	beq.w	800411c <HAL_RCC_GetSysClockFreq+0x204>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b02      	cmp	r3, #2
 800401a:	f200 80a1 	bhi.w	8004160 <HAL_RCC_GetSysClockFreq+0x248>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x114>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d056      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800402a:	e099      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800402c:	4b6f      	ldr	r3, [pc, #444]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02d      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004038:	4b6c      	ldr	r3, [pc, #432]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	08db      	lsrs	r3, r3, #3
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	4a6b      	ldr	r2, [pc, #428]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004062:	4b62      	ldr	r3, [pc, #392]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004072:	ed97 6a02 	vldr	s12, [r7, #8]
 8004076:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800407a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004092:	e087      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004200 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a6:	4b51      	ldr	r3, [pc, #324]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80040be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040d6:	e065      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004204 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	4b40      	ldr	r3, [pc, #256]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80040fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800411a:	e043      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004208 <HAL_RCC_GetSysClockFreq+0x2f0>
 800412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412e:	4b2f      	ldr	r3, [pc, #188]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004142:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800415e:	e021      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004204 <HAL_RCC_GetSysClockFreq+0x2ec>
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	4b1e      	ldr	r3, [pc, #120]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004182:	ed97 6a02 	vldr	s12, [r7, #8]
 8004186:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800418a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800418e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041a4:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	0a5b      	lsrs	r3, r3, #9
 80041aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ae:	3301      	adds	r3, #1
 80041b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80041c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c8:	ee17 3a90 	vmov	r3, s15
 80041cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80041ce:	e005      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
      break;
 80041d4:	e002      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80041d6:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041d8:	61bb      	str	r3, [r7, #24]
      break;
 80041da:	bf00      	nop
  }

  return sysclockfreq;
 80041dc:	69bb      	ldr	r3, [r7, #24]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	@ 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	58024400 	.word	0x58024400
 80041f0:	03d09000 	.word	0x03d09000
 80041f4:	003d0900 	.word	0x003d0900
 80041f8:	017d7840 	.word	0x017d7840
 80041fc:	46000000 	.word	0x46000000
 8004200:	4c742400 	.word	0x4c742400
 8004204:	4a742400 	.word	0x4a742400
 8004208:	4bbebc20 	.word	0x4bbebc20

0800420c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004212:	f7ff fe81 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b10      	ldr	r3, [pc, #64]	@ (800425c <HAL_RCC_GetHCLKFreq+0x50>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490f      	ldr	r1, [pc, #60]	@ (8004260 <HAL_RCC_GetHCLKFreq+0x54>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004230:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <HAL_RCC_GetHCLKFreq+0x50>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	4a09      	ldr	r2, [pc, #36]	@ (8004260 <HAL_RCC_GetHCLKFreq+0x54>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a07      	ldr	r2, [pc, #28]	@ (8004264 <HAL_RCC_GetHCLKFreq+0x58>)
 8004248:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800424a:	4a07      	ldr	r2, [pc, #28]	@ (8004268 <HAL_RCC_GetHCLKFreq+0x5c>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004250:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <HAL_RCC_GetHCLKFreq+0x58>)
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	58024400 	.word	0x58024400
 8004260:	080097e0 	.word	0x080097e0
 8004264:	24000004 	.word	0x24000004
 8004268:	24000000 	.word	0x24000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004270:	f7ff ffcc 	bl	800420c <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4904      	ldr	r1, [pc, #16]	@ (8004294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	58024400 	.word	0x58024400
 8004294:	080097e0 	.word	0x080097e0

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800429c:	f7ff ffb6 	bl	800420c <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4904      	ldr	r1, [pc, #16]	@ (80042c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	58024400 	.word	0x58024400
 80042c0:	080097e0 	.word	0x080097e0

080042c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b0cc      	sub	sp, #304	@ 0x130
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80042e8:	2500      	movs	r5, #0
 80042ea:	ea54 0305 	orrs.w	r3, r4, r5
 80042ee:	d049      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80042f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042fa:	d02f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80042fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004300:	d828      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004302:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004306:	d01a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800430c:	d822      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004316:	d007      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004318:	e01c      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431a:	4bb8      	ldr	r3, [pc, #736]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800431c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431e:	4ab7      	ldr	r2, [pc, #732]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004326:	e01a      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800432c:	3308      	adds	r3, #8
 800432e:	2102      	movs	r1, #2
 8004330:	4618      	mov	r0, r3
 8004332:	f002 fba1 	bl	8006a78 <RCCEx_PLL2_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800433c:	e00f      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800433e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004342:	3328      	adds	r3, #40	@ 0x28
 8004344:	2102      	movs	r1, #2
 8004346:	4618      	mov	r0, r3
 8004348:	f002 fc48 	bl	8006bdc <RCCEx_PLL3_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004352:	e004      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800435c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004366:	4ba5      	ldr	r3, [pc, #660]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800436e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004374:	4aa1      	ldr	r2, [pc, #644]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004376:	430b      	orrs	r3, r1
 8004378:	6513      	str	r3, [r2, #80]	@ 0x50
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004380:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004390:	f04f 0900 	mov.w	r9, #0
 8004394:	ea58 0309 	orrs.w	r3, r8, r9
 8004398:	d047      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800439a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d82a      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80043a4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043c1 	.word	0x080043c1
 80043b0:	080043cf 	.word	0x080043cf
 80043b4:	080043e5 	.word	0x080043e5
 80043b8:	08004403 	.word	0x08004403
 80043bc:	08004403 	.word	0x08004403
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c0:	4b8e      	ldr	r3, [pc, #568]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	4a8d      	ldr	r2, [pc, #564]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043cc:	e01a      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043d2:	3308      	adds	r3, #8
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f002 fb4e 	bl	8006a78 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043e2:	e00f      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80043e8:	3328      	adds	r3, #40	@ 0x28
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f002 fbf5 	bl	8006bdc <RCCEx_PLL3_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004404:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800440c:	4b7b      	ldr	r3, [pc, #492]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800440e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004410:	f023 0107 	bic.w	r1, r3, #7
 8004414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441a:	4a78      	ldr	r2, [pc, #480]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004426:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800442a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004436:	f04f 0b00 	mov.w	fp, #0
 800443a:	ea5a 030b 	orrs.w	r3, sl, fp
 800443e:	d04c      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004440:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444a:	d030      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800444c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004450:	d829      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004452:	2bc0      	cmp	r3, #192	@ 0xc0
 8004454:	d02d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004456:	2bc0      	cmp	r3, #192	@ 0xc0
 8004458:	d825      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800445a:	2b80      	cmp	r3, #128	@ 0x80
 800445c:	d018      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800445e:	2b80      	cmp	r3, #128	@ 0x80
 8004460:	d821      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d007      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800446a:	e01c      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446c:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	4a62      	ldr	r2, [pc, #392]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004478:	e01c      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800447a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800447e:	3308      	adds	r3, #8
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f002 faf8 	bl	8006a78 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800448e:	e011      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004494:	3328      	adds	r3, #40	@ 0x28
 8004496:	2100      	movs	r1, #0
 8004498:	4618      	mov	r0, r3
 800449a:	f002 fb9f 	bl	8006bdc <RCCEx_PLL3_Config>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80044b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044bc:	4b4f      	ldr	r3, [pc, #316]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80044c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ca:	4a4c      	ldr	r2, [pc, #304]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80044d0:	e003      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80044d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80044e6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80044f0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d053      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80044fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004502:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004506:	d035      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800450c:	d82e      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800450e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004512:	d031      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004514:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004518:	d828      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800451e:	d01a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004524:	d822      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800452a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800452e:	d007      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004530:	e01c      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004532:	4b32      	ldr	r3, [pc, #200]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	4a31      	ldr	r2, [pc, #196]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800453c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800453e:	e01c      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004544:	3308      	adds	r3, #8
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f002 fa95 	bl	8006a78 <RCCEx_PLL2_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004554:	e011      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800455a:	3328      	adds	r3, #40	@ 0x28
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f002 fb3c 	bl	8006bdc <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800456a:	e006      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004572:	e002      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004582:	4b1e      	ldr	r3, [pc, #120]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004586:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800458a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800458e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004592:	4a1a      	ldr	r2, [pc, #104]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004594:	430b      	orrs	r3, r1
 8004596:	6593      	str	r3, [r2, #88]	@ 0x58
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800459e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80045a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80045ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80045b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d056      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80045c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ce:	d038      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80045d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045d4:	d831      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045da:	d034      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80045dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045e0:	d82b      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045e6:	d01d      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80045e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ec:	d825      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d006      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80045f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045f8:	e01f      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80045fa:	bf00      	nop
 80045fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4ba2      	ldr	r3, [pc, #648]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	4aa1      	ldr	r2, [pc, #644]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800460c:	e01c      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800460e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004612:	3308      	adds	r3, #8
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f002 fa2e 	bl	8006a78 <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004622:	e011      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004628:	3328      	adds	r3, #40	@ 0x28
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f002 fad5 	bl	8006bdc <RCCEx_PLL3_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004640:	e002      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004648:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004650:	4b8e      	ldr	r3, [pc, #568]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800465c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004660:	4a8a      	ldr	r2, [pc, #552]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004662:	430b      	orrs	r3, r1
 8004664:	6593      	str	r3, [r2, #88]	@ 0x58
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800466c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800467c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004686:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d03a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004696:	2b30      	cmp	r3, #48	@ 0x30
 8004698:	d01f      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800469a:	2b30      	cmp	r3, #48	@ 0x30
 800469c:	d819      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d00c      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d815      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d019      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d111      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046ae:	4b77      	ldr	r3, [pc, #476]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	4a76      	ldr	r2, [pc, #472]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80046ba:	e011      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046c0:	3308      	adds	r3, #8
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f002 f9d7 	bl	8006a78 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80046d0:	e006      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80046de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046e8:	4b68      	ldr	r3, [pc, #416]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80046f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80046f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f6:	4a65      	ldr	r2, [pc, #404]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80046f8:	430b      	orrs	r3, r1
 80046fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046fc:	e003      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004702:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004706:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004712:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800471c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004720:	460b      	mov	r3, r1
 8004722:	4313      	orrs	r3, r2
 8004724:	d051      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004726:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800472a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800472c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004730:	d035      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004736:	d82e      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004738:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800473c:	d031      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800473e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004742:	d828      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004748:	d01a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474e:	d822      	bhi.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004758:	d007      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800475a:	e01c      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475c:	4b4b      	ldr	r3, [pc, #300]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4a4a      	ldr	r2, [pc, #296]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004768:	e01c      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800476a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800476e:	3308      	adds	r3, #8
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f002 f980 	bl	8006a78 <RCCEx_PLL2_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800477e:	e011      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004780:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004784:	3328      	adds	r3, #40	@ 0x28
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f002 fa27 	bl	8006bdc <RCCEx_PLL3_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004794:	e006      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800479c:	e002      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80047a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047ac:	4b37      	ldr	r3, [pc, #220]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80047b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ba:	4a34      	ldr	r2, [pc, #208]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	6513      	str	r3, [r2, #80]	@ 0x50
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80047c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80047e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4313      	orrs	r3, r2
 80047e8:	d056      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80047ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80047ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047f4:	d033      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80047f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047fa:	d82c      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80047fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004800:	d02f      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004802:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004806:	d826      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004808:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800480c:	d02b      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800480e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004812:	d820      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004818:	d012      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800481a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800481e:	d81a      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d022      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004828:	d115      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800482a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800482e:	3308      	adds	r3, #8
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f002 f920 	bl	8006a78 <RCCEx_PLL2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800483e:	e015      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004840:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004844:	3328      	adds	r3, #40	@ 0x28
 8004846:	2101      	movs	r1, #1
 8004848:	4618      	mov	r0, r3
 800484a:	f002 f9c7 	bl	8006bdc <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004854:	e00a      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800485c:	e006      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800485e:	bf00      	nop
 8004860:	e004      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004862:	bf00      	nop
 8004864:	e002      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800486a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800487c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004882:	4a02      	ldr	r2, [pc, #8]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004884:	430b      	orrs	r3, r1
 8004886:	6513      	str	r3, [r2, #80]	@ 0x50
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800488a:	bf00      	nop
 800488c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004894:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004898:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80048a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048a8:	2300      	movs	r3, #0
 80048aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80048ae:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80048b2:	460b      	mov	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	d055      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80048b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048c4:	d033      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80048c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ca:	d82c      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d0:	d02f      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d6:	d826      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048dc:	d02b      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80048de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80048e2:	d820      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048e8:	d012      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80048ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ee:	d81a      	bhi.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d022      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80048f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f8:	d115      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048fe:	3308      	adds	r3, #8
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f002 f8b8 	bl	8006a78 <RCCEx_PLL2_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800490e:	e015      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004914:	3328      	adds	r3, #40	@ 0x28
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f002 f95f 	bl	8006bdc <RCCEx_PLL3_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004924:	e00a      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800492e:	bf00      	nop
 8004930:	e004      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004932:	bf00      	nop
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800493a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004944:	4bb6      	ldr	r3, [pc, #728]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800494c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004950:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004954:	4ab2      	ldr	r2, [pc, #712]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004956:	430b      	orrs	r3, r1
 8004958:	6593      	str	r3, [r2, #88]	@ 0x58
 800495a:	e003      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004960:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004964:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004974:	2300      	movs	r3, #0
 8004976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800497a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d02a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498a:	2b00      	cmp	r3, #0
 800498c:	d011      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800498e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004992:	d10a      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004998:	3308      	adds	r3, #8
 800499a:	2101      	movs	r1, #1
 800499c:	4618      	mov	r0, r3
 800499e:	f002 f86b 	bl	8006a78 <RCCEx_PLL2_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80049a8:	e004      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80049b0:	e000      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80049b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80049bc:	4b98      	ldr	r3, [pc, #608]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80049c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ca:	4a95      	ldr	r2, [pc, #596]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049cc:	430b      	orrs	r3, r1
 80049ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049d0:	e003      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80049d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80049e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80049f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d037      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80049fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80049fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a04:	d00e      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0a:	d816      	bhi.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d018      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004a10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a14:	d111      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a16:	4b82      	ldr	r3, [pc, #520]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	4a81      	ldr	r2, [pc, #516]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a22:	e00f      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a28:	3308      	adds	r3, #8
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f002 f823 	bl	8006a78 <RCCEx_PLL2_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a38:	e004      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004a40:	e000      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a4c:	4b74      	ldr	r3, [pc, #464]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a50:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5a:	4a71      	ldr	r2, [pc, #452]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a60:	e003      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004a66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004a80:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	d03a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d81d      	bhi.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004a94:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004ad9 	.word	0x08004ad9
 8004aa0:	08004aad 	.word	0x08004aad
 8004aa4:	08004abb 	.word	0x08004abb
 8004aa8:	08004ad9 	.word	0x08004ad9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aac:	4b5c      	ldr	r3, [pc, #368]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	4a5b      	ldr	r2, [pc, #364]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ab8:	e00f      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004abe:	3308      	adds	r3, #8
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 ffd8 	bl	8006a78 <RCCEx_PLL2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ace:	e004      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004ad6:	e000      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ada:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae6:	f023 0103 	bic.w	r1, r3, #3
 8004aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004af2:	430b      	orrs	r3, r1
 8004af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004af6:	e003      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004afc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f000 80a0 	beq.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b22:	4b40      	ldr	r3, [pc, #256]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a3f      	ldr	r2, [pc, #252]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b2e:	f7fc fb8f 	bl	8001250 <HAL_GetTick>
 8004b32:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b36:	e00b      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b38:	f7fc fb8a 	bl	8001250 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b64      	cmp	r3, #100	@ 0x64
 8004b46:	d903      	bls.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004b4e:	e005      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b50:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ed      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004b5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d17a      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b64:	4b2e      	ldr	r3, [pc, #184]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004b6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b70:	4053      	eors	r3, r2
 8004b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d015      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b7a:	4b29      	ldr	r3, [pc, #164]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b86:	4b26      	ldr	r3, [pc, #152]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8a:	4a25      	ldr	r2, [pc, #148]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b92:	4b23      	ldr	r3, [pc, #140]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b96:	4a22      	ldr	r2, [pc, #136]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004b9e:	4a20      	ldr	r2, [pc, #128]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ba0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004baa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb2:	d118      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fc fb4c 	bl	8001250 <HAL_GetTick>
 8004bb8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bbc:	e00d      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbe:	f7fc fb47 	bl	8001250 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004bc8:	1ad2      	subs	r2, r2, r3
 8004bca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d903      	bls.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8004bd8:	e005      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bda:	4b11      	ldr	r3, [pc, #68]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0eb      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004be6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d130      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfe:	d115      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004c00:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c10:	091a      	lsrs	r2, r3, #4
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	4a02      	ldr	r2, [pc, #8]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6113      	str	r3, [r2, #16]
 8004c1c:	e00c      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004c1e:	bf00      	nop
 8004c20:	58024400 	.word	0x58024400
 8004c24:	58024800 	.word	0x58024800
 8004c28:	00ffffcf 	.word	0x00ffffcf
 8004c2c:	4bd4      	ldr	r3, [pc, #848]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4ad3      	ldr	r2, [pc, #844]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c32:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c36:	6113      	str	r3, [r2, #16]
 8004c38:	4bd1      	ldr	r3, [pc, #836]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c3a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	4acd      	ldr	r2, [pc, #820]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4e:	e008      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c54:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8004c58:	e003      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f002 0301 	and.w	r3, r2, #1
 8004c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c72:	2300      	movs	r3, #0
 8004c74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f000 808b 	beq.w	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c8c:	2b28      	cmp	r3, #40	@ 0x28
 8004c8e:	d86b      	bhi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004c90:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004d71 	.word	0x08004d71
 8004c9c:	08004d69 	.word	0x08004d69
 8004ca0:	08004d69 	.word	0x08004d69
 8004ca4:	08004d69 	.word	0x08004d69
 8004ca8:	08004d69 	.word	0x08004d69
 8004cac:	08004d69 	.word	0x08004d69
 8004cb0:	08004d69 	.word	0x08004d69
 8004cb4:	08004d69 	.word	0x08004d69
 8004cb8:	08004d3d 	.word	0x08004d3d
 8004cbc:	08004d69 	.word	0x08004d69
 8004cc0:	08004d69 	.word	0x08004d69
 8004cc4:	08004d69 	.word	0x08004d69
 8004cc8:	08004d69 	.word	0x08004d69
 8004ccc:	08004d69 	.word	0x08004d69
 8004cd0:	08004d69 	.word	0x08004d69
 8004cd4:	08004d69 	.word	0x08004d69
 8004cd8:	08004d53 	.word	0x08004d53
 8004cdc:	08004d69 	.word	0x08004d69
 8004ce0:	08004d69 	.word	0x08004d69
 8004ce4:	08004d69 	.word	0x08004d69
 8004ce8:	08004d69 	.word	0x08004d69
 8004cec:	08004d69 	.word	0x08004d69
 8004cf0:	08004d69 	.word	0x08004d69
 8004cf4:	08004d69 	.word	0x08004d69
 8004cf8:	08004d71 	.word	0x08004d71
 8004cfc:	08004d69 	.word	0x08004d69
 8004d00:	08004d69 	.word	0x08004d69
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004d69 	.word	0x08004d69
 8004d0c:	08004d69 	.word	0x08004d69
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d69 	.word	0x08004d69
 8004d20:	08004d69 	.word	0x08004d69
 8004d24:	08004d69 	.word	0x08004d69
 8004d28:	08004d69 	.word	0x08004d69
 8004d2c:	08004d69 	.word	0x08004d69
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004d71 	.word	0x08004d71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d40:	3308      	adds	r3, #8
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fe97 	bl	8006a78 <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d50:	e00f      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d56:	3328      	adds	r3, #40	@ 0x28
 8004d58:	2101      	movs	r1, #1
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 ff3e 	bl	8006bdc <RCCEx_PLL3_Config>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d66:	e004      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d6e:	e000      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d7a:	4b81      	ldr	r3, [pc, #516]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d90:	e003      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f002 0302 	and.w	r3, r2, #2
 8004da6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004db0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004db4:	460b      	mov	r3, r1
 8004db6:	4313      	orrs	r3, r2
 8004db8:	d042      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d825      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004de5 	.word	0x08004de5
 8004dd4:	08004dfb 	.word	0x08004dfb
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004de8:	3308      	adds	r3, #8
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fe43 	bl	8006a78 <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004df8:	e00f      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 feea 	bl	8006bdc <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e0e:	e004      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e22:	4b57      	ldr	r3, [pc, #348]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	f023 0107 	bic.w	r1, r3, #7
 8004e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e30:	4a53      	ldr	r2, [pc, #332]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004e32:	430b      	orrs	r3, r1
 8004e34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f002 0304 	and.w	r3, r2, #4
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d044      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d825      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004e8d 	.word	0x08004e8d
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec1 	.word	0x08004ec1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e90:	3308      	adds	r3, #8
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 fdef 	bl	8006a78 <RCCEx_PLL2_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ea6:	3328      	adds	r3, #40	@ 0x28
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 fe96 	bl	8006bdc <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eca:	4b2d      	ldr	r3, [pc, #180]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	f023 0107 	bic.w	r1, r3, #7
 8004ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004eda:	4a29      	ldr	r2, [pc, #164]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ee6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f002 0320 	and.w	r3, r2, #32
 8004ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d057      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f16:	d035      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1c:	d82c      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f22:	d031      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d826      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f2e:	d02d      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004f30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f34:	d820      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3a:	d012      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f40:	d81a      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d024      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4a:	d115      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f50:	3308      	adds	r3, #8
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 fd8f 	bl	8006a78 <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f60:	e017      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f66:	3328      	adds	r3, #40	@ 0x28
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 fe36 	bl	8006bdc <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f76:	e00c      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f7e:	e008      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004f80:	58024400 	.word	0x58024400
        break;
 8004f84:	bf00      	nop
 8004f86:	e004      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e002      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e000      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f9a:	4bc2      	ldr	r3, [pc, #776]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004faa:	4abe      	ldr	r2, [pc, #760]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fb0:	e003      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fb6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004fd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	d055      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fe2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fe6:	d033      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004fe8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fec:	d82c      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff2:	d02f      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff8:	d826      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ffe:	d02b      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005004:	d820      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500a:	d012      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800500c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005010:	d81a      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d022      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501a:	d115      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800501c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005020:	3308      	adds	r3, #8
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f001 fd27 	bl	8006a78 <RCCEx_PLL2_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005030:	e015      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005036:	3328      	adds	r3, #40	@ 0x28
 8005038:	2102      	movs	r1, #2
 800503a:	4618      	mov	r0, r3
 800503c:	f001 fdce 	bl	8006bdc <RCCEx_PLL3_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005046:	e00a      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800504e:	e006      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005050:	bf00      	nop
 8005052:	e004      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005054:	bf00      	nop
 8005056:	e002      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005058:	bf00      	nop
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800505c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10b      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005066:	4b8f      	ldr	r3, [pc, #572]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800506e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005076:	4a8b      	ldr	r2, [pc, #556]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6593      	str	r3, [r2, #88]	@ 0x58
 800507c:	e003      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005082:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005092:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005096:	2300      	movs	r3, #0
 8005098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800509c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050a0:	460b      	mov	r3, r1
 80050a2:	4313      	orrs	r3, r2
 80050a4:	d055      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80050a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050b2:	d033      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80050b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050b8:	d82c      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80050ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050be:	d02f      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80050c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c4:	d826      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80050c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050ca:	d02b      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80050cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050d0:	d820      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80050d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d6:	d012      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80050d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050dc:	d81a      	bhi.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d022      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e6:	d115      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ec:	3308      	adds	r3, #8
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 fcc1 	bl	8006a78 <RCCEx_PLL2_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050fc:	e015      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005102:	3328      	adds	r3, #40	@ 0x28
 8005104:	2102      	movs	r1, #2
 8005106:	4618      	mov	r0, r3
 8005108:	f001 fd68 	bl	8006bdc <RCCEx_PLL3_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005112:	e00a      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800511a:	e006      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800511c:	bf00      	nop
 800511e:	e004      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005120:	bf00      	nop
 8005122:	e002      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005124:	bf00      	nop
 8005126:	e000      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005132:	4b5c      	ldr	r3, [pc, #368]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005136:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800513a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800513e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005142:	4a58      	ldr	r2, [pc, #352]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005144:	430b      	orrs	r3, r1
 8005146:	6593      	str	r3, [r2, #88]	@ 0x58
 8005148:	e003      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800514e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f002 0308 	and.w	r3, r2, #8
 800515e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005162:	2300      	movs	r3, #0
 8005164:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005168:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800516c:	460b      	mov	r3, r1
 800516e:	4313      	orrs	r3, r2
 8005170:	d01e      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517e:	d10c      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005184:	3328      	adds	r3, #40	@ 0x28
 8005186:	2102      	movs	r1, #2
 8005188:	4618      	mov	r0, r3
 800518a:	f001 fd27 	bl	8006bdc <RCCEx_PLL3_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800519a:	4b42      	ldr	r3, [pc, #264]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800519c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051aa:	4a3e      	ldr	r2, [pc, #248]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f002 0310 	and.w	r3, r2, #16
 80051bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80051c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d01e      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80051d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051e2:	3328      	adds	r3, #40	@ 0x28
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 fcf8 	bl	8006bdc <RCCEx_PLL3_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051f8:	4b2a      	ldr	r3, [pc, #168]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005204:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005208:	4a26      	ldr	r2, [pc, #152]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800520a:	430b      	orrs	r3, r1
 800520c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800520e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800521a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800521e:	2300      	movs	r3, #0
 8005220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005224:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005228:	460b      	mov	r3, r1
 800522a:	4313      	orrs	r3, r2
 800522c:	d040      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800522e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800523a:	d022      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800523c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005240:	d81b      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524a:	d00b      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800524c:	e015      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800524e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005252:	3308      	adds	r3, #8
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f001 fc0e 	bl	8006a78 <RCCEx_PLL2_Config>
 800525c:	4603      	mov	r3, r0
 800525e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005262:	e00f      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005268:	3328      	adds	r3, #40	@ 0x28
 800526a:	2102      	movs	r1, #2
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fcb5 	bl	8006bdc <RCCEx_PLL3_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005278:	e004      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005284:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005298:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800529c:	4a01      	ldr	r2, [pc, #4]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a2:	e005      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80052a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052be:	2300      	movs	r3, #0
 80052c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d03b      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80052cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052d8:	d01f      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80052da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052de:	d818      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80052e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e4:	d003      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80052e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052ea:	d007      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80052ec:	e011      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ee:	4b64      	ldr	r3, [pc, #400]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a63      	ldr	r2, [pc, #396]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80052fa:	e00f      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005300:	3328      	adds	r3, #40	@ 0x28
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f001 fc69 	bl	8006bdc <RCCEx_PLL3_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005310:	e004      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005318:	e000      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800531a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005324:	4b56      	ldr	r3, [pc, #344]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005328:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800532c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005334:	4a52      	ldr	r2, [pc, #328]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005336:	430b      	orrs	r3, r1
 8005338:	6553      	str	r3, [r2, #84]	@ 0x54
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005340:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005350:	673b      	str	r3, [r7, #112]	@ 0x70
 8005352:	2300      	movs	r3, #0
 8005354:	677b      	str	r3, [r7, #116]	@ 0x74
 8005356:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800535a:	460b      	mov	r3, r1
 800535c:	4313      	orrs	r3, r2
 800535e:	d031      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536e:	d007      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005370:	e011      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005372:	4b43      	ldr	r3, [pc, #268]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a42      	ldr	r2, [pc, #264]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800537e:	e00e      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005380:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005384:	3308      	adds	r3, #8
 8005386:	2102      	movs	r1, #2
 8005388:	4618      	mov	r0, r3
 800538a:	f001 fb75 	bl	8006a78 <RCCEx_PLL2_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053a6:	4b36      	ldr	r3, [pc, #216]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80053a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	4a32      	ldr	r2, [pc, #200]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053ba:	e003      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053d2:	2300      	movs	r3, #0
 80053d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80053da:	460b      	mov	r3, r1
 80053dc:	4313      	orrs	r3, r2
 80053de:	d00c      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e4:	3328      	adds	r3, #40	@ 0x28
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f001 fbf7 	bl	8006bdc <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005406:	663b      	str	r3, [r7, #96]	@ 0x60
 8005408:	2300      	movs	r3, #0
 800540a:	667b      	str	r3, [r7, #100]	@ 0x64
 800540c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005410:	460b      	mov	r3, r1
 8005412:	4313      	orrs	r3, r2
 8005414:	d03a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800541e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005422:	d018      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005428:	d811      	bhi.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800542a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800542e:	d014      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005434:	d80b      	bhi.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005436:	2b00      	cmp	r3, #0
 8005438:	d011      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800543a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543e:	d106      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005440:	4b0f      	ldr	r3, [pc, #60]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	4a0e      	ldr	r2, [pc, #56]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800544a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800544c:	e008      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005454:	e004      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005456:	bf00      	nop
 8005458:	e002      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800545e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005460:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10d      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005468:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800546a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005478:	4a01      	ldr	r2, [pc, #4]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800547a:	430b      	orrs	r3, r1
 800547c:	6553      	str	r3, [r2, #84]	@ 0x54
 800547e:	e005      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005488:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800548c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005498:	65bb      	str	r3, [r7, #88]	@ 0x58
 800549a:	2300      	movs	r3, #0
 800549c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800549e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80054a2:	460b      	mov	r3, r1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054a8:	4baa      	ldr	r3, [pc, #680]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80054aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054b6:	4aa7      	ldr	r2, [pc, #668]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80054bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80054c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ca:	2300      	movs	r3, #0
 80054cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054d2:	460b      	mov	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80054d8:	4b9e      	ldr	r3, [pc, #632]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80054e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80054e8:	4a9a      	ldr	r2, [pc, #616]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80054ea:	430b      	orrs	r3, r1
 80054ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054fc:	2300      	movs	r3, #0
 80054fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005500:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800550a:	4b92      	ldr	r3, [pc, #584]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800550c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005518:	4a8e      	ldr	r2, [pc, #568]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800551a:	430b      	orrs	r3, r1
 800551c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800551e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800552a:	643b      	str	r3, [r7, #64]	@ 0x40
 800552c:	2300      	movs	r3, #0
 800552e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005530:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005534:	460b      	mov	r3, r1
 8005536:	4313      	orrs	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800553a:	4b86      	ldr	r3, [pc, #536]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4a85      	ldr	r2, [pc, #532]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005540:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005544:	6113      	str	r3, [r2, #16]
 8005546:	4b83      	ldr	r3, [pc, #524]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005548:	6919      	ldr	r1, [r3, #16]
 800554a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800554e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005552:	4a80      	ldr	r2, [pc, #512]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005554:	430b      	orrs	r3, r1
 8005556:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005566:	2300      	movs	r3, #0
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800556e:	460b      	mov	r3, r1
 8005570:	4313      	orrs	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005574:	4b77      	ldr	r3, [pc, #476]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005578:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800557c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	4a74      	ldr	r2, [pc, #464]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005584:	430b      	orrs	r3, r1
 8005586:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005594:	633b      	str	r3, [r7, #48]	@ 0x30
 8005596:	2300      	movs	r3, #0
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
 800559a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800559e:	460b      	mov	r3, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80055ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b4:	4a67      	ldr	r2, [pc, #412]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80055ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	2100      	movs	r1, #0
 80055c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055d0:	460b      	mov	r3, r1
 80055d2:	4313      	orrs	r3, r2
 80055d4:	d011      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055da:	3308      	adds	r3, #8
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fa4a 	bl	8006a78 <RCCEx_PLL2_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80055ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	2100      	movs	r1, #0
 8005604:	6239      	str	r1, [r7, #32]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	627b      	str	r3, [r7, #36]	@ 0x24
 800560c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005610:	460b      	mov	r3, r1
 8005612:	4313      	orrs	r3, r2
 8005614:	d011      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800561a:	3308      	adds	r3, #8
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fa2a 	bl	8006a78 <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800562a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005636:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800563a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	2100      	movs	r1, #0
 8005644:	61b9      	str	r1, [r7, #24]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	61fb      	str	r3, [r7, #28]
 800564c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d011      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800565a:	3308      	adds	r3, #8
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fa0a 	bl	8006a78 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800566a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005676:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800567a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	2100      	movs	r1, #0
 8005684:	6139      	str	r1, [r7, #16]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005690:	460b      	mov	r3, r1
 8005692:	4313      	orrs	r3, r2
 8005694:	d011      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800569a:	3328      	adds	r3, #40	@ 0x28
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 fa9c 	bl	8006bdc <RCCEx_PLL3_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80056aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80056ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	2100      	movs	r1, #0
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d011      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056da:	3328      	adds	r3, #40	@ 0x28
 80056dc:	2101      	movs	r1, #1
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 fa7c 	bl	8006bdc <RCCEx_PLL3_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80056ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80056fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	2100      	movs	r1, #0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d011      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800571a:	3328      	adds	r3, #40	@ 0x28
 800571c:	2102      	movs	r1, #2
 800571e:	4618      	mov	r0, r3
 8005720:	f001 fa5c 	bl	8006bdc <RCCEx_PLL3_Config>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800572a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005736:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800573a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
}
 8005748:	4618      	mov	r0, r3
 800574a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800574e:	46bd      	mov	sp, r7
 8005750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005754:	58024400 	.word	0x58024400

08005758 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b090      	sub	sp, #64	@ 0x40
 800575c:	af00      	add	r7, sp, #0
 800575e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005766:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800576a:	430b      	orrs	r3, r1
 800576c:	f040 8094 	bne.w	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005770:	4b9e      	ldr	r3, [pc, #632]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	2b04      	cmp	r3, #4
 800577e:	f200 8087 	bhi.w	8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005782:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	0800579d 	.word	0x0800579d
 800578c:	080057c5 	.word	0x080057c5
 8005790:	080057ed 	.word	0x080057ed
 8005794:	08005889 	.word	0x08005889
 8005798:	08005815 	.word	0x08005815
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800579c:	4b93      	ldr	r3, [pc, #588]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057a8:	d108      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f810 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057b8:	f000 bd45 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057c0:	f000 bd41 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057c4:	4b89      	ldr	r3, [pc, #548]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057d0:	d108      	bne.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057d2:	f107 0318 	add.w	r3, r7, #24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd54 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057e0:	f000 bd31 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e8:	f000 bd2d 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057ec:	4b7f      	ldr	r3, [pc, #508]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f8:	d108      	bne.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fe94 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005808:	f000 bd1d 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005810:	f000 bd19 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005814:	4b75      	ldr	r3, [pc, #468]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800581c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800581e:	4b73      	ldr	r3, [pc, #460]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d10c      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800582a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005830:	4b6e      	ldr	r3, [pc, #440]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	4a6d      	ldr	r2, [pc, #436]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005842:	e01f      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005844:	4b69      	ldr	r3, [pc, #420]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800584c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005850:	d106      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005858:	d102      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800585a:	4b66      	ldr	r3, [pc, #408]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800585c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800585e:	e011      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005860:	4b62      	ldr	r3, [pc, #392]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800586c:	d106      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005874:	d102      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005876:	4b60      	ldr	r3, [pc, #384]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800587a:	e003      	b.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005880:	f000 bce1 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005884:	f000 bcdf 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005888:	4b5c      	ldr	r3, [pc, #368]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800588c:	f000 bcdb 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005894:	f000 bcd7 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80058a0:	430b      	orrs	r3, r1
 80058a2:	f040 80ad 	bne.w	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80058a6:	4b51      	ldr	r3, [pc, #324]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b6:	d056      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058be:	f200 8090 	bhi.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80058c6:	f000 8088 	beq.w	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80058ce:	f200 8088 	bhi.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d032      	beq.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	2b80      	cmp	r3, #128	@ 0x80
 80058dc:	f200 8081 	bhi.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	d014      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80058ec:	e079      	b.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058ee:	4b3f      	ldr	r3, [pc, #252]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058fa:	d108      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005900:	4618      	mov	r0, r3
 8005902:	f000 ff67 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800590a:	f000 bc9c 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005912:	f000 bc98 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005916:	4b35      	ldr	r3, [pc, #212]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800591e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005922:	d108      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005924:	f107 0318 	add.w	r3, r7, #24
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fcab 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005932:	f000 bc88 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800593a:	f000 bc84 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800593e:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800594a:	d108      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800594c:	f107 030c 	add.w	r3, r7, #12
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fdeb 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800595a:	f000 bc74 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005962:	f000 bc70 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005966:	4b21      	ldr	r3, [pc, #132]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800596a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800596e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005970:	4b1e      	ldr	r3, [pc, #120]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b04      	cmp	r3, #4
 800597a:	d10c      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005982:	4b1a      	ldr	r3, [pc, #104]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	4a18      	ldr	r2, [pc, #96]	@ (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005994:	e01f      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005996:	4b15      	ldr	r3, [pc, #84]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059aa:	d102      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b0:	e011      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059b2:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059be:	d106      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80059c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059c6:	d102      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059c8:	4b0b      	ldr	r3, [pc, #44]	@ (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80059ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059cc:	e003      	b.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80059d2:	f000 bc38 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059d6:	f000 bc36 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059da:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059de:	f000 bc32 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e6:	f000 bc2e 	b.w	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059ea:	bf00      	nop
 80059ec:	58024400 	.word	0x58024400
 80059f0:	03d09000 	.word	0x03d09000
 80059f4:	003d0900 	.word	0x003d0900
 80059f8:	017d7840 	.word	0x017d7840
 80059fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	f040 809c 	bne.w	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a12:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8005a16:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a1e:	d054      	beq.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a26:	f200 808b 	bhi.w	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a30:	f000 8083 	beq.w	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a3a:	f200 8081 	bhi.w	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a44:	d02f      	beq.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a4c:	d878      	bhi.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a5a:	d012      	beq.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005a5c:	e070      	b.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a5e:	4b8a      	ldr	r3, [pc, #552]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 feaf 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a7a:	e3e4      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a80:	e3e1      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a82:	4b81      	ldr	r3, [pc, #516]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8e:	d107      	bne.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a90:	f107 0318 	add.w	r3, r7, #24
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fbf5 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a9e:	e3d2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aa4:	e3cf      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005aa6:	4b78      	ldr	r3, [pc, #480]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab2:	d107      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ab4:	f107 030c 	add.w	r3, r7, #12
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fd37 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac2:	e3c0      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e3bd      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005aca:	4b6f      	ldr	r3, [pc, #444]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d10c      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ae6:	4b68      	ldr	r3, [pc, #416]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	08db      	lsrs	r3, r3, #3
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	4a66      	ldr	r2, [pc, #408]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005af2:	fa22 f303 	lsr.w	r3, r2, r3
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af8:	e01e      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005afa:	4b63      	ldr	r3, [pc, #396]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b06:	d106      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005b10:	4b5f      	ldr	r3, [pc, #380]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b14:	e010      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b16:	4b5c      	ldr	r3, [pc, #368]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b22:	d106      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2a:	d102      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b2c:	4b59      	ldr	r3, [pc, #356]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005b36:	e386      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b38:	e385      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b3a:	4b57      	ldr	r3, [pc, #348]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3e:	e382      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b44:	e37f      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b4a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	f040 80a7 	bne.w	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005b54:	4b4c      	ldr	r3, [pc, #304]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b58:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b64:	d055      	beq.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b6c:	f200 8096 	bhi.w	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b76:	f000 8084 	beq.w	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b80:	f200 808c 	bhi.w	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b8a:	d030      	beq.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b92:	f200 8083 	bhi.w	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ba2:	d012      	beq.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005ba4:	e07a      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ba6:	4b38      	ldr	r3, [pc, #224]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fe0b 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc2:	e340      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc8:	e33d      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bca:	4b2f      	ldr	r3, [pc, #188]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd8:	f107 0318 	add.w	r3, r7, #24
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fb51 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005be6:	e32e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bec:	e32b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bee:	4b26      	ldr	r3, [pc, #152]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bfa:	d107      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bfc:	f107 030c 	add.w	r3, r7, #12
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fc93 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c0a:	e31c      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c10:	e319      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c12:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d10c      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c2e:	4b16      	ldr	r3, [pc, #88]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	08db      	lsrs	r3, r3, #3
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	4a14      	ldr	r2, [pc, #80]	@ (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c40:	e01e      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c42:	4b11      	ldr	r3, [pc, #68]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c56:	d102      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c58:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c5c:	e010      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c6a:	d106      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c72:	d102      	bne.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c74:	4b07      	ldr	r3, [pc, #28]	@ (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005c7e:	e2e2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c80:	e2e1      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c82:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c86:	e2de      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c88:	58024400 	.word	0x58024400
 8005c8c:	03d09000 	.word	0x03d09000
 8005c90:	003d0900 	.word	0x003d0900
 8005c94:	017d7840 	.word	0x017d7840
 8005c98:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca0:	e2d1      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ca6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005caa:	430b      	orrs	r3, r1
 8005cac:	f040 809c 	bne.w	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005cb0:	4b93      	ldr	r3, [pc, #588]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005cb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cc0:	d054      	beq.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cc8:	f200 808b 	bhi.w	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cd2:	f000 8083 	beq.w	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cdc:	f200 8081 	bhi.w	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce6:	d02f      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cee:	d878      	bhi.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfc:	d012      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005cfe:	e070      	b.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d00:	4b7f      	ldr	r3, [pc, #508]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd5e 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d1c:	e293      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d22:	e290      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d24:	4b76      	ldr	r3, [pc, #472]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d30:	d107      	bne.n	8005d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d32:	f107 0318 	add.w	r3, r7, #24
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 faa4 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d40:	e281      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d46:	e27e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d48:	4b6d      	ldr	r3, [pc, #436]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d54:	d107      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d56:	f107 030c 	add.w	r3, r7, #12
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fbe6 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d64:	e26f      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d6a:	e26c      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d6c:	4b64      	ldr	r3, [pc, #400]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d76:	4b62      	ldr	r3, [pc, #392]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d88:	4b5d      	ldr	r3, [pc, #372]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	4a5c      	ldr	r2, [pc, #368]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
 8005d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d9a:	e01e      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d9c:	4b58      	ldr	r3, [pc, #352]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da8:	d106      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db0:	d102      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005db2:	4b55      	ldr	r3, [pc, #340]	@ (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db6:	e010      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005db8:	4b51      	ldr	r3, [pc, #324]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dcc:	d102      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005dce:	4b4f      	ldr	r3, [pc, #316]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd2:	e002      	b.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005dd8:	e235      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005dda:	e234      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de0:	e231      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de6:	e22e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005df0:	430b      	orrs	r3, r1
 8005df2:	f040 808f 	bne.w	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005df6:	4b42      	ldr	r3, [pc, #264]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e06:	d06b      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e0e:	d874      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e16:	d056      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e1e:	d86c      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e26:	d03b      	beq.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e2e:	d864      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e36:	d021      	beq.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e3e:	d85c      	bhi.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d004      	beq.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e4c:	d004      	beq.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005e4e:	e054      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7fe fa0c 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005e54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e56:	e1f6      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e58:	4b29      	ldr	r3, [pc, #164]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e64:	d107      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e66:	f107 0318 	add.w	r3, r7, #24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fa0a 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e74:	e1e7      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e7a:	e1e4      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e7c:	4b20      	ldr	r3, [pc, #128]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e88:	d107      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e8a:	f107 030c 	add.w	r3, r7, #12
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fb4c 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e98:	e1d5      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e9e:	e1d2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ea0:	4b17      	ldr	r3, [pc, #92]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d109      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eac:	4b14      	ldr	r3, [pc, #80]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	08db      	lsrs	r3, r3, #3
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	4a13      	ldr	r2, [pc, #76]	@ (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ebe:	e1c2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec4:	e1bf      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ed2:	d102      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ed8:	e1b5      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ede:	e1b2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ee0:	4b07      	ldr	r3, [pc, #28]	@ (8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eec:	d102      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005eee:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ef2:	e1a8      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ef8:	e1a5      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005efe:	e1a2      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005f00:	58024400 	.word	0x58024400
 8005f04:	03d09000 	.word	0x03d09000
 8005f08:	003d0900 	.word	0x003d0900
 8005f0c:	017d7840 	.word	0x017d7840
 8005f10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f18:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	d173      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f20:	4b9c      	ldr	r3, [pc, #624]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f30:	d02f      	beq.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f38:	d863      	bhi.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f46:	d012      	beq.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005f48:	e05b      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f4a:	4b92      	ldr	r3, [pc, #584]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f56:	d107      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f58:	f107 0318 	add.w	r3, r7, #24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 f991 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f66:	e16e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f6c:	e16b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f6e:	4b89      	ldr	r3, [pc, #548]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fad3 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f8a:	e15c      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f90:	e159      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f92:	4b80      	ldr	r3, [pc, #512]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f9c:	4b7d      	ldr	r3, [pc, #500]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d10c      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d109      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fae:	4b79      	ldr	r3, [pc, #484]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	4a77      	ldr	r2, [pc, #476]	@ (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc0:	e01e      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fc2:	4b74      	ldr	r3, [pc, #464]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fce:	d106      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fd6:	d102      	bne.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005fd8:	4b70      	ldr	r3, [pc, #448]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fdc:	e010      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fde:	4b6d      	ldr	r3, [pc, #436]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fea:	d106      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff2:	d102      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ff8:	e002      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005ffe:	e122      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006000:	e121      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006006:	e11e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006010:	430b      	orrs	r3, r1
 8006012:	d133      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006014:	4b5f      	ldr	r3, [pc, #380]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800601c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800601e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602a:	d012      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800602c:	e023      	b.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800602e:	4b59      	ldr	r3, [pc, #356]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800603a:	d107      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800603c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fbc7 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800604a:	e0fc      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006050:	e0f9      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006052:	4b50      	ldr	r3, [pc, #320]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800605a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006060:	f107 0318 	add.w	r3, r7, #24
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f90d 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800606e:	e0ea      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006074:	e0e7      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607a:	e0e4      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800607c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006080:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006084:	430b      	orrs	r3, r1
 8006086:	f040 808d 	bne.w	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800608a:	4b42      	ldr	r3, [pc, #264]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800609a:	d06b      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060a2:	d874      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d056      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b2:	d86c      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060ba:	d03b      	beq.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060c2:	d864      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ca:	d021      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80060cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d2:	d85c      	bhi.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060e0:	d004      	beq.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80060e2:	e054      	b.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80060e4:	f000 f8b8 	bl	8006258 <HAL_RCCEx_GetD3PCLK1Freq>
 80060e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060ea:	e0ac      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060ec:	4b29      	ldr	r3, [pc, #164]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060f8:	d107      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060fa:	f107 0318 	add.w	r3, r7, #24
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 f8c0 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006108:	e09d      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800610e:	e09a      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006110:	4b20      	ldr	r3, [pc, #128]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800611c:	d107      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800611e:	f107 030c 	add.w	r3, r7, #12
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fa02 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800612c:	e08b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006132:	e088      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006134:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b04      	cmp	r3, #4
 800613e:	d109      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006140:	4b14      	ldr	r3, [pc, #80]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	08db      	lsrs	r3, r3, #3
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	4a13      	ldr	r2, [pc, #76]	@ (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006152:	e078      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006158:	e075      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800615a:	4b0e      	ldr	r3, [pc, #56]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006166:	d102      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006168:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800616c:	e06b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800616e:	2300      	movs	r3, #0
 8006170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006172:	e068      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006174:	4b07      	ldr	r3, [pc, #28]	@ (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006180:	d102      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006182:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006186:	e05e      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618c:	e05b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006192:	e058      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006194:	58024400 	.word	0x58024400
 8006198:	03d09000 	.word	0x03d09000
 800619c:	003d0900 	.word	0x003d0900
 80061a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80061a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80061ac:	430b      	orrs	r3, r1
 80061ae:	d148      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80061b0:	4b27      	ldr	r3, [pc, #156]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80061b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c0:	d02a      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061c8:	d838      	bhi.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80061ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80061d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061d6:	d00d      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80061d8:	e030      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061da:	4b1d      	ldr	r3, [pc, #116]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061e6:	d102      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80061e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006254 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80061ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ec:	e02b      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f2:	e028      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061f4:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006200:	d107      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fae4 	bl	80067d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006210:	e019      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006216:	e016      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006218:	4b0d      	ldr	r3, [pc, #52]	@ (8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006224:	d107      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006226:	f107 0318 	add.w	r3, r7, #24
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f82a 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006234:	e007      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800623a:	e004      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006240:	e001      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006242:	2300      	movs	r3, #0
 8006244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006248:	4618      	mov	r0, r3
 800624a:	3740      	adds	r7, #64	@ 0x40
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	58024400 	.word	0x58024400
 8006254:	017d7840 	.word	0x017d7840

08006258 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800625c:	f7fd ffd6 	bl	800420c <HAL_RCC_GetHCLKFreq>
 8006260:	4602      	mov	r2, r0
 8006262:	4b06      	ldr	r3, [pc, #24]	@ (800627c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	4904      	ldr	r1, [pc, #16]	@ (8006280 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800626e:	5ccb      	ldrb	r3, [r1, r3]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	58024400 	.word	0x58024400
 8006280:	080097e0 	.word	0x080097e0

08006284 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006284:	b480      	push	{r7}
 8006286:	b089      	sub	sp, #36	@ 0x24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800628c:	4ba1      	ldr	r3, [pc, #644]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006296:	4b9f      	ldr	r3, [pc, #636]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629a:	0b1b      	lsrs	r3, r3, #12
 800629c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	091b      	lsrs	r3, r3, #4
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80062ae:	4b99      	ldr	r3, [pc, #612]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b2:	08db      	lsrs	r3, r3, #3
 80062b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8111 	beq.w	80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	f000 8083 	beq.w	80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	f200 80a1 	bhi.w	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d056      	beq.n	800639c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80062ee:	e099      	b.n	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f0:	4b88      	ldr	r3, [pc, #544]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d02d      	beq.n	8006358 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062fc:	4b85      	ldr	r3, [pc, #532]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	08db      	lsrs	r3, r3, #3
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	4a84      	ldr	r2, [pc, #528]	@ (8006518 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006308:	fa22 f303 	lsr.w	r3, r2, r3
 800630c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006326:	4b7b      	ldr	r3, [pc, #492]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006336:	ed97 6a03 	vldr	s12, [r7, #12]
 800633a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800633e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800634a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006356:	e087      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636a:	4b6a      	ldr	r3, [pc, #424]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800636c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006372:	ee07 3a90 	vmov	s15, r3
 8006376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637a:	ed97 6a03 	vldr	s12, [r7, #12]
 800637e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800638e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800639a:	e065      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ae:	4b59      	ldr	r3, [pc, #356]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063de:	e043      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f2:	4b48      	ldr	r3, [pc, #288]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006402:	ed97 6a03 	vldr	s12, [r7, #12]
 8006406:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800640a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006422:	e021      	b.n	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006436:	4b37      	ldr	r3, [pc, #220]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006446:	ed97 6a03 	vldr	s12, [r7, #12]
 800644a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800651c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800644e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800645a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006466:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006468:	4b2a      	ldr	r3, [pc, #168]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	0a5b      	lsrs	r3, r3, #9
 800646e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006482:	edd7 6a07 	vldr	s13, [r7, #28]
 8006486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648e:	ee17 2a90 	vmov	r2, s15
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006496:	4b1f      	ldr	r3, [pc, #124]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	0c1b      	lsrs	r3, r3, #16
 800649c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064bc:	ee17 2a90 	vmov	r2, s15
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80064c4:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	0e1b      	lsrs	r3, r3, #24
 80064ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064de:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ea:	ee17 2a90 	vmov	r2, s15
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064f2:	e008      	b.n	8006506 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	609a      	str	r2, [r3, #8]
}
 8006506:	bf00      	nop
 8006508:	3724      	adds	r7, #36	@ 0x24
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	58024400 	.word	0x58024400
 8006518:	03d09000 	.word	0x03d09000
 800651c:	46000000 	.word	0x46000000
 8006520:	4c742400 	.word	0x4c742400
 8006524:	4a742400 	.word	0x4a742400
 8006528:	4bbebc20 	.word	0x4bbebc20

0800652c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800652c:	b480      	push	{r7}
 800652e:	b089      	sub	sp, #36	@ 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006534:	4ba1      	ldr	r3, [pc, #644]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800653e:	4b9f      	ldr	r3, [pc, #636]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	0d1b      	lsrs	r3, r3, #20
 8006544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006548:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800654a:	4b9c      	ldr	r3, [pc, #624]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006556:	4b99      	ldr	r3, [pc, #612]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	08db      	lsrs	r3, r3, #3
 800655c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	fb02 f303 	mul.w	r3, r2, r3
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8111 	beq.w	800679c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b02      	cmp	r3, #2
 800657e:	f000 8083 	beq.w	8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	2b02      	cmp	r3, #2
 8006586:	f200 80a1 	bhi.w	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d056      	beq.n	8006644 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006596:	e099      	b.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006598:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02d      	beq.n	8006600 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065a4:	4b85      	ldr	r3, [pc, #532]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	08db      	lsrs	r3, r3, #3
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	4a84      	ldr	r2, [pc, #528]	@ (80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
 80065b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	ee07 3a90 	vmov	s15, r3
 80065bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ce:	4b7b      	ldr	r3, [pc, #492]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065de:	ed97 6a03 	vldr	s12, [r7, #12]
 80065e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80065fe:	e087      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800660e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006612:	4b6a      	ldr	r3, [pc, #424]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006622:	ed97 6a03 	vldr	s12, [r7, #12]
 8006626:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800662a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006642:	e065      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006656:	4b59      	ldr	r3, [pc, #356]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006666:	ed97 6a03 	vldr	s12, [r7, #12]
 800666a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800666e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800667a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006686:	e043      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006692:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669a:	4b48      	ldr	r3, [pc, #288]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ca:	e021      	b.n	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066de:	4b37      	ldr	r3, [pc, #220]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80066f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800670e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006710:	4b2a      	ldr	r3, [pc, #168]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	0a5b      	lsrs	r3, r3, #9
 8006716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800672a:	edd7 6a07 	vldr	s13, [r7, #28]
 800672e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006736:	ee17 2a90 	vmov	r2, s15
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800673e:	4b1f      	ldr	r3, [pc, #124]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006758:	edd7 6a07 	vldr	s13, [r7, #28]
 800675c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006764:	ee17 2a90 	vmov	r2, s15
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800676c:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006770:	0e1b      	lsrs	r3, r3, #24
 8006772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006786:	edd7 6a07 	vldr	s13, [r7, #28]
 800678a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800678e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006792:	ee17 2a90 	vmov	r2, s15
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800679a:	e008      	b.n	80067ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	609a      	str	r2, [r3, #8]
}
 80067ae:	bf00      	nop
 80067b0:	3724      	adds	r7, #36	@ 0x24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	58024400 	.word	0x58024400
 80067c0:	03d09000 	.word	0x03d09000
 80067c4:	46000000 	.word	0x46000000
 80067c8:	4c742400 	.word	0x4c742400
 80067cc:	4a742400 	.word	0x4a742400
 80067d0:	4bbebc20 	.word	0x4bbebc20

080067d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b089      	sub	sp, #36	@ 0x24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80067dc:	4ba0      	ldr	r3, [pc, #640]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80067e6:	4b9e      	ldr	r3, [pc, #632]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80067f2:	4b9b      	ldr	r3, [pc, #620]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067fc:	4b98      	ldr	r3, [pc, #608]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006800:	08db      	lsrs	r3, r3, #3
 8006802:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	fb02 f303 	mul.w	r3, r2, r3
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006814:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8111 	beq.w	8006a42 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b02      	cmp	r3, #2
 8006824:	f000 8083 	beq.w	800692e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b02      	cmp	r3, #2
 800682c:	f200 80a1 	bhi.w	8006972 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d056      	beq.n	80068ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800683c:	e099      	b.n	8006972 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800683e:	4b88      	ldr	r3, [pc, #544]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d02d      	beq.n	80068a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800684a:	4b85      	ldr	r3, [pc, #532]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	08db      	lsrs	r3, r3, #3
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	4a83      	ldr	r2, [pc, #524]	@ (8006a64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006856:	fa22 f303 	lsr.w	r3, r2, r3
 800685a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006874:	4b7a      	ldr	r3, [pc, #488]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006884:	ed97 6a03 	vldr	s12, [r7, #12]
 8006888:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800688c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80068a4:	e087      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80068b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068b8:	4b69      	ldr	r3, [pc, #420]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80068cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068e8:	e065      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	ee07 3a90 	vmov	s15, r3
 80068f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006a70 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80068f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fc:	4b58      	ldr	r3, [pc, #352]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006910:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006928:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800692c:	e043      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	ee07 3a90 	vmov	s15, r3
 8006934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006938:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800693c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006940:	4b47      	ldr	r3, [pc, #284]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006950:	ed97 6a03 	vldr	s12, [r7, #12]
 8006954:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006960:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006970:	e021      	b.n	80069b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006a6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006984:	4b36      	ldr	r3, [pc, #216]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698c:	ee07 3a90 	vmov	s15, r3
 8006990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006994:	ed97 6a03 	vldr	s12, [r7, #12]
 8006998:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006a68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800699c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80069b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	0a5b      	lsrs	r3, r3, #9
 80069bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069dc:	ee17 2a90 	vmov	r2, s15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80069e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a0a:	ee17 2a90 	vmov	r2, s15
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006a12:	4b13      	ldr	r3, [pc, #76]	@ (8006a60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a16:	0e1b      	lsrs	r3, r3, #24
 8006a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a38:	ee17 2a90 	vmov	r2, s15
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006a40:	e008      	b.n	8006a54 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	bf00      	nop
 8006a56:	3724      	adds	r7, #36	@ 0x24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	58024400 	.word	0x58024400
 8006a64:	03d09000 	.word	0x03d09000
 8006a68:	46000000 	.word	0x46000000
 8006a6c:	4c742400 	.word	0x4c742400
 8006a70:	4a742400 	.word	0x4a742400
 8006a74:	4bbebc20 	.word	0x4bbebc20

08006a78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a86:	4b53      	ldr	r3, [pc, #332]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d101      	bne.n	8006a96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e099      	b.n	8006bca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a96:	4b4f      	ldr	r3, [pc, #316]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006a9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa2:	f7fa fbd5 	bl	8001250 <HAL_GetTick>
 8006aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006aa8:	e008      	b.n	8006abc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006aaa:	f7fa fbd1 	bl	8001250 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e086      	b.n	8006bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006abc:	4b45      	ldr	r3, [pc, #276]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f0      	bne.n	8006aaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ac8:	4b42      	ldr	r3, [pc, #264]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	493f      	ldr	r1, [pc, #252]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	628b      	str	r3, [r1, #40]	@ 0x28
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	025b      	lsls	r3, r3, #9
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	041b      	lsls	r3, r3, #16
 8006afa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b0c:	4931      	ldr	r1, [pc, #196]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b12:	4b30      	ldr	r3, [pc, #192]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	492d      	ldr	r1, [pc, #180]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b24:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	f023 0220 	bic.w	r2, r3, #32
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	4928      	ldr	r1, [pc, #160]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b36:	4b27      	ldr	r3, [pc, #156]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a26      	ldr	r2, [pc, #152]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b3c:	f023 0310 	bic.w	r3, r3, #16
 8006b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b42:	4b24      	ldr	r3, [pc, #144]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b46:	4b24      	ldr	r3, [pc, #144]	@ (8006bd8 <RCCEx_PLL2_Config+0x160>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	69d2      	ldr	r2, [r2, #28]
 8006b4e:	00d2      	lsls	r2, r2, #3
 8006b50:	4920      	ldr	r1, [pc, #128]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b56:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b5c:	f043 0310 	orr.w	r3, r3, #16
 8006b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b68:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	4a19      	ldr	r2, [pc, #100]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b74:	e00f      	b.n	8006b96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d106      	bne.n	8006b8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b7c:	4b15      	ldr	r3, [pc, #84]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b80:	4a14      	ldr	r2, [pc, #80]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b88:	e005      	b.n	8006b96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b8a:	4b12      	ldr	r3, [pc, #72]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8e:	4a11      	ldr	r2, [pc, #68]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b96:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba2:	f7fa fb55 	bl	8001250 <HAL_GetTick>
 8006ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ba8:	e008      	b.n	8006bbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006baa:	f7fa fb51 	bl	8001250 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e006      	b.n	8006bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bbc:	4b05      	ldr	r3, [pc, #20]	@ (8006bd4 <RCCEx_PLL2_Config+0x15c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	58024400 	.word	0x58024400
 8006bd8:	ffff0007 	.word	0xffff0007

08006bdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bea:	4b53      	ldr	r3, [pc, #332]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d101      	bne.n	8006bfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e099      	b.n	8006d2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c06:	f7fa fb23 	bl	8001250 <HAL_GetTick>
 8006c0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c0c:	e008      	b.n	8006c20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c0e:	f7fa fb1f 	bl	8001250 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e086      	b.n	8006d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c20:	4b45      	ldr	r3, [pc, #276]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f0      	bne.n	8006c0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c2c:	4b42      	ldr	r3, [pc, #264]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	051b      	lsls	r3, r3, #20
 8006c3a:	493f      	ldr	r1, [pc, #252]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	025b      	lsls	r3, r3, #9
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	061b      	lsls	r3, r3, #24
 8006c6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c70:	4931      	ldr	r1, [pc, #196]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c76:	4b30      	ldr	r3, [pc, #192]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	492d      	ldr	r1, [pc, #180]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c88:	4b2b      	ldr	r3, [pc, #172]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	4928      	ldr	r1, [pc, #160]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c9a:	4b27      	ldr	r3, [pc, #156]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	4a26      	ldr	r2, [pc, #152]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ca6:	4b24      	ldr	r3, [pc, #144]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006caa:	4b24      	ldr	r3, [pc, #144]	@ (8006d3c <RCCEx_PLL3_Config+0x160>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	69d2      	ldr	r2, [r2, #28]
 8006cb2:	00d2      	lsls	r2, r2, #3
 8006cb4:	4920      	ldr	r1, [pc, #128]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006cba:	4b1f      	ldr	r3, [pc, #124]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	4a19      	ldr	r2, [pc, #100]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cd8:	e00f      	b.n	8006cfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d106      	bne.n	8006cee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ce0:	4b15      	ldr	r3, [pc, #84]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	4a14      	ldr	r2, [pc, #80]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006ce6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006cec:	e005      	b.n	8006cfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006cee:	4b12      	ldr	r3, [pc, #72]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	4a11      	ldr	r2, [pc, #68]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d06:	f7fa faa3 	bl	8001250 <HAL_GetTick>
 8006d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d0c:	e008      	b.n	8006d20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d0e:	f7fa fa9f 	bl	8001250 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e006      	b.n	8006d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006d20:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <RCCEx_PLL3_Config+0x15c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	58024400 	.word	0x58024400
 8006d3c:	ffff0007 	.word	0xffff0007

08006d40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e049      	b.n	8006de6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d106      	bne.n	8006d6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fa f874 	bl	8000e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f000 fa58 	bl	8007234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <HAL_TIM_PWM_Start+0x24>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	bf14      	ite	ne
 8006e0c:	2301      	movne	r3, #1
 8006e0e:	2300      	moveq	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	e03c      	b.n	8006e8e <HAL_TIM_PWM_Start+0x9e>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d109      	bne.n	8006e2e <HAL_TIM_PWM_Start+0x3e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	bf14      	ite	ne
 8006e26:	2301      	movne	r3, #1
 8006e28:	2300      	moveq	r3, #0
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	e02f      	b.n	8006e8e <HAL_TIM_PWM_Start+0x9e>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d109      	bne.n	8006e48 <HAL_TIM_PWM_Start+0x58>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	bf14      	ite	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	2300      	moveq	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	e022      	b.n	8006e8e <HAL_TIM_PWM_Start+0x9e>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b0c      	cmp	r3, #12
 8006e4c:	d109      	bne.n	8006e62 <HAL_TIM_PWM_Start+0x72>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	bf14      	ite	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	2300      	moveq	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	e015      	b.n	8006e8e <HAL_TIM_PWM_Start+0x9e>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d109      	bne.n	8006e7c <HAL_TIM_PWM_Start+0x8c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	bf14      	ite	ne
 8006e74:	2301      	movne	r3, #1
 8006e76:	2300      	moveq	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	e008      	b.n	8006e8e <HAL_TIM_PWM_Start+0x9e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e0a1      	b.n	8006fda <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0xb6>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ea4:	e023      	b.n	8006eee <HAL_TIM_PWM_Start+0xfe>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d104      	bne.n	8006eb6 <HAL_TIM_PWM_Start+0xc6>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eb4:	e01b      	b.n	8006eee <HAL_TIM_PWM_Start+0xfe>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d104      	bne.n	8006ec6 <HAL_TIM_PWM_Start+0xd6>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec4:	e013      	b.n	8006eee <HAL_TIM_PWM_Start+0xfe>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	d104      	bne.n	8006ed6 <HAL_TIM_PWM_Start+0xe6>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed4:	e00b      	b.n	8006eee <HAL_TIM_PWM_Start+0xfe>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b10      	cmp	r3, #16
 8006eda:	d104      	bne.n	8006ee6 <HAL_TIM_PWM_Start+0xf6>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ee4:	e003      	b.n	8006eee <HAL_TIM_PWM_Start+0xfe>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fd18 	bl	800792c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a38      	ldr	r2, [pc, #224]	@ (8006fe4 <HAL_TIM_PWM_Start+0x1f4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x13e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a37      	ldr	r2, [pc, #220]	@ (8006fe8 <HAL_TIM_PWM_Start+0x1f8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x13e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a35      	ldr	r2, [pc, #212]	@ (8006fec <HAL_TIM_PWM_Start+0x1fc>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x13e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a34      	ldr	r2, [pc, #208]	@ (8006ff0 <HAL_TIM_PWM_Start+0x200>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x13e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a32      	ldr	r2, [pc, #200]	@ (8006ff4 <HAL_TIM_PWM_Start+0x204>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_PWM_Start+0x142>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <HAL_TIM_PWM_Start+0x144>
 8006f32:	2300      	movs	r3, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a25      	ldr	r2, [pc, #148]	@ (8006fe4 <HAL_TIM_PWM_Start+0x1f4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d022      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x1a8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5a:	d01d      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x1a8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a25      	ldr	r2, [pc, #148]	@ (8006ff8 <HAL_TIM_PWM_Start+0x208>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d018      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x1a8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a24      	ldr	r2, [pc, #144]	@ (8006ffc <HAL_TIM_PWM_Start+0x20c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x1a8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a22      	ldr	r2, [pc, #136]	@ (8007000 <HAL_TIM_PWM_Start+0x210>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x1a8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe8 <HAL_TIM_PWM_Start+0x1f8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x1a8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1e      	ldr	r2, [pc, #120]	@ (8007004 <HAL_TIM_PWM_Start+0x214>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x1a8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <HAL_TIM_PWM_Start+0x1fc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d115      	bne.n	8006fc4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007008 <HAL_TIM_PWM_Start+0x218>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b06      	cmp	r3, #6
 8006fa8:	d015      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x1e6>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb0:	d011      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0201 	orr.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc2:	e008      	b.n	8006fd6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e000      	b.n	8006fd8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40010400 	.word	0x40010400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40001800 	.word	0x40001800
 8007008:	00010007 	.word	0x00010007

0800700c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007026:	2302      	movs	r3, #2
 8007028:	e0ff      	b.n	800722a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b14      	cmp	r3, #20
 8007036:	f200 80f0 	bhi.w	800721a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800703a:	a201      	add	r2, pc, #4	@ (adr r2, 8007040 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007095 	.word	0x08007095
 8007044:	0800721b 	.word	0x0800721b
 8007048:	0800721b 	.word	0x0800721b
 800704c:	0800721b 	.word	0x0800721b
 8007050:	080070d5 	.word	0x080070d5
 8007054:	0800721b 	.word	0x0800721b
 8007058:	0800721b 	.word	0x0800721b
 800705c:	0800721b 	.word	0x0800721b
 8007060:	08007117 	.word	0x08007117
 8007064:	0800721b 	.word	0x0800721b
 8007068:	0800721b 	.word	0x0800721b
 800706c:	0800721b 	.word	0x0800721b
 8007070:	08007157 	.word	0x08007157
 8007074:	0800721b 	.word	0x0800721b
 8007078:	0800721b 	.word	0x0800721b
 800707c:	0800721b 	.word	0x0800721b
 8007080:	08007199 	.word	0x08007199
 8007084:	0800721b 	.word	0x0800721b
 8007088:	0800721b 	.word	0x0800721b
 800708c:	0800721b 	.word	0x0800721b
 8007090:	080071d9 	.word	0x080071d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f970 	bl	8007380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0208 	orr.w	r2, r2, #8
 80070ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0204 	bic.w	r2, r2, #4
 80070be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6999      	ldr	r1, [r3, #24]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	619a      	str	r2, [r3, #24]
      break;
 80070d2:	e0a5      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f9e0 	bl	80074a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6999      	ldr	r1, [r3, #24]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	021a      	lsls	r2, r3, #8
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	619a      	str	r2, [r3, #24]
      break;
 8007114:	e084      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fa49 	bl	80075b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0208 	orr.w	r2, r2, #8
 8007130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0204 	bic.w	r2, r2, #4
 8007140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69d9      	ldr	r1, [r3, #28]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	61da      	str	r2, [r3, #28]
      break;
 8007154:	e064      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fab1 	bl	80076c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69da      	ldr	r2, [r3, #28]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69d9      	ldr	r1, [r3, #28]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	021a      	lsls	r2, r3, #8
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	61da      	str	r2, [r3, #28]
      break;
 8007196:	e043      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fafa 	bl	8007798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0208 	orr.w	r2, r2, #8
 80071b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0204 	bic.w	r2, r2, #4
 80071c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80071d6:	e023      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fb3e 	bl	8007860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007202:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	021a      	lsls	r2, r3, #8
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007218:	e002      	b.n	8007220 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	75fb      	strb	r3, [r7, #23]
      break;
 800721e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop

08007234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a46      	ldr	r2, [pc, #280]	@ (8007360 <TIM_Base_SetConfig+0x12c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007252:	d00f      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a43      	ldr	r2, [pc, #268]	@ (8007364 <TIM_Base_SetConfig+0x130>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00b      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a42      	ldr	r2, [pc, #264]	@ (8007368 <TIM_Base_SetConfig+0x134>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d007      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a41      	ldr	r2, [pc, #260]	@ (800736c <TIM_Base_SetConfig+0x138>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_Base_SetConfig+0x40>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a40      	ldr	r2, [pc, #256]	@ (8007370 <TIM_Base_SetConfig+0x13c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d108      	bne.n	8007286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800727a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a35      	ldr	r2, [pc, #212]	@ (8007360 <TIM_Base_SetConfig+0x12c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d01f      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007294:	d01b      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a32      	ldr	r2, [pc, #200]	@ (8007364 <TIM_Base_SetConfig+0x130>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d017      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a31      	ldr	r2, [pc, #196]	@ (8007368 <TIM_Base_SetConfig+0x134>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a30      	ldr	r2, [pc, #192]	@ (800736c <TIM_Base_SetConfig+0x138>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00f      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a2f      	ldr	r2, [pc, #188]	@ (8007370 <TIM_Base_SetConfig+0x13c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00b      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007374 <TIM_Base_SetConfig+0x140>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d007      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007378 <TIM_Base_SetConfig+0x144>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d003      	beq.n	80072ce <TIM_Base_SetConfig+0x9a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2c      	ldr	r2, [pc, #176]	@ (800737c <TIM_Base_SetConfig+0x148>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d108      	bne.n	80072e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	689a      	ldr	r2, [r3, #8]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a16      	ldr	r2, [pc, #88]	@ (8007360 <TIM_Base_SetConfig+0x12c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00f      	beq.n	800732c <TIM_Base_SetConfig+0xf8>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a18      	ldr	r2, [pc, #96]	@ (8007370 <TIM_Base_SetConfig+0x13c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_Base_SetConfig+0xf8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a17      	ldr	r2, [pc, #92]	@ (8007374 <TIM_Base_SetConfig+0x140>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_Base_SetConfig+0xf8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a16      	ldr	r2, [pc, #88]	@ (8007378 <TIM_Base_SetConfig+0x144>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_Base_SetConfig+0xf8>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a15      	ldr	r2, [pc, #84]	@ (800737c <TIM_Base_SetConfig+0x148>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d103      	bne.n	8007334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d105      	bne.n	8007352 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f023 0201 	bic.w	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	611a      	str	r2, [r3, #16]
  }
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40010000 	.word	0x40010000
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40000c00 	.word	0x40000c00
 8007370:	40010400 	.word	0x40010400
 8007374:	40014000 	.word	0x40014000
 8007378:	40014400 	.word	0x40014400
 800737c:	40014800 	.word	0x40014800

08007380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f023 0201 	bic.w	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4b37      	ldr	r3, [pc, #220]	@ (8007488 <TIM_OC1_SetConfig+0x108>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0303 	bic.w	r3, r3, #3
 80073b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f023 0302 	bic.w	r3, r3, #2
 80073c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a2d      	ldr	r2, [pc, #180]	@ (800748c <TIM_OC1_SetConfig+0x10c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00f      	beq.n	80073fc <TIM_OC1_SetConfig+0x7c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a2c      	ldr	r2, [pc, #176]	@ (8007490 <TIM_OC1_SetConfig+0x110>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00b      	beq.n	80073fc <TIM_OC1_SetConfig+0x7c>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007494 <TIM_OC1_SetConfig+0x114>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d007      	beq.n	80073fc <TIM_OC1_SetConfig+0x7c>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007498 <TIM_OC1_SetConfig+0x118>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d003      	beq.n	80073fc <TIM_OC1_SetConfig+0x7c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a29      	ldr	r2, [pc, #164]	@ (800749c <TIM_OC1_SetConfig+0x11c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d10c      	bne.n	8007416 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f023 0308 	bic.w	r3, r3, #8
 8007402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f023 0304 	bic.w	r3, r3, #4
 8007414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a1c      	ldr	r2, [pc, #112]	@ (800748c <TIM_OC1_SetConfig+0x10c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <TIM_OC1_SetConfig+0xbe>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1b      	ldr	r2, [pc, #108]	@ (8007490 <TIM_OC1_SetConfig+0x110>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_OC1_SetConfig+0xbe>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1a      	ldr	r2, [pc, #104]	@ (8007494 <TIM_OC1_SetConfig+0x114>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_OC1_SetConfig+0xbe>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a19      	ldr	r2, [pc, #100]	@ (8007498 <TIM_OC1_SetConfig+0x118>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_OC1_SetConfig+0xbe>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a18      	ldr	r2, [pc, #96]	@ (800749c <TIM_OC1_SetConfig+0x11c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d111      	bne.n	8007462 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800744c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4313      	orrs	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	621a      	str	r2, [r3, #32]
}
 800747c:	bf00      	nop
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	fffeff8f 	.word	0xfffeff8f
 800748c:	40010000 	.word	0x40010000
 8007490:	40010400 	.word	0x40010400
 8007494:	40014000 	.word	0x40014000
 8007498:	40014400 	.word	0x40014400
 800749c:	40014800 	.word	0x40014800

080074a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	f023 0210 	bic.w	r2, r3, #16
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4b34      	ldr	r3, [pc, #208]	@ (800759c <TIM_OC2_SetConfig+0xfc>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0320 	bic.w	r3, r3, #32
 80074ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a29      	ldr	r2, [pc, #164]	@ (80075a0 <TIM_OC2_SetConfig+0x100>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_OC2_SetConfig+0x68>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a28      	ldr	r2, [pc, #160]	@ (80075a4 <TIM_OC2_SetConfig+0x104>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d10d      	bne.n	8007524 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800750e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a1e      	ldr	r2, [pc, #120]	@ (80075a0 <TIM_OC2_SetConfig+0x100>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00f      	beq.n	800754c <TIM_OC2_SetConfig+0xac>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a1d      	ldr	r2, [pc, #116]	@ (80075a4 <TIM_OC2_SetConfig+0x104>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00b      	beq.n	800754c <TIM_OC2_SetConfig+0xac>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a1c      	ldr	r2, [pc, #112]	@ (80075a8 <TIM_OC2_SetConfig+0x108>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_OC2_SetConfig+0xac>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a1b      	ldr	r2, [pc, #108]	@ (80075ac <TIM_OC2_SetConfig+0x10c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_OC2_SetConfig+0xac>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1a      	ldr	r2, [pc, #104]	@ (80075b0 <TIM_OC2_SetConfig+0x110>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d113      	bne.n	8007574 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	feff8fff 	.word	0xfeff8fff
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40010400 	.word	0x40010400
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800

080075b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4b33      	ldr	r3, [pc, #204]	@ (80076ac <TIM_OC3_SetConfig+0xf8>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a28      	ldr	r2, [pc, #160]	@ (80076b0 <TIM_OC3_SetConfig+0xfc>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_OC3_SetConfig+0x66>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a27      	ldr	r2, [pc, #156]	@ (80076b4 <TIM_OC3_SetConfig+0x100>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d10d      	bne.n	8007636 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1d      	ldr	r2, [pc, #116]	@ (80076b0 <TIM_OC3_SetConfig+0xfc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00f      	beq.n	800765e <TIM_OC3_SetConfig+0xaa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1c      	ldr	r2, [pc, #112]	@ (80076b4 <TIM_OC3_SetConfig+0x100>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00b      	beq.n	800765e <TIM_OC3_SetConfig+0xaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1b      	ldr	r2, [pc, #108]	@ (80076b8 <TIM_OC3_SetConfig+0x104>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d007      	beq.n	800765e <TIM_OC3_SetConfig+0xaa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1a      	ldr	r2, [pc, #104]	@ (80076bc <TIM_OC3_SetConfig+0x108>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_OC3_SetConfig+0xaa>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a19      	ldr	r2, [pc, #100]	@ (80076c0 <TIM_OC3_SetConfig+0x10c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d113      	bne.n	8007686 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800766c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	621a      	str	r2, [r3, #32]
}
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	fffeff8f 	.word	0xfffeff8f
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800

080076c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4b24      	ldr	r3, [pc, #144]	@ (8007780 <TIM_OC4_SetConfig+0xbc>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800770e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	031b      	lsls	r3, r3, #12
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a19      	ldr	r2, [pc, #100]	@ (8007784 <TIM_OC4_SetConfig+0xc0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00f      	beq.n	8007744 <TIM_OC4_SetConfig+0x80>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a18      	ldr	r2, [pc, #96]	@ (8007788 <TIM_OC4_SetConfig+0xc4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00b      	beq.n	8007744 <TIM_OC4_SetConfig+0x80>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a17      	ldr	r2, [pc, #92]	@ (800778c <TIM_OC4_SetConfig+0xc8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d007      	beq.n	8007744 <TIM_OC4_SetConfig+0x80>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a16      	ldr	r2, [pc, #88]	@ (8007790 <TIM_OC4_SetConfig+0xcc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_OC4_SetConfig+0x80>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <TIM_OC4_SetConfig+0xd0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d109      	bne.n	8007758 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800774a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	019b      	lsls	r3, r3, #6
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	feff8fff 	.word	0xfeff8fff
 8007784:	40010000 	.word	0x40010000
 8007788:	40010400 	.word	0x40010400
 800778c:	40014000 	.word	0x40014000
 8007790:	40014400 	.word	0x40014400
 8007794:	40014800 	.word	0x40014800

08007798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4b21      	ldr	r3, [pc, #132]	@ (8007848 <TIM_OC5_SetConfig+0xb0>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a18      	ldr	r2, [pc, #96]	@ (800784c <TIM_OC5_SetConfig+0xb4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00f      	beq.n	800780e <TIM_OC5_SetConfig+0x76>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a17      	ldr	r2, [pc, #92]	@ (8007850 <TIM_OC5_SetConfig+0xb8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00b      	beq.n	800780e <TIM_OC5_SetConfig+0x76>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a16      	ldr	r2, [pc, #88]	@ (8007854 <TIM_OC5_SetConfig+0xbc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d007      	beq.n	800780e <TIM_OC5_SetConfig+0x76>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a15      	ldr	r2, [pc, #84]	@ (8007858 <TIM_OC5_SetConfig+0xc0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d003      	beq.n	800780e <TIM_OC5_SetConfig+0x76>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a14      	ldr	r2, [pc, #80]	@ (800785c <TIM_OC5_SetConfig+0xc4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d109      	bne.n	8007822 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	fffeff8f 	.word	0xfffeff8f
 800784c:	40010000 	.word	0x40010000
 8007850:	40010400 	.word	0x40010400
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4b22      	ldr	r3, [pc, #136]	@ (8007914 <TIM_OC6_SetConfig+0xb4>)
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	051b      	lsls	r3, r3, #20
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a19      	ldr	r2, [pc, #100]	@ (8007918 <TIM_OC6_SetConfig+0xb8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00f      	beq.n	80078d8 <TIM_OC6_SetConfig+0x78>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a18      	ldr	r2, [pc, #96]	@ (800791c <TIM_OC6_SetConfig+0xbc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00b      	beq.n	80078d8 <TIM_OC6_SetConfig+0x78>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a17      	ldr	r2, [pc, #92]	@ (8007920 <TIM_OC6_SetConfig+0xc0>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d007      	beq.n	80078d8 <TIM_OC6_SetConfig+0x78>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a16      	ldr	r2, [pc, #88]	@ (8007924 <TIM_OC6_SetConfig+0xc4>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_OC6_SetConfig+0x78>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a15      	ldr	r2, [pc, #84]	@ (8007928 <TIM_OC6_SetConfig+0xc8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d109      	bne.n	80078ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	029b      	lsls	r3, r3, #10
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	feff8fff 	.word	0xfeff8fff
 8007918:	40010000 	.word	0x40010000
 800791c:	40010400 	.word	0x40010400
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800

0800792c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 031f 	and.w	r3, r3, #31
 800793e:	2201      	movs	r2, #1
 8007940:	fa02 f303 	lsl.w	r3, r2, r3
 8007944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a1a      	ldr	r2, [r3, #32]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	43db      	mvns	r3, r3
 800794e:	401a      	ands	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6a1a      	ldr	r2, [r3, #32]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	fa01 f303 	lsl.w	r3, r1, r3
 8007964:	431a      	orrs	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800798c:	2302      	movs	r3, #2
 800798e:	e06d      	b.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a30      	ldr	r2, [pc, #192]	@ (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d004      	beq.n	80079c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a2f      	ldr	r2, [pc, #188]	@ (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d108      	bne.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80079ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a20      	ldr	r2, [pc, #128]	@ (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d022      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a02:	d01d      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1d      	ldr	r2, [pc, #116]	@ (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d018      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1c      	ldr	r2, [pc, #112]	@ (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d013      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00e      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a15      	ldr	r2, [pc, #84]	@ (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d009      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a16      	ldr	r2, [pc, #88]	@ (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a15      	ldr	r2, [pc, #84]	@ (8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10c      	bne.n	8007a5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40010400 	.word	0x40010400
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40000800 	.word	0x40000800
 8007a88:	40000c00 	.word	0x40000c00
 8007a8c:	40001800 	.word	0x40001800
 8007a90:	40014000 	.word	0x40014000

08007a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e065      	b.n	8007b7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a16      	ldr	r2, [pc, #88]	@ (8007b88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a14      	ldr	r2, [pc, #80]	@ (8007b8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d115      	bne.n	8007b6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	051b      	lsls	r3, r3, #20
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40010400 	.word	0x40010400

08007b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e042      	b.n	8007c28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d106      	bne.n	8007bba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7f9 f9cb 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2224      	movs	r2, #36	@ 0x24
 8007bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0201 	bic.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fe1e 	bl	800881c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f8b3 	bl	8007d4c <UART_SetConfig>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e01b      	b.n	8007c28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689a      	ldr	r2, [r3, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fe9d 	bl	8008960 <UART_CheckIdleState>
 8007c26:	4603      	mov	r3, r0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	@ 0x28
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d17b      	bne.n	8007d42 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_UART_Transmit+0x26>
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e074      	b.n	8007d44 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2221      	movs	r2, #33	@ 0x21
 8007c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c6a:	f7f9 faf1 	bl	8001250 <HAL_GetTick>
 8007c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	88fa      	ldrh	r2, [r7, #6]
 8007c7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c88:	d108      	bne.n	8007c9c <HAL_UART_Transmit+0x6c>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	61bb      	str	r3, [r7, #24]
 8007c9a:	e003      	b.n	8007ca4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ca4:	e030      	b.n	8007d08 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	2180      	movs	r1, #128	@ 0x80
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 feff 	bl	8008ab4 <UART_WaitOnFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e03d      	b.n	8007d44 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10b      	bne.n	8007ce6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cdc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	61bb      	str	r3, [r7, #24]
 8007ce4:	e007      	b.n	8007cf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1c8      	bne.n	8007ca6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2140      	movs	r1, #64	@ 0x40
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 fec8 	bl	8008ab4 <UART_WaitOnFlagUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e006      	b.n	8007d44 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e000      	b.n	8007d44 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007d42:	2302      	movs	r3, #2
  }
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3720      	adds	r7, #32
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d50:	b092      	sub	sp, #72	@ 0x48
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	431a      	orrs	r2, r3
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4bbe      	ldr	r3, [pc, #760]	@ (8008074 <UART_SetConfig+0x328>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4ab3      	ldr	r2, [pc, #716]	@ (8008078 <UART_SetConfig+0x32c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007db4:	4313      	orrs	r3, r2
 8007db6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	4baf      	ldr	r3, [pc, #700]	@ (800807c <UART_SetConfig+0x330>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd2:	f023 010f 	bic.w	r1, r3, #15
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4aa6      	ldr	r2, [pc, #664]	@ (8008080 <UART_SetConfig+0x334>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d177      	bne.n	8007edc <UART_SetConfig+0x190>
 8007dec:	4ba5      	ldr	r3, [pc, #660]	@ (8008084 <UART_SetConfig+0x338>)
 8007dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007df4:	2b28      	cmp	r3, #40	@ 0x28
 8007df6:	d86d      	bhi.n	8007ed4 <UART_SetConfig+0x188>
 8007df8:	a201      	add	r2, pc, #4	@ (adr r2, 8007e00 <UART_SetConfig+0xb4>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007ea5 	.word	0x08007ea5
 8007e04:	08007ed5 	.word	0x08007ed5
 8007e08:	08007ed5 	.word	0x08007ed5
 8007e0c:	08007ed5 	.word	0x08007ed5
 8007e10:	08007ed5 	.word	0x08007ed5
 8007e14:	08007ed5 	.word	0x08007ed5
 8007e18:	08007ed5 	.word	0x08007ed5
 8007e1c:	08007ed5 	.word	0x08007ed5
 8007e20:	08007ead 	.word	0x08007ead
 8007e24:	08007ed5 	.word	0x08007ed5
 8007e28:	08007ed5 	.word	0x08007ed5
 8007e2c:	08007ed5 	.word	0x08007ed5
 8007e30:	08007ed5 	.word	0x08007ed5
 8007e34:	08007ed5 	.word	0x08007ed5
 8007e38:	08007ed5 	.word	0x08007ed5
 8007e3c:	08007ed5 	.word	0x08007ed5
 8007e40:	08007eb5 	.word	0x08007eb5
 8007e44:	08007ed5 	.word	0x08007ed5
 8007e48:	08007ed5 	.word	0x08007ed5
 8007e4c:	08007ed5 	.word	0x08007ed5
 8007e50:	08007ed5 	.word	0x08007ed5
 8007e54:	08007ed5 	.word	0x08007ed5
 8007e58:	08007ed5 	.word	0x08007ed5
 8007e5c:	08007ed5 	.word	0x08007ed5
 8007e60:	08007ebd 	.word	0x08007ebd
 8007e64:	08007ed5 	.word	0x08007ed5
 8007e68:	08007ed5 	.word	0x08007ed5
 8007e6c:	08007ed5 	.word	0x08007ed5
 8007e70:	08007ed5 	.word	0x08007ed5
 8007e74:	08007ed5 	.word	0x08007ed5
 8007e78:	08007ed5 	.word	0x08007ed5
 8007e7c:	08007ed5 	.word	0x08007ed5
 8007e80:	08007ec5 	.word	0x08007ec5
 8007e84:	08007ed5 	.word	0x08007ed5
 8007e88:	08007ed5 	.word	0x08007ed5
 8007e8c:	08007ed5 	.word	0x08007ed5
 8007e90:	08007ed5 	.word	0x08007ed5
 8007e94:	08007ed5 	.word	0x08007ed5
 8007e98:	08007ed5 	.word	0x08007ed5
 8007e9c:	08007ed5 	.word	0x08007ed5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eaa:	e222      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007eac:	2304      	movs	r3, #4
 8007eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb2:	e21e      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e21a      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007ebc:	2310      	movs	r3, #16
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e216      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007ec4:	2320      	movs	r3, #32
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eca:	e212      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007ecc:	2340      	movs	r3, #64	@ 0x40
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed2:	e20e      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007ed4:	2380      	movs	r3, #128	@ 0x80
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eda:	e20a      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a69      	ldr	r2, [pc, #420]	@ (8008088 <UART_SetConfig+0x33c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d130      	bne.n	8007f48 <UART_SetConfig+0x1fc>
 8007ee6:	4b67      	ldr	r3, [pc, #412]	@ (8008084 <UART_SetConfig+0x338>)
 8007ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d826      	bhi.n	8007f40 <UART_SetConfig+0x1f4>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <UART_SetConfig+0x1ac>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f11 	.word	0x08007f11
 8007efc:	08007f19 	.word	0x08007f19
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007f29 	.word	0x08007f29
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	2300      	movs	r3, #0
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f16:	e1ec      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1e:	e1e8      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f20:	2308      	movs	r3, #8
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f26:	e1e4      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f28:	2310      	movs	r3, #16
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e1e0      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f30:	2320      	movs	r3, #32
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e1dc      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f38:	2340      	movs	r3, #64	@ 0x40
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e1d8      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f40:	2380      	movs	r3, #128	@ 0x80
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e1d4      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800808c <UART_SetConfig+0x340>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d130      	bne.n	8007fb4 <UART_SetConfig+0x268>
 8007f52:	4b4c      	ldr	r3, [pc, #304]	@ (8008084 <UART_SetConfig+0x338>)
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	d826      	bhi.n	8007fac <UART_SetConfig+0x260>
 8007f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <UART_SetConfig+0x218>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f7d 	.word	0x08007f7d
 8007f68:	08007f85 	.word	0x08007f85
 8007f6c:	08007f8d 	.word	0x08007f8d
 8007f70:	08007f95 	.word	0x08007f95
 8007f74:	08007f9d 	.word	0x08007f9d
 8007f78:	08007fa5 	.word	0x08007fa5
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e1b6      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f84:	2304      	movs	r3, #4
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	e1b2      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f8c:	2308      	movs	r3, #8
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f92:	e1ae      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f94:	2310      	movs	r3, #16
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9a:	e1aa      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e1a6      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007fa4:	2340      	movs	r3, #64	@ 0x40
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007faa:	e1a2      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007fac:	2380      	movs	r3, #128	@ 0x80
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e19e      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a35      	ldr	r2, [pc, #212]	@ (8008090 <UART_SetConfig+0x344>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d130      	bne.n	8008020 <UART_SetConfig+0x2d4>
 8007fbe:	4b31      	ldr	r3, [pc, #196]	@ (8008084 <UART_SetConfig+0x338>)
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b05      	cmp	r3, #5
 8007fc8:	d826      	bhi.n	8008018 <UART_SetConfig+0x2cc>
 8007fca:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd0 <UART_SetConfig+0x284>)
 8007fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd0:	08007fe9 	.word	0x08007fe9
 8007fd4:	08007ff1 	.word	0x08007ff1
 8007fd8:	08007ff9 	.word	0x08007ff9
 8007fdc:	08008001 	.word	0x08008001
 8007fe0:	08008009 	.word	0x08008009
 8007fe4:	08008011 	.word	0x08008011
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e180      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007ff0:	2304      	movs	r3, #4
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e17c      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffe:	e178      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008000:	2310      	movs	r3, #16
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e174      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008008:	2320      	movs	r3, #32
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e170      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008010:	2340      	movs	r3, #64	@ 0x40
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008016:	e16c      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008018:	2380      	movs	r3, #128	@ 0x80
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801e:	e168      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a1b      	ldr	r2, [pc, #108]	@ (8008094 <UART_SetConfig+0x348>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d142      	bne.n	80080b0 <UART_SetConfig+0x364>
 800802a:	4b16      	ldr	r3, [pc, #88]	@ (8008084 <UART_SetConfig+0x338>)
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	2b05      	cmp	r3, #5
 8008034:	d838      	bhi.n	80080a8 <UART_SetConfig+0x35c>
 8008036:	a201      	add	r2, pc, #4	@ (adr r2, 800803c <UART_SetConfig+0x2f0>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	08008055 	.word	0x08008055
 8008040:	0800805d 	.word	0x0800805d
 8008044:	08008065 	.word	0x08008065
 8008048:	0800806d 	.word	0x0800806d
 800804c:	08008099 	.word	0x08008099
 8008050:	080080a1 	.word	0x080080a1
 8008054:	2300      	movs	r3, #0
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e14a      	b.n	80082f2 <UART_SetConfig+0x5a6>
 800805c:	2304      	movs	r3, #4
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e146      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008064:	2308      	movs	r3, #8
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806a:	e142      	b.n	80082f2 <UART_SetConfig+0x5a6>
 800806c:	2310      	movs	r3, #16
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e13e      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008074:	cfff69f3 	.word	0xcfff69f3
 8008078:	58000c00 	.word	0x58000c00
 800807c:	11fff4ff 	.word	0x11fff4ff
 8008080:	40011000 	.word	0x40011000
 8008084:	58024400 	.word	0x58024400
 8008088:	40004400 	.word	0x40004400
 800808c:	40004800 	.word	0x40004800
 8008090:	40004c00 	.word	0x40004c00
 8008094:	40005000 	.word	0x40005000
 8008098:	2320      	movs	r3, #32
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809e:	e128      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80080a0:	2340      	movs	r3, #64	@ 0x40
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e124      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80080a8:	2380      	movs	r3, #128	@ 0x80
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e120      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4acb      	ldr	r2, [pc, #812]	@ (80083e4 <UART_SetConfig+0x698>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d176      	bne.n	80081a8 <UART_SetConfig+0x45c>
 80080ba:	4bcb      	ldr	r3, [pc, #812]	@ (80083e8 <UART_SetConfig+0x69c>)
 80080bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080c2:	2b28      	cmp	r3, #40	@ 0x28
 80080c4:	d86c      	bhi.n	80081a0 <UART_SetConfig+0x454>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <UART_SetConfig+0x380>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	08008171 	.word	0x08008171
 80080d0:	080081a1 	.word	0x080081a1
 80080d4:	080081a1 	.word	0x080081a1
 80080d8:	080081a1 	.word	0x080081a1
 80080dc:	080081a1 	.word	0x080081a1
 80080e0:	080081a1 	.word	0x080081a1
 80080e4:	080081a1 	.word	0x080081a1
 80080e8:	080081a1 	.word	0x080081a1
 80080ec:	08008179 	.word	0x08008179
 80080f0:	080081a1 	.word	0x080081a1
 80080f4:	080081a1 	.word	0x080081a1
 80080f8:	080081a1 	.word	0x080081a1
 80080fc:	080081a1 	.word	0x080081a1
 8008100:	080081a1 	.word	0x080081a1
 8008104:	080081a1 	.word	0x080081a1
 8008108:	080081a1 	.word	0x080081a1
 800810c:	08008181 	.word	0x08008181
 8008110:	080081a1 	.word	0x080081a1
 8008114:	080081a1 	.word	0x080081a1
 8008118:	080081a1 	.word	0x080081a1
 800811c:	080081a1 	.word	0x080081a1
 8008120:	080081a1 	.word	0x080081a1
 8008124:	080081a1 	.word	0x080081a1
 8008128:	080081a1 	.word	0x080081a1
 800812c:	08008189 	.word	0x08008189
 8008130:	080081a1 	.word	0x080081a1
 8008134:	080081a1 	.word	0x080081a1
 8008138:	080081a1 	.word	0x080081a1
 800813c:	080081a1 	.word	0x080081a1
 8008140:	080081a1 	.word	0x080081a1
 8008144:	080081a1 	.word	0x080081a1
 8008148:	080081a1 	.word	0x080081a1
 800814c:	08008191 	.word	0x08008191
 8008150:	080081a1 	.word	0x080081a1
 8008154:	080081a1 	.word	0x080081a1
 8008158:	080081a1 	.word	0x080081a1
 800815c:	080081a1 	.word	0x080081a1
 8008160:	080081a1 	.word	0x080081a1
 8008164:	080081a1 	.word	0x080081a1
 8008168:	080081a1 	.word	0x080081a1
 800816c:	08008199 	.word	0x08008199
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008176:	e0bc      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008178:	2304      	movs	r3, #4
 800817a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817e:	e0b8      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008180:	2308      	movs	r3, #8
 8008182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008186:	e0b4      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008188:	2310      	movs	r3, #16
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818e:	e0b0      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008190:	2320      	movs	r3, #32
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008196:	e0ac      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008198:	2340      	movs	r3, #64	@ 0x40
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819e:	e0a8      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80081a0:	2380      	movs	r3, #128	@ 0x80
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a6:	e0a4      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a8f      	ldr	r2, [pc, #572]	@ (80083ec <UART_SetConfig+0x6a0>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d130      	bne.n	8008214 <UART_SetConfig+0x4c8>
 80081b2:	4b8d      	ldr	r3, [pc, #564]	@ (80083e8 <UART_SetConfig+0x69c>)
 80081b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b05      	cmp	r3, #5
 80081bc:	d826      	bhi.n	800820c <UART_SetConfig+0x4c0>
 80081be:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <UART_SetConfig+0x478>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	080081dd 	.word	0x080081dd
 80081c8:	080081e5 	.word	0x080081e5
 80081cc:	080081ed 	.word	0x080081ed
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	08008205 	.word	0x08008205
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e2:	e086      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80081e4:	2304      	movs	r3, #4
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ea:	e082      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80081ec:	2308      	movs	r3, #8
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f2:	e07e      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80081f4:	2310      	movs	r3, #16
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fa:	e07a      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80081fc:	2320      	movs	r3, #32
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008202:	e076      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008204:	2340      	movs	r3, #64	@ 0x40
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820a:	e072      	b.n	80082f2 <UART_SetConfig+0x5a6>
 800820c:	2380      	movs	r3, #128	@ 0x80
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008212:	e06e      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a75      	ldr	r2, [pc, #468]	@ (80083f0 <UART_SetConfig+0x6a4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d130      	bne.n	8008280 <UART_SetConfig+0x534>
 800821e:	4b72      	ldr	r3, [pc, #456]	@ (80083e8 <UART_SetConfig+0x69c>)
 8008220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b05      	cmp	r3, #5
 8008228:	d826      	bhi.n	8008278 <UART_SetConfig+0x52c>
 800822a:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <UART_SetConfig+0x4e4>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008249 	.word	0x08008249
 8008234:	08008251 	.word	0x08008251
 8008238:	08008259 	.word	0x08008259
 800823c:	08008261 	.word	0x08008261
 8008240:	08008269 	.word	0x08008269
 8008244:	08008271 	.word	0x08008271
 8008248:	2300      	movs	r3, #0
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e050      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008250:	2304      	movs	r3, #4
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e04c      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008258:	2308      	movs	r3, #8
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e048      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008260:	2310      	movs	r3, #16
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e044      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008268:	2320      	movs	r3, #32
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e040      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008270:	2340      	movs	r3, #64	@ 0x40
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008276:	e03c      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008278:	2380      	movs	r3, #128	@ 0x80
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e038      	b.n	80082f2 <UART_SetConfig+0x5a6>
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a5b      	ldr	r2, [pc, #364]	@ (80083f4 <UART_SetConfig+0x6a8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d130      	bne.n	80082ec <UART_SetConfig+0x5a0>
 800828a:	4b57      	ldr	r3, [pc, #348]	@ (80083e8 <UART_SetConfig+0x69c>)
 800828c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	2b05      	cmp	r3, #5
 8008294:	d826      	bhi.n	80082e4 <UART_SetConfig+0x598>
 8008296:	a201      	add	r2, pc, #4	@ (adr r2, 800829c <UART_SetConfig+0x550>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080082b5 	.word	0x080082b5
 80082a0:	080082bd 	.word	0x080082bd
 80082a4:	080082c5 	.word	0x080082c5
 80082a8:	080082cd 	.word	0x080082cd
 80082ac:	080082d5 	.word	0x080082d5
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	2302      	movs	r3, #2
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e01a      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80082bc:	2304      	movs	r3, #4
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e016      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80082c4:	2308      	movs	r3, #8
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e012      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80082cc:	2310      	movs	r3, #16
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e00e      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80082d4:	2320      	movs	r3, #32
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e00a      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80082dc:	2340      	movs	r3, #64	@ 0x40
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e006      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80082e4:	2380      	movs	r3, #128	@ 0x80
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e002      	b.n	80082f2 <UART_SetConfig+0x5a6>
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a3f      	ldr	r2, [pc, #252]	@ (80083f4 <UART_SetConfig+0x6a8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	f040 80f8 	bne.w	80084ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008302:	2b20      	cmp	r3, #32
 8008304:	dc46      	bgt.n	8008394 <UART_SetConfig+0x648>
 8008306:	2b02      	cmp	r3, #2
 8008308:	f2c0 8082 	blt.w	8008410 <UART_SetConfig+0x6c4>
 800830c:	3b02      	subs	r3, #2
 800830e:	2b1e      	cmp	r3, #30
 8008310:	d87e      	bhi.n	8008410 <UART_SetConfig+0x6c4>
 8008312:	a201      	add	r2, pc, #4	@ (adr r2, 8008318 <UART_SetConfig+0x5cc>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800839b 	.word	0x0800839b
 800831c:	08008411 	.word	0x08008411
 8008320:	080083a3 	.word	0x080083a3
 8008324:	08008411 	.word	0x08008411
 8008328:	08008411 	.word	0x08008411
 800832c:	08008411 	.word	0x08008411
 8008330:	080083b3 	.word	0x080083b3
 8008334:	08008411 	.word	0x08008411
 8008338:	08008411 	.word	0x08008411
 800833c:	08008411 	.word	0x08008411
 8008340:	08008411 	.word	0x08008411
 8008344:	08008411 	.word	0x08008411
 8008348:	08008411 	.word	0x08008411
 800834c:	08008411 	.word	0x08008411
 8008350:	080083c3 	.word	0x080083c3
 8008354:	08008411 	.word	0x08008411
 8008358:	08008411 	.word	0x08008411
 800835c:	08008411 	.word	0x08008411
 8008360:	08008411 	.word	0x08008411
 8008364:	08008411 	.word	0x08008411
 8008368:	08008411 	.word	0x08008411
 800836c:	08008411 	.word	0x08008411
 8008370:	08008411 	.word	0x08008411
 8008374:	08008411 	.word	0x08008411
 8008378:	08008411 	.word	0x08008411
 800837c:	08008411 	.word	0x08008411
 8008380:	08008411 	.word	0x08008411
 8008384:	08008411 	.word	0x08008411
 8008388:	08008411 	.word	0x08008411
 800838c:	08008411 	.word	0x08008411
 8008390:	08008403 	.word	0x08008403
 8008394:	2b40      	cmp	r3, #64	@ 0x40
 8008396:	d037      	beq.n	8008408 <UART_SetConfig+0x6bc>
 8008398:	e03a      	b.n	8008410 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800839a:	f7fd ff5d 	bl	8006258 <HAL_RCCEx_GetD3PCLK1Freq>
 800839e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083a0:	e03c      	b.n	800841c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fd ff6c 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b0:	e034      	b.n	800841c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b2:	f107 0318 	add.w	r3, r7, #24
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe f8b8 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c0:	e02c      	b.n	800841c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083c2:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <UART_SetConfig+0x69c>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d016      	beq.n	80083fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083ce:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <UART_SetConfig+0x69c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	4a07      	ldr	r2, [pc, #28]	@ (80083f8 <UART_SetConfig+0x6ac>)
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083e0:	e01c      	b.n	800841c <UART_SetConfig+0x6d0>
 80083e2:	bf00      	nop
 80083e4:	40011400 	.word	0x40011400
 80083e8:	58024400 	.word	0x58024400
 80083ec:	40007800 	.word	0x40007800
 80083f0:	40007c00 	.word	0x40007c00
 80083f4:	58000c00 	.word	0x58000c00
 80083f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80083fc:	4b9d      	ldr	r3, [pc, #628]	@ (8008674 <UART_SetConfig+0x928>)
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008400:	e00c      	b.n	800841c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008402:	4b9d      	ldr	r3, [pc, #628]	@ (8008678 <UART_SetConfig+0x92c>)
 8008404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008406:	e009      	b.n	800841c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840e:	e005      	b.n	800841c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800841a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800841c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 81de 	beq.w	80087e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	4a94      	ldr	r2, [pc, #592]	@ (800867c <UART_SetConfig+0x930>)
 800842a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800842e:	461a      	mov	r2, r3
 8008430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008432:	fbb3 f3f2 	udiv	r3, r3, r2
 8008436:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	4613      	mov	r3, r2
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	4413      	add	r3, r2
 8008442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008444:	429a      	cmp	r2, r3
 8008446:	d305      	bcc.n	8008454 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800844e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008450:	429a      	cmp	r2, r3
 8008452:	d903      	bls.n	800845c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800845a:	e1c1      	b.n	80087e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800845c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800845e:	2200      	movs	r2, #0
 8008460:	60bb      	str	r3, [r7, #8]
 8008462:	60fa      	str	r2, [r7, #12]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008468:	4a84      	ldr	r2, [pc, #528]	@ (800867c <UART_SetConfig+0x930>)
 800846a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800846e:	b29b      	uxth	r3, r3
 8008470:	2200      	movs	r2, #0
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	607a      	str	r2, [r7, #4]
 8008476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800847a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800847e:	f7f7 ff87 	bl	8000390 <__aeabi_uldivmod>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	4610      	mov	r0, r2
 8008488:	4619      	mov	r1, r3
 800848a:	f04f 0200 	mov.w	r2, #0
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	020b      	lsls	r3, r1, #8
 8008494:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008498:	0202      	lsls	r2, r0, #8
 800849a:	6979      	ldr	r1, [r7, #20]
 800849c:	6849      	ldr	r1, [r1, #4]
 800849e:	0849      	lsrs	r1, r1, #1
 80084a0:	2000      	movs	r0, #0
 80084a2:	460c      	mov	r4, r1
 80084a4:	4605      	mov	r5, r0
 80084a6:	eb12 0804 	adds.w	r8, r2, r4
 80084aa:	eb43 0905 	adc.w	r9, r3, r5
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	469a      	mov	sl, r3
 80084b6:	4693      	mov	fp, r2
 80084b8:	4652      	mov	r2, sl
 80084ba:	465b      	mov	r3, fp
 80084bc:	4640      	mov	r0, r8
 80084be:	4649      	mov	r1, r9
 80084c0:	f7f7 ff66 	bl	8000390 <__aeabi_uldivmod>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4613      	mov	r3, r2
 80084ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084d2:	d308      	bcc.n	80084e6 <UART_SetConfig+0x79a>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084da:	d204      	bcs.n	80084e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084e2:	60da      	str	r2, [r3, #12]
 80084e4:	e17c      	b.n	80087e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084ec:	e178      	b.n	80087e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084f6:	f040 80c5 	bne.w	8008684 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80084fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084fe:	2b20      	cmp	r3, #32
 8008500:	dc48      	bgt.n	8008594 <UART_SetConfig+0x848>
 8008502:	2b00      	cmp	r3, #0
 8008504:	db7b      	blt.n	80085fe <UART_SetConfig+0x8b2>
 8008506:	2b20      	cmp	r3, #32
 8008508:	d879      	bhi.n	80085fe <UART_SetConfig+0x8b2>
 800850a:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <UART_SetConfig+0x7c4>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	0800859b 	.word	0x0800859b
 8008514:	080085a3 	.word	0x080085a3
 8008518:	080085ff 	.word	0x080085ff
 800851c:	080085ff 	.word	0x080085ff
 8008520:	080085ab 	.word	0x080085ab
 8008524:	080085ff 	.word	0x080085ff
 8008528:	080085ff 	.word	0x080085ff
 800852c:	080085ff 	.word	0x080085ff
 8008530:	080085bb 	.word	0x080085bb
 8008534:	080085ff 	.word	0x080085ff
 8008538:	080085ff 	.word	0x080085ff
 800853c:	080085ff 	.word	0x080085ff
 8008540:	080085ff 	.word	0x080085ff
 8008544:	080085ff 	.word	0x080085ff
 8008548:	080085ff 	.word	0x080085ff
 800854c:	080085ff 	.word	0x080085ff
 8008550:	080085cb 	.word	0x080085cb
 8008554:	080085ff 	.word	0x080085ff
 8008558:	080085ff 	.word	0x080085ff
 800855c:	080085ff 	.word	0x080085ff
 8008560:	080085ff 	.word	0x080085ff
 8008564:	080085ff 	.word	0x080085ff
 8008568:	080085ff 	.word	0x080085ff
 800856c:	080085ff 	.word	0x080085ff
 8008570:	080085ff 	.word	0x080085ff
 8008574:	080085ff 	.word	0x080085ff
 8008578:	080085ff 	.word	0x080085ff
 800857c:	080085ff 	.word	0x080085ff
 8008580:	080085ff 	.word	0x080085ff
 8008584:	080085ff 	.word	0x080085ff
 8008588:	080085ff 	.word	0x080085ff
 800858c:	080085ff 	.word	0x080085ff
 8008590:	080085f1 	.word	0x080085f1
 8008594:	2b40      	cmp	r3, #64	@ 0x40
 8008596:	d02e      	beq.n	80085f6 <UART_SetConfig+0x8aa>
 8008598:	e031      	b.n	80085fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800859a:	f7fb fe67 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 800859e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085a0:	e033      	b.n	800860a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085a2:	f7fb fe79 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 80085a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085a8:	e02f      	b.n	800860a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fd fe68 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b8:	e027      	b.n	800860a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ba:	f107 0318 	add.w	r3, r7, #24
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fd ffb4 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085c8:	e01f      	b.n	800860a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008680 <UART_SetConfig+0x934>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d009      	beq.n	80085ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085d6:	4b2a      	ldr	r3, [pc, #168]	@ (8008680 <UART_SetConfig+0x934>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	08db      	lsrs	r3, r3, #3
 80085dc:	f003 0303 	and.w	r3, r3, #3
 80085e0:	4a24      	ldr	r2, [pc, #144]	@ (8008674 <UART_SetConfig+0x928>)
 80085e2:	fa22 f303 	lsr.w	r3, r2, r3
 80085e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085e8:	e00f      	b.n	800860a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80085ea:	4b22      	ldr	r3, [pc, #136]	@ (8008674 <UART_SetConfig+0x928>)
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ee:	e00c      	b.n	800860a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085f0:	4b21      	ldr	r3, [pc, #132]	@ (8008678 <UART_SetConfig+0x92c>)
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f4:	e009      	b.n	800860a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fc:	e005      	b.n	800860a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800860a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80e7 	beq.w	80087e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008616:	4a19      	ldr	r2, [pc, #100]	@ (800867c <UART_SetConfig+0x930>)
 8008618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800861c:	461a      	mov	r2, r3
 800861e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008620:	fbb3 f3f2 	udiv	r3, r3, r2
 8008624:	005a      	lsls	r2, r3, #1
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	441a      	add	r2, r3
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	fbb2 f3f3 	udiv	r3, r2, r3
 8008636:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	2b0f      	cmp	r3, #15
 800863c:	d916      	bls.n	800866c <UART_SetConfig+0x920>
 800863e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008644:	d212      	bcs.n	800866c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008648:	b29b      	uxth	r3, r3
 800864a:	f023 030f 	bic.w	r3, r3, #15
 800864e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008652:	085b      	lsrs	r3, r3, #1
 8008654:	b29b      	uxth	r3, r3
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	b29a      	uxth	r2, r3
 800865c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800865e:	4313      	orrs	r3, r2
 8008660:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008668:	60da      	str	r2, [r3, #12]
 800866a:	e0b9      	b.n	80087e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008672:	e0b5      	b.n	80087e0 <UART_SetConfig+0xa94>
 8008674:	03d09000 	.word	0x03d09000
 8008678:	003d0900 	.word	0x003d0900
 800867c:	080097f0 	.word	0x080097f0
 8008680:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008684:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008688:	2b20      	cmp	r3, #32
 800868a:	dc49      	bgt.n	8008720 <UART_SetConfig+0x9d4>
 800868c:	2b00      	cmp	r3, #0
 800868e:	db7c      	blt.n	800878a <UART_SetConfig+0xa3e>
 8008690:	2b20      	cmp	r3, #32
 8008692:	d87a      	bhi.n	800878a <UART_SetConfig+0xa3e>
 8008694:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <UART_SetConfig+0x950>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	08008727 	.word	0x08008727
 80086a0:	0800872f 	.word	0x0800872f
 80086a4:	0800878b 	.word	0x0800878b
 80086a8:	0800878b 	.word	0x0800878b
 80086ac:	08008737 	.word	0x08008737
 80086b0:	0800878b 	.word	0x0800878b
 80086b4:	0800878b 	.word	0x0800878b
 80086b8:	0800878b 	.word	0x0800878b
 80086bc:	08008747 	.word	0x08008747
 80086c0:	0800878b 	.word	0x0800878b
 80086c4:	0800878b 	.word	0x0800878b
 80086c8:	0800878b 	.word	0x0800878b
 80086cc:	0800878b 	.word	0x0800878b
 80086d0:	0800878b 	.word	0x0800878b
 80086d4:	0800878b 	.word	0x0800878b
 80086d8:	0800878b 	.word	0x0800878b
 80086dc:	08008757 	.word	0x08008757
 80086e0:	0800878b 	.word	0x0800878b
 80086e4:	0800878b 	.word	0x0800878b
 80086e8:	0800878b 	.word	0x0800878b
 80086ec:	0800878b 	.word	0x0800878b
 80086f0:	0800878b 	.word	0x0800878b
 80086f4:	0800878b 	.word	0x0800878b
 80086f8:	0800878b 	.word	0x0800878b
 80086fc:	0800878b 	.word	0x0800878b
 8008700:	0800878b 	.word	0x0800878b
 8008704:	0800878b 	.word	0x0800878b
 8008708:	0800878b 	.word	0x0800878b
 800870c:	0800878b 	.word	0x0800878b
 8008710:	0800878b 	.word	0x0800878b
 8008714:	0800878b 	.word	0x0800878b
 8008718:	0800878b 	.word	0x0800878b
 800871c:	0800877d 	.word	0x0800877d
 8008720:	2b40      	cmp	r3, #64	@ 0x40
 8008722:	d02e      	beq.n	8008782 <UART_SetConfig+0xa36>
 8008724:	e031      	b.n	800878a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008726:	f7fb fda1 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 800872a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800872c:	e033      	b.n	8008796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800872e:	f7fb fdb3 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8008732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008734:	e02f      	b.n	8008796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f7fd fda2 	bl	8006284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008744:	e027      	b.n	8008796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008746:	f107 0318 	add.w	r3, r7, #24
 800874a:	4618      	mov	r0, r3
 800874c:	f7fd feee 	bl	800652c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008754:	e01f      	b.n	8008796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008756:	4b2d      	ldr	r3, [pc, #180]	@ (800880c <UART_SetConfig+0xac0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008762:	4b2a      	ldr	r3, [pc, #168]	@ (800880c <UART_SetConfig+0xac0>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	08db      	lsrs	r3, r3, #3
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	4a28      	ldr	r2, [pc, #160]	@ (8008810 <UART_SetConfig+0xac4>)
 800876e:	fa22 f303 	lsr.w	r3, r2, r3
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008774:	e00f      	b.n	8008796 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008776:	4b26      	ldr	r3, [pc, #152]	@ (8008810 <UART_SetConfig+0xac4>)
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800877a:	e00c      	b.n	8008796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800877c:	4b25      	ldr	r3, [pc, #148]	@ (8008814 <UART_SetConfig+0xac8>)
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008780:	e009      	b.n	8008796 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008788:	e005      	b.n	8008796 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008794:	bf00      	nop
    }

    if (pclk != 0U)
 8008796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	d021      	beq.n	80087e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008818 <UART_SetConfig+0xacc>)
 80087a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a6:	461a      	mov	r2, r3
 80087a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	441a      	add	r2, r3
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80087be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	d909      	bls.n	80087da <UART_SetConfig+0xa8e>
 80087c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087cc:	d205      	bcs.n	80087da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60da      	str	r2, [r3, #12]
 80087d8:	e002      	b.n	80087e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2200      	movs	r2, #0
 80087f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2200      	movs	r2, #0
 80087fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008800:	4618      	mov	r0, r3
 8008802:	3748      	adds	r7, #72	@ 0x48
 8008804:	46bd      	mov	sp, r7
 8008806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800880a:	bf00      	nop
 800880c:	58024400 	.word	0x58024400
 8008810:	03d09000 	.word	0x03d09000
 8008814:	003d0900 	.word	0x003d0900
 8008818:	080097f0 	.word	0x080097f0

0800881c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00a      	beq.n	80088ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d2:	f003 0320 	and.w	r3, r3, #32
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01a      	beq.n	8008932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800891a:	d10a      	bne.n	8008932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	605a      	str	r2, [r3, #4]
  }
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b098      	sub	sp, #96	@ 0x60
 8008964:	af02      	add	r7, sp, #8
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008970:	f7f8 fc6e 	bl	8001250 <HAL_GetTick>
 8008974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0308 	and.w	r3, r3, #8
 8008980:	2b08      	cmp	r3, #8
 8008982:	d12f      	bne.n	80089e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800898c:	2200      	movs	r2, #0
 800898e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f88e 	bl	8008ab4 <UART_WaitOnFlagUntilTimeout>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d022      	beq.n	80089e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80089be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e6      	bne.n	800899e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e063      	b.n	8008aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d149      	bne.n	8008a86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089fa:	2200      	movs	r2, #0
 80089fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f857 	bl	8008ab4 <UART_WaitOnFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d03c      	beq.n	8008a86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	623b      	str	r3, [r7, #32]
   return(result);
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e6      	bne.n	8008a0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3308      	adds	r3, #8
 8008a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f023 0301 	bic.w	r3, r3, #1
 8008a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a5e:	61fa      	str	r2, [r7, #28]
 8008a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	69b9      	ldr	r1, [r7, #24]
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e5      	bne.n	8008a3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e012      	b.n	8008aac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3758      	adds	r7, #88	@ 0x58
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	603b      	str	r3, [r7, #0]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac4:	e04f      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008acc:	d04b      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ace:	f7f8 fbbf 	bl	8001250 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d302      	bcc.n	8008ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e04e      	b.n	8008b86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d037      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b80      	cmp	r3, #128	@ 0x80
 8008afa:	d034      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b40      	cmp	r3, #64	@ 0x40
 8008b00:	d031      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d110      	bne.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2208      	movs	r2, #8
 8008b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f839 	bl	8008b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2208      	movs	r2, #8
 8008b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e029      	b.n	8008b86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b40:	d111      	bne.n	8008b66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 f81f 	bl	8008b90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e00f      	b.n	8008b86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69da      	ldr	r2, [r3, #28]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	bf0c      	ite	eq
 8008b76:	2301      	moveq	r3, #1
 8008b78:	2300      	movne	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d0a0      	beq.n	8008ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b095      	sub	sp, #84	@ 0x54
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e6      	bne.n	8008b98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8008c58 <UART_EndRxTransfer+0xc8>)
 8008bde:	4013      	ands	r3, r2
 8008be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e5      	bne.n	8008bca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d118      	bne.n	8008c38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f023 0310 	bic.w	r3, r3, #16
 8008c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c24:	61bb      	str	r3, [r7, #24]
 8008c26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6979      	ldr	r1, [r7, #20]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	613b      	str	r3, [r7, #16]
   return(result);
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e6      	bne.n	8008c06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c4c:	bf00      	nop
 8008c4e:	3754      	adds	r7, #84	@ 0x54
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	effffffe 	.word	0xeffffffe

08008c5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e027      	b.n	8008cc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2224      	movs	r2, #36	@ 0x24
 8008c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0201 	bic.w	r2, r2, #1
 8008c98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008ca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d101      	bne.n	8008ce6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	e02d      	b.n	8008d42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2224      	movs	r2, #36	@ 0x24
 8008cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f022 0201 	bic.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f850 	bl	8008dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2220      	movs	r2, #32
 8008d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e02d      	b.n	8008dbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2224      	movs	r2, #36	@ 0x24
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 0201 	bic.w	r2, r2, #1
 8008d88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f812 	bl	8008dc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d108      	bne.n	8008dea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008de8:	e031      	b.n	8008e4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dea:	2310      	movs	r3, #16
 8008dec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dee:	2310      	movs	r3, #16
 8008df0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	0e5b      	lsrs	r3, r3, #25
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	0f5b      	lsrs	r3, r3, #29
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	7b3a      	ldrb	r2, [r7, #12]
 8008e16:	4911      	ldr	r1, [pc, #68]	@ (8008e5c <UARTEx_SetNbDataToProcess+0x94>)
 8008e18:	5c8a      	ldrb	r2, [r1, r2]
 8008e1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e1e:	7b3a      	ldrb	r2, [r7, #12]
 8008e20:	490f      	ldr	r1, [pc, #60]	@ (8008e60 <UARTEx_SetNbDataToProcess+0x98>)
 8008e22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e24:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	7b7a      	ldrb	r2, [r7, #13]
 8008e34:	4909      	ldr	r1, [pc, #36]	@ (8008e5c <UARTEx_SetNbDataToProcess+0x94>)
 8008e36:	5c8a      	ldrb	r2, [r1, r2]
 8008e38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e3c:	7b7a      	ldrb	r2, [r7, #13]
 8008e3e:	4908      	ldr	r1, [pc, #32]	@ (8008e60 <UARTEx_SetNbDataToProcess+0x98>)
 8008e40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e42:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008e4e:	bf00      	nop
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	08009808 	.word	0x08009808
 8008e60:	08009810 	.word	0x08009810

08008e64 <siprintf>:
 8008e64:	b40e      	push	{r1, r2, r3}
 8008e66:	b500      	push	{lr}
 8008e68:	b09c      	sub	sp, #112	@ 0x70
 8008e6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e6c:	9002      	str	r0, [sp, #8]
 8008e6e:	9006      	str	r0, [sp, #24]
 8008e70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e74:	4809      	ldr	r0, [pc, #36]	@ (8008e9c <siprintf+0x38>)
 8008e76:	9107      	str	r1, [sp, #28]
 8008e78:	9104      	str	r1, [sp, #16]
 8008e7a:	4909      	ldr	r1, [pc, #36]	@ (8008ea0 <siprintf+0x3c>)
 8008e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e80:	9105      	str	r1, [sp, #20]
 8008e82:	6800      	ldr	r0, [r0, #0]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	a902      	add	r1, sp, #8
 8008e88:	f000 f994 	bl	80091b4 <_svfiprintf_r>
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	b01c      	add	sp, #112	@ 0x70
 8008e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e98:	b003      	add	sp, #12
 8008e9a:	4770      	bx	lr
 8008e9c:	24000010 	.word	0x24000010
 8008ea0:	ffff0208 	.word	0xffff0208

08008ea4 <memset>:
 8008ea4:	4402      	add	r2, r0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d100      	bne.n	8008eae <memset+0xa>
 8008eac:	4770      	bx	lr
 8008eae:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb2:	e7f9      	b.n	8008ea8 <memset+0x4>

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	@ (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	24000010 	.word	0x24000010

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ef8 <__libc_init_array+0x38>)
 8008ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8008efc <__libc_init_array+0x3c>)
 8008ec6:	1b64      	subs	r4, r4, r5
 8008ec8:	10a4      	asrs	r4, r4, #2
 8008eca:	2600      	movs	r6, #0
 8008ecc:	42a6      	cmp	r6, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8008f00 <__libc_init_array+0x40>)
 8008ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8008f04 <__libc_init_array+0x44>)
 8008ed4:	f000 fc66 	bl	80097a4 <_init>
 8008ed8:	1b64      	subs	r4, r4, r5
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	2600      	movs	r6, #0
 8008ede:	42a6      	cmp	r6, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee8:	4798      	blx	r3
 8008eea:	3601      	adds	r6, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef2:	4798      	blx	r3
 8008ef4:	3601      	adds	r6, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	08009854 	.word	0x08009854
 8008efc:	08009854 	.word	0x08009854
 8008f00:	08009854 	.word	0x08009854
 8008f04:	08009858 	.word	0x08009858

08008f08 <__retarget_lock_acquire_recursive>:
 8008f08:	4770      	bx	lr

08008f0a <__retarget_lock_release_recursive>:
 8008f0a:	4770      	bx	lr

08008f0c <_free_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4605      	mov	r5, r0
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d041      	beq.n	8008f98 <_free_r+0x8c>
 8008f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f18:	1f0c      	subs	r4, r1, #4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	bfb8      	it	lt
 8008f1e:	18e4      	addlt	r4, r4, r3
 8008f20:	f000 f8e0 	bl	80090e4 <__malloc_lock>
 8008f24:	4a1d      	ldr	r2, [pc, #116]	@ (8008f9c <_free_r+0x90>)
 8008f26:	6813      	ldr	r3, [r2, #0]
 8008f28:	b933      	cbnz	r3, 8008f38 <_free_r+0x2c>
 8008f2a:	6063      	str	r3, [r4, #4]
 8008f2c:	6014      	str	r4, [r2, #0]
 8008f2e:	4628      	mov	r0, r5
 8008f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f34:	f000 b8dc 	b.w	80090f0 <__malloc_unlock>
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d908      	bls.n	8008f4e <_free_r+0x42>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	1821      	adds	r1, r4, r0
 8008f40:	428b      	cmp	r3, r1
 8008f42:	bf01      	itttt	eq
 8008f44:	6819      	ldreq	r1, [r3, #0]
 8008f46:	685b      	ldreq	r3, [r3, #4]
 8008f48:	1809      	addeq	r1, r1, r0
 8008f4a:	6021      	streq	r1, [r4, #0]
 8008f4c:	e7ed      	b.n	8008f2a <_free_r+0x1e>
 8008f4e:	461a      	mov	r2, r3
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	b10b      	cbz	r3, 8008f58 <_free_r+0x4c>
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	d9fa      	bls.n	8008f4e <_free_r+0x42>
 8008f58:	6811      	ldr	r1, [r2, #0]
 8008f5a:	1850      	adds	r0, r2, r1
 8008f5c:	42a0      	cmp	r0, r4
 8008f5e:	d10b      	bne.n	8008f78 <_free_r+0x6c>
 8008f60:	6820      	ldr	r0, [r4, #0]
 8008f62:	4401      	add	r1, r0
 8008f64:	1850      	adds	r0, r2, r1
 8008f66:	4283      	cmp	r3, r0
 8008f68:	6011      	str	r1, [r2, #0]
 8008f6a:	d1e0      	bne.n	8008f2e <_free_r+0x22>
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	6053      	str	r3, [r2, #4]
 8008f72:	4408      	add	r0, r1
 8008f74:	6010      	str	r0, [r2, #0]
 8008f76:	e7da      	b.n	8008f2e <_free_r+0x22>
 8008f78:	d902      	bls.n	8008f80 <_free_r+0x74>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	e7d6      	b.n	8008f2e <_free_r+0x22>
 8008f80:	6820      	ldr	r0, [r4, #0]
 8008f82:	1821      	adds	r1, r4, r0
 8008f84:	428b      	cmp	r3, r1
 8008f86:	bf04      	itt	eq
 8008f88:	6819      	ldreq	r1, [r3, #0]
 8008f8a:	685b      	ldreq	r3, [r3, #4]
 8008f8c:	6063      	str	r3, [r4, #4]
 8008f8e:	bf04      	itt	eq
 8008f90:	1809      	addeq	r1, r1, r0
 8008f92:	6021      	streq	r1, [r4, #0]
 8008f94:	6054      	str	r4, [r2, #4]
 8008f96:	e7ca      	b.n	8008f2e <_free_r+0x22>
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
 8008f9a:	bf00      	nop
 8008f9c:	24000324 	.word	0x24000324

08008fa0 <sbrk_aligned>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	4e0f      	ldr	r6, [pc, #60]	@ (8008fe0 <sbrk_aligned+0x40>)
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	6831      	ldr	r1, [r6, #0]
 8008fa8:	4605      	mov	r5, r0
 8008faa:	b911      	cbnz	r1, 8008fb2 <sbrk_aligned+0x12>
 8008fac:	f000 fba6 	bl	80096fc <_sbrk_r>
 8008fb0:	6030      	str	r0, [r6, #0]
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f000 fba1 	bl	80096fc <_sbrk_r>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	d103      	bne.n	8008fc6 <sbrk_aligned+0x26>
 8008fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
 8008fc6:	1cc4      	adds	r4, r0, #3
 8008fc8:	f024 0403 	bic.w	r4, r4, #3
 8008fcc:	42a0      	cmp	r0, r4
 8008fce:	d0f8      	beq.n	8008fc2 <sbrk_aligned+0x22>
 8008fd0:	1a21      	subs	r1, r4, r0
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 fb92 	bl	80096fc <_sbrk_r>
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d1f2      	bne.n	8008fc2 <sbrk_aligned+0x22>
 8008fdc:	e7ef      	b.n	8008fbe <sbrk_aligned+0x1e>
 8008fde:	bf00      	nop
 8008fe0:	24000320 	.word	0x24000320

08008fe4 <_malloc_r>:
 8008fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe8:	1ccd      	adds	r5, r1, #3
 8008fea:	f025 0503 	bic.w	r5, r5, #3
 8008fee:	3508      	adds	r5, #8
 8008ff0:	2d0c      	cmp	r5, #12
 8008ff2:	bf38      	it	cc
 8008ff4:	250c      	movcc	r5, #12
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	db01      	blt.n	8009000 <_malloc_r+0x1c>
 8008ffc:	42a9      	cmp	r1, r5
 8008ffe:	d904      	bls.n	800900a <_malloc_r+0x26>
 8009000:	230c      	movs	r3, #12
 8009002:	6033      	str	r3, [r6, #0]
 8009004:	2000      	movs	r0, #0
 8009006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090e0 <_malloc_r+0xfc>
 800900e:	f000 f869 	bl	80090e4 <__malloc_lock>
 8009012:	f8d8 3000 	ldr.w	r3, [r8]
 8009016:	461c      	mov	r4, r3
 8009018:	bb44      	cbnz	r4, 800906c <_malloc_r+0x88>
 800901a:	4629      	mov	r1, r5
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff ffbf 	bl	8008fa0 <sbrk_aligned>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	4604      	mov	r4, r0
 8009026:	d158      	bne.n	80090da <_malloc_r+0xf6>
 8009028:	f8d8 4000 	ldr.w	r4, [r8]
 800902c:	4627      	mov	r7, r4
 800902e:	2f00      	cmp	r7, #0
 8009030:	d143      	bne.n	80090ba <_malloc_r+0xd6>
 8009032:	2c00      	cmp	r4, #0
 8009034:	d04b      	beq.n	80090ce <_malloc_r+0xea>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	4639      	mov	r1, r7
 800903a:	4630      	mov	r0, r6
 800903c:	eb04 0903 	add.w	r9, r4, r3
 8009040:	f000 fb5c 	bl	80096fc <_sbrk_r>
 8009044:	4581      	cmp	r9, r0
 8009046:	d142      	bne.n	80090ce <_malloc_r+0xea>
 8009048:	6821      	ldr	r1, [r4, #0]
 800904a:	1a6d      	subs	r5, r5, r1
 800904c:	4629      	mov	r1, r5
 800904e:	4630      	mov	r0, r6
 8009050:	f7ff ffa6 	bl	8008fa0 <sbrk_aligned>
 8009054:	3001      	adds	r0, #1
 8009056:	d03a      	beq.n	80090ce <_malloc_r+0xea>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	442b      	add	r3, r5
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	f8d8 3000 	ldr.w	r3, [r8]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	bb62      	cbnz	r2, 80090c0 <_malloc_r+0xdc>
 8009066:	f8c8 7000 	str.w	r7, [r8]
 800906a:	e00f      	b.n	800908c <_malloc_r+0xa8>
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	1b52      	subs	r2, r2, r5
 8009070:	d420      	bmi.n	80090b4 <_malloc_r+0xd0>
 8009072:	2a0b      	cmp	r2, #11
 8009074:	d917      	bls.n	80090a6 <_malloc_r+0xc2>
 8009076:	1961      	adds	r1, r4, r5
 8009078:	42a3      	cmp	r3, r4
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	bf18      	it	ne
 800907e:	6059      	strne	r1, [r3, #4]
 8009080:	6863      	ldr	r3, [r4, #4]
 8009082:	bf08      	it	eq
 8009084:	f8c8 1000 	streq.w	r1, [r8]
 8009088:	5162      	str	r2, [r4, r5]
 800908a:	604b      	str	r3, [r1, #4]
 800908c:	4630      	mov	r0, r6
 800908e:	f000 f82f 	bl	80090f0 <__malloc_unlock>
 8009092:	f104 000b 	add.w	r0, r4, #11
 8009096:	1d23      	adds	r3, r4, #4
 8009098:	f020 0007 	bic.w	r0, r0, #7
 800909c:	1ac2      	subs	r2, r0, r3
 800909e:	bf1c      	itt	ne
 80090a0:	1a1b      	subne	r3, r3, r0
 80090a2:	50a3      	strne	r3, [r4, r2]
 80090a4:	e7af      	b.n	8009006 <_malloc_r+0x22>
 80090a6:	6862      	ldr	r2, [r4, #4]
 80090a8:	42a3      	cmp	r3, r4
 80090aa:	bf0c      	ite	eq
 80090ac:	f8c8 2000 	streq.w	r2, [r8]
 80090b0:	605a      	strne	r2, [r3, #4]
 80090b2:	e7eb      	b.n	800908c <_malloc_r+0xa8>
 80090b4:	4623      	mov	r3, r4
 80090b6:	6864      	ldr	r4, [r4, #4]
 80090b8:	e7ae      	b.n	8009018 <_malloc_r+0x34>
 80090ba:	463c      	mov	r4, r7
 80090bc:	687f      	ldr	r7, [r7, #4]
 80090be:	e7b6      	b.n	800902e <_malloc_r+0x4a>
 80090c0:	461a      	mov	r2, r3
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	d1fb      	bne.n	80090c0 <_malloc_r+0xdc>
 80090c8:	2300      	movs	r3, #0
 80090ca:	6053      	str	r3, [r2, #4]
 80090cc:	e7de      	b.n	800908c <_malloc_r+0xa8>
 80090ce:	230c      	movs	r3, #12
 80090d0:	6033      	str	r3, [r6, #0]
 80090d2:	4630      	mov	r0, r6
 80090d4:	f000 f80c 	bl	80090f0 <__malloc_unlock>
 80090d8:	e794      	b.n	8009004 <_malloc_r+0x20>
 80090da:	6005      	str	r5, [r0, #0]
 80090dc:	e7d6      	b.n	800908c <_malloc_r+0xa8>
 80090de:	bf00      	nop
 80090e0:	24000324 	.word	0x24000324

080090e4 <__malloc_lock>:
 80090e4:	4801      	ldr	r0, [pc, #4]	@ (80090ec <__malloc_lock+0x8>)
 80090e6:	f7ff bf0f 	b.w	8008f08 <__retarget_lock_acquire_recursive>
 80090ea:	bf00      	nop
 80090ec:	2400031c 	.word	0x2400031c

080090f0 <__malloc_unlock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	@ (80090f8 <__malloc_unlock+0x8>)
 80090f2:	f7ff bf0a 	b.w	8008f0a <__retarget_lock_release_recursive>
 80090f6:	bf00      	nop
 80090f8:	2400031c 	.word	0x2400031c

080090fc <__ssputs_r>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	688e      	ldr	r6, [r1, #8]
 8009102:	461f      	mov	r7, r3
 8009104:	42be      	cmp	r6, r7
 8009106:	680b      	ldr	r3, [r1, #0]
 8009108:	4682      	mov	sl, r0
 800910a:	460c      	mov	r4, r1
 800910c:	4690      	mov	r8, r2
 800910e:	d82d      	bhi.n	800916c <__ssputs_r+0x70>
 8009110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009114:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009118:	d026      	beq.n	8009168 <__ssputs_r+0x6c>
 800911a:	6965      	ldr	r5, [r4, #20]
 800911c:	6909      	ldr	r1, [r1, #16]
 800911e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009122:	eba3 0901 	sub.w	r9, r3, r1
 8009126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800912a:	1c7b      	adds	r3, r7, #1
 800912c:	444b      	add	r3, r9
 800912e:	106d      	asrs	r5, r5, #1
 8009130:	429d      	cmp	r5, r3
 8009132:	bf38      	it	cc
 8009134:	461d      	movcc	r5, r3
 8009136:	0553      	lsls	r3, r2, #21
 8009138:	d527      	bpl.n	800918a <__ssputs_r+0x8e>
 800913a:	4629      	mov	r1, r5
 800913c:	f7ff ff52 	bl	8008fe4 <_malloc_r>
 8009140:	4606      	mov	r6, r0
 8009142:	b360      	cbz	r0, 800919e <__ssputs_r+0xa2>
 8009144:	6921      	ldr	r1, [r4, #16]
 8009146:	464a      	mov	r2, r9
 8009148:	f000 fae8 	bl	800971c <memcpy>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	6126      	str	r6, [r4, #16]
 800915a:	6165      	str	r5, [r4, #20]
 800915c:	444e      	add	r6, r9
 800915e:	eba5 0509 	sub.w	r5, r5, r9
 8009162:	6026      	str	r6, [r4, #0]
 8009164:	60a5      	str	r5, [r4, #8]
 8009166:	463e      	mov	r6, r7
 8009168:	42be      	cmp	r6, r7
 800916a:	d900      	bls.n	800916e <__ssputs_r+0x72>
 800916c:	463e      	mov	r6, r7
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	4632      	mov	r2, r6
 8009172:	4641      	mov	r1, r8
 8009174:	f000 faa8 	bl	80096c8 <memmove>
 8009178:	68a3      	ldr	r3, [r4, #8]
 800917a:	1b9b      	subs	r3, r3, r6
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	4433      	add	r3, r6
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	2000      	movs	r0, #0
 8009186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918a:	462a      	mov	r2, r5
 800918c:	f000 fad4 	bl	8009738 <_realloc_r>
 8009190:	4606      	mov	r6, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	d1e0      	bne.n	8009158 <__ssputs_r+0x5c>
 8009196:	6921      	ldr	r1, [r4, #16]
 8009198:	4650      	mov	r0, sl
 800919a:	f7ff feb7 	bl	8008f0c <_free_r>
 800919e:	230c      	movs	r3, #12
 80091a0:	f8ca 3000 	str.w	r3, [sl]
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e7e9      	b.n	8009186 <__ssputs_r+0x8a>
	...

080091b4 <_svfiprintf_r>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	4698      	mov	r8, r3
 80091ba:	898b      	ldrh	r3, [r1, #12]
 80091bc:	061b      	lsls	r3, r3, #24
 80091be:	b09d      	sub	sp, #116	@ 0x74
 80091c0:	4607      	mov	r7, r0
 80091c2:	460d      	mov	r5, r1
 80091c4:	4614      	mov	r4, r2
 80091c6:	d510      	bpl.n	80091ea <_svfiprintf_r+0x36>
 80091c8:	690b      	ldr	r3, [r1, #16]
 80091ca:	b973      	cbnz	r3, 80091ea <_svfiprintf_r+0x36>
 80091cc:	2140      	movs	r1, #64	@ 0x40
 80091ce:	f7ff ff09 	bl	8008fe4 <_malloc_r>
 80091d2:	6028      	str	r0, [r5, #0]
 80091d4:	6128      	str	r0, [r5, #16]
 80091d6:	b930      	cbnz	r0, 80091e6 <_svfiprintf_r+0x32>
 80091d8:	230c      	movs	r3, #12
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	b01d      	add	sp, #116	@ 0x74
 80091e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e6:	2340      	movs	r3, #64	@ 0x40
 80091e8:	616b      	str	r3, [r5, #20]
 80091ea:	2300      	movs	r3, #0
 80091ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ee:	2320      	movs	r3, #32
 80091f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f8:	2330      	movs	r3, #48	@ 0x30
 80091fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009398 <_svfiprintf_r+0x1e4>
 80091fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009202:	f04f 0901 	mov.w	r9, #1
 8009206:	4623      	mov	r3, r4
 8009208:	469a      	mov	sl, r3
 800920a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800920e:	b10a      	cbz	r2, 8009214 <_svfiprintf_r+0x60>
 8009210:	2a25      	cmp	r2, #37	@ 0x25
 8009212:	d1f9      	bne.n	8009208 <_svfiprintf_r+0x54>
 8009214:	ebba 0b04 	subs.w	fp, sl, r4
 8009218:	d00b      	beq.n	8009232 <_svfiprintf_r+0x7e>
 800921a:	465b      	mov	r3, fp
 800921c:	4622      	mov	r2, r4
 800921e:	4629      	mov	r1, r5
 8009220:	4638      	mov	r0, r7
 8009222:	f7ff ff6b 	bl	80090fc <__ssputs_r>
 8009226:	3001      	adds	r0, #1
 8009228:	f000 80a7 	beq.w	800937a <_svfiprintf_r+0x1c6>
 800922c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800922e:	445a      	add	r2, fp
 8009230:	9209      	str	r2, [sp, #36]	@ 0x24
 8009232:	f89a 3000 	ldrb.w	r3, [sl]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 809f 	beq.w	800937a <_svfiprintf_r+0x1c6>
 800923c:	2300      	movs	r3, #0
 800923e:	f04f 32ff 	mov.w	r2, #4294967295
 8009242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009246:	f10a 0a01 	add.w	sl, sl, #1
 800924a:	9304      	str	r3, [sp, #16]
 800924c:	9307      	str	r3, [sp, #28]
 800924e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009252:	931a      	str	r3, [sp, #104]	@ 0x68
 8009254:	4654      	mov	r4, sl
 8009256:	2205      	movs	r2, #5
 8009258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800925c:	484e      	ldr	r0, [pc, #312]	@ (8009398 <_svfiprintf_r+0x1e4>)
 800925e:	f7f7 f847 	bl	80002f0 <memchr>
 8009262:	9a04      	ldr	r2, [sp, #16]
 8009264:	b9d8      	cbnz	r0, 800929e <_svfiprintf_r+0xea>
 8009266:	06d0      	lsls	r0, r2, #27
 8009268:	bf44      	itt	mi
 800926a:	2320      	movmi	r3, #32
 800926c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009270:	0711      	lsls	r1, r2, #28
 8009272:	bf44      	itt	mi
 8009274:	232b      	movmi	r3, #43	@ 0x2b
 8009276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800927a:	f89a 3000 	ldrb.w	r3, [sl]
 800927e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009280:	d015      	beq.n	80092ae <_svfiprintf_r+0xfa>
 8009282:	9a07      	ldr	r2, [sp, #28]
 8009284:	4654      	mov	r4, sl
 8009286:	2000      	movs	r0, #0
 8009288:	f04f 0c0a 	mov.w	ip, #10
 800928c:	4621      	mov	r1, r4
 800928e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009292:	3b30      	subs	r3, #48	@ 0x30
 8009294:	2b09      	cmp	r3, #9
 8009296:	d94b      	bls.n	8009330 <_svfiprintf_r+0x17c>
 8009298:	b1b0      	cbz	r0, 80092c8 <_svfiprintf_r+0x114>
 800929a:	9207      	str	r2, [sp, #28]
 800929c:	e014      	b.n	80092c8 <_svfiprintf_r+0x114>
 800929e:	eba0 0308 	sub.w	r3, r0, r8
 80092a2:	fa09 f303 	lsl.w	r3, r9, r3
 80092a6:	4313      	orrs	r3, r2
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	46a2      	mov	sl, r4
 80092ac:	e7d2      	b.n	8009254 <_svfiprintf_r+0xa0>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	1d19      	adds	r1, r3, #4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	9103      	str	r1, [sp, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfbb      	ittet	lt
 80092ba:	425b      	neglt	r3, r3
 80092bc:	f042 0202 	orrlt.w	r2, r2, #2
 80092c0:	9307      	strge	r3, [sp, #28]
 80092c2:	9307      	strlt	r3, [sp, #28]
 80092c4:	bfb8      	it	lt
 80092c6:	9204      	strlt	r2, [sp, #16]
 80092c8:	7823      	ldrb	r3, [r4, #0]
 80092ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80092cc:	d10a      	bne.n	80092e4 <_svfiprintf_r+0x130>
 80092ce:	7863      	ldrb	r3, [r4, #1]
 80092d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d2:	d132      	bne.n	800933a <_svfiprintf_r+0x186>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	1d1a      	adds	r2, r3, #4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	9203      	str	r2, [sp, #12]
 80092dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092e0:	3402      	adds	r4, #2
 80092e2:	9305      	str	r3, [sp, #20]
 80092e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093a8 <_svfiprintf_r+0x1f4>
 80092e8:	7821      	ldrb	r1, [r4, #0]
 80092ea:	2203      	movs	r2, #3
 80092ec:	4650      	mov	r0, sl
 80092ee:	f7f6 ffff 	bl	80002f0 <memchr>
 80092f2:	b138      	cbz	r0, 8009304 <_svfiprintf_r+0x150>
 80092f4:	9b04      	ldr	r3, [sp, #16]
 80092f6:	eba0 000a 	sub.w	r0, r0, sl
 80092fa:	2240      	movs	r2, #64	@ 0x40
 80092fc:	4082      	lsls	r2, r0
 80092fe:	4313      	orrs	r3, r2
 8009300:	3401      	adds	r4, #1
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009308:	4824      	ldr	r0, [pc, #144]	@ (800939c <_svfiprintf_r+0x1e8>)
 800930a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800930e:	2206      	movs	r2, #6
 8009310:	f7f6 ffee 	bl	80002f0 <memchr>
 8009314:	2800      	cmp	r0, #0
 8009316:	d036      	beq.n	8009386 <_svfiprintf_r+0x1d2>
 8009318:	4b21      	ldr	r3, [pc, #132]	@ (80093a0 <_svfiprintf_r+0x1ec>)
 800931a:	bb1b      	cbnz	r3, 8009364 <_svfiprintf_r+0x1b0>
 800931c:	9b03      	ldr	r3, [sp, #12]
 800931e:	3307      	adds	r3, #7
 8009320:	f023 0307 	bic.w	r3, r3, #7
 8009324:	3308      	adds	r3, #8
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800932a:	4433      	add	r3, r6
 800932c:	9309      	str	r3, [sp, #36]	@ 0x24
 800932e:	e76a      	b.n	8009206 <_svfiprintf_r+0x52>
 8009330:	fb0c 3202 	mla	r2, ip, r2, r3
 8009334:	460c      	mov	r4, r1
 8009336:	2001      	movs	r0, #1
 8009338:	e7a8      	b.n	800928c <_svfiprintf_r+0xd8>
 800933a:	2300      	movs	r3, #0
 800933c:	3401      	adds	r4, #1
 800933e:	9305      	str	r3, [sp, #20]
 8009340:	4619      	mov	r1, r3
 8009342:	f04f 0c0a 	mov.w	ip, #10
 8009346:	4620      	mov	r0, r4
 8009348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800934c:	3a30      	subs	r2, #48	@ 0x30
 800934e:	2a09      	cmp	r2, #9
 8009350:	d903      	bls.n	800935a <_svfiprintf_r+0x1a6>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0c6      	beq.n	80092e4 <_svfiprintf_r+0x130>
 8009356:	9105      	str	r1, [sp, #20]
 8009358:	e7c4      	b.n	80092e4 <_svfiprintf_r+0x130>
 800935a:	fb0c 2101 	mla	r1, ip, r1, r2
 800935e:	4604      	mov	r4, r0
 8009360:	2301      	movs	r3, #1
 8009362:	e7f0      	b.n	8009346 <_svfiprintf_r+0x192>
 8009364:	ab03      	add	r3, sp, #12
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	462a      	mov	r2, r5
 800936a:	4b0e      	ldr	r3, [pc, #56]	@ (80093a4 <_svfiprintf_r+0x1f0>)
 800936c:	a904      	add	r1, sp, #16
 800936e:	4638      	mov	r0, r7
 8009370:	f3af 8000 	nop.w
 8009374:	1c42      	adds	r2, r0, #1
 8009376:	4606      	mov	r6, r0
 8009378:	d1d6      	bne.n	8009328 <_svfiprintf_r+0x174>
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	065b      	lsls	r3, r3, #25
 800937e:	f53f af2d 	bmi.w	80091dc <_svfiprintf_r+0x28>
 8009382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009384:	e72c      	b.n	80091e0 <_svfiprintf_r+0x2c>
 8009386:	ab03      	add	r3, sp, #12
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	462a      	mov	r2, r5
 800938c:	4b05      	ldr	r3, [pc, #20]	@ (80093a4 <_svfiprintf_r+0x1f0>)
 800938e:	a904      	add	r1, sp, #16
 8009390:	4638      	mov	r0, r7
 8009392:	f000 f879 	bl	8009488 <_printf_i>
 8009396:	e7ed      	b.n	8009374 <_svfiprintf_r+0x1c0>
 8009398:	08009818 	.word	0x08009818
 800939c:	08009822 	.word	0x08009822
 80093a0:	00000000 	.word	0x00000000
 80093a4:	080090fd 	.word	0x080090fd
 80093a8:	0800981e 	.word	0x0800981e

080093ac <_printf_common>:
 80093ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	4616      	mov	r6, r2
 80093b2:	4698      	mov	r8, r3
 80093b4:	688a      	ldr	r2, [r1, #8]
 80093b6:	690b      	ldr	r3, [r1, #16]
 80093b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093bc:	4293      	cmp	r3, r2
 80093be:	bfb8      	it	lt
 80093c0:	4613      	movlt	r3, r2
 80093c2:	6033      	str	r3, [r6, #0]
 80093c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093c8:	4607      	mov	r7, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	b10a      	cbz	r2, 80093d2 <_printf_common+0x26>
 80093ce:	3301      	adds	r3, #1
 80093d0:	6033      	str	r3, [r6, #0]
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	0699      	lsls	r1, r3, #26
 80093d6:	bf42      	ittt	mi
 80093d8:	6833      	ldrmi	r3, [r6, #0]
 80093da:	3302      	addmi	r3, #2
 80093dc:	6033      	strmi	r3, [r6, #0]
 80093de:	6825      	ldr	r5, [r4, #0]
 80093e0:	f015 0506 	ands.w	r5, r5, #6
 80093e4:	d106      	bne.n	80093f4 <_printf_common+0x48>
 80093e6:	f104 0a19 	add.w	sl, r4, #25
 80093ea:	68e3      	ldr	r3, [r4, #12]
 80093ec:	6832      	ldr	r2, [r6, #0]
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	dc26      	bgt.n	8009442 <_printf_common+0x96>
 80093f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093f8:	6822      	ldr	r2, [r4, #0]
 80093fa:	3b00      	subs	r3, #0
 80093fc:	bf18      	it	ne
 80093fe:	2301      	movne	r3, #1
 8009400:	0692      	lsls	r2, r2, #26
 8009402:	d42b      	bmi.n	800945c <_printf_common+0xb0>
 8009404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009408:	4641      	mov	r1, r8
 800940a:	4638      	mov	r0, r7
 800940c:	47c8      	blx	r9
 800940e:	3001      	adds	r0, #1
 8009410:	d01e      	beq.n	8009450 <_printf_common+0xa4>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	6922      	ldr	r2, [r4, #16]
 8009416:	f003 0306 	and.w	r3, r3, #6
 800941a:	2b04      	cmp	r3, #4
 800941c:	bf02      	ittt	eq
 800941e:	68e5      	ldreq	r5, [r4, #12]
 8009420:	6833      	ldreq	r3, [r6, #0]
 8009422:	1aed      	subeq	r5, r5, r3
 8009424:	68a3      	ldr	r3, [r4, #8]
 8009426:	bf0c      	ite	eq
 8009428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800942c:	2500      	movne	r5, #0
 800942e:	4293      	cmp	r3, r2
 8009430:	bfc4      	itt	gt
 8009432:	1a9b      	subgt	r3, r3, r2
 8009434:	18ed      	addgt	r5, r5, r3
 8009436:	2600      	movs	r6, #0
 8009438:	341a      	adds	r4, #26
 800943a:	42b5      	cmp	r5, r6
 800943c:	d11a      	bne.n	8009474 <_printf_common+0xc8>
 800943e:	2000      	movs	r0, #0
 8009440:	e008      	b.n	8009454 <_printf_common+0xa8>
 8009442:	2301      	movs	r3, #1
 8009444:	4652      	mov	r2, sl
 8009446:	4641      	mov	r1, r8
 8009448:	4638      	mov	r0, r7
 800944a:	47c8      	blx	r9
 800944c:	3001      	adds	r0, #1
 800944e:	d103      	bne.n	8009458 <_printf_common+0xac>
 8009450:	f04f 30ff 	mov.w	r0, #4294967295
 8009454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009458:	3501      	adds	r5, #1
 800945a:	e7c6      	b.n	80093ea <_printf_common+0x3e>
 800945c:	18e1      	adds	r1, r4, r3
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	2030      	movs	r0, #48	@ 0x30
 8009462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009466:	4422      	add	r2, r4
 8009468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800946c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009470:	3302      	adds	r3, #2
 8009472:	e7c7      	b.n	8009404 <_printf_common+0x58>
 8009474:	2301      	movs	r3, #1
 8009476:	4622      	mov	r2, r4
 8009478:	4641      	mov	r1, r8
 800947a:	4638      	mov	r0, r7
 800947c:	47c8      	blx	r9
 800947e:	3001      	adds	r0, #1
 8009480:	d0e6      	beq.n	8009450 <_printf_common+0xa4>
 8009482:	3601      	adds	r6, #1
 8009484:	e7d9      	b.n	800943a <_printf_common+0x8e>
	...

08009488 <_printf_i>:
 8009488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	7e0f      	ldrb	r7, [r1, #24]
 800948e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009490:	2f78      	cmp	r7, #120	@ 0x78
 8009492:	4691      	mov	r9, r2
 8009494:	4680      	mov	r8, r0
 8009496:	460c      	mov	r4, r1
 8009498:	469a      	mov	sl, r3
 800949a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800949e:	d807      	bhi.n	80094b0 <_printf_i+0x28>
 80094a0:	2f62      	cmp	r7, #98	@ 0x62
 80094a2:	d80a      	bhi.n	80094ba <_printf_i+0x32>
 80094a4:	2f00      	cmp	r7, #0
 80094a6:	f000 80d2 	beq.w	800964e <_printf_i+0x1c6>
 80094aa:	2f58      	cmp	r7, #88	@ 0x58
 80094ac:	f000 80b9 	beq.w	8009622 <_printf_i+0x19a>
 80094b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094b8:	e03a      	b.n	8009530 <_printf_i+0xa8>
 80094ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094be:	2b15      	cmp	r3, #21
 80094c0:	d8f6      	bhi.n	80094b0 <_printf_i+0x28>
 80094c2:	a101      	add	r1, pc, #4	@ (adr r1, 80094c8 <_printf_i+0x40>)
 80094c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094c8:	08009521 	.word	0x08009521
 80094cc:	08009535 	.word	0x08009535
 80094d0:	080094b1 	.word	0x080094b1
 80094d4:	080094b1 	.word	0x080094b1
 80094d8:	080094b1 	.word	0x080094b1
 80094dc:	080094b1 	.word	0x080094b1
 80094e0:	08009535 	.word	0x08009535
 80094e4:	080094b1 	.word	0x080094b1
 80094e8:	080094b1 	.word	0x080094b1
 80094ec:	080094b1 	.word	0x080094b1
 80094f0:	080094b1 	.word	0x080094b1
 80094f4:	08009635 	.word	0x08009635
 80094f8:	0800955f 	.word	0x0800955f
 80094fc:	080095ef 	.word	0x080095ef
 8009500:	080094b1 	.word	0x080094b1
 8009504:	080094b1 	.word	0x080094b1
 8009508:	08009657 	.word	0x08009657
 800950c:	080094b1 	.word	0x080094b1
 8009510:	0800955f 	.word	0x0800955f
 8009514:	080094b1 	.word	0x080094b1
 8009518:	080094b1 	.word	0x080094b1
 800951c:	080095f7 	.word	0x080095f7
 8009520:	6833      	ldr	r3, [r6, #0]
 8009522:	1d1a      	adds	r2, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6032      	str	r2, [r6, #0]
 8009528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800952c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009530:	2301      	movs	r3, #1
 8009532:	e09d      	b.n	8009670 <_printf_i+0x1e8>
 8009534:	6833      	ldr	r3, [r6, #0]
 8009536:	6820      	ldr	r0, [r4, #0]
 8009538:	1d19      	adds	r1, r3, #4
 800953a:	6031      	str	r1, [r6, #0]
 800953c:	0606      	lsls	r6, r0, #24
 800953e:	d501      	bpl.n	8009544 <_printf_i+0xbc>
 8009540:	681d      	ldr	r5, [r3, #0]
 8009542:	e003      	b.n	800954c <_printf_i+0xc4>
 8009544:	0645      	lsls	r5, r0, #25
 8009546:	d5fb      	bpl.n	8009540 <_printf_i+0xb8>
 8009548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800954c:	2d00      	cmp	r5, #0
 800954e:	da03      	bge.n	8009558 <_printf_i+0xd0>
 8009550:	232d      	movs	r3, #45	@ 0x2d
 8009552:	426d      	negs	r5, r5
 8009554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009558:	4859      	ldr	r0, [pc, #356]	@ (80096c0 <_printf_i+0x238>)
 800955a:	230a      	movs	r3, #10
 800955c:	e011      	b.n	8009582 <_printf_i+0xfa>
 800955e:	6821      	ldr	r1, [r4, #0]
 8009560:	6833      	ldr	r3, [r6, #0]
 8009562:	0608      	lsls	r0, r1, #24
 8009564:	f853 5b04 	ldr.w	r5, [r3], #4
 8009568:	d402      	bmi.n	8009570 <_printf_i+0xe8>
 800956a:	0649      	lsls	r1, r1, #25
 800956c:	bf48      	it	mi
 800956e:	b2ad      	uxthmi	r5, r5
 8009570:	2f6f      	cmp	r7, #111	@ 0x6f
 8009572:	4853      	ldr	r0, [pc, #332]	@ (80096c0 <_printf_i+0x238>)
 8009574:	6033      	str	r3, [r6, #0]
 8009576:	bf14      	ite	ne
 8009578:	230a      	movne	r3, #10
 800957a:	2308      	moveq	r3, #8
 800957c:	2100      	movs	r1, #0
 800957e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009582:	6866      	ldr	r6, [r4, #4]
 8009584:	60a6      	str	r6, [r4, #8]
 8009586:	2e00      	cmp	r6, #0
 8009588:	bfa2      	ittt	ge
 800958a:	6821      	ldrge	r1, [r4, #0]
 800958c:	f021 0104 	bicge.w	r1, r1, #4
 8009590:	6021      	strge	r1, [r4, #0]
 8009592:	b90d      	cbnz	r5, 8009598 <_printf_i+0x110>
 8009594:	2e00      	cmp	r6, #0
 8009596:	d04b      	beq.n	8009630 <_printf_i+0x1a8>
 8009598:	4616      	mov	r6, r2
 800959a:	fbb5 f1f3 	udiv	r1, r5, r3
 800959e:	fb03 5711 	mls	r7, r3, r1, r5
 80095a2:	5dc7      	ldrb	r7, [r0, r7]
 80095a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095a8:	462f      	mov	r7, r5
 80095aa:	42bb      	cmp	r3, r7
 80095ac:	460d      	mov	r5, r1
 80095ae:	d9f4      	bls.n	800959a <_printf_i+0x112>
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d10b      	bne.n	80095cc <_printf_i+0x144>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	07df      	lsls	r7, r3, #31
 80095b8:	d508      	bpl.n	80095cc <_printf_i+0x144>
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	6861      	ldr	r1, [r4, #4]
 80095be:	4299      	cmp	r1, r3
 80095c0:	bfde      	ittt	le
 80095c2:	2330      	movle	r3, #48	@ 0x30
 80095c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095cc:	1b92      	subs	r2, r2, r6
 80095ce:	6122      	str	r2, [r4, #16]
 80095d0:	f8cd a000 	str.w	sl, [sp]
 80095d4:	464b      	mov	r3, r9
 80095d6:	aa03      	add	r2, sp, #12
 80095d8:	4621      	mov	r1, r4
 80095da:	4640      	mov	r0, r8
 80095dc:	f7ff fee6 	bl	80093ac <_printf_common>
 80095e0:	3001      	adds	r0, #1
 80095e2:	d14a      	bne.n	800967a <_printf_i+0x1f2>
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	b004      	add	sp, #16
 80095ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	f043 0320 	orr.w	r3, r3, #32
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	4833      	ldr	r0, [pc, #204]	@ (80096c4 <_printf_i+0x23c>)
 80095f8:	2778      	movs	r7, #120	@ 0x78
 80095fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	6831      	ldr	r1, [r6, #0]
 8009602:	061f      	lsls	r7, r3, #24
 8009604:	f851 5b04 	ldr.w	r5, [r1], #4
 8009608:	d402      	bmi.n	8009610 <_printf_i+0x188>
 800960a:	065f      	lsls	r7, r3, #25
 800960c:	bf48      	it	mi
 800960e:	b2ad      	uxthmi	r5, r5
 8009610:	6031      	str	r1, [r6, #0]
 8009612:	07d9      	lsls	r1, r3, #31
 8009614:	bf44      	itt	mi
 8009616:	f043 0320 	orrmi.w	r3, r3, #32
 800961a:	6023      	strmi	r3, [r4, #0]
 800961c:	b11d      	cbz	r5, 8009626 <_printf_i+0x19e>
 800961e:	2310      	movs	r3, #16
 8009620:	e7ac      	b.n	800957c <_printf_i+0xf4>
 8009622:	4827      	ldr	r0, [pc, #156]	@ (80096c0 <_printf_i+0x238>)
 8009624:	e7e9      	b.n	80095fa <_printf_i+0x172>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	f023 0320 	bic.w	r3, r3, #32
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	e7f6      	b.n	800961e <_printf_i+0x196>
 8009630:	4616      	mov	r6, r2
 8009632:	e7bd      	b.n	80095b0 <_printf_i+0x128>
 8009634:	6833      	ldr	r3, [r6, #0]
 8009636:	6825      	ldr	r5, [r4, #0]
 8009638:	6961      	ldr	r1, [r4, #20]
 800963a:	1d18      	adds	r0, r3, #4
 800963c:	6030      	str	r0, [r6, #0]
 800963e:	062e      	lsls	r6, r5, #24
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	d501      	bpl.n	8009648 <_printf_i+0x1c0>
 8009644:	6019      	str	r1, [r3, #0]
 8009646:	e002      	b.n	800964e <_printf_i+0x1c6>
 8009648:	0668      	lsls	r0, r5, #25
 800964a:	d5fb      	bpl.n	8009644 <_printf_i+0x1bc>
 800964c:	8019      	strh	r1, [r3, #0]
 800964e:	2300      	movs	r3, #0
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	4616      	mov	r6, r2
 8009654:	e7bc      	b.n	80095d0 <_printf_i+0x148>
 8009656:	6833      	ldr	r3, [r6, #0]
 8009658:	1d1a      	adds	r2, r3, #4
 800965a:	6032      	str	r2, [r6, #0]
 800965c:	681e      	ldr	r6, [r3, #0]
 800965e:	6862      	ldr	r2, [r4, #4]
 8009660:	2100      	movs	r1, #0
 8009662:	4630      	mov	r0, r6
 8009664:	f7f6 fe44 	bl	80002f0 <memchr>
 8009668:	b108      	cbz	r0, 800966e <_printf_i+0x1e6>
 800966a:	1b80      	subs	r0, r0, r6
 800966c:	6060      	str	r0, [r4, #4]
 800966e:	6863      	ldr	r3, [r4, #4]
 8009670:	6123      	str	r3, [r4, #16]
 8009672:	2300      	movs	r3, #0
 8009674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009678:	e7aa      	b.n	80095d0 <_printf_i+0x148>
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	4632      	mov	r2, r6
 800967e:	4649      	mov	r1, r9
 8009680:	4640      	mov	r0, r8
 8009682:	47d0      	blx	sl
 8009684:	3001      	adds	r0, #1
 8009686:	d0ad      	beq.n	80095e4 <_printf_i+0x15c>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	079b      	lsls	r3, r3, #30
 800968c:	d413      	bmi.n	80096b6 <_printf_i+0x22e>
 800968e:	68e0      	ldr	r0, [r4, #12]
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	4298      	cmp	r0, r3
 8009694:	bfb8      	it	lt
 8009696:	4618      	movlt	r0, r3
 8009698:	e7a6      	b.n	80095e8 <_printf_i+0x160>
 800969a:	2301      	movs	r3, #1
 800969c:	4632      	mov	r2, r6
 800969e:	4649      	mov	r1, r9
 80096a0:	4640      	mov	r0, r8
 80096a2:	47d0      	blx	sl
 80096a4:	3001      	adds	r0, #1
 80096a6:	d09d      	beq.n	80095e4 <_printf_i+0x15c>
 80096a8:	3501      	adds	r5, #1
 80096aa:	68e3      	ldr	r3, [r4, #12]
 80096ac:	9903      	ldr	r1, [sp, #12]
 80096ae:	1a5b      	subs	r3, r3, r1
 80096b0:	42ab      	cmp	r3, r5
 80096b2:	dcf2      	bgt.n	800969a <_printf_i+0x212>
 80096b4:	e7eb      	b.n	800968e <_printf_i+0x206>
 80096b6:	2500      	movs	r5, #0
 80096b8:	f104 0619 	add.w	r6, r4, #25
 80096bc:	e7f5      	b.n	80096aa <_printf_i+0x222>
 80096be:	bf00      	nop
 80096c0:	08009829 	.word	0x08009829
 80096c4:	0800983a 	.word	0x0800983a

080096c8 <memmove>:
 80096c8:	4288      	cmp	r0, r1
 80096ca:	b510      	push	{r4, lr}
 80096cc:	eb01 0402 	add.w	r4, r1, r2
 80096d0:	d902      	bls.n	80096d8 <memmove+0x10>
 80096d2:	4284      	cmp	r4, r0
 80096d4:	4623      	mov	r3, r4
 80096d6:	d807      	bhi.n	80096e8 <memmove+0x20>
 80096d8:	1e43      	subs	r3, r0, #1
 80096da:	42a1      	cmp	r1, r4
 80096dc:	d008      	beq.n	80096f0 <memmove+0x28>
 80096de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096e6:	e7f8      	b.n	80096da <memmove+0x12>
 80096e8:	4402      	add	r2, r0
 80096ea:	4601      	mov	r1, r0
 80096ec:	428a      	cmp	r2, r1
 80096ee:	d100      	bne.n	80096f2 <memmove+0x2a>
 80096f0:	bd10      	pop	{r4, pc}
 80096f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096fa:	e7f7      	b.n	80096ec <memmove+0x24>

080096fc <_sbrk_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d06      	ldr	r5, [pc, #24]	@ (8009718 <_sbrk_r+0x1c>)
 8009700:	2300      	movs	r3, #0
 8009702:	4604      	mov	r4, r0
 8009704:	4608      	mov	r0, r1
 8009706:	602b      	str	r3, [r5, #0]
 8009708:	f7f7 fcbc 	bl	8001084 <_sbrk>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <_sbrk_r+0x1a>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	b103      	cbz	r3, 8009716 <_sbrk_r+0x1a>
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	24000318 	.word	0x24000318

0800971c <memcpy>:
 800971c:	440a      	add	r2, r1
 800971e:	4291      	cmp	r1, r2
 8009720:	f100 33ff 	add.w	r3, r0, #4294967295
 8009724:	d100      	bne.n	8009728 <memcpy+0xc>
 8009726:	4770      	bx	lr
 8009728:	b510      	push	{r4, lr}
 800972a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009732:	4291      	cmp	r1, r2
 8009734:	d1f9      	bne.n	800972a <memcpy+0xe>
 8009736:	bd10      	pop	{r4, pc}

08009738 <_realloc_r>:
 8009738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	4680      	mov	r8, r0
 800973e:	4615      	mov	r5, r2
 8009740:	460c      	mov	r4, r1
 8009742:	b921      	cbnz	r1, 800974e <_realloc_r+0x16>
 8009744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	4611      	mov	r1, r2
 800974a:	f7ff bc4b 	b.w	8008fe4 <_malloc_r>
 800974e:	b92a      	cbnz	r2, 800975c <_realloc_r+0x24>
 8009750:	f7ff fbdc 	bl	8008f0c <_free_r>
 8009754:	2400      	movs	r4, #0
 8009756:	4620      	mov	r0, r4
 8009758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800975c:	f000 f81a 	bl	8009794 <_malloc_usable_size_r>
 8009760:	4285      	cmp	r5, r0
 8009762:	4606      	mov	r6, r0
 8009764:	d802      	bhi.n	800976c <_realloc_r+0x34>
 8009766:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800976a:	d8f4      	bhi.n	8009756 <_realloc_r+0x1e>
 800976c:	4629      	mov	r1, r5
 800976e:	4640      	mov	r0, r8
 8009770:	f7ff fc38 	bl	8008fe4 <_malloc_r>
 8009774:	4607      	mov	r7, r0
 8009776:	2800      	cmp	r0, #0
 8009778:	d0ec      	beq.n	8009754 <_realloc_r+0x1c>
 800977a:	42b5      	cmp	r5, r6
 800977c:	462a      	mov	r2, r5
 800977e:	4621      	mov	r1, r4
 8009780:	bf28      	it	cs
 8009782:	4632      	movcs	r2, r6
 8009784:	f7ff ffca 	bl	800971c <memcpy>
 8009788:	4621      	mov	r1, r4
 800978a:	4640      	mov	r0, r8
 800978c:	f7ff fbbe 	bl	8008f0c <_free_r>
 8009790:	463c      	mov	r4, r7
 8009792:	e7e0      	b.n	8009756 <_realloc_r+0x1e>

08009794 <_malloc_usable_size_r>:
 8009794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009798:	1f18      	subs	r0, r3, #4
 800979a:	2b00      	cmp	r3, #0
 800979c:	bfbc      	itt	lt
 800979e:	580b      	ldrlt	r3, [r1, r0]
 80097a0:	18c0      	addlt	r0, r0, r3
 80097a2:	4770      	bx	lr

080097a4 <_init>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr

080097b0 <_fini>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr
